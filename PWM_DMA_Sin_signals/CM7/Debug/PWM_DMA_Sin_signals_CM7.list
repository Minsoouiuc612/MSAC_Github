
PWM_DMA_Sin_signals_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006000  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006298  08006298  00016298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062b0  080062b0  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  080062b0  080062b0  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062b0  080062b0  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062b0  080062b0  000162b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062b4  080062b4  000162b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  24000000  080062b8  00020000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  240000bc  08006374  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240001ec  08006374  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ea  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e9de  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f1d  00000000  00000000  0002eb0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  00030a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a42  00000000  00000000  00031770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003945b  00000000  00000000  000321b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010cd5  00000000  00000000  0006b60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0017ee6d  00000000  00000000  0007c2e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000379c  00000000  00000000  001fb150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001fe8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000bc 	.word	0x240000bc
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006280 	.word	0x08006280

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000c0 	.word	0x240000c0
 80002d4:	08006280 	.word	0x08006280

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08a      	sub	sp, #40	; 0x28
 8000408:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800040a:	4b75      	ldr	r3, [pc, #468]	; (80005e0 <main+0x1dc>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000412:	2b00      	cmp	r3, #0
 8000414:	d11b      	bne.n	800044e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000416:	f3bf 8f4f 	dsb	sy
}
 800041a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800041c:	f3bf 8f6f 	isb	sy
}
 8000420:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000422:	4b6f      	ldr	r3, [pc, #444]	; (80005e0 <main+0x1dc>)
 8000424:	2200      	movs	r2, #0
 8000426:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800042a:	f3bf 8f4f 	dsb	sy
}
 800042e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000430:	f3bf 8f6f 	isb	sy
}
 8000434:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000436:	4b6a      	ldr	r3, [pc, #424]	; (80005e0 <main+0x1dc>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a69      	ldr	r2, [pc, #420]	; (80005e0 <main+0x1dc>)
 800043c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800044e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000450:	4b63      	ldr	r3, [pc, #396]	; (80005e0 <main+0x1dc>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000458:	2b00      	cmp	r3, #0
 800045a:	d138      	bne.n	80004ce <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800045c:	4b60      	ldr	r3, [pc, #384]	; (80005e0 <main+0x1dc>)
 800045e:	2200      	movs	r2, #0
 8000460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000464:	f3bf 8f4f 	dsb	sy
}
 8000468:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800046a:	4b5d      	ldr	r3, [pc, #372]	; (80005e0 <main+0x1dc>)
 800046c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000470:	623b      	str	r3, [r7, #32]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000472:	6a3b      	ldr	r3, [r7, #32]
 8000474:	0b5b      	lsrs	r3, r3, #13
 8000476:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800047a:	61fb      	str	r3, [r7, #28]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800047c:	6a3b      	ldr	r3, [r7, #32]
 800047e:	08db      	lsrs	r3, r3, #3
 8000480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000484:	61bb      	str	r3, [r7, #24]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000486:	69fb      	ldr	r3, [r7, #28]
 8000488:	015a      	lsls	r2, r3, #5
 800048a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800048e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000490:	69ba      	ldr	r2, [r7, #24]
 8000492:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000494:	4952      	ldr	r1, [pc, #328]	; (80005e0 <main+0x1dc>)
 8000496:	4313      	orrs	r3, r2
 8000498:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800049c:	69bb      	ldr	r3, [r7, #24]
 800049e:	1e5a      	subs	r2, r3, #1
 80004a0:	61ba      	str	r2, [r7, #24]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d1ef      	bne.n	8000486 <main+0x82>
    } while(sets-- != 0U);
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	1e5a      	subs	r2, r3, #1
 80004aa:	61fa      	str	r2, [r7, #28]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d1e5      	bne.n	800047c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80004b0:	f3bf 8f4f 	dsb	sy
}
 80004b4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004b6:	4b4a      	ldr	r3, [pc, #296]	; (80005e0 <main+0x1dc>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a49      	ldr	r2, [pc, #292]	; (80005e0 <main+0x1dc>)
 80004bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004c2:	f3bf 8f4f 	dsb	sy
}
 80004c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004c8:	f3bf 8f6f 	isb	sy
}
 80004cc:	e000      	b.n	80004d0 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004ce:	bf00      	nop
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80004d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004d4:	627b      	str	r3, [r7, #36]	; 0x24
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80004d6:	bf00      	nop
 80004d8:	4b42      	ldr	r3, [pc, #264]	; (80005e4 <main+0x1e0>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d004      	beq.n	80004ee <main+0xea>
 80004e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e6:	1e5a      	subs	r2, r3, #1
 80004e8:	627a      	str	r2, [r7, #36]	; 0x24
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	dcf4      	bgt.n	80004d8 <main+0xd4>
	if ( timeout < 0 )
 80004ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	da01      	bge.n	80004f8 <main+0xf4>
	{
		Error_Handler();
 80004f4:	f000 faaa 	bl	8000a4c <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fc4c 	bl	8000d94 <HAL_Init>
 80004fc:	4b3a      	ldr	r3, [pc, #232]	; (80005e8 <main+0x1e4>)
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	2325      	movs	r3, #37	; 0x25
 8000502:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	2b00      	cmp	r3, #0
 8000508:	dd1d      	ble.n	8000546 <main+0x142>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	f003 021f 	and.w	r2, r3, #31
 8000510:	693b      	ldr	r3, [r7, #16]
 8000512:	4413      	add	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800051a:	f3bf 8f4f 	dsb	sy
}
 800051e:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000520:	4a2f      	ldr	r2, [pc, #188]	; (80005e0 <main+0x1dc>)
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	3320      	adds	r3, #32
 800052c:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	3b20      	subs	r3, #32
 8000532:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	2b00      	cmp	r3, #0
 8000538:	dcf2      	bgt.n	8000520 <main+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 800053a:	f3bf 8f4f 	dsb	sy
}
 800053e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000540:	f3bf 8f6f 	isb	sy
}
 8000544:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000546:	bf00      	nop
	//SCB_CleanDCache_by_Addr((uint32_t *) DiscontinuousSineCCRValue_Buffer_2, CCRValue_BufferSize );

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f858 	bl	80005fc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800054c:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <main+0x1e0>)
 800054e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000552:	4a24      	ldr	r2, [pc, #144]	; (80005e4 <main+0x1e0>)
 8000554:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800055c:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <main+0x1e0>)
 800055e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800056a:	2000      	movs	r0, #0
 800056c:	f003 f848 	bl	8003600 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000570:	2100      	movs	r1, #0
 8000572:	2000      	movs	r0, #0
 8000574:	f003 f85e 	bl	8003634 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800057e:	bf00      	nop
 8000580:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <main+0x1e0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000588:	2b00      	cmp	r3, #0
 800058a:	d104      	bne.n	8000596 <main+0x192>
 800058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058e:	1e5a      	subs	r2, r3, #1
 8000590:	627a      	str	r2, [r7, #36]	; 0x24
 8000592:	2b00      	cmp	r3, #0
 8000594:	dcf4      	bgt.n	8000580 <main+0x17c>
	if ( timeout < 0 )
 8000596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000598:	2b00      	cmp	r3, #0
 800059a:	da01      	bge.n	80005a0 <main+0x19c>
	{
		Error_Handler();
 800059c:	f000 fa56 	bl	8000a4c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 fa0c 	bl	80009bc <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f9ea 	bl	800097c <MX_DMA_Init>
  MX_TIM1_Init();
 80005a8:	f000 f892 	bl	80006d0 <MX_TIM1_Init>
  MX_TIM8_Init();
 80005ac:	f000 f938 	bl	8000820 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

	//HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, DiscontinuousSineCCRValue_Buffer_2, CCRValue_BufferSize);
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, DiscontinuousSineCCRValue_Buffer_3, CCRValue_BufferSize);
 80005b0:	2325      	movs	r3, #37	; 0x25
 80005b2:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <main+0x1e4>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	480d      	ldr	r0, [pc, #52]	; (80005ec <main+0x1e8>)
 80005b8:	f004 fa52 	bl	8004a60 <HAL_TIM_PWM_Start_DMA>
	//HAL_TIMEx_PWMN_Start_DMA(&htim1, TIM_CHANNEL_1, DiscontinuousSineCCRValue_Buffer_3, CCRValue_BufferSize);
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80005bc:	2100      	movs	r1, #0
 80005be:	480b      	ldr	r0, [pc, #44]	; (80005ec <main+0x1e8>)
 80005c0:	f005 fc3e 	bl	8005e40 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80005c4:	2100      	movs	r1, #0
 80005c6:	480a      	ldr	r0, [pc, #40]	; (80005f0 <main+0x1ec>)
 80005c8:	f004 f93c 	bl	8004844 <HAL_TIM_PWM_Start>

	TIM8-> ARR = 8648; //8648.64864865
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <main+0x1f0>)
 80005ce:	f242 12c8 	movw	r2, #8648	; 0x21c8
 80005d2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1-> ARR = 8648; //8648.64864865
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <main+0x1f4>)
 80005d6:	f242 12c8 	movw	r2, #8648	; 0x21c8
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0x1d8>
 80005de:	bf00      	nop
 80005e0:	e000ed00 	.word	0xe000ed00
 80005e4:	58024400 	.word	0x58024400
 80005e8:	24000020 	.word	0x24000020
 80005ec:	240000d8 	.word	0x240000d8
 80005f0:	24000124 	.word	0x24000124
 80005f4:	40010400 	.word	0x40010400
 80005f8:	40010000 	.word	0x40010000

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b09c      	sub	sp, #112	; 0x70
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000606:	224c      	movs	r2, #76	; 0x4c
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f005 fe0b 	bl	8006226 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2220      	movs	r2, #32
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f005 fe05 	bl	8006226 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800061c:	2004      	movs	r0, #4
 800061e:	f003 f81d 	bl	800365c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0xcc>)
 8000628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062a:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <SystemClock_Config+0xcc>)
 800062c:	f023 0301 	bic.w	r3, r3, #1
 8000630:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000632:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <SystemClock_Config+0xcc>)
 8000634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <SystemClock_Config+0xd0>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <SystemClock_Config+0xd0>)
 8000646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <SystemClock_Config+0xd0>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000658:	bf00      	nop
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <SystemClock_Config+0xd0>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000666:	d1f8      	bne.n	800065a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800066c:	2301      	movs	r3, #1
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2340      	movs	r3, #64	; 0x40
 8000672:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000674:	2300      	movs	r3, #0
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067c:	4618      	mov	r0, r3
 800067e:	f003 f847 	bl	8003710 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000688:	f000 f9e0 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	233f      	movs	r3, #63	; 0x3f
 800068e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2101      	movs	r1, #1
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 fc87 	bl	8003fc4 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006bc:	f000 f9c6 	bl	8000a4c <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3770      	adds	r7, #112	; 0x70
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	58000400 	.word	0x58000400
 80006cc:	58024800 	.word	0x58024800

080006d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b096      	sub	sp, #88	; 0x58
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
 80006f2:	615a      	str	r2, [r3, #20]
 80006f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	222c      	movs	r2, #44	; 0x2c
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f005 fd92 	bl	8006226 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000702:	4b45      	ldr	r3, [pc, #276]	; (8000818 <MX_TIM1_Init+0x148>)
 8000704:	4a45      	ldr	r2, [pc, #276]	; (800081c <MX_TIM1_Init+0x14c>)
 8000706:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000708:	4b43      	ldr	r3, [pc, #268]	; (8000818 <MX_TIM1_Init+0x148>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800070e:	4b42      	ldr	r3, [pc, #264]	; (8000818 <MX_TIM1_Init+0x148>)
 8000710:	2220      	movs	r2, #32
 8000712:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000;
 8000714:	4b40      	ldr	r3, [pc, #256]	; (8000818 <MX_TIM1_Init+0x148>)
 8000716:	f247 5230 	movw	r2, #30000	; 0x7530
 800071a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071c:	4b3e      	ldr	r3, [pc, #248]	; (8000818 <MX_TIM1_Init+0x148>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000722:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <MX_TIM1_Init+0x148>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000728:	4b3b      	ldr	r3, [pc, #236]	; (8000818 <MX_TIM1_Init+0x148>)
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800072e:	483a      	ldr	r0, [pc, #232]	; (8000818 <MX_TIM1_Init+0x148>)
 8000730:	f004 f830 	bl	8004794 <HAL_TIM_PWM_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800073a:	f000 f987 	bl	8000a4c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800073e:	4836      	ldr	r0, [pc, #216]	; (8000818 <MX_TIM1_Init+0x148>)
 8000740:	f003 ffc7 	bl	80046d2 <HAL_TIM_OC_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800074a:	f000 f97f 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800074e:	2350      	movs	r3, #80	; 0x50
 8000750:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800075a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800075e:	4619      	mov	r1, r3
 8000760:	482d      	ldr	r0, [pc, #180]	; (8000818 <MX_TIM1_Init+0x148>)
 8000762:	f005 fc2f 	bl	8005fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 800076c:	f000 f96e 	bl	8000a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000770:	2360      	movs	r3, #96	; 0x60
 8000772:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1;
 8000774:	2301      	movs	r3, #1
 8000776:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000778:	2300      	movs	r3, #0
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800077c:	2300      	movs	r3, #0
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000784:	2300      	movs	r3, #0
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800078c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000790:	2200      	movs	r2, #0
 8000792:	4619      	mov	r1, r3
 8000794:	4820      	ldr	r0, [pc, #128]	; (8000818 <MX_TIM1_Init+0x148>)
 8000796:	f004 fc03 	bl	8004fa0 <HAL_TIM_PWM_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80007a0:	f000 f954 	bl	8000a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80007a4:	2310      	movs	r3, #16
 80007a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007b0:	2204      	movs	r2, #4
 80007b2:	4619      	mov	r1, r3
 80007b4:	4818      	ldr	r0, [pc, #96]	; (8000818 <MX_TIM1_Init+0x148>)
 80007b6:	f004 fb79 	bl	8004eac <HAL_TIM_OC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80007c0:	f000 f944 	bl	8000a4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	4619      	mov	r1, r3
 80007f8:	4807      	ldr	r0, [pc, #28]	; (8000818 <MX_TIM1_Init+0x148>)
 80007fa:	f005 fc71 	bl	80060e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000804:	f000 f922 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <MX_TIM1_Init+0x148>)
 800080a:	f000 f9bf 	bl	8000b8c <HAL_TIM_MspPostInit>

}
 800080e:	bf00      	nop
 8000810:	3758      	adds	r7, #88	; 0x58
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	240000d8 	.word	0x240000d8
 800081c:	40010000 	.word	0x40010000

08000820 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b09a      	sub	sp, #104	; 0x68
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000826:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000836:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
 8000852:	615a      	str	r2, [r3, #20]
 8000854:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	222c      	movs	r2, #44	; 0x2c
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f005 fce2 	bl	8006226 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000862:	4b44      	ldr	r3, [pc, #272]	; (8000974 <MX_TIM8_Init+0x154>)
 8000864:	4a44      	ldr	r2, [pc, #272]	; (8000978 <MX_TIM8_Init+0x158>)
 8000866:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1-1;
 8000868:	4b42      	ldr	r3, [pc, #264]	; (8000974 <MX_TIM8_Init+0x154>)
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086e:	4b41      	ldr	r3, [pc, #260]	; (8000974 <MX_TIM8_Init+0x154>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000874:	4b3f      	ldr	r3, [pc, #252]	; (8000974 <MX_TIM8_Init+0x154>)
 8000876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800087a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087c:	4b3d      	ldr	r3, [pc, #244]	; (8000974 <MX_TIM8_Init+0x154>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000882:	4b3c      	ldr	r3, [pc, #240]	; (8000974 <MX_TIM8_Init+0x154>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000888:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <MX_TIM8_Init+0x154>)
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800088e:	4839      	ldr	r0, [pc, #228]	; (8000974 <MX_TIM8_Init+0x154>)
 8000890:	f003 fec8 	bl	8004624 <HAL_TIM_Base_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800089a:	f000 f8d7 	bl	8000a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800089e:	4835      	ldr	r0, [pc, #212]	; (8000974 <MX_TIM8_Init+0x154>)
 80008a0:	f003 ff78 	bl	8004794 <HAL_TIM_PWM_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 80008aa:	f000 f8cf 	bl	8000a4c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80008ae:	2306      	movs	r3, #6
 80008b0:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80008b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008ba:	4619      	mov	r1, r3
 80008bc:	482d      	ldr	r0, [pc, #180]	; (8000974 <MX_TIM8_Init+0x154>)
 80008be:	f004 fc83 	bl	80051c8 <HAL_TIM_SlaveConfigSynchro>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM8_Init+0xac>
  {
    Error_Handler();
 80008c8:	f000 f8c0 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80008d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008dc:	4619      	mov	r1, r3
 80008de:	4825      	ldr	r0, [pc, #148]	; (8000974 <MX_TIM8_Init+0x154>)
 80008e0:	f005 fb70 	bl	8005fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM8_Init+0xce>
  {
    Error_Handler();
 80008ea:	f000 f8af 	bl	8000a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ee:	2360      	movs	r3, #96	; 0x60
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f6:	2300      	movs	r3, #0
 80008f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008fa:	2300      	movs	r3, #0
 80008fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800090a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800090e:	2200      	movs	r2, #0
 8000910:	4619      	mov	r1, r3
 8000912:	4818      	ldr	r0, [pc, #96]	; (8000974 <MX_TIM8_Init+0x154>)
 8000914:	f004 fb44 	bl	8004fa0 <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 800091e:	f000 f895 	bl	8000a4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000944:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000948:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	4807      	ldr	r0, [pc, #28]	; (8000974 <MX_TIM8_Init+0x154>)
 8000958:	f005 fbc2 	bl	80060e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8000962:	f000 f873 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000966:	4803      	ldr	r0, [pc, #12]	; (8000974 <MX_TIM8_Init+0x154>)
 8000968:	f000 f910 	bl	8000b8c <HAL_TIM_MspPostInit>

}
 800096c:	bf00      	nop
 800096e:	3768      	adds	r7, #104	; 0x68
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	24000124 	.word	0x24000124
 8000978:	40010400 	.word	0x40010400

0800097c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <MX_DMA_Init+0x3c>)
 8000984:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000988:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <MX_DMA_Init+0x3c>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_DMA_Init+0x3c>)
 8000994:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	200c      	movs	r0, #12
 80009a6:	f000 fb6e 	bl	8001086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80009aa:	200c      	movs	r0, #12
 80009ac:	f000 fb85 	bl	80010ba <HAL_NVIC_EnableIRQ>

}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	58024400 	.word	0x58024400

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_GPIO_Init+0x8c>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	4a1f      	ldr	r2, [pc, #124]	; (8000a48 <MX_GPIO_Init+0x8c>)
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d2:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_GPIO_Init+0x8c>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	f003 0304 	and.w	r3, r3, #4
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_GPIO_Init+0x8c>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <MX_GPIO_Init+0x8c>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_GPIO_Init+0x8c>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_GPIO_Init+0x8c>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <MX_GPIO_Init+0x8c>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_GPIO_Init+0x8c>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <MX_GPIO_Init+0x8c>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <MX_GPIO_Init+0x8c>)
 8000a24:	f043 0310 	orr.w	r3, r3, #16
 8000a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_GPIO_Init+0x8c>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	58024400 	.word	0x58024400

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_MspInit+0x30>)
 8000a60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a64:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_MspInit+0x30>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_MspInit+0x30>)
 8000a70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	58024400 	.word	0x58024400

08000a8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a27      	ldr	r2, [pc, #156]	; (8000b38 <HAL_TIM_PWM_MspInit+0xac>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d147      	bne.n	8000b2e <HAL_TIM_PWM_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <HAL_TIM_PWM_MspInit+0xb0>)
 8000aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000aa4:	4a25      	ldr	r2, [pc, #148]	; (8000b3c <HAL_TIM_PWM_MspInit+0xb0>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <HAL_TIM_PWM_MspInit+0xb0>)
 8000ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream1;
 8000abc:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000abe:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <HAL_TIM_PWM_MspInit+0xb8>)
 8000ac0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000ac4:	220b      	movs	r2, #11
 8000ac6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000aca:	2240      	movs	r2, #64	; 0x40
 8000acc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ada:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000ade:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ae2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000ae6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aea:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000afc:	2204      	movs	r2, #4
 8000afe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000b02:	2203      	movs	r2, #3
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000b12:	480b      	ldr	r0, [pc, #44]	; (8000b40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000b14:	f000 faec 	bl	80010f0 <HAL_DMA_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_TIM_PWM_MspInit+0x96>
    {
      Error_Handler();
 8000b1e:	f7ff ff95 	bl	8000a4c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000b26:	625a      	str	r2, [r3, #36]	; 0x24
 8000b28:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40010000 	.word	0x40010000
 8000b3c:	58024400 	.word	0x58024400
 8000b40:	24000170 	.word	0x24000170
 8000b44:	40020028 	.word	0x40020028

08000b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <HAL_TIM_Base_MspInit+0x3c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d10e      	bne.n	8000b78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_TIM_Base_MspInit+0x40>)
 8000b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b60:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <HAL_TIM_Base_MspInit+0x40>)
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <HAL_TIM_Base_MspInit+0x40>)
 8000b6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	40010400 	.word	0x40010400
 8000b88:	58024400 	.word	0x58024400

08000b8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a45      	ldr	r2, [pc, #276]	; (8000cc0 <HAL_TIM_MspPostInit+0x134>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d140      	bne.n	8000c30 <HAL_TIM_MspPostInit+0xa4>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bae:	4b45      	ldr	r3, [pc, #276]	; (8000cc4 <HAL_TIM_MspPostInit+0x138>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	4a43      	ldr	r2, [pc, #268]	; (8000cc4 <HAL_TIM_MspPostInit+0x138>)
 8000bb6:	f043 0310 	orr.w	r3, r3, #16
 8000bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bbe:	4b41      	ldr	r3, [pc, #260]	; (8000cc4 <HAL_TIM_MspPostInit+0x138>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	4b3d      	ldr	r3, [pc, #244]	; (8000cc4 <HAL_TIM_MspPostInit+0x138>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	4a3c      	ldr	r2, [pc, #240]	; (8000cc4 <HAL_TIM_MspPostInit+0x138>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bdc:	4b39      	ldr	r3, [pc, #228]	; (8000cc4 <HAL_TIM_MspPostInit+0x138>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	4830      	ldr	r0, [pc, #192]	; (8000cc8 <HAL_TIM_MspPostInit+0x13c>)
 8000c08:	f002 fb4a 	bl	80032a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4828      	ldr	r0, [pc, #160]	; (8000ccc <HAL_TIM_MspPostInit+0x140>)
 8000c2a:	f002 fb39 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000c2e:	e042      	b.n	8000cb6 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a26      	ldr	r2, [pc, #152]	; (8000cd0 <HAL_TIM_MspPostInit+0x144>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d13d      	bne.n	8000cb6 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <HAL_TIM_MspPostInit+0x138>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	4a20      	ldr	r2, [pc, #128]	; (8000cc4 <HAL_TIM_MspPostInit+0x138>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <HAL_TIM_MspPostInit+0x138>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <HAL_TIM_MspPostInit+0x138>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5e:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <HAL_TIM_MspPostInit+0x138>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_TIM_MspPostInit+0x138>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c76:	2320      	movs	r3, #32
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000c86:	2303      	movs	r3, #3
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480e      	ldr	r0, [pc, #56]	; (8000ccc <HAL_TIM_MspPostInit+0x140>)
 8000c92:	f002 fb05 	bl	80032a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c96:	2340      	movs	r3, #64	; 0x40
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <HAL_TIM_MspPostInit+0x148>)
 8000cb2:	f002 faf5 	bl	80032a0 <HAL_GPIO_Init>
}
 8000cb6:	bf00      	nop
 8000cb8:	3730      	adds	r7, #48	; 0x30
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40010000 	.word	0x40010000
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	58021000 	.word	0x58021000
 8000ccc:	58020000 	.word	0x58020000
 8000cd0:	40010400 	.word	0x40010400
 8000cd4:	58020800 	.word	0x58020800

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d24:	f000 f8a8 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <DMA1_Stream1_IRQHandler+0x10>)
 8000d32:	f000 ffa3 	bl	8001c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000170 	.word	0x24000170

08000d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d44:	f7ff fac8 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4a:	490d      	ldr	r1, [pc, #52]	; (8000d80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d60:	4c0a      	ldr	r4, [pc, #40]	; (8000d8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f005 fa63 	bl	8006238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d72:	f7ff fb47 	bl	8000404 <main>
  bx  lr
 8000d76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d78:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d80:	240000bc 	.word	0x240000bc
  ldr r2, =_sidata
 8000d84:	080062b8 	.word	0x080062b8
  ldr r2, =_sbss
 8000d88:	240000bc 	.word	0x240000bc
  ldr r4, =_ebss
 8000d8c:	240001ec 	.word	0x240001ec

08000d90 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC3_IRQHandler>
	...

08000d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	f000 f968 	bl	8001070 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000da0:	f003 fac6 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 8000da4:	4602      	mov	r2, r0
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_Init+0x68>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	0a1b      	lsrs	r3, r3, #8
 8000dac:	f003 030f 	and.w	r3, r3, #15
 8000db0:	4913      	ldr	r1, [pc, #76]	; (8000e00 <HAL_Init+0x6c>)
 8000db2:	5ccb      	ldrb	r3, [r1, r3]
 8000db4:	f003 031f 	and.w	r3, r3, #31
 8000db8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dbc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <HAL_Init+0x68>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <HAL_Init+0x6c>)
 8000dc8:	5cd3      	ldrb	r3, [r2, r3]
 8000dca:	f003 031f 	and.w	r3, r3, #31
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <HAL_Init+0x70>)
 8000dd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000dd8:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <HAL_Init+0x74>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 f814 	bl	8000e0c <HAL_InitTick>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e002      	b.n	8000df4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000dee:	f7ff fe33 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	58024400 	.word	0x58024400
 8000e00:	08006298 	.word	0x08006298
 8000e04:	24000004 	.word	0x24000004
 8000e08:	24000000 	.word	0x24000000

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_InitTick+0x60>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d101      	bne.n	8000e20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e021      	b.n	8000e64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <HAL_InitTick+0x64>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_InitTick+0x60>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f94d 	bl	80010d6 <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00e      	b.n	8000e64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d80a      	bhi.n	8000e62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f000 f917 	bl	8001086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <HAL_InitTick+0x68>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	240000b8 	.word	0x240000b8
 8000e70:	24000000 	.word	0x24000000
 8000e74:	240000b4 	.word	0x240000b4

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	240000b8 	.word	0x240000b8
 8000e9c:	240001e8 	.word	0x240001e8

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	240001e8 	.word	0x240001e8

08000eb8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetREVID+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	0c1b      	lsrs	r3, r3, #16
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	5c001000 	.word	0x5c001000

08000ed0 <__NVIC_SetPriorityGrouping>:
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <__NVIC_SetPriorityGrouping+0x40>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efe:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <__NVIC_SetPriorityGrouping+0x40>)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	60d3      	str	r3, [r2, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00
 8000f14:	05fa0000 	.word	0x05fa0000

08000f18 <__NVIC_GetPriorityGrouping>:
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <__NVIC_GetPriorityGrouping+0x18>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	f003 0307 	and.w	r3, r3, #7
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_EnableIRQ>:
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	db0b      	blt.n	8000f5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	f003 021f 	and.w	r2, r3, #31
 8000f4c:	4907      	ldr	r1, [pc, #28]	; (8000f6c <__NVIC_EnableIRQ+0x38>)
 8000f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f52:	095b      	lsrs	r3, r3, #5
 8000f54:	2001      	movs	r0, #1
 8000f56:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800103c:	d301      	bcc.n	8001042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103e:	2301      	movs	r3, #1
 8001040:	e00f      	b.n	8001062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <SysTick_Config+0x40>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104a:	210f      	movs	r1, #15
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f7ff ff8e 	bl	8000f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <SysTick_Config+0x40>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <SysTick_Config+0x40>)
 800105c:	2207      	movs	r2, #7
 800105e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	e000e010 	.word	0xe000e010

08001070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff29 	bl	8000ed0 <__NVIC_SetPriorityGrouping>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001094:	f7ff ff40 	bl	8000f18 <__NVIC_GetPriorityGrouping>
 8001098:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ff90 	bl	8000fc4 <NVIC_EncodePriority>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff5f 	bl	8000f70 <__NVIC_SetPriority>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff33 	bl	8000f34 <__NVIC_EnableIRQ>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffa4 	bl	800102c <SysTick_Config>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff fed2 	bl	8000ea0 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e316      	b.n	8001736 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a66      	ldr	r2, [pc, #408]	; (80012a8 <HAL_DMA_Init+0x1b8>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d04a      	beq.n	80011a8 <HAL_DMA_Init+0xb8>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a65      	ldr	r2, [pc, #404]	; (80012ac <HAL_DMA_Init+0x1bc>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d045      	beq.n	80011a8 <HAL_DMA_Init+0xb8>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a63      	ldr	r2, [pc, #396]	; (80012b0 <HAL_DMA_Init+0x1c0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d040      	beq.n	80011a8 <HAL_DMA_Init+0xb8>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a62      	ldr	r2, [pc, #392]	; (80012b4 <HAL_DMA_Init+0x1c4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d03b      	beq.n	80011a8 <HAL_DMA_Init+0xb8>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a60      	ldr	r2, [pc, #384]	; (80012b8 <HAL_DMA_Init+0x1c8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d036      	beq.n	80011a8 <HAL_DMA_Init+0xb8>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a5f      	ldr	r2, [pc, #380]	; (80012bc <HAL_DMA_Init+0x1cc>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d031      	beq.n	80011a8 <HAL_DMA_Init+0xb8>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a5d      	ldr	r2, [pc, #372]	; (80012c0 <HAL_DMA_Init+0x1d0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d02c      	beq.n	80011a8 <HAL_DMA_Init+0xb8>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a5c      	ldr	r2, [pc, #368]	; (80012c4 <HAL_DMA_Init+0x1d4>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d027      	beq.n	80011a8 <HAL_DMA_Init+0xb8>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a5a      	ldr	r2, [pc, #360]	; (80012c8 <HAL_DMA_Init+0x1d8>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d022      	beq.n	80011a8 <HAL_DMA_Init+0xb8>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a59      	ldr	r2, [pc, #356]	; (80012cc <HAL_DMA_Init+0x1dc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d01d      	beq.n	80011a8 <HAL_DMA_Init+0xb8>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a57      	ldr	r2, [pc, #348]	; (80012d0 <HAL_DMA_Init+0x1e0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d018      	beq.n	80011a8 <HAL_DMA_Init+0xb8>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a56      	ldr	r2, [pc, #344]	; (80012d4 <HAL_DMA_Init+0x1e4>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d013      	beq.n	80011a8 <HAL_DMA_Init+0xb8>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a54      	ldr	r2, [pc, #336]	; (80012d8 <HAL_DMA_Init+0x1e8>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00e      	beq.n	80011a8 <HAL_DMA_Init+0xb8>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a53      	ldr	r2, [pc, #332]	; (80012dc <HAL_DMA_Init+0x1ec>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d009      	beq.n	80011a8 <HAL_DMA_Init+0xb8>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a51      	ldr	r2, [pc, #324]	; (80012e0 <HAL_DMA_Init+0x1f0>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d004      	beq.n	80011a8 <HAL_DMA_Init+0xb8>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a50      	ldr	r2, [pc, #320]	; (80012e4 <HAL_DMA_Init+0x1f4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d101      	bne.n	80011ac <HAL_DMA_Init+0xbc>
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <HAL_DMA_Init+0xbe>
 80011ac:	2300      	movs	r3, #0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 813b 	beq.w	800142a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2202      	movs	r2, #2
 80011b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a37      	ldr	r2, [pc, #220]	; (80012a8 <HAL_DMA_Init+0x1b8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d04a      	beq.n	8001264 <HAL_DMA_Init+0x174>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a36      	ldr	r2, [pc, #216]	; (80012ac <HAL_DMA_Init+0x1bc>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d045      	beq.n	8001264 <HAL_DMA_Init+0x174>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a34      	ldr	r2, [pc, #208]	; (80012b0 <HAL_DMA_Init+0x1c0>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d040      	beq.n	8001264 <HAL_DMA_Init+0x174>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a33      	ldr	r2, [pc, #204]	; (80012b4 <HAL_DMA_Init+0x1c4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d03b      	beq.n	8001264 <HAL_DMA_Init+0x174>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a31      	ldr	r2, [pc, #196]	; (80012b8 <HAL_DMA_Init+0x1c8>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d036      	beq.n	8001264 <HAL_DMA_Init+0x174>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a30      	ldr	r2, [pc, #192]	; (80012bc <HAL_DMA_Init+0x1cc>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d031      	beq.n	8001264 <HAL_DMA_Init+0x174>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a2e      	ldr	r2, [pc, #184]	; (80012c0 <HAL_DMA_Init+0x1d0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d02c      	beq.n	8001264 <HAL_DMA_Init+0x174>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a2d      	ldr	r2, [pc, #180]	; (80012c4 <HAL_DMA_Init+0x1d4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d027      	beq.n	8001264 <HAL_DMA_Init+0x174>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a2b      	ldr	r2, [pc, #172]	; (80012c8 <HAL_DMA_Init+0x1d8>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d022      	beq.n	8001264 <HAL_DMA_Init+0x174>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a2a      	ldr	r2, [pc, #168]	; (80012cc <HAL_DMA_Init+0x1dc>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d01d      	beq.n	8001264 <HAL_DMA_Init+0x174>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a28      	ldr	r2, [pc, #160]	; (80012d0 <HAL_DMA_Init+0x1e0>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d018      	beq.n	8001264 <HAL_DMA_Init+0x174>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a27      	ldr	r2, [pc, #156]	; (80012d4 <HAL_DMA_Init+0x1e4>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d013      	beq.n	8001264 <HAL_DMA_Init+0x174>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <HAL_DMA_Init+0x1e8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00e      	beq.n	8001264 <HAL_DMA_Init+0x174>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a24      	ldr	r2, [pc, #144]	; (80012dc <HAL_DMA_Init+0x1ec>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d009      	beq.n	8001264 <HAL_DMA_Init+0x174>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a22      	ldr	r2, [pc, #136]	; (80012e0 <HAL_DMA_Init+0x1f0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d004      	beq.n	8001264 <HAL_DMA_Init+0x174>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <HAL_DMA_Init+0x1f4>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d108      	bne.n	8001276 <HAL_DMA_Init+0x186>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0201 	bic.w	r2, r2, #1
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e007      	b.n	8001286 <HAL_DMA_Init+0x196>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0201 	bic.w	r2, r2, #1
 8001284:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001286:	e02f      	b.n	80012e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001288:	f7ff fe0a 	bl	8000ea0 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b05      	cmp	r3, #5
 8001294:	d928      	bls.n	80012e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2220      	movs	r2, #32
 800129a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2203      	movs	r2, #3
 80012a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e246      	b.n	8001736 <HAL_DMA_Init+0x646>
 80012a8:	40020010 	.word	0x40020010
 80012ac:	40020028 	.word	0x40020028
 80012b0:	40020040 	.word	0x40020040
 80012b4:	40020058 	.word	0x40020058
 80012b8:	40020070 	.word	0x40020070
 80012bc:	40020088 	.word	0x40020088
 80012c0:	400200a0 	.word	0x400200a0
 80012c4:	400200b8 	.word	0x400200b8
 80012c8:	40020410 	.word	0x40020410
 80012cc:	40020428 	.word	0x40020428
 80012d0:	40020440 	.word	0x40020440
 80012d4:	40020458 	.word	0x40020458
 80012d8:	40020470 	.word	0x40020470
 80012dc:	40020488 	.word	0x40020488
 80012e0:	400204a0 	.word	0x400204a0
 80012e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1c8      	bne.n	8001288 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4b83      	ldr	r3, [pc, #524]	; (8001510 <HAL_DMA_Init+0x420>)
 8001302:	4013      	ands	r3, r2
 8001304:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800130e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001326:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	4313      	orrs	r3, r2
 8001332:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	2b04      	cmp	r3, #4
 800133a:	d107      	bne.n	800134c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4313      	orrs	r3, r2
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	4313      	orrs	r3, r2
 800134a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800134c:	4b71      	ldr	r3, [pc, #452]	; (8001514 <HAL_DMA_Init+0x424>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b71      	ldr	r3, [pc, #452]	; (8001518 <HAL_DMA_Init+0x428>)
 8001352:	4013      	ands	r3, r2
 8001354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001358:	d328      	bcc.n	80013ac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b28      	cmp	r3, #40	; 0x28
 8001360:	d903      	bls.n	800136a <HAL_DMA_Init+0x27a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b2e      	cmp	r3, #46	; 0x2e
 8001368:	d917      	bls.n	800139a <HAL_DMA_Init+0x2aa>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b3e      	cmp	r3, #62	; 0x3e
 8001370:	d903      	bls.n	800137a <HAL_DMA_Init+0x28a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b42      	cmp	r3, #66	; 0x42
 8001378:	d90f      	bls.n	800139a <HAL_DMA_Init+0x2aa>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b46      	cmp	r3, #70	; 0x46
 8001380:	d903      	bls.n	800138a <HAL_DMA_Init+0x29a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b48      	cmp	r3, #72	; 0x48
 8001388:	d907      	bls.n	800139a <HAL_DMA_Init+0x2aa>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b4e      	cmp	r3, #78	; 0x4e
 8001390:	d905      	bls.n	800139e <HAL_DMA_Init+0x2ae>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b52      	cmp	r3, #82	; 0x52
 8001398:	d801      	bhi.n	800139e <HAL_DMA_Init+0x2ae>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <HAL_DMA_Init+0x2b0>
 800139e:	2300      	movs	r3, #0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013aa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f023 0307 	bic.w	r3, r3, #7
 80013c2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d117      	bne.n	8001406 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	4313      	orrs	r3, r2
 80013de:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00e      	beq.n	8001406 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f001 fdcf 	bl	8002f8c <DMA_CheckFifoParam>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2240      	movs	r2, #64	; 0x40
 80013f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e197      	b.n	8001736 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f001 fd0a 	bl	8002e28 <DMA_CalcBaseAndBitshift>
 8001414:	4603      	mov	r3, r0
 8001416:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141c:	f003 031f 	and.w	r3, r3, #31
 8001420:	223f      	movs	r2, #63	; 0x3f
 8001422:	409a      	lsls	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	e0cd      	b.n	80015c6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a3b      	ldr	r2, [pc, #236]	; (800151c <HAL_DMA_Init+0x42c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d022      	beq.n	800147a <HAL_DMA_Init+0x38a>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a39      	ldr	r2, [pc, #228]	; (8001520 <HAL_DMA_Init+0x430>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d01d      	beq.n	800147a <HAL_DMA_Init+0x38a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a38      	ldr	r2, [pc, #224]	; (8001524 <HAL_DMA_Init+0x434>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d018      	beq.n	800147a <HAL_DMA_Init+0x38a>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a36      	ldr	r2, [pc, #216]	; (8001528 <HAL_DMA_Init+0x438>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d013      	beq.n	800147a <HAL_DMA_Init+0x38a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a35      	ldr	r2, [pc, #212]	; (800152c <HAL_DMA_Init+0x43c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d00e      	beq.n	800147a <HAL_DMA_Init+0x38a>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a33      	ldr	r2, [pc, #204]	; (8001530 <HAL_DMA_Init+0x440>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d009      	beq.n	800147a <HAL_DMA_Init+0x38a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a32      	ldr	r2, [pc, #200]	; (8001534 <HAL_DMA_Init+0x444>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d004      	beq.n	800147a <HAL_DMA_Init+0x38a>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a30      	ldr	r2, [pc, #192]	; (8001538 <HAL_DMA_Init+0x448>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d101      	bne.n	800147e <HAL_DMA_Init+0x38e>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_DMA_Init+0x390>
 800147e:	2300      	movs	r3, #0
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 8097 	beq.w	80015b4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a24      	ldr	r2, [pc, #144]	; (800151c <HAL_DMA_Init+0x42c>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d021      	beq.n	80014d4 <HAL_DMA_Init+0x3e4>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a22      	ldr	r2, [pc, #136]	; (8001520 <HAL_DMA_Init+0x430>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d01c      	beq.n	80014d4 <HAL_DMA_Init+0x3e4>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a21      	ldr	r2, [pc, #132]	; (8001524 <HAL_DMA_Init+0x434>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d017      	beq.n	80014d4 <HAL_DMA_Init+0x3e4>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a1f      	ldr	r2, [pc, #124]	; (8001528 <HAL_DMA_Init+0x438>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d012      	beq.n	80014d4 <HAL_DMA_Init+0x3e4>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a1e      	ldr	r2, [pc, #120]	; (800152c <HAL_DMA_Init+0x43c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d00d      	beq.n	80014d4 <HAL_DMA_Init+0x3e4>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <HAL_DMA_Init+0x440>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d008      	beq.n	80014d4 <HAL_DMA_Init+0x3e4>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <HAL_DMA_Init+0x444>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d003      	beq.n	80014d4 <HAL_DMA_Init+0x3e4>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <HAL_DMA_Init+0x448>)
 80014d2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <HAL_DMA_Init+0x44c>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b40      	cmp	r3, #64	; 0x40
 80014fa:	d021      	beq.n	8001540 <HAL_DMA_Init+0x450>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b80      	cmp	r3, #128	; 0x80
 8001502:	d102      	bne.n	800150a <HAL_DMA_Init+0x41a>
 8001504:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001508:	e01b      	b.n	8001542 <HAL_DMA_Init+0x452>
 800150a:	2300      	movs	r3, #0
 800150c:	e019      	b.n	8001542 <HAL_DMA_Init+0x452>
 800150e:	bf00      	nop
 8001510:	fe10803f 	.word	0xfe10803f
 8001514:	5c001000 	.word	0x5c001000
 8001518:	ffff0000 	.word	0xffff0000
 800151c:	58025408 	.word	0x58025408
 8001520:	5802541c 	.word	0x5802541c
 8001524:	58025430 	.word	0x58025430
 8001528:	58025444 	.word	0x58025444
 800152c:	58025458 	.word	0x58025458
 8001530:	5802546c 	.word	0x5802546c
 8001534:	58025480 	.word	0x58025480
 8001538:	58025494 	.word	0x58025494
 800153c:	fffe000f 	.word	0xfffe000f
 8001540:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68d2      	ldr	r2, [r2, #12]
 8001546:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001548:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001550:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001558:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001560:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001568:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001570:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4313      	orrs	r3, r2
 8001576:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b6e      	ldr	r3, [pc, #440]	; (8001740 <HAL_DMA_Init+0x650>)
 8001588:	4413      	add	r3, r2
 800158a:	4a6e      	ldr	r2, [pc, #440]	; (8001744 <HAL_DMA_Init+0x654>)
 800158c:	fba2 2303 	umull	r2, r3, r2, r3
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	009a      	lsls	r2, r3, #2
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f001 fc45 	bl	8002e28 <DMA_CalcBaseAndBitshift>
 800159e:	4603      	mov	r3, r0
 80015a0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a6:	f003 031f 	and.w	r3, r3, #31
 80015aa:	2201      	movs	r2, #1
 80015ac:	409a      	lsls	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	e008      	b.n	80015c6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2240      	movs	r2, #64	; 0x40
 80015b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2203      	movs	r2, #3
 80015be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0b7      	b.n	8001736 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a5f      	ldr	r2, [pc, #380]	; (8001748 <HAL_DMA_Init+0x658>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d072      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a5d      	ldr	r2, [pc, #372]	; (800174c <HAL_DMA_Init+0x65c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d06d      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a5c      	ldr	r2, [pc, #368]	; (8001750 <HAL_DMA_Init+0x660>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d068      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a5a      	ldr	r2, [pc, #360]	; (8001754 <HAL_DMA_Init+0x664>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d063      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a59      	ldr	r2, [pc, #356]	; (8001758 <HAL_DMA_Init+0x668>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d05e      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a57      	ldr	r2, [pc, #348]	; (800175c <HAL_DMA_Init+0x66c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d059      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a56      	ldr	r2, [pc, #344]	; (8001760 <HAL_DMA_Init+0x670>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d054      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a54      	ldr	r2, [pc, #336]	; (8001764 <HAL_DMA_Init+0x674>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d04f      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a53      	ldr	r2, [pc, #332]	; (8001768 <HAL_DMA_Init+0x678>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d04a      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a51      	ldr	r2, [pc, #324]	; (800176c <HAL_DMA_Init+0x67c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d045      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a50      	ldr	r2, [pc, #320]	; (8001770 <HAL_DMA_Init+0x680>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d040      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a4e      	ldr	r2, [pc, #312]	; (8001774 <HAL_DMA_Init+0x684>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d03b      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a4d      	ldr	r2, [pc, #308]	; (8001778 <HAL_DMA_Init+0x688>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d036      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a4b      	ldr	r2, [pc, #300]	; (800177c <HAL_DMA_Init+0x68c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d031      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a4a      	ldr	r2, [pc, #296]	; (8001780 <HAL_DMA_Init+0x690>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d02c      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a48      	ldr	r2, [pc, #288]	; (8001784 <HAL_DMA_Init+0x694>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d027      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a47      	ldr	r2, [pc, #284]	; (8001788 <HAL_DMA_Init+0x698>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d022      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a45      	ldr	r2, [pc, #276]	; (800178c <HAL_DMA_Init+0x69c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d01d      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a44      	ldr	r2, [pc, #272]	; (8001790 <HAL_DMA_Init+0x6a0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d018      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a42      	ldr	r2, [pc, #264]	; (8001794 <HAL_DMA_Init+0x6a4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d013      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a41      	ldr	r2, [pc, #260]	; (8001798 <HAL_DMA_Init+0x6a8>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d00e      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a3f      	ldr	r2, [pc, #252]	; (800179c <HAL_DMA_Init+0x6ac>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d009      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a3e      	ldr	r2, [pc, #248]	; (80017a0 <HAL_DMA_Init+0x6b0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d004      	beq.n	80016b6 <HAL_DMA_Init+0x5c6>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a3c      	ldr	r2, [pc, #240]	; (80017a4 <HAL_DMA_Init+0x6b4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_DMA_Init+0x5ca>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <HAL_DMA_Init+0x5cc>
 80016ba:	2300      	movs	r3, #0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d032      	beq.n	8001726 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f001 fcdf 	bl	8003084 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b80      	cmp	r3, #128	; 0x80
 80016cc:	d102      	bne.n	80016d4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80016e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d010      	beq.n	8001714 <HAL_DMA_Init+0x624>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d80c      	bhi.n	8001714 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f001 fd5c 	bl	80031b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	e008      	b.n	8001726 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	a7fdabf8 	.word	0xa7fdabf8
 8001744:	cccccccd 	.word	0xcccccccd
 8001748:	40020010 	.word	0x40020010
 800174c:	40020028 	.word	0x40020028
 8001750:	40020040 	.word	0x40020040
 8001754:	40020058 	.word	0x40020058
 8001758:	40020070 	.word	0x40020070
 800175c:	40020088 	.word	0x40020088
 8001760:	400200a0 	.word	0x400200a0
 8001764:	400200b8 	.word	0x400200b8
 8001768:	40020410 	.word	0x40020410
 800176c:	40020428 	.word	0x40020428
 8001770:	40020440 	.word	0x40020440
 8001774:	40020458 	.word	0x40020458
 8001778:	40020470 	.word	0x40020470
 800177c:	40020488 	.word	0x40020488
 8001780:	400204a0 	.word	0x400204a0
 8001784:	400204b8 	.word	0x400204b8
 8001788:	58025408 	.word	0x58025408
 800178c:	5802541c 	.word	0x5802541c
 8001790:	58025430 	.word	0x58025430
 8001794:	58025444 	.word	0x58025444
 8001798:	58025458 	.word	0x58025458
 800179c:	5802546c 	.word	0x5802546c
 80017a0:	58025480 	.word	0x58025480
 80017a4:	58025494 	.word	0x58025494

080017a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e226      	b.n	8001c12 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_DMA_Start_IT+0x2a>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e21f      	b.n	8001c12 <HAL_DMA_Start_IT+0x46a>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	f040 820a 	bne.w	8001bfc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2202      	movs	r2, #2
 80017ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a68      	ldr	r2, [pc, #416]	; (800199c <HAL_DMA_Start_IT+0x1f4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d04a      	beq.n	8001896 <HAL_DMA_Start_IT+0xee>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a66      	ldr	r2, [pc, #408]	; (80019a0 <HAL_DMA_Start_IT+0x1f8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d045      	beq.n	8001896 <HAL_DMA_Start_IT+0xee>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a65      	ldr	r2, [pc, #404]	; (80019a4 <HAL_DMA_Start_IT+0x1fc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d040      	beq.n	8001896 <HAL_DMA_Start_IT+0xee>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a63      	ldr	r2, [pc, #396]	; (80019a8 <HAL_DMA_Start_IT+0x200>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d03b      	beq.n	8001896 <HAL_DMA_Start_IT+0xee>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a62      	ldr	r2, [pc, #392]	; (80019ac <HAL_DMA_Start_IT+0x204>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d036      	beq.n	8001896 <HAL_DMA_Start_IT+0xee>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a60      	ldr	r2, [pc, #384]	; (80019b0 <HAL_DMA_Start_IT+0x208>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d031      	beq.n	8001896 <HAL_DMA_Start_IT+0xee>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a5f      	ldr	r2, [pc, #380]	; (80019b4 <HAL_DMA_Start_IT+0x20c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d02c      	beq.n	8001896 <HAL_DMA_Start_IT+0xee>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a5d      	ldr	r2, [pc, #372]	; (80019b8 <HAL_DMA_Start_IT+0x210>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d027      	beq.n	8001896 <HAL_DMA_Start_IT+0xee>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a5c      	ldr	r2, [pc, #368]	; (80019bc <HAL_DMA_Start_IT+0x214>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d022      	beq.n	8001896 <HAL_DMA_Start_IT+0xee>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a5a      	ldr	r2, [pc, #360]	; (80019c0 <HAL_DMA_Start_IT+0x218>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d01d      	beq.n	8001896 <HAL_DMA_Start_IT+0xee>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a59      	ldr	r2, [pc, #356]	; (80019c4 <HAL_DMA_Start_IT+0x21c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d018      	beq.n	8001896 <HAL_DMA_Start_IT+0xee>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a57      	ldr	r2, [pc, #348]	; (80019c8 <HAL_DMA_Start_IT+0x220>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d013      	beq.n	8001896 <HAL_DMA_Start_IT+0xee>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a56      	ldr	r2, [pc, #344]	; (80019cc <HAL_DMA_Start_IT+0x224>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d00e      	beq.n	8001896 <HAL_DMA_Start_IT+0xee>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a54      	ldr	r2, [pc, #336]	; (80019d0 <HAL_DMA_Start_IT+0x228>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d009      	beq.n	8001896 <HAL_DMA_Start_IT+0xee>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a53      	ldr	r2, [pc, #332]	; (80019d4 <HAL_DMA_Start_IT+0x22c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d004      	beq.n	8001896 <HAL_DMA_Start_IT+0xee>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a51      	ldr	r2, [pc, #324]	; (80019d8 <HAL_DMA_Start_IT+0x230>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d108      	bne.n	80018a8 <HAL_DMA_Start_IT+0x100>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0201 	bic.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e007      	b.n	80018b8 <HAL_DMA_Start_IT+0x110>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0201 	bic.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f001 f906 	bl	8002ad0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a34      	ldr	r2, [pc, #208]	; (800199c <HAL_DMA_Start_IT+0x1f4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d04a      	beq.n	8001964 <HAL_DMA_Start_IT+0x1bc>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a33      	ldr	r2, [pc, #204]	; (80019a0 <HAL_DMA_Start_IT+0x1f8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d045      	beq.n	8001964 <HAL_DMA_Start_IT+0x1bc>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a31      	ldr	r2, [pc, #196]	; (80019a4 <HAL_DMA_Start_IT+0x1fc>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d040      	beq.n	8001964 <HAL_DMA_Start_IT+0x1bc>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <HAL_DMA_Start_IT+0x200>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d03b      	beq.n	8001964 <HAL_DMA_Start_IT+0x1bc>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a2e      	ldr	r2, [pc, #184]	; (80019ac <HAL_DMA_Start_IT+0x204>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d036      	beq.n	8001964 <HAL_DMA_Start_IT+0x1bc>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a2d      	ldr	r2, [pc, #180]	; (80019b0 <HAL_DMA_Start_IT+0x208>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d031      	beq.n	8001964 <HAL_DMA_Start_IT+0x1bc>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2b      	ldr	r2, [pc, #172]	; (80019b4 <HAL_DMA_Start_IT+0x20c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d02c      	beq.n	8001964 <HAL_DMA_Start_IT+0x1bc>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a2a      	ldr	r2, [pc, #168]	; (80019b8 <HAL_DMA_Start_IT+0x210>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d027      	beq.n	8001964 <HAL_DMA_Start_IT+0x1bc>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a28      	ldr	r2, [pc, #160]	; (80019bc <HAL_DMA_Start_IT+0x214>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d022      	beq.n	8001964 <HAL_DMA_Start_IT+0x1bc>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a27      	ldr	r2, [pc, #156]	; (80019c0 <HAL_DMA_Start_IT+0x218>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d01d      	beq.n	8001964 <HAL_DMA_Start_IT+0x1bc>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <HAL_DMA_Start_IT+0x21c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d018      	beq.n	8001964 <HAL_DMA_Start_IT+0x1bc>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a24      	ldr	r2, [pc, #144]	; (80019c8 <HAL_DMA_Start_IT+0x220>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d013      	beq.n	8001964 <HAL_DMA_Start_IT+0x1bc>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a22      	ldr	r2, [pc, #136]	; (80019cc <HAL_DMA_Start_IT+0x224>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00e      	beq.n	8001964 <HAL_DMA_Start_IT+0x1bc>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a21      	ldr	r2, [pc, #132]	; (80019d0 <HAL_DMA_Start_IT+0x228>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d009      	beq.n	8001964 <HAL_DMA_Start_IT+0x1bc>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <HAL_DMA_Start_IT+0x22c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d004      	beq.n	8001964 <HAL_DMA_Start_IT+0x1bc>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1e      	ldr	r2, [pc, #120]	; (80019d8 <HAL_DMA_Start_IT+0x230>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d101      	bne.n	8001968 <HAL_DMA_Start_IT+0x1c0>
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <HAL_DMA_Start_IT+0x1c2>
 8001968:	2300      	movs	r3, #0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d036      	beq.n	80019dc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 021e 	bic.w	r2, r3, #30
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0216 	orr.w	r2, r2, #22
 8001980:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	2b00      	cmp	r3, #0
 8001988:	d03e      	beq.n	8001a08 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f042 0208 	orr.w	r2, r2, #8
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e035      	b.n	8001a08 <HAL_DMA_Start_IT+0x260>
 800199c:	40020010 	.word	0x40020010
 80019a0:	40020028 	.word	0x40020028
 80019a4:	40020040 	.word	0x40020040
 80019a8:	40020058 	.word	0x40020058
 80019ac:	40020070 	.word	0x40020070
 80019b0:	40020088 	.word	0x40020088
 80019b4:	400200a0 	.word	0x400200a0
 80019b8:	400200b8 	.word	0x400200b8
 80019bc:	40020410 	.word	0x40020410
 80019c0:	40020428 	.word	0x40020428
 80019c4:	40020440 	.word	0x40020440
 80019c8:	40020458 	.word	0x40020458
 80019cc:	40020470 	.word	0x40020470
 80019d0:	40020488 	.word	0x40020488
 80019d4:	400204a0 	.word	0x400204a0
 80019d8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 020e 	bic.w	r2, r3, #14
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 020a 	orr.w	r2, r2, #10
 80019ee:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d007      	beq.n	8001a08 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0204 	orr.w	r2, r2, #4
 8001a06:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a83      	ldr	r2, [pc, #524]	; (8001c1c <HAL_DMA_Start_IT+0x474>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d072      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a82      	ldr	r2, [pc, #520]	; (8001c20 <HAL_DMA_Start_IT+0x478>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d06d      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a80      	ldr	r2, [pc, #512]	; (8001c24 <HAL_DMA_Start_IT+0x47c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d068      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a7f      	ldr	r2, [pc, #508]	; (8001c28 <HAL_DMA_Start_IT+0x480>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d063      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a7d      	ldr	r2, [pc, #500]	; (8001c2c <HAL_DMA_Start_IT+0x484>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d05e      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a7c      	ldr	r2, [pc, #496]	; (8001c30 <HAL_DMA_Start_IT+0x488>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d059      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a7a      	ldr	r2, [pc, #488]	; (8001c34 <HAL_DMA_Start_IT+0x48c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d054      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a79      	ldr	r2, [pc, #484]	; (8001c38 <HAL_DMA_Start_IT+0x490>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d04f      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a77      	ldr	r2, [pc, #476]	; (8001c3c <HAL_DMA_Start_IT+0x494>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d04a      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a76      	ldr	r2, [pc, #472]	; (8001c40 <HAL_DMA_Start_IT+0x498>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d045      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a74      	ldr	r2, [pc, #464]	; (8001c44 <HAL_DMA_Start_IT+0x49c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d040      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a73      	ldr	r2, [pc, #460]	; (8001c48 <HAL_DMA_Start_IT+0x4a0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d03b      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a71      	ldr	r2, [pc, #452]	; (8001c4c <HAL_DMA_Start_IT+0x4a4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d036      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a70      	ldr	r2, [pc, #448]	; (8001c50 <HAL_DMA_Start_IT+0x4a8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d031      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a6e      	ldr	r2, [pc, #440]	; (8001c54 <HAL_DMA_Start_IT+0x4ac>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d02c      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a6d      	ldr	r2, [pc, #436]	; (8001c58 <HAL_DMA_Start_IT+0x4b0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d027      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a6b      	ldr	r2, [pc, #428]	; (8001c5c <HAL_DMA_Start_IT+0x4b4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d022      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a6a      	ldr	r2, [pc, #424]	; (8001c60 <HAL_DMA_Start_IT+0x4b8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d01d      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a68      	ldr	r2, [pc, #416]	; (8001c64 <HAL_DMA_Start_IT+0x4bc>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d018      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a67      	ldr	r2, [pc, #412]	; (8001c68 <HAL_DMA_Start_IT+0x4c0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d013      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a65      	ldr	r2, [pc, #404]	; (8001c6c <HAL_DMA_Start_IT+0x4c4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00e      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a64      	ldr	r2, [pc, #400]	; (8001c70 <HAL_DMA_Start_IT+0x4c8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d009      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a62      	ldr	r2, [pc, #392]	; (8001c74 <HAL_DMA_Start_IT+0x4cc>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d004      	beq.n	8001af8 <HAL_DMA_Start_IT+0x350>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a61      	ldr	r2, [pc, #388]	; (8001c78 <HAL_DMA_Start_IT+0x4d0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d101      	bne.n	8001afc <HAL_DMA_Start_IT+0x354>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_DMA_Start_IT+0x356>
 8001afc:	2300      	movs	r3, #0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d01a      	beq.n	8001b38 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b1e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b36:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a37      	ldr	r2, [pc, #220]	; (8001c1c <HAL_DMA_Start_IT+0x474>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d04a      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x430>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a36      	ldr	r2, [pc, #216]	; (8001c20 <HAL_DMA_Start_IT+0x478>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d045      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x430>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a34      	ldr	r2, [pc, #208]	; (8001c24 <HAL_DMA_Start_IT+0x47c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d040      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x430>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a33      	ldr	r2, [pc, #204]	; (8001c28 <HAL_DMA_Start_IT+0x480>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d03b      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x430>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a31      	ldr	r2, [pc, #196]	; (8001c2c <HAL_DMA_Start_IT+0x484>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d036      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x430>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a30      	ldr	r2, [pc, #192]	; (8001c30 <HAL_DMA_Start_IT+0x488>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d031      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x430>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a2e      	ldr	r2, [pc, #184]	; (8001c34 <HAL_DMA_Start_IT+0x48c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d02c      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x430>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a2d      	ldr	r2, [pc, #180]	; (8001c38 <HAL_DMA_Start_IT+0x490>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d027      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x430>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a2b      	ldr	r2, [pc, #172]	; (8001c3c <HAL_DMA_Start_IT+0x494>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d022      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x430>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a2a      	ldr	r2, [pc, #168]	; (8001c40 <HAL_DMA_Start_IT+0x498>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d01d      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x430>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a28      	ldr	r2, [pc, #160]	; (8001c44 <HAL_DMA_Start_IT+0x49c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d018      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x430>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a27      	ldr	r2, [pc, #156]	; (8001c48 <HAL_DMA_Start_IT+0x4a0>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d013      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x430>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a25      	ldr	r2, [pc, #148]	; (8001c4c <HAL_DMA_Start_IT+0x4a4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00e      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x430>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <HAL_DMA_Start_IT+0x4a8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d009      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x430>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a22      	ldr	r2, [pc, #136]	; (8001c54 <HAL_DMA_Start_IT+0x4ac>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d004      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x430>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <HAL_DMA_Start_IT+0x4b0>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d108      	bne.n	8001bea <HAL_DMA_Start_IT+0x442>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	e012      	b.n	8001c10 <HAL_DMA_Start_IT+0x468>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 0201 	orr.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	e009      	b.n	8001c10 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40020010 	.word	0x40020010
 8001c20:	40020028 	.word	0x40020028
 8001c24:	40020040 	.word	0x40020040
 8001c28:	40020058 	.word	0x40020058
 8001c2c:	40020070 	.word	0x40020070
 8001c30:	40020088 	.word	0x40020088
 8001c34:	400200a0 	.word	0x400200a0
 8001c38:	400200b8 	.word	0x400200b8
 8001c3c:	40020410 	.word	0x40020410
 8001c40:	40020428 	.word	0x40020428
 8001c44:	40020440 	.word	0x40020440
 8001c48:	40020458 	.word	0x40020458
 8001c4c:	40020470 	.word	0x40020470
 8001c50:	40020488 	.word	0x40020488
 8001c54:	400204a0 	.word	0x400204a0
 8001c58:	400204b8 	.word	0x400204b8
 8001c5c:	58025408 	.word	0x58025408
 8001c60:	5802541c 	.word	0x5802541c
 8001c64:	58025430 	.word	0x58025430
 8001c68:	58025444 	.word	0x58025444
 8001c6c:	58025458 	.word	0x58025458
 8001c70:	5802546c 	.word	0x5802546c
 8001c74:	58025480 	.word	0x58025480
 8001c78:	58025494 	.word	0x58025494

08001c7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c88:	4b67      	ldr	r3, [pc, #412]	; (8001e28 <HAL_DMA_IRQHandler+0x1ac>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a67      	ldr	r2, [pc, #412]	; (8001e2c <HAL_DMA_IRQHandler+0x1b0>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0a9b      	lsrs	r3, r3, #10
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a5f      	ldr	r2, [pc, #380]	; (8001e30 <HAL_DMA_IRQHandler+0x1b4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d04a      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xd2>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a5d      	ldr	r2, [pc, #372]	; (8001e34 <HAL_DMA_IRQHandler+0x1b8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d045      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xd2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a5c      	ldr	r2, [pc, #368]	; (8001e38 <HAL_DMA_IRQHandler+0x1bc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d040      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xd2>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a5a      	ldr	r2, [pc, #360]	; (8001e3c <HAL_DMA_IRQHandler+0x1c0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d03b      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xd2>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a59      	ldr	r2, [pc, #356]	; (8001e40 <HAL_DMA_IRQHandler+0x1c4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d036      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xd2>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a57      	ldr	r2, [pc, #348]	; (8001e44 <HAL_DMA_IRQHandler+0x1c8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d031      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xd2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a56      	ldr	r2, [pc, #344]	; (8001e48 <HAL_DMA_IRQHandler+0x1cc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d02c      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xd2>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a54      	ldr	r2, [pc, #336]	; (8001e4c <HAL_DMA_IRQHandler+0x1d0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d027      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xd2>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a53      	ldr	r2, [pc, #332]	; (8001e50 <HAL_DMA_IRQHandler+0x1d4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d022      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xd2>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a51      	ldr	r2, [pc, #324]	; (8001e54 <HAL_DMA_IRQHandler+0x1d8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01d      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xd2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a50      	ldr	r2, [pc, #320]	; (8001e58 <HAL_DMA_IRQHandler+0x1dc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d018      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xd2>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a4e      	ldr	r2, [pc, #312]	; (8001e5c <HAL_DMA_IRQHandler+0x1e0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xd2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a4d      	ldr	r2, [pc, #308]	; (8001e60 <HAL_DMA_IRQHandler+0x1e4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d00e      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xd2>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a4b      	ldr	r2, [pc, #300]	; (8001e64 <HAL_DMA_IRQHandler+0x1e8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d009      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xd2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a4a      	ldr	r2, [pc, #296]	; (8001e68 <HAL_DMA_IRQHandler+0x1ec>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d004      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xd2>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a48      	ldr	r2, [pc, #288]	; (8001e6c <HAL_DMA_IRQHandler+0x1f0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_DMA_IRQHandler+0xd6>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_DMA_IRQHandler+0xd8>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 842b 	beq.w	80025b0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	2208      	movs	r2, #8
 8001d64:	409a      	lsls	r2, r3
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80a2 	beq.w	8001eb4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a2e      	ldr	r2, [pc, #184]	; (8001e30 <HAL_DMA_IRQHandler+0x1b4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d04a      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x194>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a2d      	ldr	r2, [pc, #180]	; (8001e34 <HAL_DMA_IRQHandler+0x1b8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d045      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x194>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a2b      	ldr	r2, [pc, #172]	; (8001e38 <HAL_DMA_IRQHandler+0x1bc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d040      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x194>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a2a      	ldr	r2, [pc, #168]	; (8001e3c <HAL_DMA_IRQHandler+0x1c0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d03b      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x194>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a28      	ldr	r2, [pc, #160]	; (8001e40 <HAL_DMA_IRQHandler+0x1c4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d036      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x194>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a27      	ldr	r2, [pc, #156]	; (8001e44 <HAL_DMA_IRQHandler+0x1c8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d031      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x194>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a25      	ldr	r2, [pc, #148]	; (8001e48 <HAL_DMA_IRQHandler+0x1cc>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d02c      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x194>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a24      	ldr	r2, [pc, #144]	; (8001e4c <HAL_DMA_IRQHandler+0x1d0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d027      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x194>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <HAL_DMA_IRQHandler+0x1d4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d022      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x194>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a21      	ldr	r2, [pc, #132]	; (8001e54 <HAL_DMA_IRQHandler+0x1d8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d01d      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x194>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1f      	ldr	r2, [pc, #124]	; (8001e58 <HAL_DMA_IRQHandler+0x1dc>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d018      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x194>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1e      	ldr	r2, [pc, #120]	; (8001e5c <HAL_DMA_IRQHandler+0x1e0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d013      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x194>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <HAL_DMA_IRQHandler+0x1e4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00e      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x194>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a1b      	ldr	r2, [pc, #108]	; (8001e64 <HAL_DMA_IRQHandler+0x1e8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d009      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x194>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a19      	ldr	r2, [pc, #100]	; (8001e68 <HAL_DMA_IRQHandler+0x1ec>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d004      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x194>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a18      	ldr	r2, [pc, #96]	; (8001e6c <HAL_DMA_IRQHandler+0x1f0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d12f      	bne.n	8001e70 <HAL_DMA_IRQHandler+0x1f4>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bf14      	ite	ne
 8001e1e:	2301      	movne	r3, #1
 8001e20:	2300      	moveq	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	e02e      	b.n	8001e84 <HAL_DMA_IRQHandler+0x208>
 8001e26:	bf00      	nop
 8001e28:	24000000 	.word	0x24000000
 8001e2c:	1b4e81b5 	.word	0x1b4e81b5
 8001e30:	40020010 	.word	0x40020010
 8001e34:	40020028 	.word	0x40020028
 8001e38:	40020040 	.word	0x40020040
 8001e3c:	40020058 	.word	0x40020058
 8001e40:	40020070 	.word	0x40020070
 8001e44:	40020088 	.word	0x40020088
 8001e48:	400200a0 	.word	0x400200a0
 8001e4c:	400200b8 	.word	0x400200b8
 8001e50:	40020410 	.word	0x40020410
 8001e54:	40020428 	.word	0x40020428
 8001e58:	40020440 	.word	0x40020440
 8001e5c:	40020458 	.word	0x40020458
 8001e60:	40020470 	.word	0x40020470
 8001e64:	40020488 	.word	0x40020488
 8001e68:	400204a0 	.word	0x400204a0
 8001e6c:	400204b8 	.word	0x400204b8
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	bf14      	ite	ne
 8001e7e:	2301      	movne	r3, #1
 8001e80:	2300      	moveq	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d015      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0204 	bic.w	r2, r2, #4
 8001e96:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	f043 0201 	orr.w	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d06e      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a69      	ldr	r2, [pc, #420]	; (8002074 <HAL_DMA_IRQHandler+0x3f8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d04a      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x2ee>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a67      	ldr	r2, [pc, #412]	; (8002078 <HAL_DMA_IRQHandler+0x3fc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d045      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x2ee>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a66      	ldr	r2, [pc, #408]	; (800207c <HAL_DMA_IRQHandler+0x400>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d040      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x2ee>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a64      	ldr	r2, [pc, #400]	; (8002080 <HAL_DMA_IRQHandler+0x404>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d03b      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x2ee>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a63      	ldr	r2, [pc, #396]	; (8002084 <HAL_DMA_IRQHandler+0x408>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d036      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x2ee>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a61      	ldr	r2, [pc, #388]	; (8002088 <HAL_DMA_IRQHandler+0x40c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d031      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x2ee>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a60      	ldr	r2, [pc, #384]	; (800208c <HAL_DMA_IRQHandler+0x410>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d02c      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x2ee>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a5e      	ldr	r2, [pc, #376]	; (8002090 <HAL_DMA_IRQHandler+0x414>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d027      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x2ee>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a5d      	ldr	r2, [pc, #372]	; (8002094 <HAL_DMA_IRQHandler+0x418>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d022      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x2ee>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a5b      	ldr	r2, [pc, #364]	; (8002098 <HAL_DMA_IRQHandler+0x41c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d01d      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x2ee>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a5a      	ldr	r2, [pc, #360]	; (800209c <HAL_DMA_IRQHandler+0x420>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d018      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x2ee>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a58      	ldr	r2, [pc, #352]	; (80020a0 <HAL_DMA_IRQHandler+0x424>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x2ee>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a57      	ldr	r2, [pc, #348]	; (80020a4 <HAL_DMA_IRQHandler+0x428>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00e      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x2ee>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a55      	ldr	r2, [pc, #340]	; (80020a8 <HAL_DMA_IRQHandler+0x42c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d009      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x2ee>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a54      	ldr	r2, [pc, #336]	; (80020ac <HAL_DMA_IRQHandler+0x430>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d004      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x2ee>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a52      	ldr	r2, [pc, #328]	; (80020b0 <HAL_DMA_IRQHandler+0x434>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d10a      	bne.n	8001f80 <HAL_DMA_IRQHandler+0x304>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf14      	ite	ne
 8001f78:	2301      	movne	r3, #1
 8001f7a:	2300      	moveq	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	e003      	b.n	8001f88 <HAL_DMA_IRQHandler+0x30c>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2300      	movs	r3, #0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00d      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	2201      	movs	r2, #1
 8001f96:	409a      	lsls	r2, r3
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	f043 0202 	orr.w	r2, r3, #2
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 808f 	beq.w	80020dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a2c      	ldr	r2, [pc, #176]	; (8002074 <HAL_DMA_IRQHandler+0x3f8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d04a      	beq.n	800205e <HAL_DMA_IRQHandler+0x3e2>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a2a      	ldr	r2, [pc, #168]	; (8002078 <HAL_DMA_IRQHandler+0x3fc>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d045      	beq.n	800205e <HAL_DMA_IRQHandler+0x3e2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a29      	ldr	r2, [pc, #164]	; (800207c <HAL_DMA_IRQHandler+0x400>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d040      	beq.n	800205e <HAL_DMA_IRQHandler+0x3e2>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a27      	ldr	r2, [pc, #156]	; (8002080 <HAL_DMA_IRQHandler+0x404>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d03b      	beq.n	800205e <HAL_DMA_IRQHandler+0x3e2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a26      	ldr	r2, [pc, #152]	; (8002084 <HAL_DMA_IRQHandler+0x408>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d036      	beq.n	800205e <HAL_DMA_IRQHandler+0x3e2>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a24      	ldr	r2, [pc, #144]	; (8002088 <HAL_DMA_IRQHandler+0x40c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d031      	beq.n	800205e <HAL_DMA_IRQHandler+0x3e2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a23      	ldr	r2, [pc, #140]	; (800208c <HAL_DMA_IRQHandler+0x410>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d02c      	beq.n	800205e <HAL_DMA_IRQHandler+0x3e2>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a21      	ldr	r2, [pc, #132]	; (8002090 <HAL_DMA_IRQHandler+0x414>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d027      	beq.n	800205e <HAL_DMA_IRQHandler+0x3e2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a20      	ldr	r2, [pc, #128]	; (8002094 <HAL_DMA_IRQHandler+0x418>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d022      	beq.n	800205e <HAL_DMA_IRQHandler+0x3e2>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <HAL_DMA_IRQHandler+0x41c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01d      	beq.n	800205e <HAL_DMA_IRQHandler+0x3e2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a1d      	ldr	r2, [pc, #116]	; (800209c <HAL_DMA_IRQHandler+0x420>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d018      	beq.n	800205e <HAL_DMA_IRQHandler+0x3e2>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_DMA_IRQHandler+0x424>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_DMA_IRQHandler+0x3e2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <HAL_DMA_IRQHandler+0x428>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00e      	beq.n	800205e <HAL_DMA_IRQHandler+0x3e2>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <HAL_DMA_IRQHandler+0x42c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d009      	beq.n	800205e <HAL_DMA_IRQHandler+0x3e2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a17      	ldr	r2, [pc, #92]	; (80020ac <HAL_DMA_IRQHandler+0x430>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d004      	beq.n	800205e <HAL_DMA_IRQHandler+0x3e2>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <HAL_DMA_IRQHandler+0x434>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d12a      	bne.n	80020b4 <HAL_DMA_IRQHandler+0x438>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf14      	ite	ne
 800206c:	2301      	movne	r3, #1
 800206e:	2300      	moveq	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	e023      	b.n	80020bc <HAL_DMA_IRQHandler+0x440>
 8002074:	40020010 	.word	0x40020010
 8002078:	40020028 	.word	0x40020028
 800207c:	40020040 	.word	0x40020040
 8002080:	40020058 	.word	0x40020058
 8002084:	40020070 	.word	0x40020070
 8002088:	40020088 	.word	0x40020088
 800208c:	400200a0 	.word	0x400200a0
 8002090:	400200b8 	.word	0x400200b8
 8002094:	40020410 	.word	0x40020410
 8002098:	40020428 	.word	0x40020428
 800209c:	40020440 	.word	0x40020440
 80020a0:	40020458 	.word	0x40020458
 80020a4:	40020470 	.word	0x40020470
 80020a8:	40020488 	.word	0x40020488
 80020ac:	400204a0 	.word	0x400204a0
 80020b0:	400204b8 	.word	0x400204b8
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2300      	movs	r3, #0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00d      	beq.n	80020dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	2204      	movs	r2, #4
 80020ca:	409a      	lsls	r2, r3
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d4:	f043 0204 	orr.w	r2, r3, #4
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	2210      	movs	r2, #16
 80020e6:	409a      	lsls	r2, r3
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80a6 	beq.w	800223e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a85      	ldr	r2, [pc, #532]	; (800230c <HAL_DMA_IRQHandler+0x690>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d04a      	beq.n	8002192 <HAL_DMA_IRQHandler+0x516>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a83      	ldr	r2, [pc, #524]	; (8002310 <HAL_DMA_IRQHandler+0x694>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d045      	beq.n	8002192 <HAL_DMA_IRQHandler+0x516>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a82      	ldr	r2, [pc, #520]	; (8002314 <HAL_DMA_IRQHandler+0x698>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d040      	beq.n	8002192 <HAL_DMA_IRQHandler+0x516>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a80      	ldr	r2, [pc, #512]	; (8002318 <HAL_DMA_IRQHandler+0x69c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d03b      	beq.n	8002192 <HAL_DMA_IRQHandler+0x516>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a7f      	ldr	r2, [pc, #508]	; (800231c <HAL_DMA_IRQHandler+0x6a0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d036      	beq.n	8002192 <HAL_DMA_IRQHandler+0x516>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a7d      	ldr	r2, [pc, #500]	; (8002320 <HAL_DMA_IRQHandler+0x6a4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d031      	beq.n	8002192 <HAL_DMA_IRQHandler+0x516>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a7c      	ldr	r2, [pc, #496]	; (8002324 <HAL_DMA_IRQHandler+0x6a8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d02c      	beq.n	8002192 <HAL_DMA_IRQHandler+0x516>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a7a      	ldr	r2, [pc, #488]	; (8002328 <HAL_DMA_IRQHandler+0x6ac>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d027      	beq.n	8002192 <HAL_DMA_IRQHandler+0x516>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a79      	ldr	r2, [pc, #484]	; (800232c <HAL_DMA_IRQHandler+0x6b0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d022      	beq.n	8002192 <HAL_DMA_IRQHandler+0x516>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a77      	ldr	r2, [pc, #476]	; (8002330 <HAL_DMA_IRQHandler+0x6b4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01d      	beq.n	8002192 <HAL_DMA_IRQHandler+0x516>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a76      	ldr	r2, [pc, #472]	; (8002334 <HAL_DMA_IRQHandler+0x6b8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d018      	beq.n	8002192 <HAL_DMA_IRQHandler+0x516>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a74      	ldr	r2, [pc, #464]	; (8002338 <HAL_DMA_IRQHandler+0x6bc>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d013      	beq.n	8002192 <HAL_DMA_IRQHandler+0x516>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a73      	ldr	r2, [pc, #460]	; (800233c <HAL_DMA_IRQHandler+0x6c0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d00e      	beq.n	8002192 <HAL_DMA_IRQHandler+0x516>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a71      	ldr	r2, [pc, #452]	; (8002340 <HAL_DMA_IRQHandler+0x6c4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d009      	beq.n	8002192 <HAL_DMA_IRQHandler+0x516>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a70      	ldr	r2, [pc, #448]	; (8002344 <HAL_DMA_IRQHandler+0x6c8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d004      	beq.n	8002192 <HAL_DMA_IRQHandler+0x516>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a6e      	ldr	r2, [pc, #440]	; (8002348 <HAL_DMA_IRQHandler+0x6cc>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d10a      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x52c>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf14      	ite	ne
 80021a0:	2301      	movne	r3, #1
 80021a2:	2300      	moveq	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	e009      	b.n	80021bc <HAL_DMA_IRQHandler+0x540>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	bf14      	ite	ne
 80021b6:	2301      	movne	r3, #1
 80021b8:	2300      	moveq	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d03e      	beq.n	800223e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	2210      	movs	r2, #16
 80021ca:	409a      	lsls	r2, r3
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d018      	beq.n	8002210 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d108      	bne.n	80021fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d024      	beq.n	800223e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
 80021fc:	e01f      	b.n	800223e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01b      	beq.n	800223e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	4798      	blx	r3
 800220e:	e016      	b.n	800223e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d107      	bne.n	800222e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0208 	bic.w	r2, r2, #8
 800222c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	2220      	movs	r2, #32
 8002248:	409a      	lsls	r2, r3
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8110 	beq.w	8002474 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2c      	ldr	r2, [pc, #176]	; (800230c <HAL_DMA_IRQHandler+0x690>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d04a      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x678>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a2b      	ldr	r2, [pc, #172]	; (8002310 <HAL_DMA_IRQHandler+0x694>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d045      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x678>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a29      	ldr	r2, [pc, #164]	; (8002314 <HAL_DMA_IRQHandler+0x698>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d040      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x678>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a28      	ldr	r2, [pc, #160]	; (8002318 <HAL_DMA_IRQHandler+0x69c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d03b      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x678>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a26      	ldr	r2, [pc, #152]	; (800231c <HAL_DMA_IRQHandler+0x6a0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d036      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x678>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a25      	ldr	r2, [pc, #148]	; (8002320 <HAL_DMA_IRQHandler+0x6a4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d031      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x678>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a23      	ldr	r2, [pc, #140]	; (8002324 <HAL_DMA_IRQHandler+0x6a8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d02c      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x678>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a22      	ldr	r2, [pc, #136]	; (8002328 <HAL_DMA_IRQHandler+0x6ac>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d027      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x678>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a20      	ldr	r2, [pc, #128]	; (800232c <HAL_DMA_IRQHandler+0x6b0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d022      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x678>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <HAL_DMA_IRQHandler+0x6b4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d01d      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x678>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <HAL_DMA_IRQHandler+0x6b8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d018      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x678>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1c      	ldr	r2, [pc, #112]	; (8002338 <HAL_DMA_IRQHandler+0x6bc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d013      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x678>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1a      	ldr	r2, [pc, #104]	; (800233c <HAL_DMA_IRQHandler+0x6c0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00e      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x678>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a19      	ldr	r2, [pc, #100]	; (8002340 <HAL_DMA_IRQHandler+0x6c4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d009      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x678>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a17      	ldr	r2, [pc, #92]	; (8002344 <HAL_DMA_IRQHandler+0x6c8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d004      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x678>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a16      	ldr	r2, [pc, #88]	; (8002348 <HAL_DMA_IRQHandler+0x6cc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d12b      	bne.n	800234c <HAL_DMA_IRQHandler+0x6d0>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bf14      	ite	ne
 8002302:	2301      	movne	r3, #1
 8002304:	2300      	moveq	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	e02a      	b.n	8002360 <HAL_DMA_IRQHandler+0x6e4>
 800230a:	bf00      	nop
 800230c:	40020010 	.word	0x40020010
 8002310:	40020028 	.word	0x40020028
 8002314:	40020040 	.word	0x40020040
 8002318:	40020058 	.word	0x40020058
 800231c:	40020070 	.word	0x40020070
 8002320:	40020088 	.word	0x40020088
 8002324:	400200a0 	.word	0x400200a0
 8002328:	400200b8 	.word	0x400200b8
 800232c:	40020410 	.word	0x40020410
 8002330:	40020428 	.word	0x40020428
 8002334:	40020440 	.word	0x40020440
 8002338:	40020458 	.word	0x40020458
 800233c:	40020470 	.word	0x40020470
 8002340:	40020488 	.word	0x40020488
 8002344:	400204a0 	.word	0x400204a0
 8002348:	400204b8 	.word	0x400204b8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	bf14      	ite	ne
 800235a:	2301      	movne	r3, #1
 800235c:	2300      	moveq	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 8087 	beq.w	8002474 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236a:	f003 031f 	and.w	r3, r3, #31
 800236e:	2220      	movs	r2, #32
 8002370:	409a      	lsls	r2, r3
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b04      	cmp	r3, #4
 8002380:	d139      	bne.n	80023f6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0216 	bic.w	r2, r2, #22
 8002390:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023a0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d103      	bne.n	80023b2 <HAL_DMA_IRQHandler+0x736>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0208 	bic.w	r2, r2, #8
 80023c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	223f      	movs	r2, #63	; 0x3f
 80023cc:	409a      	lsls	r2, r3
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 834a 	beq.w	8002a80 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
          }
          return;
 80023f4:	e344      	b.n	8002a80 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d018      	beq.n	8002436 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d108      	bne.n	8002424 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	2b00      	cmp	r3, #0
 8002418:	d02c      	beq.n	8002474 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	4798      	blx	r3
 8002422:	e027      	b.n	8002474 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002428:	2b00      	cmp	r3, #0
 800242a:	d023      	beq.n	8002474 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
 8002434:	e01e      	b.n	8002474 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10f      	bne.n	8002464 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0210 	bic.w	r2, r2, #16
 8002452:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8306 	beq.w	8002a8a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 8088 	beq.w	800259c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2204      	movs	r2, #4
 8002490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a7a      	ldr	r2, [pc, #488]	; (8002684 <HAL_DMA_IRQHandler+0xa08>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d04a      	beq.n	8002534 <HAL_DMA_IRQHandler+0x8b8>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a79      	ldr	r2, [pc, #484]	; (8002688 <HAL_DMA_IRQHandler+0xa0c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d045      	beq.n	8002534 <HAL_DMA_IRQHandler+0x8b8>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a77      	ldr	r2, [pc, #476]	; (800268c <HAL_DMA_IRQHandler+0xa10>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d040      	beq.n	8002534 <HAL_DMA_IRQHandler+0x8b8>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a76      	ldr	r2, [pc, #472]	; (8002690 <HAL_DMA_IRQHandler+0xa14>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d03b      	beq.n	8002534 <HAL_DMA_IRQHandler+0x8b8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a74      	ldr	r2, [pc, #464]	; (8002694 <HAL_DMA_IRQHandler+0xa18>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d036      	beq.n	8002534 <HAL_DMA_IRQHandler+0x8b8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a73      	ldr	r2, [pc, #460]	; (8002698 <HAL_DMA_IRQHandler+0xa1c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d031      	beq.n	8002534 <HAL_DMA_IRQHandler+0x8b8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a71      	ldr	r2, [pc, #452]	; (800269c <HAL_DMA_IRQHandler+0xa20>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d02c      	beq.n	8002534 <HAL_DMA_IRQHandler+0x8b8>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a70      	ldr	r2, [pc, #448]	; (80026a0 <HAL_DMA_IRQHandler+0xa24>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d027      	beq.n	8002534 <HAL_DMA_IRQHandler+0x8b8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a6e      	ldr	r2, [pc, #440]	; (80026a4 <HAL_DMA_IRQHandler+0xa28>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d022      	beq.n	8002534 <HAL_DMA_IRQHandler+0x8b8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6d      	ldr	r2, [pc, #436]	; (80026a8 <HAL_DMA_IRQHandler+0xa2c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d01d      	beq.n	8002534 <HAL_DMA_IRQHandler+0x8b8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a6b      	ldr	r2, [pc, #428]	; (80026ac <HAL_DMA_IRQHandler+0xa30>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d018      	beq.n	8002534 <HAL_DMA_IRQHandler+0x8b8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a6a      	ldr	r2, [pc, #424]	; (80026b0 <HAL_DMA_IRQHandler+0xa34>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d013      	beq.n	8002534 <HAL_DMA_IRQHandler+0x8b8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a68      	ldr	r2, [pc, #416]	; (80026b4 <HAL_DMA_IRQHandler+0xa38>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00e      	beq.n	8002534 <HAL_DMA_IRQHandler+0x8b8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a67      	ldr	r2, [pc, #412]	; (80026b8 <HAL_DMA_IRQHandler+0xa3c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d009      	beq.n	8002534 <HAL_DMA_IRQHandler+0x8b8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a65      	ldr	r2, [pc, #404]	; (80026bc <HAL_DMA_IRQHandler+0xa40>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_DMA_IRQHandler+0x8b8>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a64      	ldr	r2, [pc, #400]	; (80026c0 <HAL_DMA_IRQHandler+0xa44>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d108      	bne.n	8002546 <HAL_DMA_IRQHandler+0x8ca>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e007      	b.n	8002556 <HAL_DMA_IRQHandler+0x8da>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3301      	adds	r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255e:	429a      	cmp	r2, r3
 8002560:	d307      	bcc.n	8002572 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f2      	bne.n	8002556 <HAL_DMA_IRQHandler+0x8da>
 8002570:	e000      	b.n	8002574 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002572:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d004      	beq.n	800258c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2203      	movs	r2, #3
 8002586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800258a:	e003      	b.n	8002594 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8272 	beq.w	8002a8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	4798      	blx	r3
 80025ae:	e26c      	b.n	8002a8a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a43      	ldr	r2, [pc, #268]	; (80026c4 <HAL_DMA_IRQHandler+0xa48>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d022      	beq.n	8002600 <HAL_DMA_IRQHandler+0x984>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a42      	ldr	r2, [pc, #264]	; (80026c8 <HAL_DMA_IRQHandler+0xa4c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d01d      	beq.n	8002600 <HAL_DMA_IRQHandler+0x984>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a40      	ldr	r2, [pc, #256]	; (80026cc <HAL_DMA_IRQHandler+0xa50>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d018      	beq.n	8002600 <HAL_DMA_IRQHandler+0x984>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a3f      	ldr	r2, [pc, #252]	; (80026d0 <HAL_DMA_IRQHandler+0xa54>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d013      	beq.n	8002600 <HAL_DMA_IRQHandler+0x984>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a3d      	ldr	r2, [pc, #244]	; (80026d4 <HAL_DMA_IRQHandler+0xa58>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00e      	beq.n	8002600 <HAL_DMA_IRQHandler+0x984>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a3c      	ldr	r2, [pc, #240]	; (80026d8 <HAL_DMA_IRQHandler+0xa5c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d009      	beq.n	8002600 <HAL_DMA_IRQHandler+0x984>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a3a      	ldr	r2, [pc, #232]	; (80026dc <HAL_DMA_IRQHandler+0xa60>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d004      	beq.n	8002600 <HAL_DMA_IRQHandler+0x984>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a39      	ldr	r2, [pc, #228]	; (80026e0 <HAL_DMA_IRQHandler+0xa64>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d101      	bne.n	8002604 <HAL_DMA_IRQHandler+0x988>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_DMA_IRQHandler+0x98a>
 8002604:	2300      	movs	r3, #0
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 823f 	beq.w	8002a8a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	2204      	movs	r2, #4
 800261e:	409a      	lsls	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80cd 	beq.w	80027c4 <HAL_DMA_IRQHandler+0xb48>
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80c7 	beq.w	80027c4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	2204      	movs	r2, #4
 8002640:	409a      	lsls	r2, r3
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d049      	beq.n	80026e4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d109      	bne.n	800266e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8210 	beq.w	8002a84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800266c:	e20a      	b.n	8002a84 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8206 	beq.w	8002a84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002680:	e200      	b.n	8002a84 <HAL_DMA_IRQHandler+0xe08>
 8002682:	bf00      	nop
 8002684:	40020010 	.word	0x40020010
 8002688:	40020028 	.word	0x40020028
 800268c:	40020040 	.word	0x40020040
 8002690:	40020058 	.word	0x40020058
 8002694:	40020070 	.word	0x40020070
 8002698:	40020088 	.word	0x40020088
 800269c:	400200a0 	.word	0x400200a0
 80026a0:	400200b8 	.word	0x400200b8
 80026a4:	40020410 	.word	0x40020410
 80026a8:	40020428 	.word	0x40020428
 80026ac:	40020440 	.word	0x40020440
 80026b0:	40020458 	.word	0x40020458
 80026b4:	40020470 	.word	0x40020470
 80026b8:	40020488 	.word	0x40020488
 80026bc:	400204a0 	.word	0x400204a0
 80026c0:	400204b8 	.word	0x400204b8
 80026c4:	58025408 	.word	0x58025408
 80026c8:	5802541c 	.word	0x5802541c
 80026cc:	58025430 	.word	0x58025430
 80026d0:	58025444 	.word	0x58025444
 80026d4:	58025458 	.word	0x58025458
 80026d8:	5802546c 	.word	0x5802546c
 80026dc:	58025480 	.word	0x58025480
 80026e0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d160      	bne.n	80027b0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a7f      	ldr	r2, [pc, #508]	; (80028f0 <HAL_DMA_IRQHandler+0xc74>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d04a      	beq.n	800278e <HAL_DMA_IRQHandler+0xb12>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a7d      	ldr	r2, [pc, #500]	; (80028f4 <HAL_DMA_IRQHandler+0xc78>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d045      	beq.n	800278e <HAL_DMA_IRQHandler+0xb12>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a7c      	ldr	r2, [pc, #496]	; (80028f8 <HAL_DMA_IRQHandler+0xc7c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d040      	beq.n	800278e <HAL_DMA_IRQHandler+0xb12>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a7a      	ldr	r2, [pc, #488]	; (80028fc <HAL_DMA_IRQHandler+0xc80>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d03b      	beq.n	800278e <HAL_DMA_IRQHandler+0xb12>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a79      	ldr	r2, [pc, #484]	; (8002900 <HAL_DMA_IRQHandler+0xc84>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d036      	beq.n	800278e <HAL_DMA_IRQHandler+0xb12>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a77      	ldr	r2, [pc, #476]	; (8002904 <HAL_DMA_IRQHandler+0xc88>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d031      	beq.n	800278e <HAL_DMA_IRQHandler+0xb12>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a76      	ldr	r2, [pc, #472]	; (8002908 <HAL_DMA_IRQHandler+0xc8c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d02c      	beq.n	800278e <HAL_DMA_IRQHandler+0xb12>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a74      	ldr	r2, [pc, #464]	; (800290c <HAL_DMA_IRQHandler+0xc90>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d027      	beq.n	800278e <HAL_DMA_IRQHandler+0xb12>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a73      	ldr	r2, [pc, #460]	; (8002910 <HAL_DMA_IRQHandler+0xc94>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d022      	beq.n	800278e <HAL_DMA_IRQHandler+0xb12>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a71      	ldr	r2, [pc, #452]	; (8002914 <HAL_DMA_IRQHandler+0xc98>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01d      	beq.n	800278e <HAL_DMA_IRQHandler+0xb12>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a70      	ldr	r2, [pc, #448]	; (8002918 <HAL_DMA_IRQHandler+0xc9c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d018      	beq.n	800278e <HAL_DMA_IRQHandler+0xb12>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a6e      	ldr	r2, [pc, #440]	; (800291c <HAL_DMA_IRQHandler+0xca0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_DMA_IRQHandler+0xb12>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6d      	ldr	r2, [pc, #436]	; (8002920 <HAL_DMA_IRQHandler+0xca4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d00e      	beq.n	800278e <HAL_DMA_IRQHandler+0xb12>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a6b      	ldr	r2, [pc, #428]	; (8002924 <HAL_DMA_IRQHandler+0xca8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d009      	beq.n	800278e <HAL_DMA_IRQHandler+0xb12>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a6a      	ldr	r2, [pc, #424]	; (8002928 <HAL_DMA_IRQHandler+0xcac>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d004      	beq.n	800278e <HAL_DMA_IRQHandler+0xb12>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a68      	ldr	r2, [pc, #416]	; (800292c <HAL_DMA_IRQHandler+0xcb0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d108      	bne.n	80027a0 <HAL_DMA_IRQHandler+0xb24>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0208 	bic.w	r2, r2, #8
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	e007      	b.n	80027b0 <HAL_DMA_IRQHandler+0xb34>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0204 	bic.w	r2, r2, #4
 80027ae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 8165 	beq.w	8002a84 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027c2:	e15f      	b.n	8002a84 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	2202      	movs	r2, #2
 80027ce:	409a      	lsls	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80c5 	beq.w	8002964 <HAL_DMA_IRQHandler+0xce8>
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80bf 	beq.w	8002964 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	2202      	movs	r2, #2
 80027f0:	409a      	lsls	r2, r3
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d018      	beq.n	8002832 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 813a 	beq.w	8002a88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800281c:	e134      	b.n	8002a88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8130 	beq.w	8002a88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002830:	e12a      	b.n	8002a88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b00      	cmp	r3, #0
 800283a:	f040 8089 	bne.w	8002950 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a2b      	ldr	r2, [pc, #172]	; (80028f0 <HAL_DMA_IRQHandler+0xc74>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d04a      	beq.n	80028de <HAL_DMA_IRQHandler+0xc62>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a29      	ldr	r2, [pc, #164]	; (80028f4 <HAL_DMA_IRQHandler+0xc78>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d045      	beq.n	80028de <HAL_DMA_IRQHandler+0xc62>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a28      	ldr	r2, [pc, #160]	; (80028f8 <HAL_DMA_IRQHandler+0xc7c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d040      	beq.n	80028de <HAL_DMA_IRQHandler+0xc62>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a26      	ldr	r2, [pc, #152]	; (80028fc <HAL_DMA_IRQHandler+0xc80>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d03b      	beq.n	80028de <HAL_DMA_IRQHandler+0xc62>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a25      	ldr	r2, [pc, #148]	; (8002900 <HAL_DMA_IRQHandler+0xc84>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d036      	beq.n	80028de <HAL_DMA_IRQHandler+0xc62>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a23      	ldr	r2, [pc, #140]	; (8002904 <HAL_DMA_IRQHandler+0xc88>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d031      	beq.n	80028de <HAL_DMA_IRQHandler+0xc62>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a22      	ldr	r2, [pc, #136]	; (8002908 <HAL_DMA_IRQHandler+0xc8c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d02c      	beq.n	80028de <HAL_DMA_IRQHandler+0xc62>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a20      	ldr	r2, [pc, #128]	; (800290c <HAL_DMA_IRQHandler+0xc90>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d027      	beq.n	80028de <HAL_DMA_IRQHandler+0xc62>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <HAL_DMA_IRQHandler+0xc94>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d022      	beq.n	80028de <HAL_DMA_IRQHandler+0xc62>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1d      	ldr	r2, [pc, #116]	; (8002914 <HAL_DMA_IRQHandler+0xc98>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01d      	beq.n	80028de <HAL_DMA_IRQHandler+0xc62>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1c      	ldr	r2, [pc, #112]	; (8002918 <HAL_DMA_IRQHandler+0xc9c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d018      	beq.n	80028de <HAL_DMA_IRQHandler+0xc62>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1a      	ldr	r2, [pc, #104]	; (800291c <HAL_DMA_IRQHandler+0xca0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d013      	beq.n	80028de <HAL_DMA_IRQHandler+0xc62>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a19      	ldr	r2, [pc, #100]	; (8002920 <HAL_DMA_IRQHandler+0xca4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00e      	beq.n	80028de <HAL_DMA_IRQHandler+0xc62>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a17      	ldr	r2, [pc, #92]	; (8002924 <HAL_DMA_IRQHandler+0xca8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d009      	beq.n	80028de <HAL_DMA_IRQHandler+0xc62>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a16      	ldr	r2, [pc, #88]	; (8002928 <HAL_DMA_IRQHandler+0xcac>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d004      	beq.n	80028de <HAL_DMA_IRQHandler+0xc62>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a14      	ldr	r2, [pc, #80]	; (800292c <HAL_DMA_IRQHandler+0xcb0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d128      	bne.n	8002930 <HAL_DMA_IRQHandler+0xcb4>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0214 	bic.w	r2, r2, #20
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e027      	b.n	8002940 <HAL_DMA_IRQHandler+0xcc4>
 80028f0:	40020010 	.word	0x40020010
 80028f4:	40020028 	.word	0x40020028
 80028f8:	40020040 	.word	0x40020040
 80028fc:	40020058 	.word	0x40020058
 8002900:	40020070 	.word	0x40020070
 8002904:	40020088 	.word	0x40020088
 8002908:	400200a0 	.word	0x400200a0
 800290c:	400200b8 	.word	0x400200b8
 8002910:	40020410 	.word	0x40020410
 8002914:	40020428 	.word	0x40020428
 8002918:	40020440 	.word	0x40020440
 800291c:	40020458 	.word	0x40020458
 8002920:	40020470 	.word	0x40020470
 8002924:	40020488 	.word	0x40020488
 8002928:	400204a0 	.word	0x400204a0
 800292c:	400204b8 	.word	0x400204b8
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 020a 	bic.w	r2, r2, #10
 800293e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8097 	beq.w	8002a88 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002962:	e091      	b.n	8002a88 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	2208      	movs	r2, #8
 800296e:	409a      	lsls	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8088 	beq.w	8002a8a <HAL_DMA_IRQHandler+0xe0e>
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8082 	beq.w	8002a8a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a41      	ldr	r2, [pc, #260]	; (8002a90 <HAL_DMA_IRQHandler+0xe14>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d04a      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xdaa>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a3f      	ldr	r2, [pc, #252]	; (8002a94 <HAL_DMA_IRQHandler+0xe18>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d045      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xdaa>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a3e      	ldr	r2, [pc, #248]	; (8002a98 <HAL_DMA_IRQHandler+0xe1c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d040      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xdaa>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a3c      	ldr	r2, [pc, #240]	; (8002a9c <HAL_DMA_IRQHandler+0xe20>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d03b      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xdaa>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a3b      	ldr	r2, [pc, #236]	; (8002aa0 <HAL_DMA_IRQHandler+0xe24>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d036      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xdaa>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a39      	ldr	r2, [pc, #228]	; (8002aa4 <HAL_DMA_IRQHandler+0xe28>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d031      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xdaa>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a38      	ldr	r2, [pc, #224]	; (8002aa8 <HAL_DMA_IRQHandler+0xe2c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d02c      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xdaa>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a36      	ldr	r2, [pc, #216]	; (8002aac <HAL_DMA_IRQHandler+0xe30>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d027      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xdaa>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a35      	ldr	r2, [pc, #212]	; (8002ab0 <HAL_DMA_IRQHandler+0xe34>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d022      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xdaa>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a33      	ldr	r2, [pc, #204]	; (8002ab4 <HAL_DMA_IRQHandler+0xe38>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d01d      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xdaa>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a32      	ldr	r2, [pc, #200]	; (8002ab8 <HAL_DMA_IRQHandler+0xe3c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d018      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xdaa>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a30      	ldr	r2, [pc, #192]	; (8002abc <HAL_DMA_IRQHandler+0xe40>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xdaa>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a2f      	ldr	r2, [pc, #188]	; (8002ac0 <HAL_DMA_IRQHandler+0xe44>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d00e      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xdaa>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a2d      	ldr	r2, [pc, #180]	; (8002ac4 <HAL_DMA_IRQHandler+0xe48>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d009      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xdaa>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2c      	ldr	r2, [pc, #176]	; (8002ac8 <HAL_DMA_IRQHandler+0xe4c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d004      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xdaa>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2a      	ldr	r2, [pc, #168]	; (8002acc <HAL_DMA_IRQHandler+0xe50>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d108      	bne.n	8002a38 <HAL_DMA_IRQHandler+0xdbc>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 021c 	bic.w	r2, r2, #28
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e007      	b.n	8002a48 <HAL_DMA_IRQHandler+0xdcc>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 020e 	bic.w	r2, r2, #14
 8002a46:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	2201      	movs	r2, #1
 8002a52:	409a      	lsls	r2, r3
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
 8002a7e:	e004      	b.n	8002a8a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002a80:	bf00      	nop
 8002a82:	e002      	b.n	8002a8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a84:	bf00      	nop
 8002a86:	e000      	b.n	8002a8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a88:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002a8a:	3728      	adds	r7, #40	; 0x28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40020010 	.word	0x40020010
 8002a94:	40020028 	.word	0x40020028
 8002a98:	40020040 	.word	0x40020040
 8002a9c:	40020058 	.word	0x40020058
 8002aa0:	40020070 	.word	0x40020070
 8002aa4:	40020088 	.word	0x40020088
 8002aa8:	400200a0 	.word	0x400200a0
 8002aac:	400200b8 	.word	0x400200b8
 8002ab0:	40020410 	.word	0x40020410
 8002ab4:	40020428 	.word	0x40020428
 8002ab8:	40020440 	.word	0x40020440
 8002abc:	40020458 	.word	0x40020458
 8002ac0:	40020470 	.word	0x40020470
 8002ac4:	40020488 	.word	0x40020488
 8002ac8:	400204a0 	.word	0x400204a0
 8002acc:	400204b8 	.word	0x400204b8

08002ad0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a7f      	ldr	r2, [pc, #508]	; (8002cec <DMA_SetConfig+0x21c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d072      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a7d      	ldr	r2, [pc, #500]	; (8002cf0 <DMA_SetConfig+0x220>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d06d      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a7c      	ldr	r2, [pc, #496]	; (8002cf4 <DMA_SetConfig+0x224>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d068      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a7a      	ldr	r2, [pc, #488]	; (8002cf8 <DMA_SetConfig+0x228>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d063      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a79      	ldr	r2, [pc, #484]	; (8002cfc <DMA_SetConfig+0x22c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d05e      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a77      	ldr	r2, [pc, #476]	; (8002d00 <DMA_SetConfig+0x230>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d059      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a76      	ldr	r2, [pc, #472]	; (8002d04 <DMA_SetConfig+0x234>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d054      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a74      	ldr	r2, [pc, #464]	; (8002d08 <DMA_SetConfig+0x238>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d04f      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a73      	ldr	r2, [pc, #460]	; (8002d0c <DMA_SetConfig+0x23c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d04a      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a71      	ldr	r2, [pc, #452]	; (8002d10 <DMA_SetConfig+0x240>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d045      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a70      	ldr	r2, [pc, #448]	; (8002d14 <DMA_SetConfig+0x244>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d040      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a6e      	ldr	r2, [pc, #440]	; (8002d18 <DMA_SetConfig+0x248>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d03b      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a6d      	ldr	r2, [pc, #436]	; (8002d1c <DMA_SetConfig+0x24c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d036      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a6b      	ldr	r2, [pc, #428]	; (8002d20 <DMA_SetConfig+0x250>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d031      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6a      	ldr	r2, [pc, #424]	; (8002d24 <DMA_SetConfig+0x254>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d02c      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a68      	ldr	r2, [pc, #416]	; (8002d28 <DMA_SetConfig+0x258>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d027      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a67      	ldr	r2, [pc, #412]	; (8002d2c <DMA_SetConfig+0x25c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d022      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a65      	ldr	r2, [pc, #404]	; (8002d30 <DMA_SetConfig+0x260>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01d      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a64      	ldr	r2, [pc, #400]	; (8002d34 <DMA_SetConfig+0x264>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d018      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a62      	ldr	r2, [pc, #392]	; (8002d38 <DMA_SetConfig+0x268>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d013      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a61      	ldr	r2, [pc, #388]	; (8002d3c <DMA_SetConfig+0x26c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00e      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a5f      	ldr	r2, [pc, #380]	; (8002d40 <DMA_SetConfig+0x270>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d009      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a5e      	ldr	r2, [pc, #376]	; (8002d44 <DMA_SetConfig+0x274>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <DMA_SetConfig+0x10a>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a5c      	ldr	r2, [pc, #368]	; (8002d48 <DMA_SetConfig+0x278>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d101      	bne.n	8002bde <DMA_SetConfig+0x10e>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <DMA_SetConfig+0x110>
 8002bde:	2300      	movs	r3, #0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00d      	beq.n	8002c00 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002bec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d004      	beq.n	8002c00 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002bfe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a39      	ldr	r2, [pc, #228]	; (8002cec <DMA_SetConfig+0x21c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d04a      	beq.n	8002ca0 <DMA_SetConfig+0x1d0>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a38      	ldr	r2, [pc, #224]	; (8002cf0 <DMA_SetConfig+0x220>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d045      	beq.n	8002ca0 <DMA_SetConfig+0x1d0>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a36      	ldr	r2, [pc, #216]	; (8002cf4 <DMA_SetConfig+0x224>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d040      	beq.n	8002ca0 <DMA_SetConfig+0x1d0>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a35      	ldr	r2, [pc, #212]	; (8002cf8 <DMA_SetConfig+0x228>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d03b      	beq.n	8002ca0 <DMA_SetConfig+0x1d0>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a33      	ldr	r2, [pc, #204]	; (8002cfc <DMA_SetConfig+0x22c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d036      	beq.n	8002ca0 <DMA_SetConfig+0x1d0>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a32      	ldr	r2, [pc, #200]	; (8002d00 <DMA_SetConfig+0x230>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d031      	beq.n	8002ca0 <DMA_SetConfig+0x1d0>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a30      	ldr	r2, [pc, #192]	; (8002d04 <DMA_SetConfig+0x234>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d02c      	beq.n	8002ca0 <DMA_SetConfig+0x1d0>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a2f      	ldr	r2, [pc, #188]	; (8002d08 <DMA_SetConfig+0x238>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d027      	beq.n	8002ca0 <DMA_SetConfig+0x1d0>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a2d      	ldr	r2, [pc, #180]	; (8002d0c <DMA_SetConfig+0x23c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d022      	beq.n	8002ca0 <DMA_SetConfig+0x1d0>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a2c      	ldr	r2, [pc, #176]	; (8002d10 <DMA_SetConfig+0x240>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d01d      	beq.n	8002ca0 <DMA_SetConfig+0x1d0>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a2a      	ldr	r2, [pc, #168]	; (8002d14 <DMA_SetConfig+0x244>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d018      	beq.n	8002ca0 <DMA_SetConfig+0x1d0>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a29      	ldr	r2, [pc, #164]	; (8002d18 <DMA_SetConfig+0x248>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d013      	beq.n	8002ca0 <DMA_SetConfig+0x1d0>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a27      	ldr	r2, [pc, #156]	; (8002d1c <DMA_SetConfig+0x24c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00e      	beq.n	8002ca0 <DMA_SetConfig+0x1d0>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a26      	ldr	r2, [pc, #152]	; (8002d20 <DMA_SetConfig+0x250>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d009      	beq.n	8002ca0 <DMA_SetConfig+0x1d0>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a24      	ldr	r2, [pc, #144]	; (8002d24 <DMA_SetConfig+0x254>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d004      	beq.n	8002ca0 <DMA_SetConfig+0x1d0>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a23      	ldr	r2, [pc, #140]	; (8002d28 <DMA_SetConfig+0x258>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d101      	bne.n	8002ca4 <DMA_SetConfig+0x1d4>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <DMA_SetConfig+0x1d6>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d059      	beq.n	8002d5e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	223f      	movs	r2, #63	; 0x3f
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cc8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b40      	cmp	r3, #64	; 0x40
 8002cd8:	d138      	bne.n	8002d4c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002cea:	e086      	b.n	8002dfa <DMA_SetConfig+0x32a>
 8002cec:	40020010 	.word	0x40020010
 8002cf0:	40020028 	.word	0x40020028
 8002cf4:	40020040 	.word	0x40020040
 8002cf8:	40020058 	.word	0x40020058
 8002cfc:	40020070 	.word	0x40020070
 8002d00:	40020088 	.word	0x40020088
 8002d04:	400200a0 	.word	0x400200a0
 8002d08:	400200b8 	.word	0x400200b8
 8002d0c:	40020410 	.word	0x40020410
 8002d10:	40020428 	.word	0x40020428
 8002d14:	40020440 	.word	0x40020440
 8002d18:	40020458 	.word	0x40020458
 8002d1c:	40020470 	.word	0x40020470
 8002d20:	40020488 	.word	0x40020488
 8002d24:	400204a0 	.word	0x400204a0
 8002d28:	400204b8 	.word	0x400204b8
 8002d2c:	58025408 	.word	0x58025408
 8002d30:	5802541c 	.word	0x5802541c
 8002d34:	58025430 	.word	0x58025430
 8002d38:	58025444 	.word	0x58025444
 8002d3c:	58025458 	.word	0x58025458
 8002d40:	5802546c 	.word	0x5802546c
 8002d44:	58025480 	.word	0x58025480
 8002d48:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	60da      	str	r2, [r3, #12]
}
 8002d5c:	e04d      	b.n	8002dfa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a29      	ldr	r2, [pc, #164]	; (8002e08 <DMA_SetConfig+0x338>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d022      	beq.n	8002dae <DMA_SetConfig+0x2de>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a27      	ldr	r2, [pc, #156]	; (8002e0c <DMA_SetConfig+0x33c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01d      	beq.n	8002dae <DMA_SetConfig+0x2de>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a26      	ldr	r2, [pc, #152]	; (8002e10 <DMA_SetConfig+0x340>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d018      	beq.n	8002dae <DMA_SetConfig+0x2de>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a24      	ldr	r2, [pc, #144]	; (8002e14 <DMA_SetConfig+0x344>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <DMA_SetConfig+0x2de>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a23      	ldr	r2, [pc, #140]	; (8002e18 <DMA_SetConfig+0x348>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00e      	beq.n	8002dae <DMA_SetConfig+0x2de>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a21      	ldr	r2, [pc, #132]	; (8002e1c <DMA_SetConfig+0x34c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d009      	beq.n	8002dae <DMA_SetConfig+0x2de>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a20      	ldr	r2, [pc, #128]	; (8002e20 <DMA_SetConfig+0x350>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d004      	beq.n	8002dae <DMA_SetConfig+0x2de>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a1e      	ldr	r2, [pc, #120]	; (8002e24 <DMA_SetConfig+0x354>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <DMA_SetConfig+0x2e2>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <DMA_SetConfig+0x2e4>
 8002db2:	2300      	movs	r3, #0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d020      	beq.n	8002dfa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	d108      	bne.n	8002dea <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	60da      	str	r2, [r3, #12]
}
 8002de8:	e007      	b.n	8002dfa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	60da      	str	r2, [r3, #12]
}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	58025408 	.word	0x58025408
 8002e0c:	5802541c 	.word	0x5802541c
 8002e10:	58025430 	.word	0x58025430
 8002e14:	58025444 	.word	0x58025444
 8002e18:	58025458 	.word	0x58025458
 8002e1c:	5802546c 	.word	0x5802546c
 8002e20:	58025480 	.word	0x58025480
 8002e24:	58025494 	.word	0x58025494

08002e28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a42      	ldr	r2, [pc, #264]	; (8002f40 <DMA_CalcBaseAndBitshift+0x118>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d04a      	beq.n	8002ed0 <DMA_CalcBaseAndBitshift+0xa8>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a41      	ldr	r2, [pc, #260]	; (8002f44 <DMA_CalcBaseAndBitshift+0x11c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d045      	beq.n	8002ed0 <DMA_CalcBaseAndBitshift+0xa8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a3f      	ldr	r2, [pc, #252]	; (8002f48 <DMA_CalcBaseAndBitshift+0x120>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d040      	beq.n	8002ed0 <DMA_CalcBaseAndBitshift+0xa8>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a3e      	ldr	r2, [pc, #248]	; (8002f4c <DMA_CalcBaseAndBitshift+0x124>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d03b      	beq.n	8002ed0 <DMA_CalcBaseAndBitshift+0xa8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a3c      	ldr	r2, [pc, #240]	; (8002f50 <DMA_CalcBaseAndBitshift+0x128>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d036      	beq.n	8002ed0 <DMA_CalcBaseAndBitshift+0xa8>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a3b      	ldr	r2, [pc, #236]	; (8002f54 <DMA_CalcBaseAndBitshift+0x12c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d031      	beq.n	8002ed0 <DMA_CalcBaseAndBitshift+0xa8>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a39      	ldr	r2, [pc, #228]	; (8002f58 <DMA_CalcBaseAndBitshift+0x130>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d02c      	beq.n	8002ed0 <DMA_CalcBaseAndBitshift+0xa8>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a38      	ldr	r2, [pc, #224]	; (8002f5c <DMA_CalcBaseAndBitshift+0x134>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d027      	beq.n	8002ed0 <DMA_CalcBaseAndBitshift+0xa8>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a36      	ldr	r2, [pc, #216]	; (8002f60 <DMA_CalcBaseAndBitshift+0x138>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d022      	beq.n	8002ed0 <DMA_CalcBaseAndBitshift+0xa8>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a35      	ldr	r2, [pc, #212]	; (8002f64 <DMA_CalcBaseAndBitshift+0x13c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d01d      	beq.n	8002ed0 <DMA_CalcBaseAndBitshift+0xa8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a33      	ldr	r2, [pc, #204]	; (8002f68 <DMA_CalcBaseAndBitshift+0x140>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d018      	beq.n	8002ed0 <DMA_CalcBaseAndBitshift+0xa8>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a32      	ldr	r2, [pc, #200]	; (8002f6c <DMA_CalcBaseAndBitshift+0x144>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d013      	beq.n	8002ed0 <DMA_CalcBaseAndBitshift+0xa8>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a30      	ldr	r2, [pc, #192]	; (8002f70 <DMA_CalcBaseAndBitshift+0x148>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00e      	beq.n	8002ed0 <DMA_CalcBaseAndBitshift+0xa8>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a2f      	ldr	r2, [pc, #188]	; (8002f74 <DMA_CalcBaseAndBitshift+0x14c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d009      	beq.n	8002ed0 <DMA_CalcBaseAndBitshift+0xa8>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a2d      	ldr	r2, [pc, #180]	; (8002f78 <DMA_CalcBaseAndBitshift+0x150>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <DMA_CalcBaseAndBitshift+0xa8>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a2c      	ldr	r2, [pc, #176]	; (8002f7c <DMA_CalcBaseAndBitshift+0x154>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d101      	bne.n	8002ed4 <DMA_CalcBaseAndBitshift+0xac>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <DMA_CalcBaseAndBitshift+0xae>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d024      	beq.n	8002f24 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	3b10      	subs	r3, #16
 8002ee2:	4a27      	ldr	r2, [pc, #156]	; (8002f80 <DMA_CalcBaseAndBitshift+0x158>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	4a24      	ldr	r2, [pc, #144]	; (8002f84 <DMA_CalcBaseAndBitshift+0x15c>)
 8002ef4:	5cd3      	ldrb	r3, [r2, r3]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d908      	bls.n	8002f14 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b1f      	ldr	r3, [pc, #124]	; (8002f88 <DMA_CalcBaseAndBitshift+0x160>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	1d1a      	adds	r2, r3, #4
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	659a      	str	r2, [r3, #88]	; 0x58
 8002f12:	e00d      	b.n	8002f30 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <DMA_CalcBaseAndBitshift+0x160>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6593      	str	r3, [r2, #88]	; 0x58
 8002f22:	e005      	b.n	8002f30 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40020010 	.word	0x40020010
 8002f44:	40020028 	.word	0x40020028
 8002f48:	40020040 	.word	0x40020040
 8002f4c:	40020058 	.word	0x40020058
 8002f50:	40020070 	.word	0x40020070
 8002f54:	40020088 	.word	0x40020088
 8002f58:	400200a0 	.word	0x400200a0
 8002f5c:	400200b8 	.word	0x400200b8
 8002f60:	40020410 	.word	0x40020410
 8002f64:	40020428 	.word	0x40020428
 8002f68:	40020440 	.word	0x40020440
 8002f6c:	40020458 	.word	0x40020458
 8002f70:	40020470 	.word	0x40020470
 8002f74:	40020488 	.word	0x40020488
 8002f78:	400204a0 	.word	0x400204a0
 8002f7c:	400204b8 	.word	0x400204b8
 8002f80:	aaaaaaab 	.word	0xaaaaaaab
 8002f84:	080062a8 	.word	0x080062a8
 8002f88:	fffffc00 	.word	0xfffffc00

08002f8c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d120      	bne.n	8002fe2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d858      	bhi.n	800305a <DMA_CheckFifoParam+0xce>
 8002fa8:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <DMA_CheckFifoParam+0x24>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	08002fc1 	.word	0x08002fc1
 8002fb4:	08002fd3 	.word	0x08002fd3
 8002fb8:	08002fc1 	.word	0x08002fc1
 8002fbc:	0800305b 	.word	0x0800305b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d048      	beq.n	800305e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002fd0:	e045      	b.n	800305e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fda:	d142      	bne.n	8003062 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002fe0:	e03f      	b.n	8003062 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fea:	d123      	bne.n	8003034 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d838      	bhi.n	8003066 <DMA_CheckFifoParam+0xda>
 8002ff4:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <DMA_CheckFifoParam+0x70>)
 8002ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffa:	bf00      	nop
 8002ffc:	0800300d 	.word	0x0800300d
 8003000:	08003013 	.word	0x08003013
 8003004:	0800300d 	.word	0x0800300d
 8003008:	08003025 	.word	0x08003025
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
        break;
 8003010:	e030      	b.n	8003074 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d025      	beq.n	800306a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003022:	e022      	b.n	800306a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800302c:	d11f      	bne.n	800306e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003032:	e01c      	b.n	800306e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	2b02      	cmp	r3, #2
 800303a:	d902      	bls.n	8003042 <DMA_CheckFifoParam+0xb6>
 800303c:	2b03      	cmp	r3, #3
 800303e:	d003      	beq.n	8003048 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003040:	e018      	b.n	8003074 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
        break;
 8003046:	e015      	b.n	8003074 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00e      	beq.n	8003072 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
    break;
 8003058:	e00b      	b.n	8003072 <DMA_CheckFifoParam+0xe6>
        break;
 800305a:	bf00      	nop
 800305c:	e00a      	b.n	8003074 <DMA_CheckFifoParam+0xe8>
        break;
 800305e:	bf00      	nop
 8003060:	e008      	b.n	8003074 <DMA_CheckFifoParam+0xe8>
        break;
 8003062:	bf00      	nop
 8003064:	e006      	b.n	8003074 <DMA_CheckFifoParam+0xe8>
        break;
 8003066:	bf00      	nop
 8003068:	e004      	b.n	8003074 <DMA_CheckFifoParam+0xe8>
        break;
 800306a:	bf00      	nop
 800306c:	e002      	b.n	8003074 <DMA_CheckFifoParam+0xe8>
        break;
 800306e:	bf00      	nop
 8003070:	e000      	b.n	8003074 <DMA_CheckFifoParam+0xe8>
    break;
 8003072:	bf00      	nop
    }
  }

  return status;
 8003074:	7bfb      	ldrb	r3, [r7, #15]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop

08003084 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a38      	ldr	r2, [pc, #224]	; (8003178 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d022      	beq.n	80030e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a36      	ldr	r2, [pc, #216]	; (800317c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01d      	beq.n	80030e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a35      	ldr	r2, [pc, #212]	; (8003180 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d018      	beq.n	80030e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a33      	ldr	r2, [pc, #204]	; (8003184 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a32      	ldr	r2, [pc, #200]	; (8003188 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00e      	beq.n	80030e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a30      	ldr	r2, [pc, #192]	; (800318c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d009      	beq.n	80030e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a2f      	ldr	r2, [pc, #188]	; (8003190 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d004      	beq.n	80030e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a2d      	ldr	r2, [pc, #180]	; (8003194 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d101      	bne.n	80030e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80030e6:	2300      	movs	r3, #0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01a      	beq.n	8003122 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	3b08      	subs	r3, #8
 80030f4:	4a28      	ldr	r2, [pc, #160]	; (8003198 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4b26      	ldr	r3, [pc, #152]	; (800319c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	461a      	mov	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a24      	ldr	r2, [pc, #144]	; (80031a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003110:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	2201      	movs	r2, #1
 800311a:	409a      	lsls	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003120:	e024      	b.n	800316c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	3b10      	subs	r3, #16
 800312a:	4a1e      	ldr	r2, [pc, #120]	; (80031a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800312c:	fba2 2303 	umull	r2, r3, r2, r3
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4a1c      	ldr	r2, [pc, #112]	; (80031a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d806      	bhi.n	800314a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4a1b      	ldr	r2, [pc, #108]	; (80031ac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d902      	bls.n	800314a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	3308      	adds	r3, #8
 8003148:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4b18      	ldr	r3, [pc, #96]	; (80031b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	461a      	mov	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a16      	ldr	r2, [pc, #88]	; (80031b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800315c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f003 031f 	and.w	r3, r3, #31
 8003164:	2201      	movs	r2, #1
 8003166:	409a      	lsls	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	58025408 	.word	0x58025408
 800317c:	5802541c 	.word	0x5802541c
 8003180:	58025430 	.word	0x58025430
 8003184:	58025444 	.word	0x58025444
 8003188:	58025458 	.word	0x58025458
 800318c:	5802546c 	.word	0x5802546c
 8003190:	58025480 	.word	0x58025480
 8003194:	58025494 	.word	0x58025494
 8003198:	cccccccd 	.word	0xcccccccd
 800319c:	16009600 	.word	0x16009600
 80031a0:	58025880 	.word	0x58025880
 80031a4:	aaaaaaab 	.word	0xaaaaaaab
 80031a8:	400204b8 	.word	0x400204b8
 80031ac:	4002040f 	.word	0x4002040f
 80031b0:	10008200 	.word	0x10008200
 80031b4:	40020880 	.word	0x40020880

080031b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d04a      	beq.n	8003264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d847      	bhi.n	8003264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a25      	ldr	r2, [pc, #148]	; (8003270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d022      	beq.n	8003224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a24      	ldr	r2, [pc, #144]	; (8003274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d01d      	beq.n	8003224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a22      	ldr	r2, [pc, #136]	; (8003278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d018      	beq.n	8003224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a21      	ldr	r2, [pc, #132]	; (800327c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d013      	beq.n	8003224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00e      	beq.n	8003224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1e      	ldr	r2, [pc, #120]	; (8003284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d009      	beq.n	8003224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1c      	ldr	r2, [pc, #112]	; (8003288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d004      	beq.n	8003224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1b      	ldr	r2, [pc, #108]	; (800328c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d101      	bne.n	8003228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003228:	2300      	movs	r3, #0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4b17      	ldr	r3, [pc, #92]	; (8003290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	461a      	mov	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a15      	ldr	r2, [pc, #84]	; (8003294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003240:	671a      	str	r2, [r3, #112]	; 0x70
 8003242:	e009      	b.n	8003258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4b14      	ldr	r3, [pc, #80]	; (8003298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	461a      	mov	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a11      	ldr	r2, [pc, #68]	; (800329c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003256:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3b01      	subs	r3, #1
 800325c:	2201      	movs	r2, #1
 800325e:	409a      	lsls	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	58025408 	.word	0x58025408
 8003274:	5802541c 	.word	0x5802541c
 8003278:	58025430 	.word	0x58025430
 800327c:	58025444 	.word	0x58025444
 8003280:	58025458 	.word	0x58025458
 8003284:	5802546c 	.word	0x5802546c
 8003288:	58025480 	.word	0x58025480
 800328c:	58025494 	.word	0x58025494
 8003290:	1600963f 	.word	0x1600963f
 8003294:	58025940 	.word	0x58025940
 8003298:	1000823f 	.word	0x1000823f
 800329c:	40020940 	.word	0x40020940

080032a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80032ae:	4b89      	ldr	r3, [pc, #548]	; (80034d4 <HAL_GPIO_Init+0x234>)
 80032b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032b2:	e194      	b.n	80035de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	2101      	movs	r1, #1
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	fa01 f303 	lsl.w	r3, r1, r3
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8186 	beq.w	80035d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d005      	beq.n	80032e4 <HAL_GPIO_Init+0x44>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d130      	bne.n	8003346 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	2203      	movs	r2, #3
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800331a:	2201      	movs	r2, #1
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	091b      	lsrs	r3, r3, #4
 8003330:	f003 0201 	and.w	r2, r3, #1
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b03      	cmp	r3, #3
 8003350:	d017      	beq.n	8003382 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	2203      	movs	r2, #3
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d123      	bne.n	80033d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	08da      	lsrs	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3208      	adds	r2, #8
 8003396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	220f      	movs	r2, #15
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4013      	ands	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	08da      	lsrs	r2, r3, #3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3208      	adds	r2, #8
 80033d0:	69b9      	ldr	r1, [r7, #24]
 80033d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	2203      	movs	r2, #3
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 0203 	and.w	r2, r3, #3
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80e0 	beq.w	80035d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003418:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <HAL_GPIO_Init+0x238>)
 800341a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800341e:	4a2e      	ldr	r2, [pc, #184]	; (80034d8 <HAL_GPIO_Init+0x238>)
 8003420:	f043 0302 	orr.w	r3, r3, #2
 8003424:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003428:	4b2b      	ldr	r3, [pc, #172]	; (80034d8 <HAL_GPIO_Init+0x238>)
 800342a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003436:	4a29      	ldr	r2, [pc, #164]	; (80034dc <HAL_GPIO_Init+0x23c>)
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	3302      	adds	r3, #2
 800343e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	220f      	movs	r2, #15
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a20      	ldr	r2, [pc, #128]	; (80034e0 <HAL_GPIO_Init+0x240>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d052      	beq.n	8003508 <HAL_GPIO_Init+0x268>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a1f      	ldr	r2, [pc, #124]	; (80034e4 <HAL_GPIO_Init+0x244>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d031      	beq.n	80034ce <HAL_GPIO_Init+0x22e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1e      	ldr	r2, [pc, #120]	; (80034e8 <HAL_GPIO_Init+0x248>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d02b      	beq.n	80034ca <HAL_GPIO_Init+0x22a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <HAL_GPIO_Init+0x24c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d025      	beq.n	80034c6 <HAL_GPIO_Init+0x226>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a1c      	ldr	r2, [pc, #112]	; (80034f0 <HAL_GPIO_Init+0x250>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d01f      	beq.n	80034c2 <HAL_GPIO_Init+0x222>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a1b      	ldr	r2, [pc, #108]	; (80034f4 <HAL_GPIO_Init+0x254>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d019      	beq.n	80034be <HAL_GPIO_Init+0x21e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a1a      	ldr	r2, [pc, #104]	; (80034f8 <HAL_GPIO_Init+0x258>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <HAL_GPIO_Init+0x21a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a19      	ldr	r2, [pc, #100]	; (80034fc <HAL_GPIO_Init+0x25c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00d      	beq.n	80034b6 <HAL_GPIO_Init+0x216>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a18      	ldr	r2, [pc, #96]	; (8003500 <HAL_GPIO_Init+0x260>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <HAL_GPIO_Init+0x212>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a17      	ldr	r2, [pc, #92]	; (8003504 <HAL_GPIO_Init+0x264>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_GPIO_Init+0x20e>
 80034aa:	2309      	movs	r3, #9
 80034ac:	e02d      	b.n	800350a <HAL_GPIO_Init+0x26a>
 80034ae:	230a      	movs	r3, #10
 80034b0:	e02b      	b.n	800350a <HAL_GPIO_Init+0x26a>
 80034b2:	2308      	movs	r3, #8
 80034b4:	e029      	b.n	800350a <HAL_GPIO_Init+0x26a>
 80034b6:	2307      	movs	r3, #7
 80034b8:	e027      	b.n	800350a <HAL_GPIO_Init+0x26a>
 80034ba:	2306      	movs	r3, #6
 80034bc:	e025      	b.n	800350a <HAL_GPIO_Init+0x26a>
 80034be:	2305      	movs	r3, #5
 80034c0:	e023      	b.n	800350a <HAL_GPIO_Init+0x26a>
 80034c2:	2304      	movs	r3, #4
 80034c4:	e021      	b.n	800350a <HAL_GPIO_Init+0x26a>
 80034c6:	2303      	movs	r3, #3
 80034c8:	e01f      	b.n	800350a <HAL_GPIO_Init+0x26a>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e01d      	b.n	800350a <HAL_GPIO_Init+0x26a>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e01b      	b.n	800350a <HAL_GPIO_Init+0x26a>
 80034d2:	bf00      	nop
 80034d4:	58000080 	.word	0x58000080
 80034d8:	58024400 	.word	0x58024400
 80034dc:	58000400 	.word	0x58000400
 80034e0:	58020000 	.word	0x58020000
 80034e4:	58020400 	.word	0x58020400
 80034e8:	58020800 	.word	0x58020800
 80034ec:	58020c00 	.word	0x58020c00
 80034f0:	58021000 	.word	0x58021000
 80034f4:	58021400 	.word	0x58021400
 80034f8:	58021800 	.word	0x58021800
 80034fc:	58021c00 	.word	0x58021c00
 8003500:	58022000 	.word	0x58022000
 8003504:	58022400 	.word	0x58022400
 8003508:	2300      	movs	r3, #0
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	f002 0203 	and.w	r2, r2, #3
 8003510:	0092      	lsls	r2, r2, #2
 8003512:	4093      	lsls	r3, r2
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800351a:	4938      	ldr	r1, [pc, #224]	; (80035fc <HAL_GPIO_Init+0x35c>)
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	3302      	adds	r3, #2
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800354e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800357c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	3301      	adds	r3, #1
 80035dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f47f ae63 	bne.w	80032b4 <HAL_GPIO_Init+0x14>
  }
}
 80035ee:	bf00      	nop
 80035f0:	bf00      	nop
 80035f2:	3724      	adds	r7, #36	; 0x24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	58000400 	.word	0x58000400

08003600 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003608:	4a08      	ldr	r2, [pc, #32]	; (800362c <HAL_HSEM_FastTake+0x2c>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3320      	adds	r3, #32
 800360e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003612:	4a07      	ldr	r2, [pc, #28]	; (8003630 <HAL_HSEM_FastTake+0x30>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d101      	bne.n	800361c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	e000      	b.n	800361e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
}
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	58026400 	.word	0x58026400
 8003630:	80000300 	.word	0x80000300

08003634 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800363e:	4906      	ldr	r1, [pc, #24]	; (8003658 <HAL_HSEM_Release+0x24>)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	58026400 	.word	0x58026400

0800365c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003664:	4b29      	ldr	r3, [pc, #164]	; (800370c <HAL_PWREx_ConfigSupply+0xb0>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	2b06      	cmp	r3, #6
 800366e:	d00a      	beq.n	8003686 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003670:	4b26      	ldr	r3, [pc, #152]	; (800370c <HAL_PWREx_ConfigSupply+0xb0>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	429a      	cmp	r2, r3
 800367c:	d001      	beq.n	8003682 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e040      	b.n	8003704 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e03e      	b.n	8003704 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003686:	4b21      	ldr	r3, [pc, #132]	; (800370c <HAL_PWREx_ConfigSupply+0xb0>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800368e:	491f      	ldr	r1, [pc, #124]	; (800370c <HAL_PWREx_ConfigSupply+0xb0>)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4313      	orrs	r3, r2
 8003694:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003696:	f7fd fc03 	bl	8000ea0 <HAL_GetTick>
 800369a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800369c:	e009      	b.n	80036b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800369e:	f7fd fbff 	bl	8000ea0 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ac:	d901      	bls.n	80036b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e028      	b.n	8003704 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036b2:	4b16      	ldr	r3, [pc, #88]	; (800370c <HAL_PWREx_ConfigSupply+0xb0>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036be:	d1ee      	bne.n	800369e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b1e      	cmp	r3, #30
 80036c4:	d008      	beq.n	80036d8 <HAL_PWREx_ConfigSupply+0x7c>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b2e      	cmp	r3, #46	; 0x2e
 80036ca:	d005      	beq.n	80036d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b1d      	cmp	r3, #29
 80036d0:	d002      	beq.n	80036d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b2d      	cmp	r3, #45	; 0x2d
 80036d6:	d114      	bne.n	8003702 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80036d8:	f7fd fbe2 	bl	8000ea0 <HAL_GetTick>
 80036dc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80036de:	e009      	b.n	80036f4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80036e0:	f7fd fbde 	bl	8000ea0 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ee:	d901      	bls.n	80036f4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e007      	b.n	8003704 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <HAL_PWREx_ConfigSupply+0xb0>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003700:	d1ee      	bne.n	80036e0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	58024800 	.word	0x58024800

08003710 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08c      	sub	sp, #48	; 0x30
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d102      	bne.n	8003724 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	f000 bc48 	b.w	8003fb4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8088 	beq.w	8003842 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003732:	4b99      	ldr	r3, [pc, #612]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800373c:	4b96      	ldr	r3, [pc, #600]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003744:	2b10      	cmp	r3, #16
 8003746:	d007      	beq.n	8003758 <HAL_RCC_OscConfig+0x48>
 8003748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374a:	2b18      	cmp	r3, #24
 800374c:	d111      	bne.n	8003772 <HAL_RCC_OscConfig+0x62>
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d10c      	bne.n	8003772 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	4b8f      	ldr	r3, [pc, #572]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d06d      	beq.n	8003840 <HAL_RCC_OscConfig+0x130>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d169      	bne.n	8003840 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	f000 bc21 	b.w	8003fb4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377a:	d106      	bne.n	800378a <HAL_RCC_OscConfig+0x7a>
 800377c:	4b86      	ldr	r3, [pc, #536]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a85      	ldr	r2, [pc, #532]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 8003782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	e02e      	b.n	80037e8 <HAL_RCC_OscConfig+0xd8>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10c      	bne.n	80037ac <HAL_RCC_OscConfig+0x9c>
 8003792:	4b81      	ldr	r3, [pc, #516]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a80      	ldr	r2, [pc, #512]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 8003798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	4b7e      	ldr	r3, [pc, #504]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a7d      	ldr	r2, [pc, #500]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 80037a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e01d      	b.n	80037e8 <HAL_RCC_OscConfig+0xd8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCC_OscConfig+0xc0>
 80037b6:	4b78      	ldr	r3, [pc, #480]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a77      	ldr	r2, [pc, #476]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 80037bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	4b75      	ldr	r3, [pc, #468]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a74      	ldr	r2, [pc, #464]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e00b      	b.n	80037e8 <HAL_RCC_OscConfig+0xd8>
 80037d0:	4b71      	ldr	r3, [pc, #452]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a70      	ldr	r2, [pc, #448]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 80037d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	4b6e      	ldr	r3, [pc, #440]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a6d      	ldr	r2, [pc, #436]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 80037e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d013      	beq.n	8003818 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7fd fb56 	bl	8000ea0 <HAL_GetTick>
 80037f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f8:	f7fd fb52 	bl	8000ea0 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e3d4      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800380a:	4b63      	ldr	r3, [pc, #396]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0xe8>
 8003816:	e014      	b.n	8003842 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7fd fb42 	bl	8000ea0 <HAL_GetTick>
 800381c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003820:	f7fd fb3e 	bl	8000ea0 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	; 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e3c0      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003832:	4b59      	ldr	r3, [pc, #356]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x110>
 800383e:	e000      	b.n	8003842 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 80ca 	beq.w	80039e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003850:	4b51      	ldr	r3, [pc, #324]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003858:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800385a:	4b4f      	ldr	r3, [pc, #316]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <HAL_RCC_OscConfig+0x166>
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	2b18      	cmp	r3, #24
 800386a:	d156      	bne.n	800391a <HAL_RCC_OscConfig+0x20a>
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d151      	bne.n	800391a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003876:	4b48      	ldr	r3, [pc, #288]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_RCC_OscConfig+0x17e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e392      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800388e:	4b42      	ldr	r3, [pc, #264]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 0219 	bic.w	r2, r3, #25
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	493f      	ldr	r1, [pc, #252]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 800389c:	4313      	orrs	r3, r2
 800389e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fd fafe 	bl	8000ea0 <HAL_GetTick>
 80038a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a8:	f7fd fafa 	bl	8000ea0 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e37c      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038ba:	4b37      	ldr	r3, [pc, #220]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c6:	f7fd faf7 	bl	8000eb8 <HAL_GetREVID>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d817      	bhi.n	8003904 <HAL_RCC_OscConfig+0x1f4>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b40      	cmp	r3, #64	; 0x40
 80038da:	d108      	bne.n	80038ee <HAL_RCC_OscConfig+0x1de>
 80038dc:	4b2e      	ldr	r3, [pc, #184]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80038e4:	4a2c      	ldr	r2, [pc, #176]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 80038e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ec:	e07a      	b.n	80039e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ee:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	031b      	lsls	r3, r3, #12
 80038fc:	4926      	ldr	r1, [pc, #152]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003902:	e06f      	b.n	80039e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003904:	4b24      	ldr	r3, [pc, #144]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	061b      	lsls	r3, r3, #24
 8003912:	4921      	ldr	r1, [pc, #132]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 8003914:	4313      	orrs	r3, r2
 8003916:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003918:	e064      	b.n	80039e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d047      	beq.n	80039b2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003922:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f023 0219 	bic.w	r2, r3, #25
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	491a      	ldr	r1, [pc, #104]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 8003930:	4313      	orrs	r3, r2
 8003932:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7fd fab4 	bl	8000ea0 <HAL_GetTick>
 8003938:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393c:	f7fd fab0 	bl	8000ea0 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e332      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800394e:	4b12      	ldr	r3, [pc, #72]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0f0      	beq.n	800393c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395a:	f7fd faad 	bl	8000eb8 <HAL_GetREVID>
 800395e:	4603      	mov	r3, r0
 8003960:	f241 0203 	movw	r2, #4099	; 0x1003
 8003964:	4293      	cmp	r3, r2
 8003966:	d819      	bhi.n	800399c <HAL_RCC_OscConfig+0x28c>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2b40      	cmp	r3, #64	; 0x40
 800396e:	d108      	bne.n	8003982 <HAL_RCC_OscConfig+0x272>
 8003970:	4b09      	ldr	r3, [pc, #36]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003978:	4a07      	ldr	r2, [pc, #28]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 800397a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800397e:	6053      	str	r3, [r2, #4]
 8003980:	e030      	b.n	80039e4 <HAL_RCC_OscConfig+0x2d4>
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	031b      	lsls	r3, r3, #12
 8003990:	4901      	ldr	r1, [pc, #4]	; (8003998 <HAL_RCC_OscConfig+0x288>)
 8003992:	4313      	orrs	r3, r2
 8003994:	604b      	str	r3, [r1, #4]
 8003996:	e025      	b.n	80039e4 <HAL_RCC_OscConfig+0x2d4>
 8003998:	58024400 	.word	0x58024400
 800399c:	4b9a      	ldr	r3, [pc, #616]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	061b      	lsls	r3, r3, #24
 80039aa:	4997      	ldr	r1, [pc, #604]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]
 80039b0:	e018      	b.n	80039e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b2:	4b95      	ldr	r3, [pc, #596]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a94      	ldr	r2, [pc, #592]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 80039b8:	f023 0301 	bic.w	r3, r3, #1
 80039bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fd fa6f 	bl	8000ea0 <HAL_GetTick>
 80039c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c6:	f7fd fa6b 	bl	8000ea0 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e2ed      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039d8:	4b8b      	ldr	r3, [pc, #556]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f0      	bne.n	80039c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80a9 	beq.w	8003b44 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f2:	4b85      	ldr	r3, [pc, #532]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039fc:	4b82      	ldr	r3, [pc, #520]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d007      	beq.n	8003a18 <HAL_RCC_OscConfig+0x308>
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	2b18      	cmp	r3, #24
 8003a0c:	d13a      	bne.n	8003a84 <HAL_RCC_OscConfig+0x374>
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d135      	bne.n	8003a84 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a18:	4b7b      	ldr	r3, [pc, #492]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_OscConfig+0x320>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	2b80      	cmp	r3, #128	; 0x80
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e2c1      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a30:	f7fd fa42 	bl	8000eb8 <HAL_GetREVID>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d817      	bhi.n	8003a6e <HAL_RCC_OscConfig+0x35e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d108      	bne.n	8003a58 <HAL_RCC_OscConfig+0x348>
 8003a46:	4b70      	ldr	r3, [pc, #448]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a4e:	4a6e      	ldr	r2, [pc, #440]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003a50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a54:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a56:	e075      	b.n	8003b44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a58:	4b6b      	ldr	r3, [pc, #428]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	069b      	lsls	r3, r3, #26
 8003a66:	4968      	ldr	r1, [pc, #416]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a6c:	e06a      	b.n	8003b44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a6e:	4b66      	ldr	r3, [pc, #408]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	061b      	lsls	r3, r3, #24
 8003a7c:	4962      	ldr	r1, [pc, #392]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a82:	e05f      	b.n	8003b44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d042      	beq.n	8003b12 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a8c:	4b5e      	ldr	r3, [pc, #376]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a5d      	ldr	r2, [pc, #372]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fd fa02 	bl	8000ea0 <HAL_GetTick>
 8003a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003aa0:	f7fd f9fe 	bl	8000ea0 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e280      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ab2:	4b55      	ldr	r3, [pc, #340]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003abe:	f7fd f9fb 	bl	8000eb8 <HAL_GetREVID>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d817      	bhi.n	8003afc <HAL_RCC_OscConfig+0x3ec>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d108      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x3d6>
 8003ad4:	4b4c      	ldr	r3, [pc, #304]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003adc:	4a4a      	ldr	r2, [pc, #296]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003ade:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ae2:	6053      	str	r3, [r2, #4]
 8003ae4:	e02e      	b.n	8003b44 <HAL_RCC_OscConfig+0x434>
 8003ae6:	4b48      	ldr	r3, [pc, #288]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	069b      	lsls	r3, r3, #26
 8003af4:	4944      	ldr	r1, [pc, #272]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	604b      	str	r3, [r1, #4]
 8003afa:	e023      	b.n	8003b44 <HAL_RCC_OscConfig+0x434>
 8003afc:	4b42      	ldr	r3, [pc, #264]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	061b      	lsls	r3, r3, #24
 8003b0a:	493f      	ldr	r1, [pc, #252]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60cb      	str	r3, [r1, #12]
 8003b10:	e018      	b.n	8003b44 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b12:	4b3d      	ldr	r3, [pc, #244]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a3c      	ldr	r2, [pc, #240]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1e:	f7fd f9bf 	bl	8000ea0 <HAL_GetTick>
 8003b22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b26:	f7fd f9bb 	bl	8000ea0 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e23d      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b38:	4b33      	ldr	r3, [pc, #204]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f0      	bne.n	8003b26 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d036      	beq.n	8003bbe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d019      	beq.n	8003b8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b58:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5c:	4a2a      	ldr	r2, [pc, #168]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7fd f99c 	bl	8000ea0 <HAL_GetTick>
 8003b68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b6c:	f7fd f998 	bl	8000ea0 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e21a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b7e:	4b22      	ldr	r3, [pc, #136]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x45c>
 8003b8a:	e018      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b8c:	4b1e      	ldr	r3, [pc, #120]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b90:	4a1d      	ldr	r2, [pc, #116]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fd f982 	bl	8000ea0 <HAL_GetTick>
 8003b9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba0:	f7fd f97e 	bl	8000ea0 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e200      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003bb2:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d039      	beq.n	8003c3e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d01c      	beq.n	8003c0c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bd2:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a0c      	ldr	r2, [pc, #48]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003bd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bde:	f7fd f95f 	bl	8000ea0 <HAL_GetTick>
 8003be2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003be6:	f7fd f95b 	bl	8000ea0 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e1dd      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x4d6>
 8003c04:	e01b      	b.n	8003c3e <HAL_RCC_OscConfig+0x52e>
 8003c06:	bf00      	nop
 8003c08:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c0c:	4b9b      	ldr	r3, [pc, #620]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a9a      	ldr	r2, [pc, #616]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003c12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c18:	f7fd f942 	bl	8000ea0 <HAL_GetTick>
 8003c1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c20:	f7fd f93e 	bl	8000ea0 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e1c0      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c32:	4b92      	ldr	r3, [pc, #584]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 8081 	beq.w	8003d4e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c4c:	4b8c      	ldr	r3, [pc, #560]	; (8003e80 <HAL_RCC_OscConfig+0x770>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a8b      	ldr	r2, [pc, #556]	; (8003e80 <HAL_RCC_OscConfig+0x770>)
 8003c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c58:	f7fd f922 	bl	8000ea0 <HAL_GetTick>
 8003c5c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c60:	f7fd f91e 	bl	8000ea0 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e1a0      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c72:	4b83      	ldr	r3, [pc, #524]	; (8003e80 <HAL_RCC_OscConfig+0x770>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d106      	bne.n	8003c94 <HAL_RCC_OscConfig+0x584>
 8003c86:	4b7d      	ldr	r3, [pc, #500]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8a:	4a7c      	ldr	r2, [pc, #496]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	6713      	str	r3, [r2, #112]	; 0x70
 8003c92:	e02d      	b.n	8003cf0 <HAL_RCC_OscConfig+0x5e0>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10c      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x5a6>
 8003c9c:	4b77      	ldr	r3, [pc, #476]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	4a76      	ldr	r2, [pc, #472]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003ca2:	f023 0301 	bic.w	r3, r3, #1
 8003ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca8:	4b74      	ldr	r3, [pc, #464]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4a73      	ldr	r2, [pc, #460]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003cae:	f023 0304 	bic.w	r3, r3, #4
 8003cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb4:	e01c      	b.n	8003cf0 <HAL_RCC_OscConfig+0x5e0>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b05      	cmp	r3, #5
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x5c8>
 8003cbe:	4b6f      	ldr	r3, [pc, #444]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc2:	4a6e      	ldr	r2, [pc, #440]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003cc4:	f043 0304 	orr.w	r3, r3, #4
 8003cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cca:	4b6c      	ldr	r3, [pc, #432]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	4a6b      	ldr	r2, [pc, #428]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0x5e0>
 8003cd8:	4b68      	ldr	r3, [pc, #416]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cdc:	4a67      	ldr	r2, [pc, #412]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003cde:	f023 0301 	bic.w	r3, r3, #1
 8003ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce4:	4b65      	ldr	r3, [pc, #404]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	4a64      	ldr	r2, [pc, #400]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003cea:	f023 0304 	bic.w	r3, r3, #4
 8003cee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d015      	beq.n	8003d24 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7fd f8d2 	bl	8000ea0 <HAL_GetTick>
 8003cfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7fd f8ce 	bl	8000ea0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e14e      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d16:	4b59      	ldr	r3, [pc, #356]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0ee      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5f0>
 8003d22:	e014      	b.n	8003d4e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d24:	f7fd f8bc 	bl	8000ea0 <HAL_GetTick>
 8003d28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2c:	f7fd f8b8 	bl	8000ea0 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e138      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d42:	4b4e      	ldr	r3, [pc, #312]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1ee      	bne.n	8003d2c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 812d 	beq.w	8003fb2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d58:	4b48      	ldr	r3, [pc, #288]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d60:	2b18      	cmp	r3, #24
 8003d62:	f000 80bd 	beq.w	8003ee0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	f040 809e 	bne.w	8003eac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d70:	4b42      	ldr	r3, [pc, #264]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a41      	ldr	r2, [pc, #260]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fd f890 	bl	8000ea0 <HAL_GetTick>
 8003d80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fd f88c 	bl	8000ea0 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e10e      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d96:	4b39      	ldr	r3, [pc, #228]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003da2:	4b36      	ldr	r3, [pc, #216]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003da6:	4b37      	ldr	r3, [pc, #220]	; (8003e84 <HAL_RCC_OscConfig+0x774>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003db2:	0112      	lsls	r2, r2, #4
 8003db4:	430a      	orrs	r2, r1
 8003db6:	4931      	ldr	r1, [pc, #196]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	628b      	str	r3, [r1, #40]	; 0x28
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	025b      	lsls	r3, r3, #9
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	041b      	lsls	r3, r3, #16
 8003dda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de4:	3b01      	subs	r3, #1
 8003de6:	061b      	lsls	r3, r3, #24
 8003de8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003dec:	4923      	ldr	r1, [pc, #140]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003df2:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	4a21      	ldr	r2, [pc, #132]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dfe:	4b1f      	ldr	r3, [pc, #124]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e02:	4b21      	ldr	r3, [pc, #132]	; (8003e88 <HAL_RCC_OscConfig+0x778>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e0a:	00d2      	lsls	r2, r2, #3
 8003e0c:	491b      	ldr	r1, [pc, #108]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e12:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	f023 020c 	bic.w	r2, r3, #12
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	4917      	ldr	r1, [pc, #92]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e24:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	f023 0202 	bic.w	r2, r3, #2
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e30:	4912      	ldr	r1, [pc, #72]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e36:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	4a10      	ldr	r2, [pc, #64]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e42:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003e5a:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	4a07      	ldr	r2, [pc, #28]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e66:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <HAL_RCC_OscConfig+0x76c>)
 8003e6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e72:	f7fd f815 	bl	8000ea0 <HAL_GetTick>
 8003e76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e78:	e011      	b.n	8003e9e <HAL_RCC_OscConfig+0x78e>
 8003e7a:	bf00      	nop
 8003e7c:	58024400 	.word	0x58024400
 8003e80:	58024800 	.word	0x58024800
 8003e84:	fffffc0c 	.word	0xfffffc0c
 8003e88:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7fd f808 	bl	8000ea0 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e08a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e9e:	4b47      	ldr	r3, [pc, #284]	; (8003fbc <HAL_RCC_OscConfig+0x8ac>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCC_OscConfig+0x77c>
 8003eaa:	e082      	b.n	8003fb2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eac:	4b43      	ldr	r3, [pc, #268]	; (8003fbc <HAL_RCC_OscConfig+0x8ac>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a42      	ldr	r2, [pc, #264]	; (8003fbc <HAL_RCC_OscConfig+0x8ac>)
 8003eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fc fff2 	bl	8000ea0 <HAL_GetTick>
 8003ebc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fc ffee 	bl	8000ea0 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e070      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ed2:	4b3a      	ldr	r3, [pc, #232]	; (8003fbc <HAL_RCC_OscConfig+0x8ac>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x7b0>
 8003ede:	e068      	b.n	8003fb2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ee0:	4b36      	ldr	r3, [pc, #216]	; (8003fbc <HAL_RCC_OscConfig+0x8ac>)
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ee6:	4b35      	ldr	r3, [pc, #212]	; (8003fbc <HAL_RCC_OscConfig+0x8ac>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d031      	beq.n	8003f58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f003 0203 	and.w	r2, r3, #3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d12a      	bne.n	8003f58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d122      	bne.n	8003f58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d11a      	bne.n	8003f58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	0a5b      	lsrs	r3, r3, #9
 8003f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d111      	bne.n	8003f58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	0c1b      	lsrs	r3, r3, #16
 8003f38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d108      	bne.n	8003f58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	0e1b      	lsrs	r3, r3, #24
 8003f4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d001      	beq.n	8003f5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e02b      	b.n	8003fb4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <HAL_RCC_OscConfig+0x8ac>)
 8003f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f60:	08db      	lsrs	r3, r3, #3
 8003f62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d01f      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003f72:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <HAL_RCC_OscConfig+0x8ac>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	4a11      	ldr	r2, [pc, #68]	; (8003fbc <HAL_RCC_OscConfig+0x8ac>)
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f7e:	f7fc ff8f 	bl	8000ea0 <HAL_GetTick>
 8003f82:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f84:	bf00      	nop
 8003f86:	f7fc ff8b 	bl	8000ea0 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d0f9      	beq.n	8003f86 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f92:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <HAL_RCC_OscConfig+0x8ac>)
 8003f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f96:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <HAL_RCC_OscConfig+0x8b0>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f9e:	00d2      	lsls	r2, r2, #3
 8003fa0:	4906      	ldr	r1, [pc, #24]	; (8003fbc <HAL_RCC_OscConfig+0x8ac>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <HAL_RCC_OscConfig+0x8ac>)
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	4a04      	ldr	r2, [pc, #16]	; (8003fbc <HAL_RCC_OscConfig+0x8ac>)
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3730      	adds	r7, #48	; 0x30
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	58024400 	.word	0x58024400
 8003fc0:	ffff0007 	.word	0xffff0007

08003fc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e19c      	b.n	8004312 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd8:	4b8a      	ldr	r3, [pc, #552]	; (8004204 <HAL_RCC_ClockConfig+0x240>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d910      	bls.n	8004008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe6:	4b87      	ldr	r3, [pc, #540]	; (8004204 <HAL_RCC_ClockConfig+0x240>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 020f 	bic.w	r2, r3, #15
 8003fee:	4985      	ldr	r1, [pc, #532]	; (8004204 <HAL_RCC_ClockConfig+0x240>)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff6:	4b83      	ldr	r3, [pc, #524]	; (8004204 <HAL_RCC_ClockConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e184      	b.n	8004312 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d010      	beq.n	8004036 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	4b7b      	ldr	r3, [pc, #492]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004020:	429a      	cmp	r2, r3
 8004022:	d908      	bls.n	8004036 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004024:	4b78      	ldr	r3, [pc, #480]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	4975      	ldr	r1, [pc, #468]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004032:	4313      	orrs	r3, r2
 8004034:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d010      	beq.n	8004064 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695a      	ldr	r2, [r3, #20]
 8004046:	4b70      	ldr	r3, [pc, #448]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800404e:	429a      	cmp	r2, r3
 8004050:	d908      	bls.n	8004064 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004052:	4b6d      	ldr	r3, [pc, #436]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	496a      	ldr	r1, [pc, #424]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004060:	4313      	orrs	r3, r2
 8004062:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b00      	cmp	r3, #0
 800406e:	d010      	beq.n	8004092 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	4b64      	ldr	r3, [pc, #400]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800407c:	429a      	cmp	r2, r3
 800407e:	d908      	bls.n	8004092 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004080:	4b61      	ldr	r3, [pc, #388]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	495e      	ldr	r1, [pc, #376]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 800408e:	4313      	orrs	r3, r2
 8004090:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d010      	beq.n	80040c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69da      	ldr	r2, [r3, #28]
 80040a2:	4b59      	ldr	r3, [pc, #356]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d908      	bls.n	80040c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040ae:	4b56      	ldr	r3, [pc, #344]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	4953      	ldr	r1, [pc, #332]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d010      	beq.n	80040ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	4b4d      	ldr	r3, [pc, #308]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	429a      	cmp	r2, r3
 80040da:	d908      	bls.n	80040ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040dc:	4b4a      	ldr	r3, [pc, #296]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f023 020f 	bic.w	r2, r3, #15
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4947      	ldr	r1, [pc, #284]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d055      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80040fa:	4b43      	ldr	r3, [pc, #268]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	4940      	ldr	r1, [pc, #256]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004108:	4313      	orrs	r3, r2
 800410a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d107      	bne.n	8004124 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004114:	4b3c      	ldr	r3, [pc, #240]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d121      	bne.n	8004164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0f6      	b.n	8004312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b03      	cmp	r3, #3
 800412a:	d107      	bne.n	800413c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800412c:	4b36      	ldr	r3, [pc, #216]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d115      	bne.n	8004164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0ea      	b.n	8004312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d107      	bne.n	8004154 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004144:	4b30      	ldr	r3, [pc, #192]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414c:	2b00      	cmp	r3, #0
 800414e:	d109      	bne.n	8004164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0de      	b.n	8004312 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004154:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0d6      	b.n	8004312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004164:	4b28      	ldr	r3, [pc, #160]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f023 0207 	bic.w	r2, r3, #7
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	4925      	ldr	r1, [pc, #148]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004172:	4313      	orrs	r3, r2
 8004174:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004176:	f7fc fe93 	bl	8000ea0 <HAL_GetTick>
 800417a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417c:	e00a      	b.n	8004194 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417e:	f7fc fe8f 	bl	8000ea0 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	f241 3288 	movw	r2, #5000	; 0x1388
 800418c:	4293      	cmp	r3, r2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e0be      	b.n	8004312 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004194:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d1eb      	bne.n	800417e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d010      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	4b14      	ldr	r3, [pc, #80]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	429a      	cmp	r2, r3
 80041c0:	d208      	bcs.n	80041d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c2:	4b11      	ldr	r3, [pc, #68]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f023 020f 	bic.w	r2, r3, #15
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	490e      	ldr	r1, [pc, #56]	; (8004208 <HAL_RCC_ClockConfig+0x244>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <HAL_RCC_ClockConfig+0x240>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d214      	bcs.n	800420c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e2:	4b08      	ldr	r3, [pc, #32]	; (8004204 <HAL_RCC_ClockConfig+0x240>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 020f 	bic.w	r2, r3, #15
 80041ea:	4906      	ldr	r1, [pc, #24]	; (8004204 <HAL_RCC_ClockConfig+0x240>)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f2:	4b04      	ldr	r3, [pc, #16]	; (8004204 <HAL_RCC_ClockConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d005      	beq.n	800420c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e086      	b.n	8004312 <HAL_RCC_ClockConfig+0x34e>
 8004204:	52002000 	.word	0x52002000
 8004208:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d010      	beq.n	800423a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	4b3f      	ldr	r3, [pc, #252]	; (800431c <HAL_RCC_ClockConfig+0x358>)
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004224:	429a      	cmp	r2, r3
 8004226:	d208      	bcs.n	800423a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004228:	4b3c      	ldr	r3, [pc, #240]	; (800431c <HAL_RCC_ClockConfig+0x358>)
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	4939      	ldr	r1, [pc, #228]	; (800431c <HAL_RCC_ClockConfig+0x358>)
 8004236:	4313      	orrs	r3, r2
 8004238:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d010      	beq.n	8004268 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	4b34      	ldr	r3, [pc, #208]	; (800431c <HAL_RCC_ClockConfig+0x358>)
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004252:	429a      	cmp	r2, r3
 8004254:	d208      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004256:	4b31      	ldr	r3, [pc, #196]	; (800431c <HAL_RCC_ClockConfig+0x358>)
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	492e      	ldr	r1, [pc, #184]	; (800431c <HAL_RCC_ClockConfig+0x358>)
 8004264:	4313      	orrs	r3, r2
 8004266:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	d010      	beq.n	8004296 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699a      	ldr	r2, [r3, #24]
 8004278:	4b28      	ldr	r3, [pc, #160]	; (800431c <HAL_RCC_ClockConfig+0x358>)
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004280:	429a      	cmp	r2, r3
 8004282:	d208      	bcs.n	8004296 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004284:	4b25      	ldr	r3, [pc, #148]	; (800431c <HAL_RCC_ClockConfig+0x358>)
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	4922      	ldr	r1, [pc, #136]	; (800431c <HAL_RCC_ClockConfig+0x358>)
 8004292:	4313      	orrs	r3, r2
 8004294:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d010      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69da      	ldr	r2, [r3, #28]
 80042a6:	4b1d      	ldr	r3, [pc, #116]	; (800431c <HAL_RCC_ClockConfig+0x358>)
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d208      	bcs.n	80042c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80042b2:	4b1a      	ldr	r3, [pc, #104]	; (800431c <HAL_RCC_ClockConfig+0x358>)
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	4917      	ldr	r1, [pc, #92]	; (800431c <HAL_RCC_ClockConfig+0x358>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042c4:	f000 f834 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80042c8:	4602      	mov	r2, r0
 80042ca:	4b14      	ldr	r3, [pc, #80]	; (800431c <HAL_RCC_ClockConfig+0x358>)
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	4912      	ldr	r1, [pc, #72]	; (8004320 <HAL_RCC_ClockConfig+0x35c>)
 80042d6:	5ccb      	ldrb	r3, [r1, r3]
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
 80042e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042e2:	4b0e      	ldr	r3, [pc, #56]	; (800431c <HAL_RCC_ClockConfig+0x358>)
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	4a0d      	ldr	r2, [pc, #52]	; (8004320 <HAL_RCC_ClockConfig+0x35c>)
 80042ec:	5cd3      	ldrb	r3, [r2, r3]
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
 80042f8:	4a0a      	ldr	r2, [pc, #40]	; (8004324 <HAL_RCC_ClockConfig+0x360>)
 80042fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042fc:	4a0a      	ldr	r2, [pc, #40]	; (8004328 <HAL_RCC_ClockConfig+0x364>)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004302:	4b0a      	ldr	r3, [pc, #40]	; (800432c <HAL_RCC_ClockConfig+0x368>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7fc fd80 	bl	8000e0c <HAL_InitTick>
 800430c:	4603      	mov	r3, r0
 800430e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	58024400 	.word	0x58024400
 8004320:	08006298 	.word	0x08006298
 8004324:	24000004 	.word	0x24000004
 8004328:	24000000 	.word	0x24000000
 800432c:	240000b4 	.word	0x240000b4

08004330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004330:	b480      	push	{r7}
 8004332:	b089      	sub	sp, #36	; 0x24
 8004334:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004336:	4bb3      	ldr	r3, [pc, #716]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800433e:	2b18      	cmp	r3, #24
 8004340:	f200 8155 	bhi.w	80045ee <HAL_RCC_GetSysClockFreq+0x2be>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	080043b1 	.word	0x080043b1
 8004350:	080045ef 	.word	0x080045ef
 8004354:	080045ef 	.word	0x080045ef
 8004358:	080045ef 	.word	0x080045ef
 800435c:	080045ef 	.word	0x080045ef
 8004360:	080045ef 	.word	0x080045ef
 8004364:	080045ef 	.word	0x080045ef
 8004368:	080045ef 	.word	0x080045ef
 800436c:	080043d7 	.word	0x080043d7
 8004370:	080045ef 	.word	0x080045ef
 8004374:	080045ef 	.word	0x080045ef
 8004378:	080045ef 	.word	0x080045ef
 800437c:	080045ef 	.word	0x080045ef
 8004380:	080045ef 	.word	0x080045ef
 8004384:	080045ef 	.word	0x080045ef
 8004388:	080045ef 	.word	0x080045ef
 800438c:	080043dd 	.word	0x080043dd
 8004390:	080045ef 	.word	0x080045ef
 8004394:	080045ef 	.word	0x080045ef
 8004398:	080045ef 	.word	0x080045ef
 800439c:	080045ef 	.word	0x080045ef
 80043a0:	080045ef 	.word	0x080045ef
 80043a4:	080045ef 	.word	0x080045ef
 80043a8:	080045ef 	.word	0x080045ef
 80043ac:	080043e3 	.word	0x080043e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043b0:	4b94      	ldr	r3, [pc, #592]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d009      	beq.n	80043d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043bc:	4b91      	ldr	r3, [pc, #580]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	08db      	lsrs	r3, r3, #3
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	4a90      	ldr	r2, [pc, #576]	; (8004608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
 80043cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80043ce:	e111      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80043d0:	4b8d      	ldr	r3, [pc, #564]	; (8004608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043d2:	61bb      	str	r3, [r7, #24]
      break;
 80043d4:	e10e      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80043d6:	4b8d      	ldr	r3, [pc, #564]	; (800460c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043d8:	61bb      	str	r3, [r7, #24]
      break;
 80043da:	e10b      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80043dc:	4b8c      	ldr	r3, [pc, #560]	; (8004610 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80043de:	61bb      	str	r3, [r7, #24]
      break;
 80043e0:	e108      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043e2:	4b88      	ldr	r3, [pc, #544]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80043ec:	4b85      	ldr	r3, [pc, #532]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80043f8:	4b82      	ldr	r3, [pc, #520]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004402:	4b80      	ldr	r3, [pc, #512]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004406:	08db      	lsrs	r3, r3, #3
 8004408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 80e1 	beq.w	80045e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b02      	cmp	r3, #2
 800442a:	f000 8083 	beq.w	8004534 <HAL_RCC_GetSysClockFreq+0x204>
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b02      	cmp	r3, #2
 8004432:	f200 80a1 	bhi.w	8004578 <HAL_RCC_GetSysClockFreq+0x248>
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_RCC_GetSysClockFreq+0x114>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d056      	beq.n	80044f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004442:	e099      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004444:	4b6f      	ldr	r3, [pc, #444]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d02d      	beq.n	80044ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004450:	4b6c      	ldr	r3, [pc, #432]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	08db      	lsrs	r3, r3, #3
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	4a6b      	ldr	r2, [pc, #428]	; (8004608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
 8004460:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	ee07 3a90 	vmov	s15, r3
 8004468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800447a:	4b62      	ldr	r3, [pc, #392]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800448a:	ed97 6a02 	vldr	s12, [r7, #8]
 800448e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004614 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800449a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800449e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80044aa:	e087      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004618 <HAL_RCC_GetSysClockFreq+0x2e8>
 80044ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044be:	4b51      	ldr	r3, [pc, #324]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80044d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004614 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044ee:	e065      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800461c <HAL_RCC_GetSysClockFreq+0x2ec>
 80044fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004502:	4b40      	ldr	r3, [pc, #256]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004512:	ed97 6a02 	vldr	s12, [r7, #8]
 8004516:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004614 <HAL_RCC_GetSysClockFreq+0x2e4>
 800451a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800451e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800452a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004532:	e043      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004620 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004546:	4b2f      	ldr	r3, [pc, #188]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004556:	ed97 6a02 	vldr	s12, [r7, #8]
 800455a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004614 <HAL_RCC_GetSysClockFreq+0x2e4>
 800455e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800456a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800456e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004572:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004576:	e021      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004582:	eddf 6a26 	vldr	s13, [pc, #152]	; 800461c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800458a:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459a:	ed97 6a02 	vldr	s12, [r7, #8]
 800459e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004614 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80045bc:	4b11      	ldr	r3, [pc, #68]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	0a5b      	lsrs	r3, r3, #9
 80045c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045c6:	3301      	adds	r3, #1
 80045c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	ee07 3a90 	vmov	s15, r3
 80045d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80045d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045e0:	ee17 3a90 	vmov	r3, s15
 80045e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80045e6:	e005      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61bb      	str	r3, [r7, #24]
      break;
 80045ec:	e002      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80045ee:	4b07      	ldr	r3, [pc, #28]	; (800460c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045f0:	61bb      	str	r3, [r7, #24]
      break;
 80045f2:	bf00      	nop
  }

  return sysclockfreq;
 80045f4:	69bb      	ldr	r3, [r7, #24]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3724      	adds	r7, #36	; 0x24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	58024400 	.word	0x58024400
 8004608:	03d09000 	.word	0x03d09000
 800460c:	003d0900 	.word	0x003d0900
 8004610:	007a1200 	.word	0x007a1200
 8004614:	46000000 	.word	0x46000000
 8004618:	4c742400 	.word	0x4c742400
 800461c:	4a742400 	.word	0x4a742400
 8004620:	4af42400 	.word	0x4af42400

08004624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e049      	b.n	80046ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fc fa7c 	bl	8000b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	4619      	mov	r1, r3
 8004662:	4610      	mov	r0, r2
 8004664:	f000 fee2 	bl	800542c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e049      	b.n	8004778 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d106      	bne.n	80046fe <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f841 	bl	8004780 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3304      	adds	r3, #4
 800470e:	4619      	mov	r1, r3
 8004710:	4610      	mov	r0, r2
 8004712:	f000 fe8b 	bl	800542c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e049      	b.n	800483a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fc f966 	bl	8000a8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f000 fe2a 	bl	800542c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d109      	bne.n	8004868 <HAL_TIM_PWM_Start+0x24>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	e03c      	b.n	80048e2 <HAL_TIM_PWM_Start+0x9e>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b04      	cmp	r3, #4
 800486c:	d109      	bne.n	8004882 <HAL_TIM_PWM_Start+0x3e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	bf14      	ite	ne
 800487a:	2301      	movne	r3, #1
 800487c:	2300      	moveq	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	e02f      	b.n	80048e2 <HAL_TIM_PWM_Start+0x9e>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d109      	bne.n	800489c <HAL_TIM_PWM_Start+0x58>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	bf14      	ite	ne
 8004894:	2301      	movne	r3, #1
 8004896:	2300      	moveq	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e022      	b.n	80048e2 <HAL_TIM_PWM_Start+0x9e>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d109      	bne.n	80048b6 <HAL_TIM_PWM_Start+0x72>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	bf14      	ite	ne
 80048ae:	2301      	movne	r3, #1
 80048b0:	2300      	moveq	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	e015      	b.n	80048e2 <HAL_TIM_PWM_Start+0x9e>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	d109      	bne.n	80048d0 <HAL_TIM_PWM_Start+0x8c>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	bf14      	ite	ne
 80048c8:	2301      	movne	r3, #1
 80048ca:	2300      	moveq	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	e008      	b.n	80048e2 <HAL_TIM_PWM_Start+0x9e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b01      	cmp	r3, #1
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e0a1      	b.n	8004a2e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_PWM_Start+0xb6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f8:	e023      	b.n	8004942 <HAL_TIM_PWM_Start+0xfe>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d104      	bne.n	800490a <HAL_TIM_PWM_Start+0xc6>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004908:	e01b      	b.n	8004942 <HAL_TIM_PWM_Start+0xfe>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d104      	bne.n	800491a <HAL_TIM_PWM_Start+0xd6>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004918:	e013      	b.n	8004942 <HAL_TIM_PWM_Start+0xfe>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b0c      	cmp	r3, #12
 800491e:	d104      	bne.n	800492a <HAL_TIM_PWM_Start+0xe6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004928:	e00b      	b.n	8004942 <HAL_TIM_PWM_Start+0xfe>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b10      	cmp	r3, #16
 800492e:	d104      	bne.n	800493a <HAL_TIM_PWM_Start+0xf6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004938:	e003      	b.n	8004942 <HAL_TIM_PWM_Start+0xfe>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2202      	movs	r2, #2
 800493e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2201      	movs	r2, #1
 8004948:	6839      	ldr	r1, [r7, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f001 fa53 	bl	8005df6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a38      	ldr	r2, [pc, #224]	; (8004a38 <HAL_TIM_PWM_Start+0x1f4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <HAL_TIM_PWM_Start+0x13e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a37      	ldr	r2, [pc, #220]	; (8004a3c <HAL_TIM_PWM_Start+0x1f8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00e      	beq.n	8004982 <HAL_TIM_PWM_Start+0x13e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a35      	ldr	r2, [pc, #212]	; (8004a40 <HAL_TIM_PWM_Start+0x1fc>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d009      	beq.n	8004982 <HAL_TIM_PWM_Start+0x13e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a34      	ldr	r2, [pc, #208]	; (8004a44 <HAL_TIM_PWM_Start+0x200>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d004      	beq.n	8004982 <HAL_TIM_PWM_Start+0x13e>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a32      	ldr	r2, [pc, #200]	; (8004a48 <HAL_TIM_PWM_Start+0x204>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d101      	bne.n	8004986 <HAL_TIM_PWM_Start+0x142>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <HAL_TIM_PWM_Start+0x144>
 8004986:	2300      	movs	r3, #0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d007      	beq.n	800499c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800499a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a25      	ldr	r2, [pc, #148]	; (8004a38 <HAL_TIM_PWM_Start+0x1f4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d022      	beq.n	80049ec <HAL_TIM_PWM_Start+0x1a8>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ae:	d01d      	beq.n	80049ec <HAL_TIM_PWM_Start+0x1a8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a25      	ldr	r2, [pc, #148]	; (8004a4c <HAL_TIM_PWM_Start+0x208>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d018      	beq.n	80049ec <HAL_TIM_PWM_Start+0x1a8>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a24      	ldr	r2, [pc, #144]	; (8004a50 <HAL_TIM_PWM_Start+0x20c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d013      	beq.n	80049ec <HAL_TIM_PWM_Start+0x1a8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a22      	ldr	r2, [pc, #136]	; (8004a54 <HAL_TIM_PWM_Start+0x210>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00e      	beq.n	80049ec <HAL_TIM_PWM_Start+0x1a8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1a      	ldr	r2, [pc, #104]	; (8004a3c <HAL_TIM_PWM_Start+0x1f8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d009      	beq.n	80049ec <HAL_TIM_PWM_Start+0x1a8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1e      	ldr	r2, [pc, #120]	; (8004a58 <HAL_TIM_PWM_Start+0x214>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_TIM_PWM_Start+0x1a8>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <HAL_TIM_PWM_Start+0x1fc>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d115      	bne.n	8004a18 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	4b1a      	ldr	r3, [pc, #104]	; (8004a5c <HAL_TIM_PWM_Start+0x218>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d015      	beq.n	8004a2a <HAL_TIM_PWM_Start+0x1e6>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a04:	d011      	beq.n	8004a2a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0201 	orr.w	r2, r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a16:	e008      	b.n	8004a2a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	e000      	b.n	8004a2c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40010000 	.word	0x40010000
 8004a3c:	40010400 	.word	0x40010400
 8004a40:	40014000 	.word	0x40014000
 8004a44:	40014400 	.word	0x40014400
 8004a48:	40014800 	.word	0x40014800
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800
 8004a54:	40000c00 	.word	0x40000c00
 8004a58:	40001800 	.word	0x40001800
 8004a5c:	00010007 	.word	0x00010007

08004a60 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d109      	bne.n	8004a8c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	e03c      	b.n	8004b06 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d109      	bne.n	8004aa6 <HAL_TIM_PWM_Start_DMA+0x46>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	bf0c      	ite	eq
 8004a9e:	2301      	moveq	r3, #1
 8004aa0:	2300      	movne	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	e02f      	b.n	8004b06 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d109      	bne.n	8004ac0 <HAL_TIM_PWM_Start_DMA+0x60>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2301      	moveq	r3, #1
 8004aba:	2300      	movne	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	e022      	b.n	8004b06 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b0c      	cmp	r3, #12
 8004ac4:	d109      	bne.n	8004ada <HAL_TIM_PWM_Start_DMA+0x7a>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	bf0c      	ite	eq
 8004ad2:	2301      	moveq	r3, #1
 8004ad4:	2300      	movne	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	e015      	b.n	8004b06 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d109      	bne.n	8004af4 <HAL_TIM_PWM_Start_DMA+0x94>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	bf0c      	ite	eq
 8004aec:	2301      	moveq	r3, #1
 8004aee:	2300      	movne	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	e008      	b.n	8004b06 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e1b0      	b.n	8004e70 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d109      	bne.n	8004b28 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	bf0c      	ite	eq
 8004b20:	2301      	moveq	r3, #1
 8004b22:	2300      	movne	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	e03c      	b.n	8004ba2 <HAL_TIM_PWM_Start_DMA+0x142>
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d109      	bne.n	8004b42 <HAL_TIM_PWM_Start_DMA+0xe2>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	bf0c      	ite	eq
 8004b3a:	2301      	moveq	r3, #1
 8004b3c:	2300      	movne	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	e02f      	b.n	8004ba2 <HAL_TIM_PWM_Start_DMA+0x142>
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d109      	bne.n	8004b5c <HAL_TIM_PWM_Start_DMA+0xfc>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	bf0c      	ite	eq
 8004b54:	2301      	moveq	r3, #1
 8004b56:	2300      	movne	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	e022      	b.n	8004ba2 <HAL_TIM_PWM_Start_DMA+0x142>
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b0c      	cmp	r3, #12
 8004b60:	d109      	bne.n	8004b76 <HAL_TIM_PWM_Start_DMA+0x116>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	bf0c      	ite	eq
 8004b6e:	2301      	moveq	r3, #1
 8004b70:	2300      	movne	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	e015      	b.n	8004ba2 <HAL_TIM_PWM_Start_DMA+0x142>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d109      	bne.n	8004b90 <HAL_TIM_PWM_Start_DMA+0x130>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	bf0c      	ite	eq
 8004b88:	2301      	moveq	r3, #1
 8004b8a:	2300      	movne	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	e008      	b.n	8004ba2 <HAL_TIM_PWM_Start_DMA+0x142>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	bf0c      	ite	eq
 8004b9c:	2301      	moveq	r3, #1
 8004b9e:	2300      	movne	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d034      	beq.n	8004c10 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <HAL_TIM_PWM_Start_DMA+0x152>
 8004bac:	887b      	ldrh	r3, [r7, #2]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e15c      	b.n	8004e70 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d104      	bne.n	8004bc6 <HAL_TIM_PWM_Start_DMA+0x166>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc4:	e026      	b.n	8004c14 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d104      	bne.n	8004bd6 <HAL_TIM_PWM_Start_DMA+0x176>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bd4:	e01e      	b.n	8004c14 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d104      	bne.n	8004be6 <HAL_TIM_PWM_Start_DMA+0x186>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be4:	e016      	b.n	8004c14 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b0c      	cmp	r3, #12
 8004bea:	d104      	bne.n	8004bf6 <HAL_TIM_PWM_Start_DMA+0x196>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bf4:	e00e      	b.n	8004c14 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d104      	bne.n	8004c06 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c04:	e006      	b.n	8004c14 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c0e:	e001      	b.n	8004c14 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e12d      	b.n	8004e70 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b0c      	cmp	r3, #12
 8004c18:	f200 80ae 	bhi.w	8004d78 <HAL_TIM_PWM_Start_DMA+0x318>
 8004c1c:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8004c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c22:	bf00      	nop
 8004c24:	08004c59 	.word	0x08004c59
 8004c28:	08004d79 	.word	0x08004d79
 8004c2c:	08004d79 	.word	0x08004d79
 8004c30:	08004d79 	.word	0x08004d79
 8004c34:	08004ca1 	.word	0x08004ca1
 8004c38:	08004d79 	.word	0x08004d79
 8004c3c:	08004d79 	.word	0x08004d79
 8004c40:	08004d79 	.word	0x08004d79
 8004c44:	08004ce9 	.word	0x08004ce9
 8004c48:	08004d79 	.word	0x08004d79
 8004c4c:	08004d79 	.word	0x08004d79
 8004c50:	08004d79 	.word	0x08004d79
 8004c54:	08004d31 	.word	0x08004d31
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	4a86      	ldr	r2, [pc, #536]	; (8004e78 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004c5e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	4a85      	ldr	r2, [pc, #532]	; (8004e7c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	4a84      	ldr	r2, [pc, #528]	; (8004e80 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004c6e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3334      	adds	r3, #52	; 0x34
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	887b      	ldrh	r3, [r7, #2]
 8004c80:	f7fc fd92 	bl	80017a8 <HAL_DMA_Start_IT>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e0f0      	b.n	8004e70 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c9c:	60da      	str	r2, [r3, #12]
      break;
 8004c9e:	e06e      	b.n	8004d7e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	4a74      	ldr	r2, [pc, #464]	; (8004e78 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004ca6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	4a73      	ldr	r2, [pc, #460]	; (8004e7c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004cae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb4:	4a72      	ldr	r2, [pc, #456]	; (8004e80 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004cb6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3338      	adds	r3, #56	; 0x38
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	887b      	ldrh	r3, [r7, #2]
 8004cc8:	f7fc fd6e 	bl	80017a8 <HAL_DMA_Start_IT>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e0cc      	b.n	8004e70 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ce4:	60da      	str	r2, [r3, #12]
      break;
 8004ce6:	e04a      	b.n	8004d7e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	4a62      	ldr	r2, [pc, #392]	; (8004e78 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004cee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	4a61      	ldr	r2, [pc, #388]	; (8004e7c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfc:	4a60      	ldr	r2, [pc, #384]	; (8004e80 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004cfe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	333c      	adds	r3, #60	; 0x3c
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	887b      	ldrh	r3, [r7, #2]
 8004d10:	f7fc fd4a 	bl	80017a8 <HAL_DMA_Start_IT>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e0a8      	b.n	8004e70 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d2c:	60da      	str	r2, [r3, #12]
      break;
 8004d2e:	e026      	b.n	8004d7e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	4a50      	ldr	r2, [pc, #320]	; (8004e78 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004d36:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	4a4f      	ldr	r2, [pc, #316]	; (8004e7c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	4a4e      	ldr	r2, [pc, #312]	; (8004e80 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004d46:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3340      	adds	r3, #64	; 0x40
 8004d54:	461a      	mov	r2, r3
 8004d56:	887b      	ldrh	r3, [r7, #2]
 8004d58:	f7fc fd26 	bl	80017a8 <HAL_DMA_Start_IT>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e084      	b.n	8004e70 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d74:	60da      	str	r2, [r3, #12]
      break;
 8004d76:	e002      	b.n	8004d7e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d7e:	7dfb      	ldrb	r3, [r7, #23]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d174      	bne.n	8004e6e <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f001 f832 	bl	8005df6 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a3b      	ldr	r2, [pc, #236]	; (8004e84 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d013      	beq.n	8004dc4 <HAL_TIM_PWM_Start_DMA+0x364>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a39      	ldr	r2, [pc, #228]	; (8004e88 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00e      	beq.n	8004dc4 <HAL_TIM_PWM_Start_DMA+0x364>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a38      	ldr	r2, [pc, #224]	; (8004e8c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d009      	beq.n	8004dc4 <HAL_TIM_PWM_Start_DMA+0x364>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a36      	ldr	r2, [pc, #216]	; (8004e90 <HAL_TIM_PWM_Start_DMA+0x430>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <HAL_TIM_PWM_Start_DMA+0x364>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a35      	ldr	r2, [pc, #212]	; (8004e94 <HAL_TIM_PWM_Start_DMA+0x434>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d101      	bne.n	8004dc8 <HAL_TIM_PWM_Start_DMA+0x368>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <HAL_TIM_PWM_Start_DMA+0x36a>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ddc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a28      	ldr	r2, [pc, #160]	; (8004e84 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d022      	beq.n	8004e2e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df0:	d01d      	beq.n	8004e2e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a28      	ldr	r2, [pc, #160]	; (8004e98 <HAL_TIM_PWM_Start_DMA+0x438>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d018      	beq.n	8004e2e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a26      	ldr	r2, [pc, #152]	; (8004e9c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d013      	beq.n	8004e2e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a25      	ldr	r2, [pc, #148]	; (8004ea0 <HAL_TIM_PWM_Start_DMA+0x440>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00e      	beq.n	8004e2e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1c      	ldr	r2, [pc, #112]	; (8004e88 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d009      	beq.n	8004e2e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a21      	ldr	r2, [pc, #132]	; (8004ea4 <HAL_TIM_PWM_Start_DMA+0x444>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d004      	beq.n	8004e2e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d115      	bne.n	8004e5a <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	4b1c      	ldr	r3, [pc, #112]	; (8004ea8 <HAL_TIM_PWM_Start_DMA+0x448>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b06      	cmp	r3, #6
 8004e3e:	d015      	beq.n	8004e6c <HAL_TIM_PWM_Start_DMA+0x40c>
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e46:	d011      	beq.n	8004e6c <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e58:	e008      	b.n	8004e6c <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0201 	orr.w	r2, r2, #1
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	e000      	b.n	8004e6e <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	0800531b 	.word	0x0800531b
 8004e7c:	080053c3 	.word	0x080053c3
 8004e80:	08005289 	.word	0x08005289
 8004e84:	40010000 	.word	0x40010000
 8004e88:	40010400 	.word	0x40010400
 8004e8c:	40014000 	.word	0x40014000
 8004e90:	40014400 	.word	0x40014400
 8004e94:	40014800 	.word	0x40014800
 8004e98:	40000400 	.word	0x40000400
 8004e9c:	40000800 	.word	0x40000800
 8004ea0:	40000c00 	.word	0x40000c00
 8004ea4:	40001800 	.word	0x40001800
 8004ea8:	00010007 	.word	0x00010007

08004eac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_TIM_OC_ConfigChannel+0x1e>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e066      	b.n	8004f98 <HAL_TIM_OC_ConfigChannel+0xec>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b14      	cmp	r3, #20
 8004ed6:	d857      	bhi.n	8004f88 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004ed8:	a201      	add	r2, pc, #4	; (adr r2, 8004ee0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ede:	bf00      	nop
 8004ee0:	08004f35 	.word	0x08004f35
 8004ee4:	08004f89 	.word	0x08004f89
 8004ee8:	08004f89 	.word	0x08004f89
 8004eec:	08004f89 	.word	0x08004f89
 8004ef0:	08004f43 	.word	0x08004f43
 8004ef4:	08004f89 	.word	0x08004f89
 8004ef8:	08004f89 	.word	0x08004f89
 8004efc:	08004f89 	.word	0x08004f89
 8004f00:	08004f51 	.word	0x08004f51
 8004f04:	08004f89 	.word	0x08004f89
 8004f08:	08004f89 	.word	0x08004f89
 8004f0c:	08004f89 	.word	0x08004f89
 8004f10:	08004f5f 	.word	0x08004f5f
 8004f14:	08004f89 	.word	0x08004f89
 8004f18:	08004f89 	.word	0x08004f89
 8004f1c:	08004f89 	.word	0x08004f89
 8004f20:	08004f6d 	.word	0x08004f6d
 8004f24:	08004f89 	.word	0x08004f89
 8004f28:	08004f89 	.word	0x08004f89
 8004f2c:	08004f89 	.word	0x08004f89
 8004f30:	08004f7b 	.word	0x08004f7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fb1c 	bl	8005578 <TIM_OC1_SetConfig>
      break;
 8004f40:	e025      	b.n	8004f8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68b9      	ldr	r1, [r7, #8]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fba5 	bl	8005698 <TIM_OC2_SetConfig>
      break;
 8004f4e:	e01e      	b.n	8004f8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fc28 	bl	80057ac <TIM_OC3_SetConfig>
      break;
 8004f5c:	e017      	b.n	8004f8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fca9 	bl	80058bc <TIM_OC4_SetConfig>
      break;
 8004f6a:	e010      	b.n	8004f8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fd0c 	bl	8005990 <TIM_OC5_SetConfig>
      break;
 8004f78:	e009      	b.n	8004f8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fd69 	bl	8005a58 <TIM_OC6_SetConfig>
      break;
 8004f86:	e002      	b.n	8004f8e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e0ff      	b.n	80051be <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b14      	cmp	r3, #20
 8004fca:	f200 80f0 	bhi.w	80051ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004fce:	a201      	add	r2, pc, #4	; (adr r2, 8004fd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd4:	08005029 	.word	0x08005029
 8004fd8:	080051af 	.word	0x080051af
 8004fdc:	080051af 	.word	0x080051af
 8004fe0:	080051af 	.word	0x080051af
 8004fe4:	08005069 	.word	0x08005069
 8004fe8:	080051af 	.word	0x080051af
 8004fec:	080051af 	.word	0x080051af
 8004ff0:	080051af 	.word	0x080051af
 8004ff4:	080050ab 	.word	0x080050ab
 8004ff8:	080051af 	.word	0x080051af
 8004ffc:	080051af 	.word	0x080051af
 8005000:	080051af 	.word	0x080051af
 8005004:	080050eb 	.word	0x080050eb
 8005008:	080051af 	.word	0x080051af
 800500c:	080051af 	.word	0x080051af
 8005010:	080051af 	.word	0x080051af
 8005014:	0800512d 	.word	0x0800512d
 8005018:	080051af 	.word	0x080051af
 800501c:	080051af 	.word	0x080051af
 8005020:	080051af 	.word	0x080051af
 8005024:	0800516d 	.word	0x0800516d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68b9      	ldr	r1, [r7, #8]
 800502e:	4618      	mov	r0, r3
 8005030:	f000 faa2 	bl	8005578 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699a      	ldr	r2, [r3, #24]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0208 	orr.w	r2, r2, #8
 8005042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0204 	bic.w	r2, r2, #4
 8005052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6999      	ldr	r1, [r3, #24]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	691a      	ldr	r2, [r3, #16]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	619a      	str	r2, [r3, #24]
      break;
 8005066:	e0a5      	b.n	80051b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68b9      	ldr	r1, [r7, #8]
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fb12 	bl	8005698 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699a      	ldr	r2, [r3, #24]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	699a      	ldr	r2, [r3, #24]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6999      	ldr	r1, [r3, #24]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	021a      	lsls	r2, r3, #8
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	619a      	str	r2, [r3, #24]
      break;
 80050a8:	e084      	b.n	80051b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68b9      	ldr	r1, [r7, #8]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 fb7b 	bl	80057ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69da      	ldr	r2, [r3, #28]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0208 	orr.w	r2, r2, #8
 80050c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69da      	ldr	r2, [r3, #28]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0204 	bic.w	r2, r2, #4
 80050d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69d9      	ldr	r1, [r3, #28]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	61da      	str	r2, [r3, #28]
      break;
 80050e8:	e064      	b.n	80051b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68b9      	ldr	r1, [r7, #8]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 fbe3 	bl	80058bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	69da      	ldr	r2, [r3, #28]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	69da      	ldr	r2, [r3, #28]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69d9      	ldr	r1, [r3, #28]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	021a      	lsls	r2, r3, #8
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	61da      	str	r2, [r3, #28]
      break;
 800512a:	e043      	b.n	80051b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fc2c 	bl	8005990 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0208 	orr.w	r2, r2, #8
 8005146:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0204 	bic.w	r2, r2, #4
 8005156:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800516a:	e023      	b.n	80051b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fc70 	bl	8005a58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005186:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005196:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	021a      	lsls	r2, r3, #8
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051ac:	e002      	b.n	80051b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	75fb      	strb	r3, [r7, #23]
      break;
 80051b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop

080051c8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80051dc:	2302      	movs	r3, #2
 80051de:	e031      	b.n	8005244 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80051f0:	6839      	ldr	r1, [r7, #0]
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fc96 	bl	8005b24 <TIM_SlaveTimer_SetConfig>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e018      	b.n	8005244 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005220:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005230:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	429a      	cmp	r2, r3
 800529e:	d107      	bne.n	80052b0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ae:	e02a      	b.n	8005306 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d107      	bne.n	80052ca <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2202      	movs	r2, #2
 80052be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c8:	e01d      	b.n	8005306 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d107      	bne.n	80052e4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2204      	movs	r2, #4
 80052d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e2:	e010      	b.n	8005306 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d107      	bne.n	80052fe <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2208      	movs	r2, #8
 80052f2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052fc:	e003      	b.n	8005306 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f7ff ffb4 	bl	8005274 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	771a      	strb	r2, [r3, #28]
}
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005326:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	429a      	cmp	r2, r3
 8005330:	d10b      	bne.n	800534a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d136      	bne.n	80053ae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005348:	e031      	b.n	80053ae <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	429a      	cmp	r2, r3
 8005352:	d10b      	bne.n	800536c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2202      	movs	r2, #2
 8005358:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d125      	bne.n	80053ae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800536a:	e020      	b.n	80053ae <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	429a      	cmp	r2, r3
 8005374:	d10b      	bne.n	800538e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2204      	movs	r2, #4
 800537a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d114      	bne.n	80053ae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800538c:	e00f      	b.n	80053ae <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	429a      	cmp	r2, r3
 8005396:	d10a      	bne.n	80053ae <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2208      	movs	r2, #8
 800539c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d103      	bne.n	80053ae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7ff ff4c 	bl	800524c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	771a      	strb	r2, [r3, #28]
}
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b084      	sub	sp, #16
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d103      	bne.n	80053e2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	771a      	strb	r2, [r3, #28]
 80053e0:	e019      	b.n	8005416 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d103      	bne.n	80053f4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2202      	movs	r2, #2
 80053f0:	771a      	strb	r2, [r3, #28]
 80053f2:	e010      	b.n	8005416 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d103      	bne.n	8005406 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2204      	movs	r2, #4
 8005402:	771a      	strb	r2, [r3, #28]
 8005404:	e007      	b.n	8005416 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	429a      	cmp	r2, r3
 800540e:	d102      	bne.n	8005416 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2208      	movs	r2, #8
 8005414:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f7ff ff22 	bl	8005260 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	771a      	strb	r2, [r3, #28]
}
 8005422:	bf00      	nop
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a46      	ldr	r2, [pc, #280]	; (8005558 <TIM_Base_SetConfig+0x12c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d013      	beq.n	800546c <TIM_Base_SetConfig+0x40>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544a:	d00f      	beq.n	800546c <TIM_Base_SetConfig+0x40>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a43      	ldr	r2, [pc, #268]	; (800555c <TIM_Base_SetConfig+0x130>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00b      	beq.n	800546c <TIM_Base_SetConfig+0x40>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a42      	ldr	r2, [pc, #264]	; (8005560 <TIM_Base_SetConfig+0x134>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d007      	beq.n	800546c <TIM_Base_SetConfig+0x40>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a41      	ldr	r2, [pc, #260]	; (8005564 <TIM_Base_SetConfig+0x138>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_Base_SetConfig+0x40>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a40      	ldr	r2, [pc, #256]	; (8005568 <TIM_Base_SetConfig+0x13c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d108      	bne.n	800547e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a35      	ldr	r2, [pc, #212]	; (8005558 <TIM_Base_SetConfig+0x12c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d01f      	beq.n	80054c6 <TIM_Base_SetConfig+0x9a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548c:	d01b      	beq.n	80054c6 <TIM_Base_SetConfig+0x9a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a32      	ldr	r2, [pc, #200]	; (800555c <TIM_Base_SetConfig+0x130>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d017      	beq.n	80054c6 <TIM_Base_SetConfig+0x9a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a31      	ldr	r2, [pc, #196]	; (8005560 <TIM_Base_SetConfig+0x134>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <TIM_Base_SetConfig+0x9a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a30      	ldr	r2, [pc, #192]	; (8005564 <TIM_Base_SetConfig+0x138>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00f      	beq.n	80054c6 <TIM_Base_SetConfig+0x9a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a2f      	ldr	r2, [pc, #188]	; (8005568 <TIM_Base_SetConfig+0x13c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00b      	beq.n	80054c6 <TIM_Base_SetConfig+0x9a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2e      	ldr	r2, [pc, #184]	; (800556c <TIM_Base_SetConfig+0x140>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d007      	beq.n	80054c6 <TIM_Base_SetConfig+0x9a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2d      	ldr	r2, [pc, #180]	; (8005570 <TIM_Base_SetConfig+0x144>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d003      	beq.n	80054c6 <TIM_Base_SetConfig+0x9a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a2c      	ldr	r2, [pc, #176]	; (8005574 <TIM_Base_SetConfig+0x148>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d108      	bne.n	80054d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a16      	ldr	r2, [pc, #88]	; (8005558 <TIM_Base_SetConfig+0x12c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00f      	beq.n	8005524 <TIM_Base_SetConfig+0xf8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a18      	ldr	r2, [pc, #96]	; (8005568 <TIM_Base_SetConfig+0x13c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00b      	beq.n	8005524 <TIM_Base_SetConfig+0xf8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a17      	ldr	r2, [pc, #92]	; (800556c <TIM_Base_SetConfig+0x140>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d007      	beq.n	8005524 <TIM_Base_SetConfig+0xf8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a16      	ldr	r2, [pc, #88]	; (8005570 <TIM_Base_SetConfig+0x144>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_Base_SetConfig+0xf8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a15      	ldr	r2, [pc, #84]	; (8005574 <TIM_Base_SetConfig+0x148>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d103      	bne.n	800552c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b01      	cmp	r3, #1
 800553c:	d105      	bne.n	800554a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f023 0201 	bic.w	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	611a      	str	r2, [r3, #16]
  }
}
 800554a:	bf00      	nop
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40010000 	.word	0x40010000
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800
 8005564:	40000c00 	.word	0x40000c00
 8005568:	40010400 	.word	0x40010400
 800556c:	40014000 	.word	0x40014000
 8005570:	40014400 	.word	0x40014400
 8005574:	40014800 	.word	0x40014800

08005578 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	f023 0201 	bic.w	r2, r3, #1
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4b37      	ldr	r3, [pc, #220]	; (8005680 <TIM_OC1_SetConfig+0x108>)
 80055a4:	4013      	ands	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0303 	bic.w	r3, r3, #3
 80055ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f023 0302 	bic.w	r3, r3, #2
 80055c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a2d      	ldr	r2, [pc, #180]	; (8005684 <TIM_OC1_SetConfig+0x10c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00f      	beq.n	80055f4 <TIM_OC1_SetConfig+0x7c>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a2c      	ldr	r2, [pc, #176]	; (8005688 <TIM_OC1_SetConfig+0x110>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00b      	beq.n	80055f4 <TIM_OC1_SetConfig+0x7c>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a2b      	ldr	r2, [pc, #172]	; (800568c <TIM_OC1_SetConfig+0x114>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d007      	beq.n	80055f4 <TIM_OC1_SetConfig+0x7c>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a2a      	ldr	r2, [pc, #168]	; (8005690 <TIM_OC1_SetConfig+0x118>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d003      	beq.n	80055f4 <TIM_OC1_SetConfig+0x7c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a29      	ldr	r2, [pc, #164]	; (8005694 <TIM_OC1_SetConfig+0x11c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d10c      	bne.n	800560e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f023 0308 	bic.w	r3, r3, #8
 80055fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f023 0304 	bic.w	r3, r3, #4
 800560c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a1c      	ldr	r2, [pc, #112]	; (8005684 <TIM_OC1_SetConfig+0x10c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00f      	beq.n	8005636 <TIM_OC1_SetConfig+0xbe>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a1b      	ldr	r2, [pc, #108]	; (8005688 <TIM_OC1_SetConfig+0x110>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00b      	beq.n	8005636 <TIM_OC1_SetConfig+0xbe>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a1a      	ldr	r2, [pc, #104]	; (800568c <TIM_OC1_SetConfig+0x114>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d007      	beq.n	8005636 <TIM_OC1_SetConfig+0xbe>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a19      	ldr	r2, [pc, #100]	; (8005690 <TIM_OC1_SetConfig+0x118>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d003      	beq.n	8005636 <TIM_OC1_SetConfig+0xbe>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a18      	ldr	r2, [pc, #96]	; (8005694 <TIM_OC1_SetConfig+0x11c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d111      	bne.n	800565a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800563c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	621a      	str	r2, [r3, #32]
}
 8005674:	bf00      	nop
 8005676:	371c      	adds	r7, #28
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	fffeff8f 	.word	0xfffeff8f
 8005684:	40010000 	.word	0x40010000
 8005688:	40010400 	.word	0x40010400
 800568c:	40014000 	.word	0x40014000
 8005690:	40014400 	.word	0x40014400
 8005694:	40014800 	.word	0x40014800

08005698 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	f023 0210 	bic.w	r2, r3, #16
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4b34      	ldr	r3, [pc, #208]	; (8005794 <TIM_OC2_SetConfig+0xfc>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	021b      	lsls	r3, r3, #8
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f023 0320 	bic.w	r3, r3, #32
 80056e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a29      	ldr	r2, [pc, #164]	; (8005798 <TIM_OC2_SetConfig+0x100>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d003      	beq.n	8005700 <TIM_OC2_SetConfig+0x68>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a28      	ldr	r2, [pc, #160]	; (800579c <TIM_OC2_SetConfig+0x104>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d10d      	bne.n	800571c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4313      	orrs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800571a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a1e      	ldr	r2, [pc, #120]	; (8005798 <TIM_OC2_SetConfig+0x100>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00f      	beq.n	8005744 <TIM_OC2_SetConfig+0xac>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a1d      	ldr	r2, [pc, #116]	; (800579c <TIM_OC2_SetConfig+0x104>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d00b      	beq.n	8005744 <TIM_OC2_SetConfig+0xac>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a1c      	ldr	r2, [pc, #112]	; (80057a0 <TIM_OC2_SetConfig+0x108>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d007      	beq.n	8005744 <TIM_OC2_SetConfig+0xac>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a1b      	ldr	r2, [pc, #108]	; (80057a4 <TIM_OC2_SetConfig+0x10c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_OC2_SetConfig+0xac>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a1a      	ldr	r2, [pc, #104]	; (80057a8 <TIM_OC2_SetConfig+0x110>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d113      	bne.n	800576c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800574a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005752:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	621a      	str	r2, [r3, #32]
}
 8005786:	bf00      	nop
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	feff8fff 	.word	0xfeff8fff
 8005798:	40010000 	.word	0x40010000
 800579c:	40010400 	.word	0x40010400
 80057a0:	40014000 	.word	0x40014000
 80057a4:	40014400 	.word	0x40014400
 80057a8:	40014800 	.word	0x40014800

080057ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	4b33      	ldr	r3, [pc, #204]	; (80058a4 <TIM_OC3_SetConfig+0xf8>)
 80057d8:	4013      	ands	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0303 	bic.w	r3, r3, #3
 80057e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a28      	ldr	r2, [pc, #160]	; (80058a8 <TIM_OC3_SetConfig+0xfc>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d003      	beq.n	8005812 <TIM_OC3_SetConfig+0x66>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a27      	ldr	r2, [pc, #156]	; (80058ac <TIM_OC3_SetConfig+0x100>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d10d      	bne.n	800582e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800582c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a1d      	ldr	r2, [pc, #116]	; (80058a8 <TIM_OC3_SetConfig+0xfc>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00f      	beq.n	8005856 <TIM_OC3_SetConfig+0xaa>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a1c      	ldr	r2, [pc, #112]	; (80058ac <TIM_OC3_SetConfig+0x100>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00b      	beq.n	8005856 <TIM_OC3_SetConfig+0xaa>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a1b      	ldr	r2, [pc, #108]	; (80058b0 <TIM_OC3_SetConfig+0x104>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d007      	beq.n	8005856 <TIM_OC3_SetConfig+0xaa>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a1a      	ldr	r2, [pc, #104]	; (80058b4 <TIM_OC3_SetConfig+0x108>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d003      	beq.n	8005856 <TIM_OC3_SetConfig+0xaa>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a19      	ldr	r2, [pc, #100]	; (80058b8 <TIM_OC3_SetConfig+0x10c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d113      	bne.n	800587e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800585c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	621a      	str	r2, [r3, #32]
}
 8005898:	bf00      	nop
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	fffeff8f 	.word	0xfffeff8f
 80058a8:	40010000 	.word	0x40010000
 80058ac:	40010400 	.word	0x40010400
 80058b0:	40014000 	.word	0x40014000
 80058b4:	40014400 	.word	0x40014400
 80058b8:	40014800 	.word	0x40014800

080058bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4b24      	ldr	r3, [pc, #144]	; (8005978 <TIM_OC4_SetConfig+0xbc>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	021b      	lsls	r3, r3, #8
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	031b      	lsls	r3, r3, #12
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a19      	ldr	r2, [pc, #100]	; (800597c <TIM_OC4_SetConfig+0xc0>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00f      	beq.n	800593c <TIM_OC4_SetConfig+0x80>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a18      	ldr	r2, [pc, #96]	; (8005980 <TIM_OC4_SetConfig+0xc4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00b      	beq.n	800593c <TIM_OC4_SetConfig+0x80>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a17      	ldr	r2, [pc, #92]	; (8005984 <TIM_OC4_SetConfig+0xc8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d007      	beq.n	800593c <TIM_OC4_SetConfig+0x80>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a16      	ldr	r2, [pc, #88]	; (8005988 <TIM_OC4_SetConfig+0xcc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_OC4_SetConfig+0x80>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a15      	ldr	r2, [pc, #84]	; (800598c <TIM_OC4_SetConfig+0xd0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d109      	bne.n	8005950 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005942:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	019b      	lsls	r3, r3, #6
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	621a      	str	r2, [r3, #32]
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	feff8fff 	.word	0xfeff8fff
 800597c:	40010000 	.word	0x40010000
 8005980:	40010400 	.word	0x40010400
 8005984:	40014000 	.word	0x40014000
 8005988:	40014400 	.word	0x40014400
 800598c:	40014800 	.word	0x40014800

08005990 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <TIM_OC5_SetConfig+0xb0>)
 80059bc:	4013      	ands	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80059d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	041b      	lsls	r3, r3, #16
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a18      	ldr	r2, [pc, #96]	; (8005a44 <TIM_OC5_SetConfig+0xb4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00f      	beq.n	8005a06 <TIM_OC5_SetConfig+0x76>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a17      	ldr	r2, [pc, #92]	; (8005a48 <TIM_OC5_SetConfig+0xb8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00b      	beq.n	8005a06 <TIM_OC5_SetConfig+0x76>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a16      	ldr	r2, [pc, #88]	; (8005a4c <TIM_OC5_SetConfig+0xbc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d007      	beq.n	8005a06 <TIM_OC5_SetConfig+0x76>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a15      	ldr	r2, [pc, #84]	; (8005a50 <TIM_OC5_SetConfig+0xc0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d003      	beq.n	8005a06 <TIM_OC5_SetConfig+0x76>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a14      	ldr	r2, [pc, #80]	; (8005a54 <TIM_OC5_SetConfig+0xc4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d109      	bne.n	8005a1a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	021b      	lsls	r3, r3, #8
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	621a      	str	r2, [r3, #32]
}
 8005a34:	bf00      	nop
 8005a36:	371c      	adds	r7, #28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	fffeff8f 	.word	0xfffeff8f
 8005a44:	40010000 	.word	0x40010000
 8005a48:	40010400 	.word	0x40010400
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40014400 	.word	0x40014400
 8005a54:	40014800 	.word	0x40014800

08005a58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4b22      	ldr	r3, [pc, #136]	; (8005b0c <TIM_OC6_SetConfig+0xb4>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	021b      	lsls	r3, r3, #8
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	051b      	lsls	r3, r3, #20
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a19      	ldr	r2, [pc, #100]	; (8005b10 <TIM_OC6_SetConfig+0xb8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00f      	beq.n	8005ad0 <TIM_OC6_SetConfig+0x78>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a18      	ldr	r2, [pc, #96]	; (8005b14 <TIM_OC6_SetConfig+0xbc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00b      	beq.n	8005ad0 <TIM_OC6_SetConfig+0x78>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <TIM_OC6_SetConfig+0xc0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d007      	beq.n	8005ad0 <TIM_OC6_SetConfig+0x78>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a16      	ldr	r2, [pc, #88]	; (8005b1c <TIM_OC6_SetConfig+0xc4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_OC6_SetConfig+0x78>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a15      	ldr	r2, [pc, #84]	; (8005b20 <TIM_OC6_SetConfig+0xc8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d109      	bne.n	8005ae4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	029b      	lsls	r3, r3, #10
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	621a      	str	r2, [r3, #32]
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	feff8fff 	.word	0xfeff8fff
 8005b10:	40010000 	.word	0x40010000
 8005b14:	40010400 	.word	0x40010400
 8005b18:	40014000 	.word	0x40014000
 8005b1c:	40014400 	.word	0x40014400
 8005b20:	40014800 	.word	0x40014800

08005b24 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4b65      	ldr	r3, [pc, #404]	; (8005cd4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4b62      	ldr	r3, [pc, #392]	; (8005cd8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	4a5c      	ldr	r2, [pc, #368]	; (8005cdc <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	f000 80ab 	beq.w	8005cc8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005b72:	4a5a      	ldr	r2, [pc, #360]	; (8005cdc <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	f200 80a4 	bhi.w	8005cc2 <TIM_SlaveTimer_SetConfig+0x19e>
 8005b7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b7e:	f000 80a3 	beq.w	8005cc8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b86:	f200 809c 	bhi.w	8005cc2 <TIM_SlaveTimer_SetConfig+0x19e>
 8005b8a:	4a55      	ldr	r2, [pc, #340]	; (8005ce0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	f000 809b 	beq.w	8005cc8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005b92:	4a53      	ldr	r2, [pc, #332]	; (8005ce0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	f200 8094 	bhi.w	8005cc2 <TIM_SlaveTimer_SetConfig+0x19e>
 8005b9a:	4a52      	ldr	r2, [pc, #328]	; (8005ce4 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	f000 8093 	beq.w	8005cc8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005ba2:	4a50      	ldr	r2, [pc, #320]	; (8005ce4 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	f200 808c 	bhi.w	8005cc2 <TIM_SlaveTimer_SetConfig+0x19e>
 8005baa:	4a4f      	ldr	r2, [pc, #316]	; (8005ce8 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	f000 808b 	beq.w	8005cc8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005bb2:	4a4d      	ldr	r2, [pc, #308]	; (8005ce8 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	f200 8084 	bhi.w	8005cc2 <TIM_SlaveTimer_SetConfig+0x19e>
 8005bba:	4a4c      	ldr	r2, [pc, #304]	; (8005cec <TIM_SlaveTimer_SetConfig+0x1c8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	f000 8083 	beq.w	8005cc8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005bc2:	4a4a      	ldr	r2, [pc, #296]	; (8005cec <TIM_SlaveTimer_SetConfig+0x1c8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d87c      	bhi.n	8005cc2 <TIM_SlaveTimer_SetConfig+0x19e>
 8005bc8:	4a49      	ldr	r2, [pc, #292]	; (8005cf0 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d07c      	beq.n	8005cc8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005bce:	4a48      	ldr	r2, [pc, #288]	; (8005cf0 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d876      	bhi.n	8005cc2 <TIM_SlaveTimer_SetConfig+0x19e>
 8005bd4:	4a47      	ldr	r2, [pc, #284]	; (8005cf4 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d076      	beq.n	8005cc8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005bda:	4a46      	ldr	r2, [pc, #280]	; (8005cf4 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d870      	bhi.n	8005cc2 <TIM_SlaveTimer_SetConfig+0x19e>
 8005be0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005be4:	d070      	beq.n	8005cc8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005be6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005bea:	d86a      	bhi.n	8005cc2 <TIM_SlaveTimer_SetConfig+0x19e>
 8005bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf0:	d06a      	beq.n	8005cc8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf6:	d864      	bhi.n	8005cc2 <TIM_SlaveTimer_SetConfig+0x19e>
 8005bf8:	2b70      	cmp	r3, #112	; 0x70
 8005bfa:	d01a      	beq.n	8005c32 <TIM_SlaveTimer_SetConfig+0x10e>
 8005bfc:	2b70      	cmp	r3, #112	; 0x70
 8005bfe:	d860      	bhi.n	8005cc2 <TIM_SlaveTimer_SetConfig+0x19e>
 8005c00:	2b60      	cmp	r3, #96	; 0x60
 8005c02:	d054      	beq.n	8005cae <TIM_SlaveTimer_SetConfig+0x18a>
 8005c04:	2b60      	cmp	r3, #96	; 0x60
 8005c06:	d85c      	bhi.n	8005cc2 <TIM_SlaveTimer_SetConfig+0x19e>
 8005c08:	2b50      	cmp	r3, #80	; 0x50
 8005c0a:	d046      	beq.n	8005c9a <TIM_SlaveTimer_SetConfig+0x176>
 8005c0c:	2b50      	cmp	r3, #80	; 0x50
 8005c0e:	d858      	bhi.n	8005cc2 <TIM_SlaveTimer_SetConfig+0x19e>
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d019      	beq.n	8005c48 <TIM_SlaveTimer_SetConfig+0x124>
 8005c14:	2b40      	cmp	r3, #64	; 0x40
 8005c16:	d854      	bhi.n	8005cc2 <TIM_SlaveTimer_SetConfig+0x19e>
 8005c18:	2b30      	cmp	r3, #48	; 0x30
 8005c1a:	d055      	beq.n	8005cc8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c1c:	2b30      	cmp	r3, #48	; 0x30
 8005c1e:	d850      	bhi.n	8005cc2 <TIM_SlaveTimer_SetConfig+0x19e>
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d051      	beq.n	8005cc8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d84c      	bhi.n	8005cc2 <TIM_SlaveTimer_SetConfig+0x19e>
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d04d      	beq.n	8005cc8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c2c:	2b10      	cmp	r3, #16
 8005c2e:	d04b      	beq.n	8005cc8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005c30:	e047      	b.n	8005cc2 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005c42:	f000 f8b8 	bl	8005db6 <TIM_ETR_SetConfig>
      break;
 8005c46:	e040      	b.n	8005cca <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b05      	cmp	r3, #5
 8005c4e:	d101      	bne.n	8005c54 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e03b      	b.n	8005ccc <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6a1a      	ldr	r2, [r3, #32]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0201 	bic.w	r2, r2, #1
 8005c6a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c7a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	621a      	str	r2, [r3, #32]
      break;
 8005c98:	e017      	b.n	8005cca <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f000 f826 	bl	8005cf8 <TIM_TI1_ConfigInputStage>
      break;
 8005cac:	e00d      	b.n	8005cca <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f000 f84b 	bl	8005d56 <TIM_TI2_ConfigInputStage>
      break;
 8005cc0:	e003      	b.n	8005cca <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc6:	e000      	b.n	8005cca <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8005cc8:	bf00      	nop
  }

  return status;
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	ffcfff8f 	.word	0xffcfff8f
 8005cd8:	fffefff8 	.word	0xfffefff8
 8005cdc:	00200010 	.word	0x00200010
 8005ce0:	00100070 	.word	0x00100070
 8005ce4:	00100060 	.word	0x00100060
 8005ce8:	00100050 	.word	0x00100050
 8005cec:	00100040 	.word	0x00100040
 8005cf0:	00100030 	.word	0x00100030
 8005cf4:	00100020 	.word	0x00100020

08005cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f023 0201 	bic.w	r2, r3, #1
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f023 030a 	bic.w	r3, r3, #10
 8005d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	621a      	str	r2, [r3, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b087      	sub	sp, #28
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	60f8      	str	r0, [r7, #12]
 8005d5e:	60b9      	str	r1, [r7, #8]
 8005d60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	f023 0210 	bic.w	r2, r3, #16
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	031b      	lsls	r3, r3, #12
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b087      	sub	sp, #28
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
 8005dc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	021a      	lsls	r2, r3, #8
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	609a      	str	r2, [r3, #8]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b087      	sub	sp, #28
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	60f8      	str	r0, [r7, #12]
 8005dfe:	60b9      	str	r1, [r7, #8]
 8005e00:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f003 031f 	and.w	r3, r3, #31
 8005e08:	2201      	movs	r2, #1
 8005e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a1a      	ldr	r2, [r3, #32]
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	43db      	mvns	r3, r3
 8005e18:	401a      	ands	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a1a      	ldr	r2, [r3, #32]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	f003 031f 	and.w	r3, r3, #31
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	621a      	str	r2, [r3, #32]
}
 8005e34:	bf00      	nop
 8005e36:	371c      	adds	r7, #28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d109      	bne.n	8005e64 <HAL_TIMEx_PWMN_Start+0x24>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	bf14      	ite	ne
 8005e5c:	2301      	movne	r3, #1
 8005e5e:	2300      	moveq	r3, #0
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	e022      	b.n	8005eaa <HAL_TIMEx_PWMN_Start+0x6a>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d109      	bne.n	8005e7e <HAL_TIMEx_PWMN_Start+0x3e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	bf14      	ite	ne
 8005e76:	2301      	movne	r3, #1
 8005e78:	2300      	moveq	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	e015      	b.n	8005eaa <HAL_TIMEx_PWMN_Start+0x6a>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d109      	bne.n	8005e98 <HAL_TIMEx_PWMN_Start+0x58>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	bf14      	ite	ne
 8005e90:	2301      	movne	r3, #1
 8005e92:	2300      	moveq	r3, #0
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	e008      	b.n	8005eaa <HAL_TIMEx_PWMN_Start+0x6a>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	bf14      	ite	ne
 8005ea4:	2301      	movne	r3, #1
 8005ea6:	2300      	moveq	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e073      	b.n	8005f9a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d104      	bne.n	8005ec2 <HAL_TIMEx_PWMN_Start+0x82>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec0:	e013      	b.n	8005eea <HAL_TIMEx_PWMN_Start+0xaa>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d104      	bne.n	8005ed2 <HAL_TIMEx_PWMN_Start+0x92>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ed0:	e00b      	b.n	8005eea <HAL_TIMEx_PWMN_Start+0xaa>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d104      	bne.n	8005ee2 <HAL_TIMEx_PWMN_Start+0xa2>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ee0:	e003      	b.n	8005eea <HAL_TIMEx_PWMN_Start+0xaa>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2204      	movs	r2, #4
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 f972 	bl	80061dc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a25      	ldr	r2, [pc, #148]	; (8005fa4 <HAL_TIMEx_PWMN_Start+0x164>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d022      	beq.n	8005f58 <HAL_TIMEx_PWMN_Start+0x118>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f1a:	d01d      	beq.n	8005f58 <HAL_TIMEx_PWMN_Start+0x118>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a21      	ldr	r2, [pc, #132]	; (8005fa8 <HAL_TIMEx_PWMN_Start+0x168>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d018      	beq.n	8005f58 <HAL_TIMEx_PWMN_Start+0x118>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a20      	ldr	r2, [pc, #128]	; (8005fac <HAL_TIMEx_PWMN_Start+0x16c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d013      	beq.n	8005f58 <HAL_TIMEx_PWMN_Start+0x118>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1e      	ldr	r2, [pc, #120]	; (8005fb0 <HAL_TIMEx_PWMN_Start+0x170>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d00e      	beq.n	8005f58 <HAL_TIMEx_PWMN_Start+0x118>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a1d      	ldr	r2, [pc, #116]	; (8005fb4 <HAL_TIMEx_PWMN_Start+0x174>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d009      	beq.n	8005f58 <HAL_TIMEx_PWMN_Start+0x118>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a1b      	ldr	r2, [pc, #108]	; (8005fb8 <HAL_TIMEx_PWMN_Start+0x178>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d004      	beq.n	8005f58 <HAL_TIMEx_PWMN_Start+0x118>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a1a      	ldr	r2, [pc, #104]	; (8005fbc <HAL_TIMEx_PWMN_Start+0x17c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d115      	bne.n	8005f84 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	4b18      	ldr	r3, [pc, #96]	; (8005fc0 <HAL_TIMEx_PWMN_Start+0x180>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b06      	cmp	r3, #6
 8005f68:	d015      	beq.n	8005f96 <HAL_TIMEx_PWMN_Start+0x156>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f70:	d011      	beq.n	8005f96 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f042 0201 	orr.w	r2, r2, #1
 8005f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f82:	e008      	b.n	8005f96 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0201 	orr.w	r2, r2, #1
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	e000      	b.n	8005f98 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	40010000 	.word	0x40010000
 8005fa8:	40000400 	.word	0x40000400
 8005fac:	40000800 	.word	0x40000800
 8005fb0:	40000c00 	.word	0x40000c00
 8005fb4:	40010400 	.word	0x40010400
 8005fb8:	40001800 	.word	0x40001800
 8005fbc:	40014000 	.word	0x40014000
 8005fc0:	00010007 	.word	0x00010007

08005fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e06d      	b.n	80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a30      	ldr	r2, [pc, #192]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d004      	beq.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a2f      	ldr	r2, [pc, #188]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d108      	bne.n	8006022 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006016:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006028:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a20      	ldr	r2, [pc, #128]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d022      	beq.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604e:	d01d      	beq.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a1d      	ldr	r2, [pc, #116]	; (80060cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d018      	beq.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a1c      	ldr	r2, [pc, #112]	; (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d013      	beq.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1a      	ldr	r2, [pc, #104]	; (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00e      	beq.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a15      	ldr	r2, [pc, #84]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d009      	beq.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a16      	ldr	r2, [pc, #88]	; (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a15      	ldr	r2, [pc, #84]	; (80060dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d10c      	bne.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006092:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	4313      	orrs	r3, r2
 800609c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	40010000 	.word	0x40010000
 80060c8:	40010400 	.word	0x40010400
 80060cc:	40000400 	.word	0x40000400
 80060d0:	40000800 	.word	0x40000800
 80060d4:	40000c00 	.word	0x40000c00
 80060d8:	40001800 	.word	0x40001800
 80060dc:	40014000 	.word	0x40014000

080060e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e065      	b.n	80061c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	041b      	lsls	r3, r3, #16
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a16      	ldr	r2, [pc, #88]	; (80061d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d004      	beq.n	800618a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a14      	ldr	r2, [pc, #80]	; (80061d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d115      	bne.n	80061b6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	051b      	lsls	r3, r3, #20
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	40010000 	.word	0x40010000
 80061d8:	40010400 	.word	0x40010400

080061dc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	2204      	movs	r2, #4
 80061f0:	fa02 f303 	lsl.w	r3, r2, r3
 80061f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a1a      	ldr	r2, [r3, #32]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	43db      	mvns	r3, r3
 80061fe:	401a      	ands	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a1a      	ldr	r2, [r3, #32]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	fa01 f303 	lsl.w	r3, r1, r3
 8006214:	431a      	orrs	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	621a      	str	r2, [r3, #32]
}
 800621a:	bf00      	nop
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <memset>:
 8006226:	4402      	add	r2, r0
 8006228:	4603      	mov	r3, r0
 800622a:	4293      	cmp	r3, r2
 800622c:	d100      	bne.n	8006230 <memset+0xa>
 800622e:	4770      	bx	lr
 8006230:	f803 1b01 	strb.w	r1, [r3], #1
 8006234:	e7f9      	b.n	800622a <memset+0x4>
	...

08006238 <__libc_init_array>:
 8006238:	b570      	push	{r4, r5, r6, lr}
 800623a:	4d0d      	ldr	r5, [pc, #52]	; (8006270 <__libc_init_array+0x38>)
 800623c:	4c0d      	ldr	r4, [pc, #52]	; (8006274 <__libc_init_array+0x3c>)
 800623e:	1b64      	subs	r4, r4, r5
 8006240:	10a4      	asrs	r4, r4, #2
 8006242:	2600      	movs	r6, #0
 8006244:	42a6      	cmp	r6, r4
 8006246:	d109      	bne.n	800625c <__libc_init_array+0x24>
 8006248:	4d0b      	ldr	r5, [pc, #44]	; (8006278 <__libc_init_array+0x40>)
 800624a:	4c0c      	ldr	r4, [pc, #48]	; (800627c <__libc_init_array+0x44>)
 800624c:	f000 f818 	bl	8006280 <_init>
 8006250:	1b64      	subs	r4, r4, r5
 8006252:	10a4      	asrs	r4, r4, #2
 8006254:	2600      	movs	r6, #0
 8006256:	42a6      	cmp	r6, r4
 8006258:	d105      	bne.n	8006266 <__libc_init_array+0x2e>
 800625a:	bd70      	pop	{r4, r5, r6, pc}
 800625c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006260:	4798      	blx	r3
 8006262:	3601      	adds	r6, #1
 8006264:	e7ee      	b.n	8006244 <__libc_init_array+0xc>
 8006266:	f855 3b04 	ldr.w	r3, [r5], #4
 800626a:	4798      	blx	r3
 800626c:	3601      	adds	r6, #1
 800626e:	e7f2      	b.n	8006256 <__libc_init_array+0x1e>
 8006270:	080062b0 	.word	0x080062b0
 8006274:	080062b0 	.word	0x080062b0
 8006278:	080062b0 	.word	0x080062b0
 800627c:	080062b4 	.word	0x080062b4

08006280 <_init>:
 8006280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006282:	bf00      	nop
 8006284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006286:	bc08      	pop	{r3}
 8006288:	469e      	mov	lr, r3
 800628a:	4770      	bx	lr

0800628c <_fini>:
 800628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628e:	bf00      	nop
 8006290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006292:	bc08      	pop	{r3}
 8006294:	469e      	mov	lr, r3
 8006296:	4770      	bx	lr
