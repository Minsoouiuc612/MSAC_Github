
PWM_Signal_4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003660  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003908  08003908  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003908  08003908  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003908  08003908  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800390c  0800390c  0001390c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08003910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  24000010  08003920  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000160  08003920  00020160  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cff3  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aff  00000000  00000000  0002d074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  0002eb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c1  00000000  00000000  0002f820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003916d  00000000  00000000  000301e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e454  00000000  00000000  0006934e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0017e496  00000000  00000000  000777a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034f8  00000000  00000000  001f5c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001f9130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080038e0 	.word	0x080038e0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080038e0 	.word	0x080038e0

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800040a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800040e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000410:	bf00      	nop
 8000412:	4b34      	ldr	r3, [pc, #208]	; (80004e4 <main+0xe0>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d004      	beq.n	8000428 <main+0x24>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	1e5a      	subs	r2, r3, #1
 8000422:	607a      	str	r2, [r7, #4]
 8000424:	2b00      	cmp	r3, #0
 8000426:	dcf4      	bgt.n	8000412 <main+0xe>
  if ( timeout < 0 )
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b00      	cmp	r3, #0
 800042c:	da01      	bge.n	8000432 <main+0x2e>
  {
  Error_Handler();
 800042e:	f000 fb4b 	bl	8000ac8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000432:	f000 fce1 	bl	8000df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000436:	f000 f85f 	bl	80004f8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800043a:	4b2a      	ldr	r3, [pc, #168]	; (80004e4 <main+0xe0>)
 800043c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000440:	4a28      	ldr	r2, [pc, #160]	; (80004e4 <main+0xe0>)
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800044a:	4b26      	ldr	r3, [pc, #152]	; (80004e4 <main+0xe0>)
 800044c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000454:	603b      	str	r3, [r7, #0]
 8000456:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000458:	2000      	movs	r0, #0
 800045a:	f000 ffff 	bl	800145c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800045e:	2100      	movs	r1, #0
 8000460:	2000      	movs	r0, #0
 8000462:	f001 f815 	bl	8001490 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800046a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800046c:	bf00      	nop
 800046e:	4b1d      	ldr	r3, [pc, #116]	; (80004e4 <main+0xe0>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d104      	bne.n	8000484 <main+0x80>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	1e5a      	subs	r2, r3, #1
 800047e:	607a      	str	r2, [r7, #4]
 8000480:	2b00      	cmp	r3, #0
 8000482:	dcf4      	bgt.n	800046e <main+0x6a>
if ( timeout < 0 )
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b00      	cmp	r3, #0
 8000488:	da01      	bge.n	800048e <main+0x8a>
{
Error_Handler();
 800048a:	f000 fb1d 	bl	8000ac8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048e:	f000 fae3 	bl	8000a58 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000492:	f000 f89b 	bl	80005cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000496:	f000 f941 	bl	800071c <MX_TIM2_Init>
  MX_TIM3_Init();
 800049a:	f000 f9d1 	bl	8000840 <MX_TIM3_Init>
  MX_TIM4_Init();
 800049e:	f000 fa5f 	bl	8000960 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004a2:	2100      	movs	r1, #0
 80004a4:	4810      	ldr	r0, [pc, #64]	; (80004e8 <main+0xe4>)
 80004a6:	f002 f8fb 	bl	80026a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80004aa:	2104      	movs	r1, #4
 80004ac:	480e      	ldr	r0, [pc, #56]	; (80004e8 <main+0xe4>)
 80004ae:	f002 f8f7 	bl	80026a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80004b2:	2108      	movs	r1, #8
 80004b4:	480c      	ldr	r0, [pc, #48]	; (80004e8 <main+0xe4>)
 80004b6:	f002 f8f3 	bl	80026a0 <HAL_TIM_PWM_Start>


  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004ba:	2100      	movs	r1, #0
 80004bc:	480b      	ldr	r0, [pc, #44]	; (80004ec <main+0xe8>)
 80004be:	f002 f8ef 	bl	80026a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004c2:	2104      	movs	r1, #4
 80004c4:	4809      	ldr	r0, [pc, #36]	; (80004ec <main+0xe8>)
 80004c6:	f002 f8eb 	bl	80026a0 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80004ca:	2104      	movs	r1, #4
 80004cc:	4808      	ldr	r0, [pc, #32]	; (80004f0 <main+0xec>)
 80004ce:	f002 f8e7 	bl	80026a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80004d2:	2108      	movs	r1, #8
 80004d4:	4806      	ldr	r0, [pc, #24]	; (80004f0 <main+0xec>)
 80004d6:	f002 f8e3 	bl	80026a0 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80004da:	2108      	movs	r1, #8
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <main+0xf0>)
 80004de:	f002 f8df 	bl	80026a0 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <main+0xde>
 80004e4:	58024400 	.word	0x58024400
 80004e8:	2400002c 	.word	0x2400002c
 80004ec:	24000078 	.word	0x24000078
 80004f0:	240000c4 	.word	0x240000c4
 80004f4:	24000110 	.word	0x24000110

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b09c      	sub	sp, #112	; 0x70
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000502:	224c      	movs	r2, #76	; 0x4c
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f003 f9be 	bl	8003888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2220      	movs	r2, #32
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f003 f9b8 	bl	8003888 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000518:	2004      	movs	r0, #4
 800051a:	f000 ffcd 	bl	80014b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800051e:	2300      	movs	r3, #0
 8000520:	603b      	str	r3, [r7, #0]
 8000522:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <SystemClock_Config+0xcc>)
 8000524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000526:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <SystemClock_Config+0xcc>)
 8000528:	f023 0301 	bic.w	r3, r3, #1
 800052c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800052e:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <SystemClock_Config+0xcc>)
 8000530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <SystemClock_Config+0xd0>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000540:	4a21      	ldr	r2, [pc, #132]	; (80005c8 <SystemClock_Config+0xd0>)
 8000542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <SystemClock_Config+0xd0>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000554:	bf00      	nop
 8000556:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <SystemClock_Config+0xd0>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800055e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000562:	d1f8      	bne.n	8000556 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000568:	2301      	movs	r3, #1
 800056a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056c:	2340      	movs	r3, #64	; 0x40
 800056e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000570:	2300      	movs	r3, #0
 8000572:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000578:	4618      	mov	r0, r3
 800057a:	f000 fff7 	bl	800156c <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000584:	f000 faa0 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	233f      	movs	r3, #63	; 0x3f
 800058a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2101      	movs	r1, #1
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fc37 	bl	8001e20 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b8:	f000 fa86 	bl	8000ac8 <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3770      	adds	r7, #112	; 0x70
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	58000400 	.word	0x58000400
 80005c8:	58024800 	.word	0x58024800

080005cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	; 0x58
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]
 80005ee:	615a      	str	r2, [r3, #20]
 80005f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	222c      	movs	r2, #44	; 0x2c
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f003 f945 	bl	8003888 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005fe:	4b45      	ldr	r3, [pc, #276]	; (8000714 <MX_TIM1_Init+0x148>)
 8000600:	4a45      	ldr	r2, [pc, #276]	; (8000718 <MX_TIM1_Init+0x14c>)
 8000602:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 8000604:	4b43      	ldr	r3, [pc, #268]	; (8000714 <MX_TIM1_Init+0x148>)
 8000606:	f240 227f 	movw	r2, #639	; 0x27f
 800060a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060c:	4b41      	ldr	r3, [pc, #260]	; (8000714 <MX_TIM1_Init+0x148>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000612:	4b40      	ldr	r3, [pc, #256]	; (8000714 <MX_TIM1_Init+0x148>)
 8000614:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000618:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061a:	4b3e      	ldr	r3, [pc, #248]	; (8000714 <MX_TIM1_Init+0x148>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000620:	4b3c      	ldr	r3, [pc, #240]	; (8000714 <MX_TIM1_Init+0x148>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000626:	4b3b      	ldr	r3, [pc, #236]	; (8000714 <MX_TIM1_Init+0x148>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800062c:	4839      	ldr	r0, [pc, #228]	; (8000714 <MX_TIM1_Init+0x148>)
 800062e:	f001 ffdf 	bl	80025f0 <HAL_TIM_PWM_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000638:	f000 fa46 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800063c:	4835      	ldr	r0, [pc, #212]	; (8000714 <MX_TIM1_Init+0x148>)
 800063e:	f001 ff76 	bl	800252e <HAL_TIM_OC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000648:	f000 fa3e 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800064c:	2350      	movs	r3, #80	; 0x50
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000650:	2300      	movs	r3, #0
 8000652:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000654:	2300      	movs	r3, #0
 8000656:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000658:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800065c:	4619      	mov	r1, r3
 800065e:	482d      	ldr	r0, [pc, #180]	; (8000714 <MX_TIM1_Init+0x148>)
 8000660:	f003 f806 	bl	8003670 <HAL_TIMEx_MasterConfigSynchronization>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800066a:	f000 fa2d 	bl	8000ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800066e:	2360      	movs	r3, #96	; 0x60
 8000670:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 400;
 8000672:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000676:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000678:	2300      	movs	r3, #0
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000684:	2300      	movs	r3, #0
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000688:	2300      	movs	r3, #0
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800068c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000690:	2200      	movs	r2, #0
 8000692:	4619      	mov	r1, r3
 8000694:	481f      	ldr	r0, [pc, #124]	; (8000714 <MX_TIM1_Init+0x148>)
 8000696:	f002 f98b 	bl	80029b0 <HAL_TIM_PWM_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80006a0:	f000 fa12 	bl	8000ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80006a4:	2310      	movs	r3, #16
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ac:	2204      	movs	r2, #4
 80006ae:	4619      	mov	r1, r3
 80006b0:	4818      	ldr	r0, [pc, #96]	; (8000714 <MX_TIM1_Init+0x148>)
 80006b2:	f002 f903 	bl	80028bc <HAL_TIM_OC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80006bc:	f000 fa04 	bl	8000ac8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	4619      	mov	r1, r3
 80006f4:	4807      	ldr	r0, [pc, #28]	; (8000714 <MX_TIM1_Init+0x148>)
 80006f6:	f003 f849 	bl	800378c <HAL_TIMEx_ConfigBreakDeadTime>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000700:	f000 f9e2 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000704:	4803      	ldr	r0, [pc, #12]	; (8000714 <MX_TIM1_Init+0x148>)
 8000706:	f000 fa6f 	bl	8000be8 <HAL_TIM_MspPostInit>

}
 800070a:	bf00      	nop
 800070c:	3758      	adds	r7, #88	; 0x58
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2400002c 	.word	0x2400002c
 8000718:	40010000 	.word	0x40010000

0800071c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b090      	sub	sp, #64	; 0x40
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
 800074c:	615a      	str	r2, [r3, #20]
 800074e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000750:	4b3a      	ldr	r3, [pc, #232]	; (800083c <MX_TIM2_Init+0x120>)
 8000752:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000756:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8000758:	4b38      	ldr	r3, [pc, #224]	; (800083c <MX_TIM2_Init+0x120>)
 800075a:	f240 227f 	movw	r2, #639	; 0x27f
 800075e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000760:	4b36      	ldr	r3, [pc, #216]	; (800083c <MX_TIM2_Init+0x120>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000766:	4b35      	ldr	r3, [pc, #212]	; (800083c <MX_TIM2_Init+0x120>)
 8000768:	f240 32e7 	movw	r2, #999	; 0x3e7
 800076c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076e:	4b33      	ldr	r3, [pc, #204]	; (800083c <MX_TIM2_Init+0x120>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000774:	4b31      	ldr	r3, [pc, #196]	; (800083c <MX_TIM2_Init+0x120>)
 8000776:	2280      	movs	r2, #128	; 0x80
 8000778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800077a:	4830      	ldr	r0, [pc, #192]	; (800083c <MX_TIM2_Init+0x120>)
 800077c:	f001 fe80 	bl	8002480 <HAL_TIM_Base_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 f99f 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800078a:	482c      	ldr	r0, [pc, #176]	; (800083c <MX_TIM2_Init+0x120>)
 800078c:	f001 ff30 	bl	80025f0 <HAL_TIM_PWM_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000796:	f000 f997 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800079a:	4828      	ldr	r0, [pc, #160]	; (800083c <MX_TIM2_Init+0x120>)
 800079c:	f001 fec7 	bl	800252e <HAL_TIM_OC_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007a6:	f000 f98f 	bl	8000ac8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80007aa:	2306      	movs	r3, #6
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80007b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b6:	4619      	mov	r1, r3
 80007b8:	4820      	ldr	r0, [pc, #128]	; (800083c <MX_TIM2_Init+0x120>)
 80007ba:	f002 fa0d 	bl	8002bd8 <HAL_TIM_SlaveConfigSynchro>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80007c4:	f000 f980 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80007c8:	2350      	movs	r3, #80	; 0x50
 80007ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	4619      	mov	r1, r3
 80007d6:	4819      	ldr	r0, [pc, #100]	; (800083c <MX_TIM2_Init+0x120>)
 80007d8:	f002 ff4a 	bl	8003670 <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80007e2:	f000 f971 	bl	8000ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e6:	2360      	movs	r3, #96	; 0x60
 80007e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 600;
 80007ea:	f44f 7316 	mov.w	r3, #600	; 0x258
 80007ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	4619      	mov	r1, r3
 80007fe:	480f      	ldr	r0, [pc, #60]	; (800083c <MX_TIM2_Init+0x120>)
 8000800:	f002 f8d6 	bl	80029b0 <HAL_TIM_PWM_ConfigChannel>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800080a:	f000 f95d 	bl	8000ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800080e:	2310      	movs	r3, #16
 8000810:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750;
 8000812:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000816:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2204      	movs	r2, #4
 800081c:	4619      	mov	r1, r3
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <MX_TIM2_Init+0x120>)
 8000820:	f002 f84c 	bl	80028bc <HAL_TIM_OC_ConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 800082a:	f000 f94d 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800082e:	4803      	ldr	r0, [pc, #12]	; (800083c <MX_TIM2_Init+0x120>)
 8000830:	f000 f9da 	bl	8000be8 <HAL_TIM_MspPostInit>

}
 8000834:	bf00      	nop
 8000836:	3740      	adds	r7, #64	; 0x40
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	24000078 	.word	0x24000078

08000840 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b090      	sub	sp, #64	; 0x40
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
 8000870:	615a      	str	r2, [r3, #20]
 8000872:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000874:	4b38      	ldr	r3, [pc, #224]	; (8000958 <MX_TIM3_Init+0x118>)
 8000876:	4a39      	ldr	r2, [pc, #228]	; (800095c <MX_TIM3_Init+0x11c>)
 8000878:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 800087a:	4b37      	ldr	r3, [pc, #220]	; (8000958 <MX_TIM3_Init+0x118>)
 800087c:	f240 227f 	movw	r2, #639	; 0x27f
 8000880:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000882:	4b35      	ldr	r3, [pc, #212]	; (8000958 <MX_TIM3_Init+0x118>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000888:	4b33      	ldr	r3, [pc, #204]	; (8000958 <MX_TIM3_Init+0x118>)
 800088a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800088e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000890:	4b31      	ldr	r3, [pc, #196]	; (8000958 <MX_TIM3_Init+0x118>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000896:	4b30      	ldr	r3, [pc, #192]	; (8000958 <MX_TIM3_Init+0x118>)
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800089c:	482e      	ldr	r0, [pc, #184]	; (8000958 <MX_TIM3_Init+0x118>)
 800089e:	f001 fdef 	bl	8002480 <HAL_TIM_Base_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80008a8:	f000 f90e 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008ac:	482a      	ldr	r0, [pc, #168]	; (8000958 <MX_TIM3_Init+0x118>)
 80008ae:	f001 fe9f 	bl	80025f0 <HAL_TIM_PWM_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80008b8:	f000 f906 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80008bc:	4826      	ldr	r0, [pc, #152]	; (8000958 <MX_TIM3_Init+0x118>)
 80008be:	f001 fe36 	bl	800252e <HAL_TIM_OC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008c8:	f000 f8fe 	bl	8000ac8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80008cc:	2306      	movs	r3, #6
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80008d0:	2310      	movs	r3, #16
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80008d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d8:	4619      	mov	r1, r3
 80008da:	481f      	ldr	r0, [pc, #124]	; (8000958 <MX_TIM3_Init+0x118>)
 80008dc:	f002 f97c 	bl	8002bd8 <HAL_TIM_SlaveConfigSynchro>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80008e6:	f000 f8ef 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 80008ea:	2360      	movs	r3, #96	; 0x60
 80008ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008f2:	f107 0320 	add.w	r3, r7, #32
 80008f6:	4619      	mov	r1, r3
 80008f8:	4817      	ldr	r0, [pc, #92]	; (8000958 <MX_TIM3_Init+0x118>)
 80008fa:	f002 feb9 	bl	8003670 <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000904:	f000 f8e0 	bl	8000ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000908:	2360      	movs	r3, #96	; 0x60
 800090a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 400;
 800090c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000910:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2204      	movs	r2, #4
 800091e:	4619      	mov	r1, r3
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <MX_TIM3_Init+0x118>)
 8000922:	f002 f845 	bl	80029b0 <HAL_TIM_PWM_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 800092c:	f000 f8cc 	bl	8000ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000930:	2310      	movs	r3, #16
 8000932:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2208      	movs	r2, #8
 8000938:	4619      	mov	r1, r3
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <MX_TIM3_Init+0x118>)
 800093c:	f001 ffbe 	bl	80028bc <HAL_TIM_OC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 8000946:	f000 f8bf 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800094a:	4803      	ldr	r0, [pc, #12]	; (8000958 <MX_TIM3_Init+0x118>)
 800094c:	f000 f94c 	bl	8000be8 <HAL_TIM_MspPostInit>

}
 8000950:	bf00      	nop
 8000952:	3740      	adds	r7, #64	; 0x40
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	240000c4 	.word	0x240000c4
 800095c:	40000400 	.word	0x40000400

08000960 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b090      	sub	sp, #64	; 0x40
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000976:	f107 0320 	add.w	r3, r7, #32
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
 8000990:	615a      	str	r2, [r3, #20]
 8000992:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000994:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <MX_TIM4_Init+0xf0>)
 8000996:	4a2f      	ldr	r2, [pc, #188]	; (8000a54 <MX_TIM4_Init+0xf4>)
 8000998:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 800099a:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <MX_TIM4_Init+0xf0>)
 800099c:	f240 227f 	movw	r2, #639	; 0x27f
 80009a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <MX_TIM4_Init+0xf0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80009a8:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <MX_TIM4_Init+0xf0>)
 80009aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b0:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <MX_TIM4_Init+0xf0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b6:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <MX_TIM4_Init+0xf0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009bc:	4824      	ldr	r0, [pc, #144]	; (8000a50 <MX_TIM4_Init+0xf0>)
 80009be:	f001 fd5f 	bl	8002480 <HAL_TIM_Base_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80009c8:	f000 f87e 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009cc:	4820      	ldr	r0, [pc, #128]	; (8000a50 <MX_TIM4_Init+0xf0>)
 80009ce:	f001 fe0f 	bl	80025f0 <HAL_TIM_PWM_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80009d8:	f000 f876 	bl	8000ac8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80009dc:	2306      	movs	r3, #6
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 80009e0:	2320      	movs	r3, #32
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80009e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e8:	4619      	mov	r1, r3
 80009ea:	4819      	ldr	r0, [pc, #100]	; (8000a50 <MX_TIM4_Init+0xf0>)
 80009ec:	f002 f8f4 	bl	8002bd8 <HAL_TIM_SlaveConfigSynchro>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80009f6:	f000 f867 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 80009fa:	2360      	movs	r3, #96	; 0x60
 80009fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a02:	f107 0320 	add.w	r3, r7, #32
 8000a06:	4619      	mov	r1, r3
 8000a08:	4811      	ldr	r0, [pc, #68]	; (8000a50 <MX_TIM4_Init+0xf0>)
 8000a0a:	f002 fe31 	bl	8003670 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8000a14:	f000 f858 	bl	8000ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a18:	2360      	movs	r3, #96	; 0x60
 8000a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 600;
 8000a1c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000a20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2208      	movs	r2, #8
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4807      	ldr	r0, [pc, #28]	; (8000a50 <MX_TIM4_Init+0xf0>)
 8000a32:	f001 ffbd 	bl	80029b0 <HAL_TIM_PWM_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000a3c:	f000 f844 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <MX_TIM4_Init+0xf0>)
 8000a42:	f000 f8d1 	bl	8000be8 <HAL_TIM_MspPostInit>

}
 8000a46:	bf00      	nop
 8000a48:	3740      	adds	r7, #64	; 0x40
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	24000110 	.word	0x24000110
 8000a54:	40000800 	.word	0x40000800

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <MX_GPIO_Init+0x6c>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a64:	4a17      	ldr	r2, [pc, #92]	; (8000ac4 <MX_GPIO_Init+0x6c>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <MX_GPIO_Init+0x6c>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_GPIO_Init+0x6c>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a82:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <MX_GPIO_Init+0x6c>)
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <MX_GPIO_Init+0x6c>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	f003 0308 	and.w	r3, r3, #8
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <MX_GPIO_Init+0x6c>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <MX_GPIO_Init+0x6c>)
 8000aa2:	f043 0302 	orr.w	r3, r3, #2
 8000aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_GPIO_Init+0x6c>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	58024400 	.word	0x58024400

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_MspInit+0x30>)
 8000adc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ae0:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x30>)
 8000ae2:	f043 0302 	orr.w	r3, r3, #2
 8000ae6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x30>)
 8000aec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	58024400 	.word	0x58024400

08000b08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d10e      	bne.n	8000b38 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_TIM_PWM_MspInit+0x40>)
 8000b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b20:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <HAL_TIM_PWM_MspInit+0x40>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <HAL_TIM_PWM_MspInit+0x40>)
 8000b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40010000 	.word	0x40010000
 8000b48:	58024400 	.word	0x58024400

08000b4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b5c:	d10f      	bne.n	8000b7e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <HAL_TIM_Base_MspInit+0x90>)
 8000b60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b64:	4a1d      	ldr	r2, [pc, #116]	; (8000bdc <HAL_TIM_Base_MspInit+0x90>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <HAL_TIM_Base_MspInit+0x90>)
 8000b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b7c:	e028      	b.n	8000bd0 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <HAL_TIM_Base_MspInit+0x94>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d10f      	bne.n	8000ba8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_TIM_Base_MspInit+0x90>)
 8000b8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b8e:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <HAL_TIM_Base_MspInit+0x90>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <HAL_TIM_Base_MspInit+0x90>)
 8000b9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
}
 8000ba6:	e013      	b.n	8000bd0 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM4)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <HAL_TIM_Base_MspInit+0x98>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d10e      	bne.n	8000bd0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_TIM_Base_MspInit+0x90>)
 8000bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bb8:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <HAL_TIM_Base_MspInit+0x90>)
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_TIM_Base_MspInit+0x90>)
 8000bc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	371c      	adds	r7, #28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	58024400 	.word	0x58024400
 8000be0:	40000400 	.word	0x40000400
 8000be4:	40000800 	.word	0x40000800

08000be8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08c      	sub	sp, #48	; 0x30
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a4b      	ldr	r2, [pc, #300]	; (8000d34 <HAL_TIM_MspPostInit+0x14c>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d120      	bne.n	8000c4c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b4b      	ldr	r3, [pc, #300]	; (8000d38 <HAL_TIM_MspPostInit+0x150>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	4a49      	ldr	r2, [pc, #292]	; (8000d38 <HAL_TIM_MspPostInit+0x150>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1a:	4b47      	ldr	r3, [pc, #284]	; (8000d38 <HAL_TIM_MspPostInit+0x150>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	61bb      	str	r3, [r7, #24]
 8000c26:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	483d      	ldr	r0, [pc, #244]	; (8000d3c <HAL_TIM_MspPostInit+0x154>)
 8000c46:	f000 fa59 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c4a:	e06e      	b.n	8000d2a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM2)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c54:	d11f      	bne.n	8000c96 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b38      	ldr	r3, [pc, #224]	; (8000d38 <HAL_TIM_MspPostInit+0x150>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	4a36      	ldr	r2, [pc, #216]	; (8000d38 <HAL_TIM_MspPostInit+0x150>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c66:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <HAL_TIM_MspPostInit+0x150>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c74:	2301      	movs	r3, #1
 8000c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	482b      	ldr	r0, [pc, #172]	; (8000d3c <HAL_TIM_MspPostInit+0x154>)
 8000c90:	f000 fa34 	bl	80010fc <HAL_GPIO_Init>
}
 8000c94:	e049      	b.n	8000d2a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM3)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a29      	ldr	r2, [pc, #164]	; (8000d40 <HAL_TIM_MspPostInit+0x158>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d11f      	bne.n	8000ce0 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca0:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <HAL_TIM_MspPostInit+0x150>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <HAL_TIM_MspPostInit+0x150>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb0:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <HAL_TIM_MspPostInit+0x150>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cbe:	2320      	movs	r3, #32
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	481a      	ldr	r0, [pc, #104]	; (8000d44 <HAL_TIM_MspPostInit+0x15c>)
 8000cda:	f000 fa0f 	bl	80010fc <HAL_GPIO_Init>
}
 8000cde:	e024      	b.n	8000d2a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a18      	ldr	r2, [pc, #96]	; (8000d48 <HAL_TIM_MspPostInit+0x160>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d11f      	bne.n	8000d2a <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <HAL_TIM_MspPostInit+0x150>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf0:	4a11      	ldr	r2, [pc, #68]	; (8000d38 <HAL_TIM_MspPostInit+0x150>)
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_TIM_MspPostInit+0x150>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	f003 0308 	and.w	r3, r3, #8
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	4809      	ldr	r0, [pc, #36]	; (8000d4c <HAL_TIM_MspPostInit+0x164>)
 8000d26:	f000 f9e9 	bl	80010fc <HAL_GPIO_Init>
}
 8000d2a:	bf00      	nop
 8000d2c:	3730      	adds	r7, #48	; 0x30
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40010000 	.word	0x40010000
 8000d38:	58024400 	.word	0x58024400
 8000d3c:	58020000 	.word	0x58020000
 8000d40:	40000400 	.word	0x40000400
 8000d44:	58020400 	.word	0x58020400
 8000d48:	40000800 	.word	0x40000800
 8000d4c:	58020c00 	.word	0x58020c00

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9c:	f000 f89e 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ddc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000da8:	f7ff fa96 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dae:	490d      	ldr	r1, [pc, #52]	; (8000de4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc4:	4c0a      	ldr	r4, [pc, #40]	; (8000df0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f002 fd61 	bl	8003898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd6:	f7ff fb15 	bl	8000404 <main>
  bx  lr
 8000dda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ddc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000de0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000de4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000de8:	08003910 	.word	0x08003910
  ldr r2, =_sbss
 8000dec:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000df0:	24000160 	.word	0x24000160

08000df4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC3_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfe:	2003      	movs	r0, #3
 8000e00:	f000 f94a 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e04:	f001 f9c2 	bl	800218c <HAL_RCC_GetSysClockFreq>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_Init+0x68>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	0a1b      	lsrs	r3, r3, #8
 8000e10:	f003 030f 	and.w	r3, r3, #15
 8000e14:	4913      	ldr	r1, [pc, #76]	; (8000e64 <HAL_Init+0x6c>)
 8000e16:	5ccb      	ldrb	r3, [r1, r3]
 8000e18:	f003 031f 	and.w	r3, r3, #31
 8000e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_Init+0x68>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <HAL_Init+0x6c>)
 8000e2c:	5cd3      	ldrb	r3, [r2, r3]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	fa22 f303 	lsr.w	r3, r2, r3
 8000e38:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <HAL_Init+0x70>)
 8000e3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <HAL_Init+0x74>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 f814 	bl	8000e70 <HAL_InitTick>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e002      	b.n	8000e58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e52:	f7ff fe3f 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58024400 	.word	0x58024400
 8000e64:	080038f8 	.word	0x080038f8
 8000e68:	24000004 	.word	0x24000004
 8000e6c:	24000000 	.word	0x24000000

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_InitTick+0x60>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d101      	bne.n	8000e84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e021      	b.n	8000ec8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <HAL_InitTick+0x64>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_InitTick+0x60>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f921 	bl	80010e2 <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00e      	b.n	8000ec8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d80a      	bhi.n	8000ec6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f000 f8f9 	bl	80010ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <HAL_InitTick+0x68>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2400000c 	.word	0x2400000c
 8000ed4:	24000000 	.word	0x24000000
 8000ed8:	24000008 	.word	0x24000008

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	2400000c 	.word	0x2400000c
 8000f00:	2400015c 	.word	0x2400015c

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	2400015c 	.word	0x2400015c

08000f1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_GetREVID+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	0c1b      	lsrs	r3, r3, #16
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	5c001000 	.word	0x5c001000

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <__NVIC_SetPriorityGrouping+0x40>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x40>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00
 8000f78:	05fa0000 	.word	0x05fa0000

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f7ff ff8e 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff47 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010bc:	f7ff ff5e 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 80010c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff ff90 	bl	8000fec <NVIC_EncodePriority>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff5f 	bl	8000f98 <__NVIC_SetPriority>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffb2 	bl	8001054 <SysTick_Config>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800110a:	4b89      	ldr	r3, [pc, #548]	; (8001330 <HAL_GPIO_Init+0x234>)
 800110c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800110e:	e194      	b.n	800143a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2101      	movs	r1, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 8186 	beq.w	8001434 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b01      	cmp	r3, #1
 8001132:	d005      	beq.n	8001140 <HAL_GPIO_Init+0x44>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d130      	bne.n	80011a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001176:	2201      	movs	r2, #1
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	091b      	lsrs	r3, r3, #4
 800118c:	f003 0201 	and.w	r2, r3, #1
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d017      	beq.n	80011de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2203      	movs	r2, #3
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d123      	bne.n	8001232 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	08da      	lsrs	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3208      	adds	r2, #8
 80011f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	691a      	ldr	r2, [r3, #16]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	08da      	lsrs	r2, r3, #3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3208      	adds	r2, #8
 800122c:	69b9      	ldr	r1, [r7, #24]
 800122e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0203 	and.w	r2, r3, #3
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80e0 	beq.w	8001434 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001274:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <HAL_GPIO_Init+0x238>)
 8001276:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800127a:	4a2e      	ldr	r2, [pc, #184]	; (8001334 <HAL_GPIO_Init+0x238>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001284:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <HAL_GPIO_Init+0x238>)
 8001286:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001292:	4a29      	ldr	r2, [pc, #164]	; (8001338 <HAL_GPIO_Init+0x23c>)
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a20      	ldr	r2, [pc, #128]	; (800133c <HAL_GPIO_Init+0x240>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d052      	beq.n	8001364 <HAL_GPIO_Init+0x268>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a1f      	ldr	r2, [pc, #124]	; (8001340 <HAL_GPIO_Init+0x244>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d031      	beq.n	800132a <HAL_GPIO_Init+0x22e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a1e      	ldr	r2, [pc, #120]	; (8001344 <HAL_GPIO_Init+0x248>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d02b      	beq.n	8001326 <HAL_GPIO_Init+0x22a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_GPIO_Init+0x24c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d025      	beq.n	8001322 <HAL_GPIO_Init+0x226>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a1c      	ldr	r2, [pc, #112]	; (800134c <HAL_GPIO_Init+0x250>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d01f      	beq.n	800131e <HAL_GPIO_Init+0x222>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a1b      	ldr	r2, [pc, #108]	; (8001350 <HAL_GPIO_Init+0x254>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d019      	beq.n	800131a <HAL_GPIO_Init+0x21e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a1a      	ldr	r2, [pc, #104]	; (8001354 <HAL_GPIO_Init+0x258>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0x21a>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a19      	ldr	r2, [pc, #100]	; (8001358 <HAL_GPIO_Init+0x25c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00d      	beq.n	8001312 <HAL_GPIO_Init+0x216>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a18      	ldr	r2, [pc, #96]	; (800135c <HAL_GPIO_Init+0x260>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d007      	beq.n	800130e <HAL_GPIO_Init+0x212>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a17      	ldr	r2, [pc, #92]	; (8001360 <HAL_GPIO_Init+0x264>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_GPIO_Init+0x20e>
 8001306:	2309      	movs	r3, #9
 8001308:	e02d      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 800130a:	230a      	movs	r3, #10
 800130c:	e02b      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 800130e:	2308      	movs	r3, #8
 8001310:	e029      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 8001312:	2307      	movs	r3, #7
 8001314:	e027      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 8001316:	2306      	movs	r3, #6
 8001318:	e025      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 800131a:	2305      	movs	r3, #5
 800131c:	e023      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 800131e:	2304      	movs	r3, #4
 8001320:	e021      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 8001322:	2303      	movs	r3, #3
 8001324:	e01f      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 8001326:	2302      	movs	r3, #2
 8001328:	e01d      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 800132a:	2301      	movs	r3, #1
 800132c:	e01b      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 800132e:	bf00      	nop
 8001330:	58000080 	.word	0x58000080
 8001334:	58024400 	.word	0x58024400
 8001338:	58000400 	.word	0x58000400
 800133c:	58020000 	.word	0x58020000
 8001340:	58020400 	.word	0x58020400
 8001344:	58020800 	.word	0x58020800
 8001348:	58020c00 	.word	0x58020c00
 800134c:	58021000 	.word	0x58021000
 8001350:	58021400 	.word	0x58021400
 8001354:	58021800 	.word	0x58021800
 8001358:	58021c00 	.word	0x58021c00
 800135c:	58022000 	.word	0x58022000
 8001360:	58022400 	.word	0x58022400
 8001364:	2300      	movs	r3, #0
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	f002 0203 	and.w	r2, r2, #3
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	4093      	lsls	r3, r2
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001376:	4938      	ldr	r1, [pc, #224]	; (8001458 <HAL_GPIO_Init+0x35c>)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	3301      	adds	r3, #1
 8001438:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	fa22 f303 	lsr.w	r3, r2, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	f47f ae63 	bne.w	8001110 <HAL_GPIO_Init+0x14>
  }
}
 800144a:	bf00      	nop
 800144c:	bf00      	nop
 800144e:	3724      	adds	r7, #36	; 0x24
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	58000400 	.word	0x58000400

0800145c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001464:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_HSEM_FastTake+0x2c>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3320      	adds	r3, #32
 800146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146e:	4a07      	ldr	r2, [pc, #28]	; (800148c <HAL_HSEM_FastTake+0x30>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d101      	bne.n	8001478 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	e000      	b.n	800147a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	58026400 	.word	0x58026400
 800148c:	80000300 	.word	0x80000300

08001490 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800149a:	4906      	ldr	r1, [pc, #24]	; (80014b4 <HAL_HSEM_Release+0x24>)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	58026400 	.word	0x58026400

080014b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80014c0:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_PWREx_ConfigSupply+0xb0>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	2b06      	cmp	r3, #6
 80014ca:	d00a      	beq.n	80014e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <HAL_PWREx_ConfigSupply+0xb0>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d001      	beq.n	80014de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e040      	b.n	8001560 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	e03e      	b.n	8001560 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <HAL_PWREx_ConfigSupply+0xb0>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80014ea:	491f      	ldr	r1, [pc, #124]	; (8001568 <HAL_PWREx_ConfigSupply+0xb0>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80014f2:	f7ff fd07 	bl	8000f04 <HAL_GetTick>
 80014f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014f8:	e009      	b.n	800150e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014fa:	f7ff fd03 	bl	8000f04 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001508:	d901      	bls.n	800150e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e028      	b.n	8001560 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_PWREx_ConfigSupply+0xb0>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800151a:	d1ee      	bne.n	80014fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b1e      	cmp	r3, #30
 8001520:	d008      	beq.n	8001534 <HAL_PWREx_ConfigSupply+0x7c>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b2e      	cmp	r3, #46	; 0x2e
 8001526:	d005      	beq.n	8001534 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b1d      	cmp	r3, #29
 800152c:	d002      	beq.n	8001534 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b2d      	cmp	r3, #45	; 0x2d
 8001532:	d114      	bne.n	800155e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001534:	f7ff fce6 	bl	8000f04 <HAL_GetTick>
 8001538:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800153a:	e009      	b.n	8001550 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800153c:	f7ff fce2 	bl	8000f04 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800154a:	d901      	bls.n	8001550 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e007      	b.n	8001560 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_PWREx_ConfigSupply+0xb0>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155c:	d1ee      	bne.n	800153c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	58024800 	.word	0x58024800

0800156c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	; 0x30
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	f000 bc48 	b.w	8001e10 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 8088 	beq.w	800169e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800158e:	4b99      	ldr	r3, [pc, #612]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001598:	4b96      	ldr	r3, [pc, #600]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	2b10      	cmp	r3, #16
 80015a2:	d007      	beq.n	80015b4 <HAL_RCC_OscConfig+0x48>
 80015a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a6:	2b18      	cmp	r3, #24
 80015a8:	d111      	bne.n	80015ce <HAL_RCC_OscConfig+0x62>
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d10c      	bne.n	80015ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	4b8f      	ldr	r3, [pc, #572]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d06d      	beq.n	800169c <HAL_RCC_OscConfig+0x130>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d169      	bne.n	800169c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	f000 bc21 	b.w	8001e10 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d6:	d106      	bne.n	80015e6 <HAL_RCC_OscConfig+0x7a>
 80015d8:	4b86      	ldr	r3, [pc, #536]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a85      	ldr	r2, [pc, #532]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 80015de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	e02e      	b.n	8001644 <HAL_RCC_OscConfig+0xd8>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x9c>
 80015ee:	4b81      	ldr	r3, [pc, #516]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a80      	ldr	r2, [pc, #512]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 80015f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	4b7e      	ldr	r3, [pc, #504]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a7d      	ldr	r2, [pc, #500]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 8001600:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e01d      	b.n	8001644 <HAL_RCC_OscConfig+0xd8>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0xc0>
 8001612:	4b78      	ldr	r3, [pc, #480]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a77      	ldr	r2, [pc, #476]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 8001618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b75      	ldr	r3, [pc, #468]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a74      	ldr	r2, [pc, #464]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 8001624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e00b      	b.n	8001644 <HAL_RCC_OscConfig+0xd8>
 800162c:	4b71      	ldr	r3, [pc, #452]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a70      	ldr	r2, [pc, #448]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 8001632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b6e      	ldr	r3, [pc, #440]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a6d      	ldr	r2, [pc, #436]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 800163e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fc5a 	bl	8000f04 <HAL_GetTick>
 8001650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fc56 	bl	8000f04 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	; 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e3d4      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001666:	4b63      	ldr	r3, [pc, #396]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0xe8>
 8001672:	e014      	b.n	800169e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fc46 	bl	8000f04 <HAL_GetTick>
 8001678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fc42 	bl	8000f04 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e3c0      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800168e:	4b59      	ldr	r3, [pc, #356]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x110>
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 80ca 	beq.w	8001840 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ac:	4b51      	ldr	r3, [pc, #324]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016b6:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 80016b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d007      	beq.n	80016d2 <HAL_RCC_OscConfig+0x166>
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	2b18      	cmp	r3, #24
 80016c6:	d156      	bne.n	8001776 <HAL_RCC_OscConfig+0x20a>
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d151      	bne.n	8001776 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d2:	4b48      	ldr	r3, [pc, #288]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <HAL_RCC_OscConfig+0x17e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e392      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016ea:	4b42      	ldr	r3, [pc, #264]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 0219 	bic.w	r2, r3, #25
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	493f      	ldr	r1, [pc, #252]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff fc02 	bl	8000f04 <HAL_GetTick>
 8001700:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001704:	f7ff fbfe 	bl	8000f04 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e37c      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001716:	4b37      	ldr	r3, [pc, #220]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001722:	f7ff fbfb 	bl	8000f1c <HAL_GetREVID>
 8001726:	4603      	mov	r3, r0
 8001728:	f241 0203 	movw	r2, #4099	; 0x1003
 800172c:	4293      	cmp	r3, r2
 800172e:	d817      	bhi.n	8001760 <HAL_RCC_OscConfig+0x1f4>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	2b40      	cmp	r3, #64	; 0x40
 8001736:	d108      	bne.n	800174a <HAL_RCC_OscConfig+0x1de>
 8001738:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001740:	4a2c      	ldr	r2, [pc, #176]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 8001742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001746:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001748:	e07a      	b.n	8001840 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174a:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	031b      	lsls	r3, r3, #12
 8001758:	4926      	ldr	r1, [pc, #152]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 800175a:	4313      	orrs	r3, r2
 800175c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800175e:	e06f      	b.n	8001840 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001760:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	061b      	lsls	r3, r3, #24
 800176e:	4921      	ldr	r1, [pc, #132]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001774:	e064      	b.n	8001840 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d047      	beq.n	800180e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f023 0219 	bic.w	r2, r3, #25
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	491a      	ldr	r1, [pc, #104]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fbb8 	bl	8000f04 <HAL_GetTick>
 8001794:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001798:	f7ff fbb4 	bl	8000f04 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e332      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b6:	f7ff fbb1 	bl	8000f1c <HAL_GetREVID>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d819      	bhi.n	80017f8 <HAL_RCC_OscConfig+0x28c>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	2b40      	cmp	r3, #64	; 0x40
 80017ca:	d108      	bne.n	80017de <HAL_RCC_OscConfig+0x272>
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 80017d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017da:	6053      	str	r3, [r2, #4]
 80017dc:	e030      	b.n	8001840 <HAL_RCC_OscConfig+0x2d4>
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	031b      	lsls	r3, r3, #12
 80017ec:	4901      	ldr	r1, [pc, #4]	; (80017f4 <HAL_RCC_OscConfig+0x288>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
 80017f2:	e025      	b.n	8001840 <HAL_RCC_OscConfig+0x2d4>
 80017f4:	58024400 	.word	0x58024400
 80017f8:	4b9a      	ldr	r3, [pc, #616]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	061b      	lsls	r3, r3, #24
 8001806:	4997      	ldr	r1, [pc, #604]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
 800180c:	e018      	b.n	8001840 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800180e:	4b95      	ldr	r3, [pc, #596]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a94      	ldr	r2, [pc, #592]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001814:	f023 0301 	bic.w	r3, r3, #1
 8001818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7ff fb73 	bl	8000f04 <HAL_GetTick>
 800181e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001822:	f7ff fb6f 	bl	8000f04 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e2ed      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001834:	4b8b      	ldr	r3, [pc, #556]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f0      	bne.n	8001822 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80a9 	beq.w	80019a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800184e:	4b85      	ldr	r3, [pc, #532]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001856:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001858:	4b82      	ldr	r3, [pc, #520]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b08      	cmp	r3, #8
 8001862:	d007      	beq.n	8001874 <HAL_RCC_OscConfig+0x308>
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2b18      	cmp	r3, #24
 8001868:	d13a      	bne.n	80018e0 <HAL_RCC_OscConfig+0x374>
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d135      	bne.n	80018e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001874:	4b7b      	ldr	r3, [pc, #492]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_OscConfig+0x320>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	2b80      	cmp	r3, #128	; 0x80
 8001886:	d001      	beq.n	800188c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e2c1      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800188c:	f7ff fb46 	bl	8000f1c <HAL_GetREVID>
 8001890:	4603      	mov	r3, r0
 8001892:	f241 0203 	movw	r2, #4099	; 0x1003
 8001896:	4293      	cmp	r3, r2
 8001898:	d817      	bhi.n	80018ca <HAL_RCC_OscConfig+0x35e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	2b20      	cmp	r3, #32
 80018a0:	d108      	bne.n	80018b4 <HAL_RCC_OscConfig+0x348>
 80018a2:	4b70      	ldr	r3, [pc, #448]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80018aa:	4a6e      	ldr	r2, [pc, #440]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 80018ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018b0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018b2:	e075      	b.n	80019a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018b4:	4b6b      	ldr	r3, [pc, #428]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	069b      	lsls	r3, r3, #26
 80018c2:	4968      	ldr	r1, [pc, #416]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018c8:	e06a      	b.n	80019a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018ca:	4b66      	ldr	r3, [pc, #408]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	061b      	lsls	r3, r3, #24
 80018d8:	4962      	ldr	r1, [pc, #392]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018de:	e05f      	b.n	80019a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d042      	beq.n	800196e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80018e8:	4b5e      	ldr	r3, [pc, #376]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a5d      	ldr	r2, [pc, #372]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 80018ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff fb06 	bl	8000f04 <HAL_GetTick>
 80018f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80018fc:	f7ff fb02 	bl	8000f04 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e280      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800190e:	4b55      	ldr	r3, [pc, #340]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800191a:	f7ff faff 	bl	8000f1c <HAL_GetREVID>
 800191e:	4603      	mov	r3, r0
 8001920:	f241 0203 	movw	r2, #4099	; 0x1003
 8001924:	4293      	cmp	r3, r2
 8001926:	d817      	bhi.n	8001958 <HAL_RCC_OscConfig+0x3ec>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	2b20      	cmp	r3, #32
 800192e:	d108      	bne.n	8001942 <HAL_RCC_OscConfig+0x3d6>
 8001930:	4b4c      	ldr	r3, [pc, #304]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001938:	4a4a      	ldr	r2, [pc, #296]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 800193a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800193e:	6053      	str	r3, [r2, #4]
 8001940:	e02e      	b.n	80019a0 <HAL_RCC_OscConfig+0x434>
 8001942:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	069b      	lsls	r3, r3, #26
 8001950:	4944      	ldr	r1, [pc, #272]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001952:	4313      	orrs	r3, r2
 8001954:	604b      	str	r3, [r1, #4]
 8001956:	e023      	b.n	80019a0 <HAL_RCC_OscConfig+0x434>
 8001958:	4b42      	ldr	r3, [pc, #264]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	061b      	lsls	r3, r3, #24
 8001966:	493f      	ldr	r1, [pc, #252]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001968:	4313      	orrs	r3, r2
 800196a:	60cb      	str	r3, [r1, #12]
 800196c:	e018      	b.n	80019a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800196e:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a3c      	ldr	r2, [pc, #240]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197a:	f7ff fac3 	bl	8000f04 <HAL_GetTick>
 800197e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001982:	f7ff fabf 	bl	8000f04 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e23d      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001994:	4b33      	ldr	r3, [pc, #204]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1f0      	bne.n	8001982 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d036      	beq.n	8001a1a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d019      	beq.n	80019e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b4:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 80019b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b8:	4a2a      	ldr	r2, [pc, #168]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c0:	f7ff faa0 	bl	8000f04 <HAL_GetTick>
 80019c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c8:	f7ff fa9c 	bl	8000f04 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e21a      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 80019dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x45c>
 80019e6:	e018      	b.n	8001a1a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e8:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 80019ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ec:	4a1d      	ldr	r2, [pc, #116]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 80019ee:	f023 0301 	bic.w	r3, r3, #1
 80019f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f4:	f7ff fa86 	bl	8000f04 <HAL_GetTick>
 80019f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019fc:	f7ff fa82 	bl	8000f04 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e200      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d039      	beq.n	8001a9a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d01c      	beq.n	8001a68 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a0c      	ldr	r2, [pc, #48]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001a34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fa63 	bl	8000f04 <HAL_GetTick>
 8001a3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a42:	f7ff fa5f 	bl	8000f04 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e1dd      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_RCC_OscConfig+0x4f8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x4d6>
 8001a60:	e01b      	b.n	8001a9a <HAL_RCC_OscConfig+0x52e>
 8001a62:	bf00      	nop
 8001a64:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a68:	4b9b      	ldr	r3, [pc, #620]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a9a      	ldr	r2, [pc, #616]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001a6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a74:	f7ff fa46 	bl	8000f04 <HAL_GetTick>
 8001a78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a7c:	f7ff fa42 	bl	8000f04 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e1c0      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a8e:	4b92      	ldr	r3, [pc, #584]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8081 	beq.w	8001baa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001aa8:	4b8c      	ldr	r3, [pc, #560]	; (8001cdc <HAL_RCC_OscConfig+0x770>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a8b      	ldr	r2, [pc, #556]	; (8001cdc <HAL_RCC_OscConfig+0x770>)
 8001aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ab4:	f7ff fa26 	bl	8000f04 <HAL_GetTick>
 8001ab8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001abc:	f7ff fa22 	bl	8000f04 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	; 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e1a0      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ace:	4b83      	ldr	r3, [pc, #524]	; (8001cdc <HAL_RCC_OscConfig+0x770>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d106      	bne.n	8001af0 <HAL_RCC_OscConfig+0x584>
 8001ae2:	4b7d      	ldr	r3, [pc, #500]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	4a7c      	ldr	r2, [pc, #496]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6713      	str	r3, [r2, #112]	; 0x70
 8001aee:	e02d      	b.n	8001b4c <HAL_RCC_OscConfig+0x5e0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10c      	bne.n	8001b12 <HAL_RCC_OscConfig+0x5a6>
 8001af8:	4b77      	ldr	r3, [pc, #476]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afc:	4a76      	ldr	r2, [pc, #472]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001afe:	f023 0301 	bic.w	r3, r3, #1
 8001b02:	6713      	str	r3, [r2, #112]	; 0x70
 8001b04:	4b74      	ldr	r3, [pc, #464]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	4a73      	ldr	r2, [pc, #460]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001b0a:	f023 0304 	bic.w	r3, r3, #4
 8001b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b10:	e01c      	b.n	8001b4c <HAL_RCC_OscConfig+0x5e0>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x5c8>
 8001b1a:	4b6f      	ldr	r3, [pc, #444]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1e:	4a6e      	ldr	r2, [pc, #440]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	6713      	str	r3, [r2, #112]	; 0x70
 8001b26:	4b6c      	ldr	r3, [pc, #432]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2a:	4a6b      	ldr	r2, [pc, #428]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6713      	str	r3, [r2, #112]	; 0x70
 8001b32:	e00b      	b.n	8001b4c <HAL_RCC_OscConfig+0x5e0>
 8001b34:	4b68      	ldr	r3, [pc, #416]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	4a67      	ldr	r2, [pc, #412]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001b3a:	f023 0301 	bic.w	r3, r3, #1
 8001b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b40:	4b65      	ldr	r3, [pc, #404]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b44:	4a64      	ldr	r2, [pc, #400]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001b46:	f023 0304 	bic.w	r3, r3, #4
 8001b4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d015      	beq.n	8001b80 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b54:	f7ff f9d6 	bl	8000f04 <HAL_GetTick>
 8001b58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5c:	f7ff f9d2 	bl	8000f04 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e14e      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b72:	4b59      	ldr	r3, [pc, #356]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0ee      	beq.n	8001b5c <HAL_RCC_OscConfig+0x5f0>
 8001b7e:	e014      	b.n	8001baa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff f9c0 	bl	8000f04 <HAL_GetTick>
 8001b84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b88:	f7ff f9bc 	bl	8000f04 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e138      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b9e:	4b4e      	ldr	r3, [pc, #312]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1ee      	bne.n	8001b88 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 812d 	beq.w	8001e0e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001bb4:	4b48      	ldr	r3, [pc, #288]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bbc:	2b18      	cmp	r3, #24
 8001bbe:	f000 80bd 	beq.w	8001d3c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	f040 809e 	bne.w	8001d08 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bcc:	4b42      	ldr	r3, [pc, #264]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a41      	ldr	r2, [pc, #260]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7ff f994 	bl	8000f04 <HAL_GetTick>
 8001bdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be0:	f7ff f990 	bl	8000f04 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e10e      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bf2:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bfe:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c02:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <HAL_RCC_OscConfig+0x774>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	430a      	orrs	r2, r1
 8001c12:	4931      	ldr	r1, [pc, #196]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	628b      	str	r3, [r1, #40]	; 0x28
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c26:	3b01      	subs	r3, #1
 8001c28:	025b      	lsls	r3, r3, #9
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c32:	3b01      	subs	r3, #1
 8001c34:	041b      	lsls	r3, r3, #16
 8001c36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c40:	3b01      	subs	r3, #1
 8001c42:	061b      	lsls	r3, r3, #24
 8001c44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c48:	4923      	ldr	r1, [pc, #140]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	4a21      	ldr	r2, [pc, #132]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c5e:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <HAL_RCC_OscConfig+0x778>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c66:	00d2      	lsls	r2, r2, #3
 8001c68:	491b      	ldr	r1, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	f023 020c 	bic.w	r2, r3, #12
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4917      	ldr	r1, [pc, #92]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c80:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	f023 0202 	bic.w	r2, r3, #2
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8c:	4912      	ldr	r1, [pc, #72]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cba:	4a07      	ldr	r2, [pc, #28]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <HAL_RCC_OscConfig+0x76c>)
 8001cc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7ff f919 	bl	8000f04 <HAL_GetTick>
 8001cd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cd4:	e011      	b.n	8001cfa <HAL_RCC_OscConfig+0x78e>
 8001cd6:	bf00      	nop
 8001cd8:	58024400 	.word	0x58024400
 8001cdc:	58024800 	.word	0x58024800
 8001ce0:	fffffc0c 	.word	0xfffffc0c
 8001ce4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce8:	f7ff f90c 	bl	8000f04 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e08a      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cfa:	4b47      	ldr	r3, [pc, #284]	; (8001e18 <HAL_RCC_OscConfig+0x8ac>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x77c>
 8001d06:	e082      	b.n	8001e0e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d08:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <HAL_RCC_OscConfig+0x8ac>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a42      	ldr	r2, [pc, #264]	; (8001e18 <HAL_RCC_OscConfig+0x8ac>)
 8001d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff f8f6 	bl	8000f04 <HAL_GetTick>
 8001d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7ff f8f2 	bl	8000f04 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e070      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d2e:	4b3a      	ldr	r3, [pc, #232]	; (8001e18 <HAL_RCC_OscConfig+0x8ac>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x7b0>
 8001d3a:	e068      	b.n	8001e0e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d3c:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <HAL_RCC_OscConfig+0x8ac>)
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d42:	4b35      	ldr	r3, [pc, #212]	; (8001e18 <HAL_RCC_OscConfig+0x8ac>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d031      	beq.n	8001db4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	f003 0203 	and.w	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d12a      	bne.n	8001db4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d122      	bne.n	8001db4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d11a      	bne.n	8001db4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	0a5b      	lsrs	r3, r3, #9
 8001d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d111      	bne.n	8001db4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	0c1b      	lsrs	r3, r3, #16
 8001d94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d108      	bne.n	8001db4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	0e1b      	lsrs	r3, r3, #24
 8001da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e02b      	b.n	8001e10 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_RCC_OscConfig+0x8ac>)
 8001dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbc:	08db      	lsrs	r3, r3, #3
 8001dbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001dc2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d01f      	beq.n	8001e0e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_RCC_OscConfig+0x8ac>)
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	4a11      	ldr	r2, [pc, #68]	; (8001e18 <HAL_RCC_OscConfig+0x8ac>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dda:	f7ff f893 	bl	8000f04 <HAL_GetTick>
 8001dde:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001de0:	bf00      	nop
 8001de2:	f7ff f88f 	bl	8000f04 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d0f9      	beq.n	8001de2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_RCC_OscConfig+0x8ac>)
 8001df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_RCC_OscConfig+0x8b0>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dfa:	00d2      	lsls	r2, r2, #3
 8001dfc:	4906      	ldr	r1, [pc, #24]	; (8001e18 <HAL_RCC_OscConfig+0x8ac>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_RCC_OscConfig+0x8ac>)
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <HAL_RCC_OscConfig+0x8ac>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3730      	adds	r7, #48	; 0x30
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	58024400 	.word	0x58024400
 8001e1c:	ffff0007 	.word	0xffff0007

08001e20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e19c      	b.n	800216e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e34:	4b8a      	ldr	r3, [pc, #552]	; (8002060 <HAL_RCC_ClockConfig+0x240>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d910      	bls.n	8001e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e42:	4b87      	ldr	r3, [pc, #540]	; (8002060 <HAL_RCC_ClockConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 020f 	bic.w	r2, r3, #15
 8001e4a:	4985      	ldr	r1, [pc, #532]	; (8002060 <HAL_RCC_ClockConfig+0x240>)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e52:	4b83      	ldr	r3, [pc, #524]	; (8002060 <HAL_RCC_ClockConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e184      	b.n	800216e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d010      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	4b7b      	ldr	r3, [pc, #492]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d908      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e80:	4b78      	ldr	r3, [pc, #480]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	4975      	ldr	r1, [pc, #468]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d010      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	4b70      	ldr	r3, [pc, #448]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d908      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001eae:	4b6d      	ldr	r3, [pc, #436]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	496a      	ldr	r1, [pc, #424]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d010      	beq.n	8001eee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699a      	ldr	r2, [r3, #24]
 8001ed0:	4b64      	ldr	r3, [pc, #400]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d908      	bls.n	8001eee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001edc:	4b61      	ldr	r3, [pc, #388]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	495e      	ldr	r1, [pc, #376]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0320 	and.w	r3, r3, #32
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d010      	beq.n	8001f1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69da      	ldr	r2, [r3, #28]
 8001efe:	4b59      	ldr	r3, [pc, #356]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d908      	bls.n	8001f1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f0a:	4b56      	ldr	r3, [pc, #344]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4953      	ldr	r1, [pc, #332]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d010      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d908      	bls.n	8001f4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f38:	4b4a      	ldr	r3, [pc, #296]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f023 020f 	bic.w	r2, r3, #15
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4947      	ldr	r1, [pc, #284]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d055      	beq.n	8002002 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f56:	4b43      	ldr	r3, [pc, #268]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	4940      	ldr	r1, [pc, #256]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f70:	4b3c      	ldr	r3, [pc, #240]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d121      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0f6      	b.n	800216e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f88:	4b36      	ldr	r3, [pc, #216]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d115      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0ea      	b.n	800216e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fa0:	4b30      	ldr	r3, [pc, #192]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0de      	b.n	800216e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fb0:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0d6      	b.n	800216e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fc0:	4b28      	ldr	r3, [pc, #160]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	f023 0207 	bic.w	r2, r3, #7
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4925      	ldr	r1, [pc, #148]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd2:	f7fe ff97 	bl	8000f04 <HAL_GetTick>
 8001fd6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd8:	e00a      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fda:	f7fe ff93 	bl	8000f04 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e0be      	b.n	800216e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d1eb      	bne.n	8001fda <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d010      	beq.n	8002030 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	429a      	cmp	r2, r3
 800201c:	d208      	bcs.n	8002030 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f023 020f 	bic.w	r2, r3, #15
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	490e      	ldr	r1, [pc, #56]	; (8002064 <HAL_RCC_ClockConfig+0x244>)
 800202c:	4313      	orrs	r3, r2
 800202e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCC_ClockConfig+0x240>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d214      	bcs.n	8002068 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_RCC_ClockConfig+0x240>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 020f 	bic.w	r2, r3, #15
 8002046:	4906      	ldr	r1, [pc, #24]	; (8002060 <HAL_RCC_ClockConfig+0x240>)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	4313      	orrs	r3, r2
 800204c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204e:	4b04      	ldr	r3, [pc, #16]	; (8002060 <HAL_RCC_ClockConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e086      	b.n	800216e <HAL_RCC_ClockConfig+0x34e>
 8002060:	52002000 	.word	0x52002000
 8002064:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d010      	beq.n	8002096 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <HAL_RCC_ClockConfig+0x358>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002080:	429a      	cmp	r2, r3
 8002082:	d208      	bcs.n	8002096 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002084:	4b3c      	ldr	r3, [pc, #240]	; (8002178 <HAL_RCC_ClockConfig+0x358>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	4939      	ldr	r1, [pc, #228]	; (8002178 <HAL_RCC_ClockConfig+0x358>)
 8002092:	4313      	orrs	r3, r2
 8002094:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d010      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	4b34      	ldr	r3, [pc, #208]	; (8002178 <HAL_RCC_ClockConfig+0x358>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d208      	bcs.n	80020c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020b2:	4b31      	ldr	r3, [pc, #196]	; (8002178 <HAL_RCC_ClockConfig+0x358>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	492e      	ldr	r1, [pc, #184]	; (8002178 <HAL_RCC_ClockConfig+0x358>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d010      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699a      	ldr	r2, [r3, #24]
 80020d4:	4b28      	ldr	r3, [pc, #160]	; (8002178 <HAL_RCC_ClockConfig+0x358>)
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020dc:	429a      	cmp	r2, r3
 80020de:	d208      	bcs.n	80020f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <HAL_RCC_ClockConfig+0x358>)
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4922      	ldr	r1, [pc, #136]	; (8002178 <HAL_RCC_ClockConfig+0x358>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d010      	beq.n	8002120 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_RCC_ClockConfig+0x358>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800210a:	429a      	cmp	r2, r3
 800210c:	d208      	bcs.n	8002120 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_RCC_ClockConfig+0x358>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	4917      	ldr	r1, [pc, #92]	; (8002178 <HAL_RCC_ClockConfig+0x358>)
 800211c:	4313      	orrs	r3, r2
 800211e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002120:	f000 f834 	bl	800218c <HAL_RCC_GetSysClockFreq>
 8002124:	4602      	mov	r2, r0
 8002126:	4b14      	ldr	r3, [pc, #80]	; (8002178 <HAL_RCC_ClockConfig+0x358>)
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	4912      	ldr	r1, [pc, #72]	; (800217c <HAL_RCC_ClockConfig+0x35c>)
 8002132:	5ccb      	ldrb	r3, [r1, r3]
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
 800213c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_RCC_ClockConfig+0x358>)
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	4a0d      	ldr	r2, [pc, #52]	; (800217c <HAL_RCC_ClockConfig+0x35c>)
 8002148:	5cd3      	ldrb	r3, [r2, r3]
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
 8002154:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <HAL_RCC_ClockConfig+0x360>)
 8002156:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002158:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <HAL_RCC_ClockConfig+0x364>)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_RCC_ClockConfig+0x368>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fe84 	bl	8000e70 <HAL_InitTick>
 8002168:	4603      	mov	r3, r0
 800216a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800216c:	7bfb      	ldrb	r3, [r7, #15]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	58024400 	.word	0x58024400
 800217c:	080038f8 	.word	0x080038f8
 8002180:	24000004 	.word	0x24000004
 8002184:	24000000 	.word	0x24000000
 8002188:	24000008 	.word	0x24000008

0800218c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	; 0x24
 8002190:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002192:	4bb3      	ldr	r3, [pc, #716]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800219a:	2b18      	cmp	r3, #24
 800219c:	f200 8155 	bhi.w	800244a <HAL_RCC_GetSysClockFreq+0x2be>
 80021a0:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80021a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a6:	bf00      	nop
 80021a8:	0800220d 	.word	0x0800220d
 80021ac:	0800244b 	.word	0x0800244b
 80021b0:	0800244b 	.word	0x0800244b
 80021b4:	0800244b 	.word	0x0800244b
 80021b8:	0800244b 	.word	0x0800244b
 80021bc:	0800244b 	.word	0x0800244b
 80021c0:	0800244b 	.word	0x0800244b
 80021c4:	0800244b 	.word	0x0800244b
 80021c8:	08002233 	.word	0x08002233
 80021cc:	0800244b 	.word	0x0800244b
 80021d0:	0800244b 	.word	0x0800244b
 80021d4:	0800244b 	.word	0x0800244b
 80021d8:	0800244b 	.word	0x0800244b
 80021dc:	0800244b 	.word	0x0800244b
 80021e0:	0800244b 	.word	0x0800244b
 80021e4:	0800244b 	.word	0x0800244b
 80021e8:	08002239 	.word	0x08002239
 80021ec:	0800244b 	.word	0x0800244b
 80021f0:	0800244b 	.word	0x0800244b
 80021f4:	0800244b 	.word	0x0800244b
 80021f8:	0800244b 	.word	0x0800244b
 80021fc:	0800244b 	.word	0x0800244b
 8002200:	0800244b 	.word	0x0800244b
 8002204:	0800244b 	.word	0x0800244b
 8002208:	0800223f 	.word	0x0800223f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800220c:	4b94      	ldr	r3, [pc, #592]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b00      	cmp	r3, #0
 8002216:	d009      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002218:	4b91      	ldr	r3, [pc, #580]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	08db      	lsrs	r3, r3, #3
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	4a90      	ldr	r2, [pc, #576]	; (8002464 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
 8002228:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800222a:	e111      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800222c:	4b8d      	ldr	r3, [pc, #564]	; (8002464 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800222e:	61bb      	str	r3, [r7, #24]
      break;
 8002230:	e10e      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002232:	4b8d      	ldr	r3, [pc, #564]	; (8002468 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002234:	61bb      	str	r3, [r7, #24]
      break;
 8002236:	e10b      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002238:	4b8c      	ldr	r3, [pc, #560]	; (800246c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800223a:	61bb      	str	r3, [r7, #24]
      break;
 800223c:	e108      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800223e:	4b88      	ldr	r3, [pc, #544]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002248:	4b85      	ldr	r3, [pc, #532]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002252:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002254:	4b82      	ldr	r3, [pc, #520]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800225e:	4b80      	ldr	r3, [pc, #512]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002262:	08db      	lsrs	r3, r3, #3
 8002264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002276:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80e1 	beq.w	8002444 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b02      	cmp	r3, #2
 8002286:	f000 8083 	beq.w	8002390 <HAL_RCC_GetSysClockFreq+0x204>
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b02      	cmp	r3, #2
 800228e:	f200 80a1 	bhi.w	80023d4 <HAL_RCC_GetSysClockFreq+0x248>
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x114>
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d056      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x1c0>
 800229e:	e099      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022a0:	4b6f      	ldr	r3, [pc, #444]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d02d      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022ac:	4b6c      	ldr	r3, [pc, #432]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	08db      	lsrs	r3, r3, #3
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	4a6b      	ldr	r2, [pc, #428]	; (8002464 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
 80022bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	ee07 3a90 	vmov	s15, r3
 80022c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022d6:	4b62      	ldr	r3, [pc, #392]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80022ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002470 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002302:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002306:	e087      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002312:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002474 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800231a:	4b51      	ldr	r3, [pc, #324]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800232a:	ed97 6a02 	vldr	s12, [r7, #8]
 800232e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002470 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800233a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800233e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002346:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800234a:	e065      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002356:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002478 <HAL_RCC_GetSysClockFreq+0x2ec>
 800235a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800235e:	4b40      	ldr	r3, [pc, #256]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800236e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002372:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002470 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800237a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800237e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800238e:	e043      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800247c <HAL_RCC_GetSysClockFreq+0x2f0>
 800239e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023a2:	4b2f      	ldr	r3, [pc, #188]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002470 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023d2:	e021      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	ee07 3a90 	vmov	s15, r3
 80023da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002478 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023e6:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002470 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800240a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800240e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002412:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002416:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	0a5b      	lsrs	r3, r3, #9
 800241e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002422:	3301      	adds	r3, #1
 8002424:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002430:	edd7 6a07 	vldr	s13, [r7, #28]
 8002434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800243c:	ee17 3a90 	vmov	r3, s15
 8002440:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002442:	e005      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	61bb      	str	r3, [r7, #24]
      break;
 8002448:	e002      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800244c:	61bb      	str	r3, [r7, #24]
      break;
 800244e:	bf00      	nop
  }

  return sysclockfreq;
 8002450:	69bb      	ldr	r3, [r7, #24]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3724      	adds	r7, #36	; 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	58024400 	.word	0x58024400
 8002464:	03d09000 	.word	0x03d09000
 8002468:	003d0900 	.word	0x003d0900
 800246c:	007a1200 	.word	0x007a1200
 8002470:	46000000 	.word	0x46000000
 8002474:	4c742400 	.word	0x4c742400
 8002478:	4a742400 	.word	0x4a742400
 800247c:	4af42400 	.word	0x4af42400

08002480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e049      	b.n	8002526 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe fb50 	bl	8000b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3304      	adds	r3, #4
 80024bc:	4619      	mov	r1, r3
 80024be:	4610      	mov	r0, r2
 80024c0:	f000 fbcc 	bl	8002c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e049      	b.n	80025d4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d106      	bne.n	800255a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f841 	bl	80025dc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2202      	movs	r2, #2
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3304      	adds	r3, #4
 800256a:	4619      	mov	r1, r3
 800256c:	4610      	mov	r0, r2
 800256e:	f000 fb75 	bl	8002c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e049      	b.n	8002696 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe fa76 	bl	8000b08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	4619      	mov	r1, r3
 800262e:	4610      	mov	r0, r2
 8002630:	f000 fb14 	bl	8002c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <HAL_TIM_PWM_Start+0x24>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	bf14      	ite	ne
 80026bc:	2301      	movne	r3, #1
 80026be:	2300      	moveq	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	e03c      	b.n	800273e <HAL_TIM_PWM_Start+0x9e>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d109      	bne.n	80026de <HAL_TIM_PWM_Start+0x3e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	bf14      	ite	ne
 80026d6:	2301      	movne	r3, #1
 80026d8:	2300      	moveq	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	e02f      	b.n	800273e <HAL_TIM_PWM_Start+0x9e>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d109      	bne.n	80026f8 <HAL_TIM_PWM_Start+0x58>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	bf14      	ite	ne
 80026f0:	2301      	movne	r3, #1
 80026f2:	2300      	moveq	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	e022      	b.n	800273e <HAL_TIM_PWM_Start+0x9e>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d109      	bne.n	8002712 <HAL_TIM_PWM_Start+0x72>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b01      	cmp	r3, #1
 8002708:	bf14      	ite	ne
 800270a:	2301      	movne	r3, #1
 800270c:	2300      	moveq	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	e015      	b.n	800273e <HAL_TIM_PWM_Start+0x9e>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b10      	cmp	r3, #16
 8002716:	d109      	bne.n	800272c <HAL_TIM_PWM_Start+0x8c>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	bf14      	ite	ne
 8002724:	2301      	movne	r3, #1
 8002726:	2300      	moveq	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	e008      	b.n	800273e <HAL_TIM_PWM_Start+0x9e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	bf14      	ite	ne
 8002738:	2301      	movne	r3, #1
 800273a:	2300      	moveq	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0a1      	b.n	800288a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d104      	bne.n	8002756 <HAL_TIM_PWM_Start+0xb6>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002754:	e023      	b.n	800279e <HAL_TIM_PWM_Start+0xfe>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b04      	cmp	r3, #4
 800275a:	d104      	bne.n	8002766 <HAL_TIM_PWM_Start+0xc6>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002764:	e01b      	b.n	800279e <HAL_TIM_PWM_Start+0xfe>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b08      	cmp	r3, #8
 800276a:	d104      	bne.n	8002776 <HAL_TIM_PWM_Start+0xd6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002774:	e013      	b.n	800279e <HAL_TIM_PWM_Start+0xfe>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b0c      	cmp	r3, #12
 800277a:	d104      	bne.n	8002786 <HAL_TIM_PWM_Start+0xe6>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002784:	e00b      	b.n	800279e <HAL_TIM_PWM_Start+0xfe>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b10      	cmp	r3, #16
 800278a:	d104      	bne.n	8002796 <HAL_TIM_PWM_Start+0xf6>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002794:	e003      	b.n	800279e <HAL_TIM_PWM_Start+0xfe>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2202      	movs	r2, #2
 800279a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2201      	movs	r2, #1
 80027a4:	6839      	ldr	r1, [r7, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 ff3d 	bl	8003626 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a38      	ldr	r2, [pc, #224]	; (8002894 <HAL_TIM_PWM_Start+0x1f4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_TIM_PWM_Start+0x13e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a37      	ldr	r2, [pc, #220]	; (8002898 <HAL_TIM_PWM_Start+0x1f8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00e      	beq.n	80027de <HAL_TIM_PWM_Start+0x13e>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a35      	ldr	r2, [pc, #212]	; (800289c <HAL_TIM_PWM_Start+0x1fc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d009      	beq.n	80027de <HAL_TIM_PWM_Start+0x13e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a34      	ldr	r2, [pc, #208]	; (80028a0 <HAL_TIM_PWM_Start+0x200>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d004      	beq.n	80027de <HAL_TIM_PWM_Start+0x13e>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a32      	ldr	r2, [pc, #200]	; (80028a4 <HAL_TIM_PWM_Start+0x204>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d101      	bne.n	80027e2 <HAL_TIM_PWM_Start+0x142>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_TIM_PWM_Start+0x144>
 80027e2:	2300      	movs	r3, #0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a25      	ldr	r2, [pc, #148]	; (8002894 <HAL_TIM_PWM_Start+0x1f4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d022      	beq.n	8002848 <HAL_TIM_PWM_Start+0x1a8>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280a:	d01d      	beq.n	8002848 <HAL_TIM_PWM_Start+0x1a8>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a25      	ldr	r2, [pc, #148]	; (80028a8 <HAL_TIM_PWM_Start+0x208>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d018      	beq.n	8002848 <HAL_TIM_PWM_Start+0x1a8>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a24      	ldr	r2, [pc, #144]	; (80028ac <HAL_TIM_PWM_Start+0x20c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d013      	beq.n	8002848 <HAL_TIM_PWM_Start+0x1a8>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <HAL_TIM_PWM_Start+0x210>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00e      	beq.n	8002848 <HAL_TIM_PWM_Start+0x1a8>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a1a      	ldr	r2, [pc, #104]	; (8002898 <HAL_TIM_PWM_Start+0x1f8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d009      	beq.n	8002848 <HAL_TIM_PWM_Start+0x1a8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1e      	ldr	r2, [pc, #120]	; (80028b4 <HAL_TIM_PWM_Start+0x214>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d004      	beq.n	8002848 <HAL_TIM_PWM_Start+0x1a8>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a16      	ldr	r2, [pc, #88]	; (800289c <HAL_TIM_PWM_Start+0x1fc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d115      	bne.n	8002874 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <HAL_TIM_PWM_Start+0x218>)
 8002850:	4013      	ands	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b06      	cmp	r3, #6
 8002858:	d015      	beq.n	8002886 <HAL_TIM_PWM_Start+0x1e6>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002860:	d011      	beq.n	8002886 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002872:	e008      	b.n	8002886 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e000      	b.n	8002888 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002886:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40010000 	.word	0x40010000
 8002898:	40010400 	.word	0x40010400
 800289c:	40014000 	.word	0x40014000
 80028a0:	40014400 	.word	0x40014400
 80028a4:	40014800 	.word	0x40014800
 80028a8:	40000400 	.word	0x40000400
 80028ac:	40000800 	.word	0x40000800
 80028b0:	40000c00 	.word	0x40000c00
 80028b4:	40001800 	.word	0x40001800
 80028b8:	00010007 	.word	0x00010007

080028bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_TIM_OC_ConfigChannel+0x1e>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e066      	b.n	80029a8 <HAL_TIM_OC_ConfigChannel+0xec>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b14      	cmp	r3, #20
 80028e6:	d857      	bhi.n	8002998 <HAL_TIM_OC_ConfigChannel+0xdc>
 80028e8:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80028ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ee:	bf00      	nop
 80028f0:	08002945 	.word	0x08002945
 80028f4:	08002999 	.word	0x08002999
 80028f8:	08002999 	.word	0x08002999
 80028fc:	08002999 	.word	0x08002999
 8002900:	08002953 	.word	0x08002953
 8002904:	08002999 	.word	0x08002999
 8002908:	08002999 	.word	0x08002999
 800290c:	08002999 	.word	0x08002999
 8002910:	08002961 	.word	0x08002961
 8002914:	08002999 	.word	0x08002999
 8002918:	08002999 	.word	0x08002999
 800291c:	08002999 	.word	0x08002999
 8002920:	0800296f 	.word	0x0800296f
 8002924:	08002999 	.word	0x08002999
 8002928:	08002999 	.word	0x08002999
 800292c:	08002999 	.word	0x08002999
 8002930:	0800297d 	.word	0x0800297d
 8002934:	08002999 	.word	0x08002999
 8002938:	08002999 	.word	0x08002999
 800293c:	08002999 	.word	0x08002999
 8002940:	0800298b 	.word	0x0800298b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fa2c 	bl	8002da8 <TIM_OC1_SetConfig>
      break;
 8002950:	e025      	b.n	800299e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fab5 	bl	8002ec8 <TIM_OC2_SetConfig>
      break;
 800295e:	e01e      	b.n	800299e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fb38 	bl	8002fdc <TIM_OC3_SetConfig>
      break;
 800296c:	e017      	b.n	800299e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fbb9 	bl	80030ec <TIM_OC4_SetConfig>
      break;
 800297a:	e010      	b.n	800299e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fc1c 	bl	80031c0 <TIM_OC5_SetConfig>
      break;
 8002988:	e009      	b.n	800299e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fc79 	bl	8003288 <TIM_OC6_SetConfig>
      break;
 8002996:	e002      	b.n	800299e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	75fb      	strb	r3, [r7, #23]
      break;
 800299c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e0ff      	b.n	8002bce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b14      	cmp	r3, #20
 80029da:	f200 80f0 	bhi.w	8002bbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 80029de:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80029e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e4:	08002a39 	.word	0x08002a39
 80029e8:	08002bbf 	.word	0x08002bbf
 80029ec:	08002bbf 	.word	0x08002bbf
 80029f0:	08002bbf 	.word	0x08002bbf
 80029f4:	08002a79 	.word	0x08002a79
 80029f8:	08002bbf 	.word	0x08002bbf
 80029fc:	08002bbf 	.word	0x08002bbf
 8002a00:	08002bbf 	.word	0x08002bbf
 8002a04:	08002abb 	.word	0x08002abb
 8002a08:	08002bbf 	.word	0x08002bbf
 8002a0c:	08002bbf 	.word	0x08002bbf
 8002a10:	08002bbf 	.word	0x08002bbf
 8002a14:	08002afb 	.word	0x08002afb
 8002a18:	08002bbf 	.word	0x08002bbf
 8002a1c:	08002bbf 	.word	0x08002bbf
 8002a20:	08002bbf 	.word	0x08002bbf
 8002a24:	08002b3d 	.word	0x08002b3d
 8002a28:	08002bbf 	.word	0x08002bbf
 8002a2c:	08002bbf 	.word	0x08002bbf
 8002a30:	08002bbf 	.word	0x08002bbf
 8002a34:	08002b7d 	.word	0x08002b7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f9b2 	bl	8002da8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0208 	orr.w	r2, r2, #8
 8002a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699a      	ldr	r2, [r3, #24]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0204 	bic.w	r2, r2, #4
 8002a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6999      	ldr	r1, [r3, #24]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	691a      	ldr	r2, [r3, #16]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	619a      	str	r2, [r3, #24]
      break;
 8002a76:	e0a5      	b.n	8002bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fa22 	bl	8002ec8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699a      	ldr	r2, [r3, #24]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6999      	ldr	r1, [r3, #24]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	021a      	lsls	r2, r3, #8
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	619a      	str	r2, [r3, #24]
      break;
 8002ab8:	e084      	b.n	8002bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 fa8b 	bl	8002fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0208 	orr.w	r2, r2, #8
 8002ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69da      	ldr	r2, [r3, #28]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0204 	bic.w	r2, r2, #4
 8002ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69d9      	ldr	r1, [r3, #28]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	61da      	str	r2, [r3, #28]
      break;
 8002af8:	e064      	b.n	8002bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 faf3 	bl	80030ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	69da      	ldr	r2, [r3, #28]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69da      	ldr	r2, [r3, #28]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69d9      	ldr	r1, [r3, #28]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	021a      	lsls	r2, r3, #8
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	61da      	str	r2, [r3, #28]
      break;
 8002b3a:	e043      	b.n	8002bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fb3c 	bl	80031c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0208 	orr.w	r2, r2, #8
 8002b56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0204 	bic.w	r2, r2, #4
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b7a:	e023      	b.n	8002bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fb80 	bl	8003288 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	021a      	lsls	r2, r3, #8
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002bbc:	e002      	b.n	8002bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8002bc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop

08002bd8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e031      	b.n	8002c54 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002c00:	6839      	ldr	r1, [r7, #0]
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fba6 	bl	8003354 <TIM_SlaveTimer_SetConfig>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e018      	b.n	8002c54 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c30:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c40:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a46      	ldr	r2, [pc, #280]	; (8002d88 <TIM_Base_SetConfig+0x12c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d013      	beq.n	8002c9c <TIM_Base_SetConfig+0x40>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7a:	d00f      	beq.n	8002c9c <TIM_Base_SetConfig+0x40>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a43      	ldr	r2, [pc, #268]	; (8002d8c <TIM_Base_SetConfig+0x130>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00b      	beq.n	8002c9c <TIM_Base_SetConfig+0x40>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a42      	ldr	r2, [pc, #264]	; (8002d90 <TIM_Base_SetConfig+0x134>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d007      	beq.n	8002c9c <TIM_Base_SetConfig+0x40>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a41      	ldr	r2, [pc, #260]	; (8002d94 <TIM_Base_SetConfig+0x138>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d003      	beq.n	8002c9c <TIM_Base_SetConfig+0x40>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a40      	ldr	r2, [pc, #256]	; (8002d98 <TIM_Base_SetConfig+0x13c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d108      	bne.n	8002cae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a35      	ldr	r2, [pc, #212]	; (8002d88 <TIM_Base_SetConfig+0x12c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d01f      	beq.n	8002cf6 <TIM_Base_SetConfig+0x9a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbc:	d01b      	beq.n	8002cf6 <TIM_Base_SetConfig+0x9a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a32      	ldr	r2, [pc, #200]	; (8002d8c <TIM_Base_SetConfig+0x130>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d017      	beq.n	8002cf6 <TIM_Base_SetConfig+0x9a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a31      	ldr	r2, [pc, #196]	; (8002d90 <TIM_Base_SetConfig+0x134>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <TIM_Base_SetConfig+0x9a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a30      	ldr	r2, [pc, #192]	; (8002d94 <TIM_Base_SetConfig+0x138>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00f      	beq.n	8002cf6 <TIM_Base_SetConfig+0x9a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a2f      	ldr	r2, [pc, #188]	; (8002d98 <TIM_Base_SetConfig+0x13c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00b      	beq.n	8002cf6 <TIM_Base_SetConfig+0x9a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a2e      	ldr	r2, [pc, #184]	; (8002d9c <TIM_Base_SetConfig+0x140>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <TIM_Base_SetConfig+0x9a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a2d      	ldr	r2, [pc, #180]	; (8002da0 <TIM_Base_SetConfig+0x144>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d003      	beq.n	8002cf6 <TIM_Base_SetConfig+0x9a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a2c      	ldr	r2, [pc, #176]	; (8002da4 <TIM_Base_SetConfig+0x148>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d108      	bne.n	8002d08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a16      	ldr	r2, [pc, #88]	; (8002d88 <TIM_Base_SetConfig+0x12c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00f      	beq.n	8002d54 <TIM_Base_SetConfig+0xf8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <TIM_Base_SetConfig+0x13c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00b      	beq.n	8002d54 <TIM_Base_SetConfig+0xf8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a17      	ldr	r2, [pc, #92]	; (8002d9c <TIM_Base_SetConfig+0x140>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d007      	beq.n	8002d54 <TIM_Base_SetConfig+0xf8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a16      	ldr	r2, [pc, #88]	; (8002da0 <TIM_Base_SetConfig+0x144>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d003      	beq.n	8002d54 <TIM_Base_SetConfig+0xf8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a15      	ldr	r2, [pc, #84]	; (8002da4 <TIM_Base_SetConfig+0x148>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d103      	bne.n	8002d5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d105      	bne.n	8002d7a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f023 0201 	bic.w	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	611a      	str	r2, [r3, #16]
  }
}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40010000 	.word	0x40010000
 8002d8c:	40000400 	.word	0x40000400
 8002d90:	40000800 	.word	0x40000800
 8002d94:	40000c00 	.word	0x40000c00
 8002d98:	40010400 	.word	0x40010400
 8002d9c:	40014000 	.word	0x40014000
 8002da0:	40014400 	.word	0x40014400
 8002da4:	40014800 	.word	0x40014800

08002da8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f023 0201 	bic.w	r2, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4b37      	ldr	r3, [pc, #220]	; (8002eb0 <TIM_OC1_SetConfig+0x108>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f023 0302 	bic.w	r3, r3, #2
 8002df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a2d      	ldr	r2, [pc, #180]	; (8002eb4 <TIM_OC1_SetConfig+0x10c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00f      	beq.n	8002e24 <TIM_OC1_SetConfig+0x7c>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a2c      	ldr	r2, [pc, #176]	; (8002eb8 <TIM_OC1_SetConfig+0x110>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00b      	beq.n	8002e24 <TIM_OC1_SetConfig+0x7c>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a2b      	ldr	r2, [pc, #172]	; (8002ebc <TIM_OC1_SetConfig+0x114>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d007      	beq.n	8002e24 <TIM_OC1_SetConfig+0x7c>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a2a      	ldr	r2, [pc, #168]	; (8002ec0 <TIM_OC1_SetConfig+0x118>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d003      	beq.n	8002e24 <TIM_OC1_SetConfig+0x7c>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a29      	ldr	r2, [pc, #164]	; (8002ec4 <TIM_OC1_SetConfig+0x11c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d10c      	bne.n	8002e3e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f023 0308 	bic.w	r3, r3, #8
 8002e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f023 0304 	bic.w	r3, r3, #4
 8002e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a1c      	ldr	r2, [pc, #112]	; (8002eb4 <TIM_OC1_SetConfig+0x10c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00f      	beq.n	8002e66 <TIM_OC1_SetConfig+0xbe>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a1b      	ldr	r2, [pc, #108]	; (8002eb8 <TIM_OC1_SetConfig+0x110>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00b      	beq.n	8002e66 <TIM_OC1_SetConfig+0xbe>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1a      	ldr	r2, [pc, #104]	; (8002ebc <TIM_OC1_SetConfig+0x114>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d007      	beq.n	8002e66 <TIM_OC1_SetConfig+0xbe>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a19      	ldr	r2, [pc, #100]	; (8002ec0 <TIM_OC1_SetConfig+0x118>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d003      	beq.n	8002e66 <TIM_OC1_SetConfig+0xbe>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a18      	ldr	r2, [pc, #96]	; (8002ec4 <TIM_OC1_SetConfig+0x11c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d111      	bne.n	8002e8a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	621a      	str	r2, [r3, #32]
}
 8002ea4:	bf00      	nop
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	fffeff8f 	.word	0xfffeff8f
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	40010400 	.word	0x40010400
 8002ebc:	40014000 	.word	0x40014000
 8002ec0:	40014400 	.word	0x40014400
 8002ec4:	40014800 	.word	0x40014800

08002ec8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f023 0210 	bic.w	r2, r3, #16
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4b34      	ldr	r3, [pc, #208]	; (8002fc4 <TIM_OC2_SetConfig+0xfc>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f023 0320 	bic.w	r3, r3, #32
 8002f12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <TIM_OC2_SetConfig+0x100>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d003      	beq.n	8002f30 <TIM_OC2_SetConfig+0x68>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a28      	ldr	r2, [pc, #160]	; (8002fcc <TIM_OC2_SetConfig+0x104>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d10d      	bne.n	8002f4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a1e      	ldr	r2, [pc, #120]	; (8002fc8 <TIM_OC2_SetConfig+0x100>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00f      	beq.n	8002f74 <TIM_OC2_SetConfig+0xac>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a1d      	ldr	r2, [pc, #116]	; (8002fcc <TIM_OC2_SetConfig+0x104>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00b      	beq.n	8002f74 <TIM_OC2_SetConfig+0xac>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a1c      	ldr	r2, [pc, #112]	; (8002fd0 <TIM_OC2_SetConfig+0x108>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d007      	beq.n	8002f74 <TIM_OC2_SetConfig+0xac>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a1b      	ldr	r2, [pc, #108]	; (8002fd4 <TIM_OC2_SetConfig+0x10c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d003      	beq.n	8002f74 <TIM_OC2_SetConfig+0xac>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a1a      	ldr	r2, [pc, #104]	; (8002fd8 <TIM_OC2_SetConfig+0x110>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d113      	bne.n	8002f9c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	621a      	str	r2, [r3, #32]
}
 8002fb6:	bf00      	nop
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	feff8fff 	.word	0xfeff8fff
 8002fc8:	40010000 	.word	0x40010000
 8002fcc:	40010400 	.word	0x40010400
 8002fd0:	40014000 	.word	0x40014000
 8002fd4:	40014400 	.word	0x40014400
 8002fd8:	40014800 	.word	0x40014800

08002fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4b33      	ldr	r3, [pc, #204]	; (80030d4 <TIM_OC3_SetConfig+0xf8>)
 8003008:	4013      	ands	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0303 	bic.w	r3, r3, #3
 8003012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a28      	ldr	r2, [pc, #160]	; (80030d8 <TIM_OC3_SetConfig+0xfc>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d003      	beq.n	8003042 <TIM_OC3_SetConfig+0x66>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a27      	ldr	r2, [pc, #156]	; (80030dc <TIM_OC3_SetConfig+0x100>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10d      	bne.n	800305e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003048:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800305c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <TIM_OC3_SetConfig+0xfc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00f      	beq.n	8003086 <TIM_OC3_SetConfig+0xaa>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a1c      	ldr	r2, [pc, #112]	; (80030dc <TIM_OC3_SetConfig+0x100>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00b      	beq.n	8003086 <TIM_OC3_SetConfig+0xaa>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a1b      	ldr	r2, [pc, #108]	; (80030e0 <TIM_OC3_SetConfig+0x104>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d007      	beq.n	8003086 <TIM_OC3_SetConfig+0xaa>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <TIM_OC3_SetConfig+0x108>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d003      	beq.n	8003086 <TIM_OC3_SetConfig+0xaa>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <TIM_OC3_SetConfig+0x10c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d113      	bne.n	80030ae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800308c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	621a      	str	r2, [r3, #32]
}
 80030c8:	bf00      	nop
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	fffeff8f 	.word	0xfffeff8f
 80030d8:	40010000 	.word	0x40010000
 80030dc:	40010400 	.word	0x40010400
 80030e0:	40014000 	.word	0x40014000
 80030e4:	40014400 	.word	0x40014400
 80030e8:	40014800 	.word	0x40014800

080030ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <TIM_OC4_SetConfig+0xbc>)
 8003118:	4013      	ands	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	031b      	lsls	r3, r3, #12
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a19      	ldr	r2, [pc, #100]	; (80031ac <TIM_OC4_SetConfig+0xc0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00f      	beq.n	800316c <TIM_OC4_SetConfig+0x80>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a18      	ldr	r2, [pc, #96]	; (80031b0 <TIM_OC4_SetConfig+0xc4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00b      	beq.n	800316c <TIM_OC4_SetConfig+0x80>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a17      	ldr	r2, [pc, #92]	; (80031b4 <TIM_OC4_SetConfig+0xc8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d007      	beq.n	800316c <TIM_OC4_SetConfig+0x80>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a16      	ldr	r2, [pc, #88]	; (80031b8 <TIM_OC4_SetConfig+0xcc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d003      	beq.n	800316c <TIM_OC4_SetConfig+0x80>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a15      	ldr	r2, [pc, #84]	; (80031bc <TIM_OC4_SetConfig+0xd0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d109      	bne.n	8003180 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003172:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	019b      	lsls	r3, r3, #6
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	621a      	str	r2, [r3, #32]
}
 800319a:	bf00      	nop
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	feff8fff 	.word	0xfeff8fff
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40010400 	.word	0x40010400
 80031b4:	40014000 	.word	0x40014000
 80031b8:	40014400 	.word	0x40014400
 80031bc:	40014800 	.word	0x40014800

080031c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4b21      	ldr	r3, [pc, #132]	; (8003270 <TIM_OC5_SetConfig+0xb0>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003200:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	041b      	lsls	r3, r3, #16
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a18      	ldr	r2, [pc, #96]	; (8003274 <TIM_OC5_SetConfig+0xb4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00f      	beq.n	8003236 <TIM_OC5_SetConfig+0x76>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a17      	ldr	r2, [pc, #92]	; (8003278 <TIM_OC5_SetConfig+0xb8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00b      	beq.n	8003236 <TIM_OC5_SetConfig+0x76>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a16      	ldr	r2, [pc, #88]	; (800327c <TIM_OC5_SetConfig+0xbc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d007      	beq.n	8003236 <TIM_OC5_SetConfig+0x76>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a15      	ldr	r2, [pc, #84]	; (8003280 <TIM_OC5_SetConfig+0xc0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d003      	beq.n	8003236 <TIM_OC5_SetConfig+0x76>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a14      	ldr	r2, [pc, #80]	; (8003284 <TIM_OC5_SetConfig+0xc4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d109      	bne.n	800324a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	621a      	str	r2, [r3, #32]
}
 8003264:	bf00      	nop
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	fffeff8f 	.word	0xfffeff8f
 8003274:	40010000 	.word	0x40010000
 8003278:	40010400 	.word	0x40010400
 800327c:	40014000 	.word	0x40014000
 8003280:	40014400 	.word	0x40014400
 8003284:	40014800 	.word	0x40014800

08003288 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4b22      	ldr	r3, [pc, #136]	; (800333c <TIM_OC6_SetConfig+0xb4>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	051b      	lsls	r3, r3, #20
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a19      	ldr	r2, [pc, #100]	; (8003340 <TIM_OC6_SetConfig+0xb8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00f      	beq.n	8003300 <TIM_OC6_SetConfig+0x78>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a18      	ldr	r2, [pc, #96]	; (8003344 <TIM_OC6_SetConfig+0xbc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00b      	beq.n	8003300 <TIM_OC6_SetConfig+0x78>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a17      	ldr	r2, [pc, #92]	; (8003348 <TIM_OC6_SetConfig+0xc0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d007      	beq.n	8003300 <TIM_OC6_SetConfig+0x78>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a16      	ldr	r2, [pc, #88]	; (800334c <TIM_OC6_SetConfig+0xc4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_OC6_SetConfig+0x78>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a15      	ldr	r2, [pc, #84]	; (8003350 <TIM_OC6_SetConfig+0xc8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d109      	bne.n	8003314 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003306:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	029b      	lsls	r3, r3, #10
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	621a      	str	r2, [r3, #32]
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	feff8fff 	.word	0xfeff8fff
 8003340:	40010000 	.word	0x40010000
 8003344:	40010400 	.word	0x40010400
 8003348:	40014000 	.word	0x40014000
 800334c:	40014400 	.word	0x40014400
 8003350:	40014800 	.word	0x40014800

08003354 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4b65      	ldr	r3, [pc, #404]	; (8003504 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4b62      	ldr	r3, [pc, #392]	; (8003508 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	4a5c      	ldr	r2, [pc, #368]	; (800350c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	f000 80ab 	beq.w	80034f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80033a2:	4a5a      	ldr	r2, [pc, #360]	; (800350c <TIM_SlaveTimer_SetConfig+0x1b8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	f200 80a4 	bhi.w	80034f2 <TIM_SlaveTimer_SetConfig+0x19e>
 80033aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ae:	f000 80a3 	beq.w	80034f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80033b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033b6:	f200 809c 	bhi.w	80034f2 <TIM_SlaveTimer_SetConfig+0x19e>
 80033ba:	4a55      	ldr	r2, [pc, #340]	; (8003510 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	f000 809b 	beq.w	80034f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80033c2:	4a53      	ldr	r2, [pc, #332]	; (8003510 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	f200 8094 	bhi.w	80034f2 <TIM_SlaveTimer_SetConfig+0x19e>
 80033ca:	4a52      	ldr	r2, [pc, #328]	; (8003514 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	f000 8093 	beq.w	80034f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80033d2:	4a50      	ldr	r2, [pc, #320]	; (8003514 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	f200 808c 	bhi.w	80034f2 <TIM_SlaveTimer_SetConfig+0x19e>
 80033da:	4a4f      	ldr	r2, [pc, #316]	; (8003518 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	f000 808b 	beq.w	80034f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80033e2:	4a4d      	ldr	r2, [pc, #308]	; (8003518 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	f200 8084 	bhi.w	80034f2 <TIM_SlaveTimer_SetConfig+0x19e>
 80033ea:	4a4c      	ldr	r2, [pc, #304]	; (800351c <TIM_SlaveTimer_SetConfig+0x1c8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	f000 8083 	beq.w	80034f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80033f2:	4a4a      	ldr	r2, [pc, #296]	; (800351c <TIM_SlaveTimer_SetConfig+0x1c8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d87c      	bhi.n	80034f2 <TIM_SlaveTimer_SetConfig+0x19e>
 80033f8:	4a49      	ldr	r2, [pc, #292]	; (8003520 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d07c      	beq.n	80034f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80033fe:	4a48      	ldr	r2, [pc, #288]	; (8003520 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d876      	bhi.n	80034f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8003404:	4a47      	ldr	r2, [pc, #284]	; (8003524 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d076      	beq.n	80034f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800340a:	4a46      	ldr	r2, [pc, #280]	; (8003524 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d870      	bhi.n	80034f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8003410:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003414:	d070      	beq.n	80034f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003416:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800341a:	d86a      	bhi.n	80034f2 <TIM_SlaveTimer_SetConfig+0x19e>
 800341c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003420:	d06a      	beq.n	80034f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d864      	bhi.n	80034f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8003428:	2b70      	cmp	r3, #112	; 0x70
 800342a:	d01a      	beq.n	8003462 <TIM_SlaveTimer_SetConfig+0x10e>
 800342c:	2b70      	cmp	r3, #112	; 0x70
 800342e:	d860      	bhi.n	80034f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8003430:	2b60      	cmp	r3, #96	; 0x60
 8003432:	d054      	beq.n	80034de <TIM_SlaveTimer_SetConfig+0x18a>
 8003434:	2b60      	cmp	r3, #96	; 0x60
 8003436:	d85c      	bhi.n	80034f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8003438:	2b50      	cmp	r3, #80	; 0x50
 800343a:	d046      	beq.n	80034ca <TIM_SlaveTimer_SetConfig+0x176>
 800343c:	2b50      	cmp	r3, #80	; 0x50
 800343e:	d858      	bhi.n	80034f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8003440:	2b40      	cmp	r3, #64	; 0x40
 8003442:	d019      	beq.n	8003478 <TIM_SlaveTimer_SetConfig+0x124>
 8003444:	2b40      	cmp	r3, #64	; 0x40
 8003446:	d854      	bhi.n	80034f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8003448:	2b30      	cmp	r3, #48	; 0x30
 800344a:	d055      	beq.n	80034f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800344c:	2b30      	cmp	r3, #48	; 0x30
 800344e:	d850      	bhi.n	80034f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8003450:	2b20      	cmp	r3, #32
 8003452:	d051      	beq.n	80034f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003454:	2b20      	cmp	r3, #32
 8003456:	d84c      	bhi.n	80034f2 <TIM_SlaveTimer_SetConfig+0x19e>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d04d      	beq.n	80034f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800345c:	2b10      	cmp	r3, #16
 800345e:	d04b      	beq.n	80034f8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003460:	e047      	b.n	80034f2 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003472:	f000 f8b8 	bl	80035e6 <TIM_ETR_SetConfig>
      break;
 8003476:	e040      	b.n	80034fa <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b05      	cmp	r3, #5
 800347e:	d101      	bne.n	8003484 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e03b      	b.n	80034fc <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a1a      	ldr	r2, [r3, #32]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0201 	bic.w	r2, r2, #1
 800349a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034aa:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	621a      	str	r2, [r3, #32]
      break;
 80034c8:	e017      	b.n	80034fa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d6:	461a      	mov	r2, r3
 80034d8:	f000 f826 	bl	8003528 <TIM_TI1_ConfigInputStage>
      break;
 80034dc:	e00d      	b.n	80034fa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ea:	461a      	mov	r2, r3
 80034ec:	f000 f84b 	bl	8003586 <TIM_TI2_ConfigInputStage>
      break;
 80034f0:	e003      	b.n	80034fa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	75fb      	strb	r3, [r7, #23]
      break;
 80034f6:	e000      	b.n	80034fa <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 80034f8:	bf00      	nop
  }

  return status;
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	ffcfff8f 	.word	0xffcfff8f
 8003508:	fffefff8 	.word	0xfffefff8
 800350c:	00200010 	.word	0x00200010
 8003510:	00100070 	.word	0x00100070
 8003514:	00100060 	.word	0x00100060
 8003518:	00100050 	.word	0x00100050
 800351c:	00100040 	.word	0x00100040
 8003520:	00100030 	.word	0x00100030
 8003524:	00100020 	.word	0x00100020

08003528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f023 0201 	bic.w	r2, r3, #1
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f023 030a 	bic.w	r3, r3, #10
 8003564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	621a      	str	r2, [r3, #32]
}
 800357a:	bf00      	nop
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003586:	b480      	push	{r7}
 8003588:	b087      	sub	sp, #28
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f023 0210 	bic.w	r2, r3, #16
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	031b      	lsls	r3, r3, #12
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	621a      	str	r2, [r3, #32]
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b087      	sub	sp, #28
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003600:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	021a      	lsls	r2, r3, #8
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	431a      	orrs	r2, r3
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4313      	orrs	r3, r2
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	609a      	str	r2, [r3, #8]
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003626:	b480      	push	{r7}
 8003628:	b087      	sub	sp, #28
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	2201      	movs	r2, #1
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a1a      	ldr	r2, [r3, #32]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	43db      	mvns	r3, r3
 8003648:	401a      	ands	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1a      	ldr	r2, [r3, #32]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	fa01 f303 	lsl.w	r3, r1, r3
 800365e:	431a      	orrs	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	621a      	str	r2, [r3, #32]
}
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003684:	2302      	movs	r3, #2
 8003686:	e06d      	b.n	8003764 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a30      	ldr	r2, [pc, #192]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d004      	beq.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a2f      	ldr	r2, [pc, #188]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d108      	bne.n	80036ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a20      	ldr	r2, [pc, #128]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d022      	beq.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fa:	d01d      	beq.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d018      	beq.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1c      	ldr	r2, [pc, #112]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1a      	ldr	r2, [pc, #104]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00e      	beq.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a15      	ldr	r2, [pc, #84]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d009      	beq.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a16      	ldr	r2, [pc, #88]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a15      	ldr	r2, [pc, #84]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d10c      	bne.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800373e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	4313      	orrs	r3, r2
 8003748:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	40010000 	.word	0x40010000
 8003774:	40010400 	.word	0x40010400
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800
 8003780:	40000c00 	.word	0x40000c00
 8003784:	40001800 	.word	0x40001800
 8003788:	40014000 	.word	0x40014000

0800378c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e065      	b.n	8003874 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a16      	ldr	r2, [pc, #88]	; (8003880 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a14      	ldr	r2, [pc, #80]	; (8003884 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d115      	bne.n	8003862 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	051b      	lsls	r3, r3, #20
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	40010000 	.word	0x40010000
 8003884:	40010400 	.word	0x40010400

08003888 <memset>:
 8003888:	4402      	add	r2, r0
 800388a:	4603      	mov	r3, r0
 800388c:	4293      	cmp	r3, r2
 800388e:	d100      	bne.n	8003892 <memset+0xa>
 8003890:	4770      	bx	lr
 8003892:	f803 1b01 	strb.w	r1, [r3], #1
 8003896:	e7f9      	b.n	800388c <memset+0x4>

08003898 <__libc_init_array>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	4d0d      	ldr	r5, [pc, #52]	; (80038d0 <__libc_init_array+0x38>)
 800389c:	4c0d      	ldr	r4, [pc, #52]	; (80038d4 <__libc_init_array+0x3c>)
 800389e:	1b64      	subs	r4, r4, r5
 80038a0:	10a4      	asrs	r4, r4, #2
 80038a2:	2600      	movs	r6, #0
 80038a4:	42a6      	cmp	r6, r4
 80038a6:	d109      	bne.n	80038bc <__libc_init_array+0x24>
 80038a8:	4d0b      	ldr	r5, [pc, #44]	; (80038d8 <__libc_init_array+0x40>)
 80038aa:	4c0c      	ldr	r4, [pc, #48]	; (80038dc <__libc_init_array+0x44>)
 80038ac:	f000 f818 	bl	80038e0 <_init>
 80038b0:	1b64      	subs	r4, r4, r5
 80038b2:	10a4      	asrs	r4, r4, #2
 80038b4:	2600      	movs	r6, #0
 80038b6:	42a6      	cmp	r6, r4
 80038b8:	d105      	bne.n	80038c6 <__libc_init_array+0x2e>
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
 80038bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c0:	4798      	blx	r3
 80038c2:	3601      	adds	r6, #1
 80038c4:	e7ee      	b.n	80038a4 <__libc_init_array+0xc>
 80038c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ca:	4798      	blx	r3
 80038cc:	3601      	adds	r6, #1
 80038ce:	e7f2      	b.n	80038b6 <__libc_init_array+0x1e>
 80038d0:	08003908 	.word	0x08003908
 80038d4:	08003908 	.word	0x08003908
 80038d8:	08003908 	.word	0x08003908
 80038dc:	0800390c 	.word	0x0800390c

080038e0 <_init>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	bf00      	nop
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr

080038ec <_fini>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	bf00      	nop
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr
