
PWM_signals_ABCD_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003958  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003bf0  08003bf0  00004bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c00  08003c00  00005028  2**0
                  CONTENTS
  4 .ARM          00000000  08003c00  08003c00  00005028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c00  08003c00  00005028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c00  08003c00  00004c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c04  08003c04  00004c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  24000000  08003c08  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  24000028  08003c30  00005028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000f0  08003c30  000050f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da62  00000000  00000000  00005056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c34  00000000  00000000  00012ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  000146f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009bf  00000000  00000000  00015398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000391a0  00000000  00000000  00015d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4a2  00000000  00000000  0004eef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017e61c  00000000  00000000  0005d399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001db9b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034ec  00000000  00000000  001db9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001deee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000028 	.word	0x24000028
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003bd8 	.word	0x08003bd8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400002c 	.word	0x2400002c
 80002d4:	08003bd8 	.word	0x08003bd8

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <HAL_TIM_PeriodElapsedCallback>:
float min_phase_shift = 0.10; //
uint32_t tim_period = 0; //

// Callback function declaration. This is called when timer reaches its max count and resets back to 0
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM2)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000414:	f040 810b 	bne.w	800062e <HAL_TIM_PeriodElapsedCallback+0x22a>
	{
		if (phase_shift_increment == 0) {
 8000418:	4b88      	ldr	r3, [pc, #544]	@ (800063c <HAL_TIM_PeriodElapsedCallback+0x238>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d179      	bne.n	8000514 <HAL_TIM_PeriodElapsedCallback+0x110>
			if (flip == 0) // If we are incrementing duty cycle
 8000420:	4b87      	ldr	r3, [pc, #540]	@ (8000640 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d13a      	bne.n	800049e <HAL_TIM_PeriodElapsedCallback+0x9a>
			{
				if (duty_cycle_current >= (max_duty_cycle*tim_period) - duty_cycle_increment) {
 8000428:	4b86      	ldr	r3, [pc, #536]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	ee07 3a90 	vmov	s15, r3
 8000430:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000434:	4b84      	ldr	r3, [pc, #528]	@ (8000648 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	ee07 3a90 	vmov	s15, r3
 800043c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000440:	4b82      	ldr	r3, [pc, #520]	@ (800064c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000442:	edd3 7a00 	vldr	s15, [r3]
 8000446:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800044a:	4b81      	ldr	r3, [pc, #516]	@ (8000650 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	ee07 3a90 	vmov	s15, r3
 8000452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000456:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800045a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800045e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000462:	db14      	blt.n	800048e <HAL_TIM_PeriodElapsedCallback+0x8a>
					duty_cycle_current = (max_duty_cycle*tim_period);
 8000464:	4b78      	ldr	r3, [pc, #480]	@ (8000648 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	ee07 3a90 	vmov	s15, r3
 800046c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000470:	4b76      	ldr	r3, [pc, #472]	@ (800064c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000472:	edd3 7a00 	vldr	s15, [r3]
 8000476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800047a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800047e:	ee17 2a90 	vmov	r2, s15
 8000482:	4b70      	ldr	r3, [pc, #448]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000484:	601a      	str	r2, [r3, #0]
					flip = 1;
 8000486:	4b6e      	ldr	r3, [pc, #440]	@ (8000640 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000488:	2201      	movs	r2, #1
 800048a:	701a      	strb	r2, [r3, #0]
 800048c:	e0bb      	b.n	8000606 <HAL_TIM_PeriodElapsedCallback+0x202>
				} else {
					duty_cycle_current += duty_cycle_increment;
 800048e:	4b6d      	ldr	r3, [pc, #436]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	4b6f      	ldr	r3, [pc, #444]	@ (8000650 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4413      	add	r3, r2
 8000498:	4a6a      	ldr	r2, [pc, #424]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800049a:	6013      	str	r3, [r2, #0]
 800049c:	e0b3      	b.n	8000606 <HAL_TIM_PeriodElapsedCallback+0x202>
				}
			} else // If we are decrementing duty cycle
			{
				if (duty_cycle_current <= (min_duty_cycle*tim_period) + duty_cycle_increment)
 800049e:	4b69      	ldr	r3, [pc, #420]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	ee07 3a90 	vmov	s15, r3
 80004a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80004aa:	4b67      	ldr	r3, [pc, #412]	@ (8000648 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	ee07 3a90 	vmov	s15, r3
 80004b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80004b6:	4b67      	ldr	r3, [pc, #412]	@ (8000654 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80004b8:	edd3 7a00 	vldr	s15, [r3]
 80004bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80004c0:	4b63      	ldr	r3, [pc, #396]	@ (8000650 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	ee07 3a90 	vmov	s15, r3
 80004c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80004d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80004d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d8:	d814      	bhi.n	8000504 <HAL_TIM_PeriodElapsedCallback+0x100>
				{
					duty_cycle_current = (min_duty_cycle*tim_period);
 80004da:	4b5b      	ldr	r3, [pc, #364]	@ (8000648 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	ee07 3a90 	vmov	s15, r3
 80004e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80004e6:	4b5b      	ldr	r3, [pc, #364]	@ (8000654 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80004e8:	edd3 7a00 	vldr	s15, [r3]
 80004ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80004f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80004f4:	ee17 2a90 	vmov	r2, s15
 80004f8:	4b52      	ldr	r3, [pc, #328]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80004fa:	601a      	str	r2, [r3, #0]
					flip = 0;
 80004fc:	4b50      	ldr	r3, [pc, #320]	@ (8000640 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
 8000502:	e080      	b.n	8000606 <HAL_TIM_PeriodElapsedCallback+0x202>
				} else
				{
					duty_cycle_current -= duty_cycle_increment;
 8000504:	4b4f      	ldr	r3, [pc, #316]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b51      	ldr	r3, [pc, #324]	@ (8000650 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	4a4d      	ldr	r2, [pc, #308]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000510:	6013      	str	r3, [r2, #0]
 8000512:	e078      	b.n	8000606 <HAL_TIM_PeriodElapsedCallback+0x202>
				}
			}
		} else { // If varying phase shift
			if (flip == 0) //
 8000514:	4b4a      	ldr	r3, [pc, #296]	@ (8000640 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d13a      	bne.n	8000592 <HAL_TIM_PeriodElapsedCallback+0x18e>
			{
				if (phase_shift_current >= (max_phase_shift*duty_cycle_current) - phase_shift_increment) {
 800051c:	4b4e      	ldr	r3, [pc, #312]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	ee07 3a90 	vmov	s15, r3
 8000524:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000528:	4b46      	ldr	r3, [pc, #280]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	ee07 3a90 	vmov	s15, r3
 8000530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000534:	4b49      	ldr	r3, [pc, #292]	@ (800065c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000536:	edd3 7a00 	vldr	s15, [r3]
 800053a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800053e:	4b3f      	ldr	r3, [pc, #252]	@ (800063c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	ee07 3a90 	vmov	s15, r3
 8000546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800054a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800054e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000556:	db14      	blt.n	8000582 <HAL_TIM_PeriodElapsedCallback+0x17e>
					phase_shift_current = (max_phase_shift*duty_cycle_current);
 8000558:	4b3a      	ldr	r3, [pc, #232]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	ee07 3a90 	vmov	s15, r3
 8000560:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000564:	4b3d      	ldr	r3, [pc, #244]	@ (800065c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000566:	edd3 7a00 	vldr	s15, [r3]
 800056a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800056e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000572:	ee17 2a90 	vmov	r2, s15
 8000576:	4b38      	ldr	r3, [pc, #224]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000578:	601a      	str	r2, [r3, #0]
					flip = 1;
 800057a:	4b31      	ldr	r3, [pc, #196]	@ (8000640 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
 8000580:	e041      	b.n	8000606 <HAL_TIM_PeriodElapsedCallback+0x202>
				} else {
					phase_shift_current += phase_shift_increment;
 8000582:	4b35      	ldr	r3, [pc, #212]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	4b2d      	ldr	r3, [pc, #180]	@ (800063c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a32      	ldr	r2, [pc, #200]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	e039      	b.n	8000606 <HAL_TIM_PeriodElapsedCallback+0x202>
				}
			} else //
			{
				if (phase_shift_current <= (min_phase_shift*duty_cycle_current) + phase_shift_increment)
 8000592:	4b31      	ldr	r3, [pc, #196]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	ee07 3a90 	vmov	s15, r3
 800059a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800059e:	4b29      	ldr	r3, [pc, #164]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	ee07 3a90 	vmov	s15, r3
 80005a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80005aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000660 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80005ac:	edd3 7a00 	vldr	s15, [r3]
 80005b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80005b4:	4b21      	ldr	r3, [pc, #132]	@ (800063c <HAL_TIM_PeriodElapsedCallback+0x238>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	ee07 3a90 	vmov	s15, r3
 80005bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80005c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005cc:	d814      	bhi.n	80005f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>
				{
					phase_shift_current = (min_phase_shift*duty_cycle_current);
 80005ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	ee07 3a90 	vmov	s15, r3
 80005d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005da:	4b21      	ldr	r3, [pc, #132]	@ (8000660 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80005dc:	edd3 7a00 	vldr	s15, [r3]
 80005e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005e8:	ee17 2a90 	vmov	r2, s15
 80005ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80005ee:	601a      	str	r2, [r3, #0]
					flip = 0;
 80005f0:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	e006      	b.n	8000606 <HAL_TIM_PeriodElapsedCallback+0x202>
				} else
				{
					phase_shift_current -= phase_shift_increment;
 80005f8:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <HAL_TIM_PeriodElapsedCallback+0x238>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	4a15      	ldr	r2, [pc, #84]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000604:	6013      	str	r3, [r2, #0]
		}

		// Update duty cycle / phase shift registers

		// Signals A + B
		TIM1 -> CCR1 = duty_cycle_current;
 8000606:	4a17      	ldr	r2, [pc, #92]	@ (8000664 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000608:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6353      	str	r3, [r2, #52]	@ 0x34

		// Signals C + D
		TIM1 -> CCR3 = duty_cycle_current + 2*phase_shift_current;
 800060e:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	005a      	lsls	r2, r3, #1
 8000614:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4912      	ldr	r1, [pc, #72]	@ (8000664 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800061a:	4413      	add	r3, r2
 800061c:	63cb      	str	r3, [r1, #60]	@ 0x3c
		TIM1 -> CCR4 = duty_cycle_current - 2*phase_shift_current;
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	490e      	ldr	r1, [pc, #56]	@ (8000664 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	640b      	str	r3, [r1, #64]	@ 0x40


		// LED Toggle
		//		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
	}
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	2400000c 	.word	0x2400000c
 8000640:	240000dc 	.word	0x240000dc
 8000644:	24000008 	.word	0x24000008
 8000648:	240000e8 	.word	0x240000e8
 800064c:	24000010 	.word	0x24000010
 8000650:	240000e0 	.word	0x240000e0
 8000654:	24000014 	.word	0x24000014
 8000658:	240000e4 	.word	0x240000e4
 800065c:	24000018 	.word	0x24000018
 8000660:	2400001c 	.word	0x2400001c
 8000664:	40010000 	.word	0x40010000

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800066e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000672:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000674:	bf00      	nop
 8000676:	4b42      	ldr	r3, [pc, #264]	@ (8000780 <main+0x118>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800067e:	2b00      	cmp	r3, #0
 8000680:	d004      	beq.n	800068c <main+0x24>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	1e5a      	subs	r2, r3, #1
 8000686:	607a      	str	r2, [r7, #4]
 8000688:	2b00      	cmp	r3, #0
 800068a:	dcf4      	bgt.n	8000676 <main+0xe>
	if ( timeout < 0 )
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b00      	cmp	r3, #0
 8000690:	da01      	bge.n	8000696 <main+0x2e>
	{
		Error_Handler();
 8000692:	f000 fa17 	bl	8000ac4 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f000 fb3f 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f885 	bl	80007a8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800069e:	4b38      	ldr	r3, [pc, #224]	@ (8000780 <main+0x118>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a4:	4a36      	ldr	r2, [pc, #216]	@ (8000780 <main+0x118>)
 80006a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ae:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <main+0x118>)
 80006b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80006bc:	2000      	movs	r0, #0
 80006be:	f000 fe89 	bl	80013d4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80006c2:	2100      	movs	r1, #0
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 fe9f 	bl	8001408 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80006ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006ce:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80006d0:	bf00      	nop
 80006d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000780 <main+0x118>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d104      	bne.n	80006e8 <main+0x80>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	1e5a      	subs	r2, r3, #1
 80006e2:	607a      	str	r2, [r7, #4]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	dcf4      	bgt.n	80006d2 <main+0x6a>
	if ( timeout < 0 )
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	da01      	bge.n	80006f2 <main+0x8a>
	{
		Error_Handler();
 80006ee:	f000 f9e9 	bl	8000ac4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f000 f9bd 	bl	8000a70 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006f6:	f000 f8c1 	bl	800087c <MX_TIM1_Init>
  MX_TIM2_Init();
 80006fa:	f000 f96b 	bl	80009d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	tim_period = TIM1 -> ARR; // Get period of PWM signal
 80006fe:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <main+0x11c>)
 8000700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000702:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <main+0x120>)
 8000704:	6013      	str	r3, [r2, #0]

	// Set initial duty cycle or phase shift
	if (phase_shift_increment == 0) 						  // If we are incrementing duty cycle (NOT incrementing phase shift)
 8000706:	4b21      	ldr	r3, [pc, #132]	@ (800078c <main+0x124>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d111      	bne.n	8000732 <main+0xca>
	{
		duty_cycle_current = min_duty_cycle * tim_period;     // Set initial duty cycle
 800070e:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <main+0x120>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	ee07 3a90 	vmov	s15, r3
 8000716:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <main+0x128>)
 800071c:	edd3 7a00 	vldr	s15, [r3]
 8000720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000728:	ee17 2a90 	vmov	r2, s15
 800072c:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <main+0x12c>)
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	e010      	b.n	8000754 <main+0xec>
	} else { 												  // If we are incrementing phase shift
		phase_shift_current = min_phase_shift * TIM1 -> CCR1; // Set initial phase shift
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <main+0x11c>)
 8000734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000736:	ee07 3a90 	vmov	s15, r3
 800073a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800073e:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <main+0x130>)
 8000740:	edd3 7a00 	vldr	s15, [r3]
 8000744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800074c:	ee17 2a90 	vmov	r2, s15
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <main+0x134>)
 8000752:	601a      	str	r2, [r3, #0]
	//	}
	 *
	 */

	// Enable timer 2
	HAL_TIM_Base_Start_IT(&htim2);
 8000754:	4812      	ldr	r0, [pc, #72]	@ (80007a0 <main+0x138>)
 8000756:	f001 fea7 	bl	80024a8 <HAL_TIM_Base_Start_IT>

	// Enable timer 1 channel 1 and 1N
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800075a:	2100      	movs	r1, #0
 800075c:	4811      	ldr	r0, [pc, #68]	@ (80007a4 <main+0x13c>)
 800075e:	f001 ff73 	bl	8002648 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000762:	2100      	movs	r1, #0
 8000764:	480f      	ldr	r0, [pc, #60]	@ (80007a4 <main+0x13c>)
 8000766:	f002 fff9 	bl	800375c <HAL_TIMEx_PWMN_Start>
	// Enable timer 1 channel 2 and 2N
	//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	//  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);

	// Enable timer 1 channel 3 and 3N
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800076a:	2108      	movs	r1, #8
 800076c:	480d      	ldr	r0, [pc, #52]	@ (80007a4 <main+0x13c>)
 800076e:	f001 ff6b 	bl	8002648 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000772:	2108      	movs	r1, #8
 8000774:	480b      	ldr	r0, [pc, #44]	@ (80007a4 <main+0x13c>)
 8000776:	f002 fff1 	bl	800375c <HAL_TIMEx_PWMN_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800077a:	bf00      	nop
 800077c:	e7fd      	b.n	800077a <main+0x112>
 800077e:	bf00      	nop
 8000780:	58024400 	.word	0x58024400
 8000784:	40010000 	.word	0x40010000
 8000788:	240000e8 	.word	0x240000e8
 800078c:	2400000c 	.word	0x2400000c
 8000790:	24000014 	.word	0x24000014
 8000794:	24000008 	.word	0x24000008
 8000798:	2400001c 	.word	0x2400001c
 800079c:	240000e4 	.word	0x240000e4
 80007a0:	24000090 	.word	0x24000090
 80007a4:	24000044 	.word	0x24000044

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b09c      	sub	sp, #112	@ 0x70
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b2:	224c      	movs	r2, #76	@ 0x4c
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 f9e1 	bl	8003b7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2220      	movs	r2, #32
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 f9db 	bl	8003b7e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007c8:	2004      	movs	r0, #4
 80007ca:	f000 fe31 	bl	8001430 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b28      	ldr	r3, [pc, #160]	@ (8000874 <SystemClock_Config+0xcc>)
 80007d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007d6:	4a27      	ldr	r2, [pc, #156]	@ (8000874 <SystemClock_Config+0xcc>)
 80007d8:	f023 0301 	bic.w	r3, r3, #1
 80007dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007de:	4b25      	ldr	r3, [pc, #148]	@ (8000874 <SystemClock_Config+0xcc>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	4b23      	ldr	r3, [pc, #140]	@ (8000878 <SystemClock_Config+0xd0>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007f0:	4a21      	ldr	r2, [pc, #132]	@ (8000878 <SystemClock_Config+0xd0>)
 80007f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <SystemClock_Config+0xd0>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000804:	bf00      	nop
 8000806:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <SystemClock_Config+0xd0>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800080e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000812:	d1f8      	bne.n	8000806 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000814:	2302      	movs	r3, #2
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000818:	2301      	movs	r3, #1
 800081a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081c:	2340      	movs	r3, #64	@ 0x40
 800081e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000820:	2300      	movs	r3, #0
 8000822:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fe5b 	bl	80014e4 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000834:	f000 f946 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	233f      	movs	r3, #63	@ 0x3f
 800083a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2101      	movs	r1, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f001 fa9b 	bl	8001d98 <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000868:	f000 f92c 	bl	8000ac4 <Error_Handler>
  }
}
 800086c:	bf00      	nop
 800086e:	3770      	adds	r7, #112	@ 0x70
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	58000400 	.word	0x58000400
 8000878:	58024800 	.word	0x58024800

0800087c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b096      	sub	sp, #88	@ 0x58
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000882:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
 800089e:	615a      	str	r2, [r3, #20]
 80008a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	222c      	movs	r2, #44	@ 0x2c
 80008a6:	2100      	movs	r1, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f003 f968 	bl	8003b7e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008ae:	4b46      	ldr	r3, [pc, #280]	@ (80009c8 <MX_TIM1_Init+0x14c>)
 80008b0:	4a46      	ldr	r2, [pc, #280]	@ (80009cc <MX_TIM1_Init+0x150>)
 80008b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (64 / 2) - 1;
 80008b4:	4b44      	ldr	r3, [pc, #272]	@ (80009c8 <MX_TIM1_Init+0x14c>)
 80008b6:	221f      	movs	r2, #31
 80008b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80008ba:	4b43      	ldr	r3, [pc, #268]	@ (80009c8 <MX_TIM1_Init+0x14c>)
 80008bc:	2220      	movs	r2, #32
 80008be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (10000) - 1;
 80008c0:	4b41      	ldr	r3, [pc, #260]	@ (80009c8 <MX_TIM1_Init+0x14c>)
 80008c2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	4b3f      	ldr	r3, [pc, #252]	@ (80009c8 <MX_TIM1_Init+0x14c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ce:	4b3e      	ldr	r3, [pc, #248]	@ (80009c8 <MX_TIM1_Init+0x14c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008d4:	4b3c      	ldr	r3, [pc, #240]	@ (80009c8 <MX_TIM1_Init+0x14c>)
 80008d6:	2280      	movs	r2, #128	@ 0x80
 80008d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008da:	483b      	ldr	r0, [pc, #236]	@ (80009c8 <MX_TIM1_Init+0x14c>)
 80008dc:	f001 fe5c 	bl	8002598 <HAL_TIM_PWM_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f000 f8ed 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008fa:	4619      	mov	r1, r3
 80008fc:	4832      	ldr	r0, [pc, #200]	@ (80009c8 <MX_TIM1_Init+0x14c>)
 80008fe:	f002 ffef 	bl	80038e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000908:	f000 f8dc 	bl	8000ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090c:	2360      	movs	r3, #96	@ 0x60
 800090e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000914:	2300      	movs	r3, #0
 8000916:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000918:	2300      	movs	r3, #0
 800091a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000928:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800092c:	2200      	movs	r2, #0
 800092e:	4619      	mov	r1, r3
 8000930:	4825      	ldr	r0, [pc, #148]	@ (80009c8 <MX_TIM1_Init+0x14c>)
 8000932:	f002 f89f 	bl	8002a74 <HAL_TIM_PWM_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800093c:	f000 f8c2 	bl	8000ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 8000940:	4b23      	ldr	r3, [pc, #140]	@ (80009d0 <MX_TIM1_Init+0x154>)
 8000942:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000944:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000948:	2208      	movs	r2, #8
 800094a:	4619      	mov	r1, r3
 800094c:	481e      	ldr	r0, [pc, #120]	@ (80009c8 <MX_TIM1_Init+0x14c>)
 800094e:	f002 f891 	bl	8002a74 <HAL_TIM_PWM_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000958:	f000 f8b4 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800095c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000960:	220c      	movs	r2, #12
 8000962:	4619      	mov	r1, r3
 8000964:	4818      	ldr	r0, [pc, #96]	@ (80009c8 <MX_TIM1_Init+0x14c>)
 8000966:	f002 f885 	bl	8002a74 <HAL_TIM_PWM_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000970:	f000 f8a8 	bl	8000ac4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000988:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800098c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000996:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4619      	mov	r1, r3
 80009a8:	4807      	ldr	r0, [pc, #28]	@ (80009c8 <MX_TIM1_Init+0x14c>)
 80009aa:	f003 f827 	bl	80039fc <HAL_TIMEx_ConfigBreakDeadTime>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80009b4:	f000 f886 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009b8:	4803      	ldr	r0, [pc, #12]	@ (80009c8 <MX_TIM1_Init+0x14c>)
 80009ba:	f000 f8eb 	bl	8000b94 <HAL_TIM_MspPostInit>

}
 80009be:	bf00      	nop
 80009c0:	3758      	adds	r7, #88	@ 0x58
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	24000044 	.word	0x24000044
 80009cc:	40010000 	.word	0x40010000
 80009d0:	00010060 	.word	0x00010060

080009d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009f2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a6c <MX_TIM2_Init+0x98>)
 80009f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000 - 1;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <MX_TIM2_Init+0x98>)
 80009fc:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000a00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_TIM2_Init+0x98>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = Period_ms - 1;
 8000a08:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <MX_TIM2_Init+0x98>)
 8000a0a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000a0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a10:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <MX_TIM2_Init+0x98>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <MX_TIM2_Init+0x98>)
 8000a18:	2280      	movs	r2, #128	@ 0x80
 8000a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a1c:	4813      	ldr	r0, [pc, #76]	@ (8000a6c <MX_TIM2_Init+0x98>)
 8000a1e:	f001 fceb 	bl	80023f8 <HAL_TIM_Base_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a28:	f000 f84c 	bl	8000ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	4619      	mov	r1, r3
 8000a38:	480c      	ldr	r0, [pc, #48]	@ (8000a6c <MX_TIM2_Init+0x98>)
 8000a3a:	f002 f92f 	bl	8002c9c <HAL_TIM_ConfigClockSource>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a44:	f000 f83e 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <MX_TIM2_Init+0x98>)
 8000a56:	f002 ff43 	bl	80038e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000a60:	f000 f830 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	24000090 	.word	0x24000090

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a76:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <MX_GPIO_Init+0x50>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7c:	4a10      	ldr	r2, [pc, #64]	@ (8000ac0 <MX_GPIO_Init+0x50>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <MX_GPIO_Init+0x50>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8c:	f003 0310 	and.w	r3, r3, #16
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <MX_GPIO_Init+0x50>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	4a09      	ldr	r2, [pc, #36]	@ (8000ac0 <MX_GPIO_Init+0x50>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <MX_GPIO_Init+0x50>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	58024400 	.word	0x58024400

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x8>

08000ad0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <HAL_MspInit+0x30>)
 8000ad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000adc:	4a08      	ldr	r2, [pc, #32]	@ (8000b00 <HAL_MspInit+0x30>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <HAL_MspInit+0x30>)
 8000ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	58024400 	.word	0x58024400

08000b04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0b      	ldr	r2, [pc, #44]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d10e      	bne.n	8000b34 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b16:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <HAL_TIM_PWM_MspInit+0x40>)
 8000b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b1c:	4a09      	ldr	r2, [pc, #36]	@ (8000b44 <HAL_TIM_PWM_MspInit+0x40>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000b26:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <HAL_TIM_PWM_MspInit+0x40>)
 8000b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	40010000 	.word	0x40010000
 8000b44:	58024400 	.word	0x58024400

08000b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b58:	d116      	bne.n	8000b88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <HAL_TIM_Base_MspInit+0x48>)
 8000b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b60:	4a0b      	ldr	r2, [pc, #44]	@ (8000b90 <HAL_TIM_Base_MspInit+0x48>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <HAL_TIM_Base_MspInit+0x48>)
 8000b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	201c      	movs	r0, #28
 8000b7e:	f000 fa44 	bl	800100a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b82:	201c      	movs	r0, #28
 8000b84:	f000 fa5b 	bl	800103e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	58024400 	.word	0x58024400

08000b94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a23      	ldr	r2, [pc, #140]	@ (8000c40 <HAL_TIM_MspPostInit+0xac>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d13f      	bne.n	8000c36 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb6:	4b23      	ldr	r3, [pc, #140]	@ (8000c44 <HAL_TIM_MspPostInit+0xb0>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbc:	4a21      	ldr	r2, [pc, #132]	@ (8000c44 <HAL_TIM_MspPostInit+0xb0>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c44 <HAL_TIM_MspPostInit+0xb0>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <HAL_TIM_MspPostInit+0xb0>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bda:	4a1a      	ldr	r2, [pc, #104]	@ (8000c44 <HAL_TIM_MspPostInit+0xb0>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be4:	4b17      	ldr	r3, [pc, #92]	@ (8000c44 <HAL_TIM_MspPostInit+0xb0>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> TIM1_CH1N
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13;
 8000bf2:	f44f 5344 	mov.w	r3, #12544	@ 0x3100
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480e      	ldr	r0, [pc, #56]	@ (8000c48 <HAL_TIM_MspPostInit+0xb4>)
 8000c10:	f000 fa30 	bl	8001074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4806      	ldr	r0, [pc, #24]	@ (8000c4c <HAL_TIM_MspPostInit+0xb8>)
 8000c32:	f000 fa1f 	bl	8001074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	@ 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40010000 	.word	0x40010000
 8000c44:	58024400 	.word	0x58024400
 8000c48:	58021000 	.word	0x58021000
 8000c4c:	58020000 	.word	0x58020000

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <NMI_Handler+0x4>

08000c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <MemManage_Handler+0x4>

08000c68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca6:	f000 f8a9 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cb4:	4802      	ldr	r0, [pc, #8]	@ (8000cc0 <TIM2_IRQHandler+0x10>)
 8000cb6:	f001 fdd5 	bl	8002864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	24000090 	.word	0x24000090

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc8:	f7ff fb06 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f002 ff4d 	bl	8003b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fcb7 	bl	8000668 <main>
  bx  lr
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cfc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d04:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8000d08:	08003c08 	.word	0x08003c08
  ldr r2, =_sbss
 8000d0c:	24000028 	.word	0x24000028
  ldr r4, =_ebss
 8000d10:	240000f0 	.word	0x240000f0

08000d14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC3_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1e:	2003      	movs	r0, #3
 8000d20:	f000 f968 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d24:	f001 f9ee 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_Init+0x68>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	0a1b      	lsrs	r3, r3, #8
 8000d30:	f003 030f 	and.w	r3, r3, #15
 8000d34:	4913      	ldr	r1, [pc, #76]	@ (8000d84 <HAL_Init+0x6c>)
 8000d36:	5ccb      	ldrb	r3, [r1, r3]
 8000d38:	f003 031f 	and.w	r3, r3, #31
 8000d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d42:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <HAL_Init+0x68>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d84 <HAL_Init+0x6c>)
 8000d4c:	5cd3      	ldrb	r3, [r2, r3]
 8000d4e:	f003 031f 	and.w	r3, r3, #31
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	fa22 f303 	lsr.w	r3, r2, r3
 8000d58:	4a0b      	ldr	r2, [pc, #44]	@ (8000d88 <HAL_Init+0x70>)
 8000d5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d8c <HAL_Init+0x74>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d62:	2000      	movs	r0, #0
 8000d64:	f000 f814 	bl	8000d90 <HAL_InitTick>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e002      	b.n	8000d78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d72:	f7ff fead 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	58024400 	.word	0x58024400
 8000d84:	08003bf0 	.word	0x08003bf0
 8000d88:	24000004 	.word	0x24000004
 8000d8c:	24000000 	.word	0x24000000

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d98:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <HAL_InitTick+0x60>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d101      	bne.n	8000da4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e021      	b.n	8000de8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000da4:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <HAL_InitTick+0x64>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <HAL_InitTick+0x60>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f94d 	bl	800105a <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00e      	b.n	8000de8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d80a      	bhi.n	8000de6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f000 f917 	bl	800100a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ddc:	4a06      	ldr	r2, [pc, #24]	@ (8000df8 <HAL_InitTick+0x68>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	24000024 	.word	0x24000024
 8000df4:	24000000 	.word	0x24000000
 8000df8:	24000020 	.word	0x24000020

08000dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	@ (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	24000024 	.word	0x24000024
 8000e20:	240000ec 	.word	0x240000ec

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b03      	ldr	r3, [pc, #12]	@ (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	240000ec 	.word	0x240000ec

08000e3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e40:	4b03      	ldr	r3, [pc, #12]	@ (8000e50 <HAL_GetREVID+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	0c1b      	lsrs	r3, r3, #16
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	5c001000 	.word	0x5c001000

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <__NVIC_SetPriorityGrouping+0x40>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <__NVIC_SetPriorityGrouping+0x40>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00
 8000e98:	05fa0000 	.word	0x05fa0000

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	@ (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0b      	blt.n	8000ee2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	f003 021f 	and.w	r2, r3, #31
 8000ed0:	4907      	ldr	r1, [pc, #28]	@ (8000ef0 <__NVIC_EnableIRQ+0x38>)
 8000ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	@ (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	@ (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	@ 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf28      	it	cs
 8000f66:	2304      	movcs	r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b03      	subs	r3, #3
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
         );
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	@ 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fc0:	d301      	bcc.n	8000fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00f      	b.n	8000fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fce:	210f      	movs	r1, #15
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f7ff ff8e 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff29 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff40 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff90 	bl	8000f48 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5f 	bl	8000ef4 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001048:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff33 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffa4 	bl	8000fb0 <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	@ 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001082:	4b89      	ldr	r3, [pc, #548]	@ (80012a8 <HAL_GPIO_Init+0x234>)
 8001084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001086:	e194      	b.n	80013b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2101      	movs	r1, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa01 f303 	lsl.w	r3, r1, r3
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8186 	beq.w	80013ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d005      	beq.n	80010b8 <HAL_GPIO_Init+0x44>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d130      	bne.n	800111a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ee:	2201      	movs	r2, #1
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	f003 0201 	and.w	r2, r3, #1
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b03      	cmp	r3, #3
 8001124:	d017      	beq.n	8001156 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d123      	bne.n	80011aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	08da      	lsrs	r2, r3, #3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3208      	adds	r2, #8
 800116a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	220f      	movs	r2, #15
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	08da      	lsrs	r2, r3, #3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3208      	adds	r2, #8
 80011a4:	69b9      	ldr	r1, [r7, #24]
 80011a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0203 	and.w	r2, r3, #3
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 80e0 	beq.w	80013ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ec:	4b2f      	ldr	r3, [pc, #188]	@ (80012ac <HAL_GPIO_Init+0x238>)
 80011ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011f2:	4a2e      	ldr	r2, [pc, #184]	@ (80012ac <HAL_GPIO_Init+0x238>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011fc:	4b2b      	ldr	r3, [pc, #172]	@ (80012ac <HAL_GPIO_Init+0x238>)
 80011fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120a:	4a29      	ldr	r2, [pc, #164]	@ (80012b0 <HAL_GPIO_Init+0x23c>)
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a20      	ldr	r2, [pc, #128]	@ (80012b4 <HAL_GPIO_Init+0x240>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d052      	beq.n	80012dc <HAL_GPIO_Init+0x268>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a1f      	ldr	r2, [pc, #124]	@ (80012b8 <HAL_GPIO_Init+0x244>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d031      	beq.n	80012a2 <HAL_GPIO_Init+0x22e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a1e      	ldr	r2, [pc, #120]	@ (80012bc <HAL_GPIO_Init+0x248>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d02b      	beq.n	800129e <HAL_GPIO_Init+0x22a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a1d      	ldr	r2, [pc, #116]	@ (80012c0 <HAL_GPIO_Init+0x24c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d025      	beq.n	800129a <HAL_GPIO_Init+0x226>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a1c      	ldr	r2, [pc, #112]	@ (80012c4 <HAL_GPIO_Init+0x250>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d01f      	beq.n	8001296 <HAL_GPIO_Init+0x222>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a1b      	ldr	r2, [pc, #108]	@ (80012c8 <HAL_GPIO_Init+0x254>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d019      	beq.n	8001292 <HAL_GPIO_Init+0x21e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a1a      	ldr	r2, [pc, #104]	@ (80012cc <HAL_GPIO_Init+0x258>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0x21a>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a19      	ldr	r2, [pc, #100]	@ (80012d0 <HAL_GPIO_Init+0x25c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00d      	beq.n	800128a <HAL_GPIO_Init+0x216>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a18      	ldr	r2, [pc, #96]	@ (80012d4 <HAL_GPIO_Init+0x260>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x212>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a17      	ldr	r2, [pc, #92]	@ (80012d8 <HAL_GPIO_Init+0x264>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_Init+0x20e>
 800127e:	2309      	movs	r3, #9
 8001280:	e02d      	b.n	80012de <HAL_GPIO_Init+0x26a>
 8001282:	230a      	movs	r3, #10
 8001284:	e02b      	b.n	80012de <HAL_GPIO_Init+0x26a>
 8001286:	2308      	movs	r3, #8
 8001288:	e029      	b.n	80012de <HAL_GPIO_Init+0x26a>
 800128a:	2307      	movs	r3, #7
 800128c:	e027      	b.n	80012de <HAL_GPIO_Init+0x26a>
 800128e:	2306      	movs	r3, #6
 8001290:	e025      	b.n	80012de <HAL_GPIO_Init+0x26a>
 8001292:	2305      	movs	r3, #5
 8001294:	e023      	b.n	80012de <HAL_GPIO_Init+0x26a>
 8001296:	2304      	movs	r3, #4
 8001298:	e021      	b.n	80012de <HAL_GPIO_Init+0x26a>
 800129a:	2303      	movs	r3, #3
 800129c:	e01f      	b.n	80012de <HAL_GPIO_Init+0x26a>
 800129e:	2302      	movs	r3, #2
 80012a0:	e01d      	b.n	80012de <HAL_GPIO_Init+0x26a>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e01b      	b.n	80012de <HAL_GPIO_Init+0x26a>
 80012a6:	bf00      	nop
 80012a8:	58000080 	.word	0x58000080
 80012ac:	58024400 	.word	0x58024400
 80012b0:	58000400 	.word	0x58000400
 80012b4:	58020000 	.word	0x58020000
 80012b8:	58020400 	.word	0x58020400
 80012bc:	58020800 	.word	0x58020800
 80012c0:	58020c00 	.word	0x58020c00
 80012c4:	58021000 	.word	0x58021000
 80012c8:	58021400 	.word	0x58021400
 80012cc:	58021800 	.word	0x58021800
 80012d0:	58021c00 	.word	0x58021c00
 80012d4:	58022000 	.word	0x58022000
 80012d8:	58022400 	.word	0x58022400
 80012dc:	2300      	movs	r3, #0
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	f002 0203 	and.w	r2, r2, #3
 80012e4:	0092      	lsls	r2, r2, #2
 80012e6:	4093      	lsls	r3, r2
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ee:	4938      	ldr	r1, [pc, #224]	@ (80013d0 <HAL_GPIO_Init+0x35c>)
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	3302      	adds	r3, #2
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001322:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800132a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001350:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	3301      	adds	r3, #1
 80013b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa22 f303 	lsr.w	r3, r2, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f47f ae63 	bne.w	8001088 <HAL_GPIO_Init+0x14>
  }
}
 80013c2:	bf00      	nop
 80013c4:	bf00      	nop
 80013c6:	3724      	adds	r7, #36	@ 0x24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	58000400 	.word	0x58000400

080013d4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80013dc:	4a08      	ldr	r2, [pc, #32]	@ (8001400 <HAL_HSEM_FastTake+0x2c>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3320      	adds	r3, #32
 80013e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e6:	4a07      	ldr	r2, [pc, #28]	@ (8001404 <HAL_HSEM_FastTake+0x30>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d101      	bne.n	80013f0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e000      	b.n	80013f2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	58026400 	.word	0x58026400
 8001404:	80000300 	.word	0x80000300

08001408 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001412:	4906      	ldr	r1, [pc, #24]	@ (800142c <HAL_HSEM_Release+0x24>)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	58026400 	.word	0x58026400

08001430 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001438:	4b29      	ldr	r3, [pc, #164]	@ (80014e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	2b06      	cmp	r3, #6
 8001442:	d00a      	beq.n	800145a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001444:	4b26      	ldr	r3, [pc, #152]	@ (80014e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	429a      	cmp	r2, r3
 8001450:	d001      	beq.n	8001456 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e040      	b.n	80014d8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e03e      	b.n	80014d8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800145a:	4b21      	ldr	r3, [pc, #132]	@ (80014e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001462:	491f      	ldr	r1, [pc, #124]	@ (80014e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4313      	orrs	r3, r2
 8001468:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800146a:	f7ff fcdb 	bl	8000e24 <HAL_GetTick>
 800146e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001470:	e009      	b.n	8001486 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001472:	f7ff fcd7 	bl	8000e24 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001480:	d901      	bls.n	8001486 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e028      	b.n	80014d8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001486:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800148e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001492:	d1ee      	bne.n	8001472 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b1e      	cmp	r3, #30
 8001498:	d008      	beq.n	80014ac <HAL_PWREx_ConfigSupply+0x7c>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b2e      	cmp	r3, #46	@ 0x2e
 800149e:	d005      	beq.n	80014ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b1d      	cmp	r3, #29
 80014a4:	d002      	beq.n	80014ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b2d      	cmp	r3, #45	@ 0x2d
 80014aa:	d114      	bne.n	80014d6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80014ac:	f7ff fcba 	bl	8000e24 <HAL_GetTick>
 80014b0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014b2:	e009      	b.n	80014c8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014b4:	f7ff fcb6 	bl	8000e24 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014c2:	d901      	bls.n	80014c8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e007      	b.n	80014d8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014c8:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <HAL_PWREx_ConfigSupply+0xb0>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d4:	d1ee      	bne.n	80014b4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	58024800 	.word	0x58024800

080014e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	@ 0x30
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	f000 bc48 	b.w	8001d88 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 8088 	beq.w	8001616 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001506:	4b99      	ldr	r3, [pc, #612]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800150e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001510:	4b96      	ldr	r3, [pc, #600]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001518:	2b10      	cmp	r3, #16
 800151a:	d007      	beq.n	800152c <HAL_RCC_OscConfig+0x48>
 800151c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800151e:	2b18      	cmp	r3, #24
 8001520:	d111      	bne.n	8001546 <HAL_RCC_OscConfig+0x62>
 8001522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d10c      	bne.n	8001546 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152c:	4b8f      	ldr	r3, [pc, #572]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d06d      	beq.n	8001614 <HAL_RCC_OscConfig+0x130>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d169      	bne.n	8001614 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	f000 bc21 	b.w	8001d88 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800154e:	d106      	bne.n	800155e <HAL_RCC_OscConfig+0x7a>
 8001550:	4b86      	ldr	r3, [pc, #536]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a85      	ldr	r2, [pc, #532]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	e02e      	b.n	80015bc <HAL_RCC_OscConfig+0xd8>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10c      	bne.n	8001580 <HAL_RCC_OscConfig+0x9c>
 8001566:	4b81      	ldr	r3, [pc, #516]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a80      	ldr	r2, [pc, #512]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 800156c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	4b7e      	ldr	r3, [pc, #504]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a7d      	ldr	r2, [pc, #500]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001578:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e01d      	b.n	80015bc <HAL_RCC_OscConfig+0xd8>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0xc0>
 800158a:	4b78      	ldr	r3, [pc, #480]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a77      	ldr	r2, [pc, #476]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b75      	ldr	r3, [pc, #468]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a74      	ldr	r2, [pc, #464]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 800159c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e00b      	b.n	80015bc <HAL_RCC_OscConfig+0xd8>
 80015a4:	4b71      	ldr	r3, [pc, #452]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a70      	ldr	r2, [pc, #448]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 80015aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4b6e      	ldr	r3, [pc, #440]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a6d      	ldr	r2, [pc, #436]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 80015b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d013      	beq.n	80015ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fc2e 	bl	8000e24 <HAL_GetTick>
 80015c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff fc2a 	bl	8000e24 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	@ 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e3d4      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015de:	4b63      	ldr	r3, [pc, #396]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0xe8>
 80015ea:	e014      	b.n	8001616 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fc1a 	bl	8000e24 <HAL_GetTick>
 80015f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f4:	f7ff fc16 	bl	8000e24 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b64      	cmp	r3, #100	@ 0x64
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e3c0      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001606:	4b59      	ldr	r3, [pc, #356]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x110>
 8001612:	e000      	b.n	8001616 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80ca 	beq.w	80017b8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001624:	4b51      	ldr	r3, [pc, #324]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800162c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800162e:	4b4f      	ldr	r3, [pc, #316]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001632:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_RCC_OscConfig+0x166>
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	2b18      	cmp	r3, #24
 800163e:	d156      	bne.n	80016ee <HAL_RCC_OscConfig+0x20a>
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d151      	bne.n	80016ee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800164a:	4b48      	ldr	r3, [pc, #288]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	2b00      	cmp	r3, #0
 8001654:	d005      	beq.n	8001662 <HAL_RCC_OscConfig+0x17e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e392      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001662:	4b42      	ldr	r3, [pc, #264]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f023 0219 	bic.w	r2, r3, #25
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	493f      	ldr	r1, [pc, #252]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fbd6 	bl	8000e24 <HAL_GetTick>
 8001678:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167c:	f7ff fbd2 	bl	8000e24 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e37c      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800168e:	4b37      	ldr	r3, [pc, #220]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169a:	f7ff fbcf 	bl	8000e3c <HAL_GetREVID>
 800169e:	4603      	mov	r3, r0
 80016a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d817      	bhi.n	80016d8 <HAL_RCC_OscConfig+0x1f4>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	2b40      	cmp	r3, #64	@ 0x40
 80016ae:	d108      	bne.n	80016c2 <HAL_RCC_OscConfig+0x1de>
 80016b0:	4b2e      	ldr	r3, [pc, #184]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80016b8:	4a2c      	ldr	r2, [pc, #176]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 80016ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016be:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c0:	e07a      	b.n	80017b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c2:	4b2a      	ldr	r3, [pc, #168]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	031b      	lsls	r3, r3, #12
 80016d0:	4926      	ldr	r1, [pc, #152]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d6:	e06f      	b.n	80017b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d8:	4b24      	ldr	r3, [pc, #144]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	061b      	lsls	r3, r3, #24
 80016e6:	4921      	ldr	r1, [pc, #132]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ec:	e064      	b.n	80017b8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d047      	beq.n	8001786 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016f6:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 0219 	bic.w	r2, r3, #25
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	491a      	ldr	r1, [pc, #104]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001704:	4313      	orrs	r3, r2
 8001706:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff fb8c 	bl	8000e24 <HAL_GetTick>
 800170c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001710:	f7ff fb88 	bl	8000e24 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e332      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	f7ff fb85 	bl	8000e3c <HAL_GetREVID>
 8001732:	4603      	mov	r3, r0
 8001734:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001738:	4293      	cmp	r3, r2
 800173a:	d819      	bhi.n	8001770 <HAL_RCC_OscConfig+0x28c>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	2b40      	cmp	r3, #64	@ 0x40
 8001742:	d108      	bne.n	8001756 <HAL_RCC_OscConfig+0x272>
 8001744:	4b09      	ldr	r3, [pc, #36]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800174c:	4a07      	ldr	r2, [pc, #28]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 800174e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001752:	6053      	str	r3, [r2, #4]
 8001754:	e030      	b.n	80017b8 <HAL_RCC_OscConfig+0x2d4>
 8001756:	4b05      	ldr	r3, [pc, #20]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	031b      	lsls	r3, r3, #12
 8001764:	4901      	ldr	r1, [pc, #4]	@ (800176c <HAL_RCC_OscConfig+0x288>)
 8001766:	4313      	orrs	r3, r2
 8001768:	604b      	str	r3, [r1, #4]
 800176a:	e025      	b.n	80017b8 <HAL_RCC_OscConfig+0x2d4>
 800176c:	58024400 	.word	0x58024400
 8001770:	4b9a      	ldr	r3, [pc, #616]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	061b      	lsls	r3, r3, #24
 800177e:	4997      	ldr	r1, [pc, #604]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
 8001784:	e018      	b.n	80017b8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001786:	4b95      	ldr	r3, [pc, #596]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a94      	ldr	r2, [pc, #592]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001792:	f7ff fb47 	bl	8000e24 <HAL_GetTick>
 8001796:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179a:	f7ff fb43 	bl	8000e24 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e2ed      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017ac:	4b8b      	ldr	r3, [pc, #556]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f0      	bne.n	800179a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 80a9 	beq.w	8001918 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c6:	4b85      	ldr	r3, [pc, #532]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017d0:	4b82      	ldr	r3, [pc, #520]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 80017d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d007      	beq.n	80017ec <HAL_RCC_OscConfig+0x308>
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2b18      	cmp	r3, #24
 80017e0:	d13a      	bne.n	8001858 <HAL_RCC_OscConfig+0x374>
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d135      	bne.n	8001858 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017ec:	4b7b      	ldr	r3, [pc, #492]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_OscConfig+0x320>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	2b80      	cmp	r3, #128	@ 0x80
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e2c1      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001804:	f7ff fb1a 	bl	8000e3c <HAL_GetREVID>
 8001808:	4603      	mov	r3, r0
 800180a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800180e:	4293      	cmp	r3, r2
 8001810:	d817      	bhi.n	8001842 <HAL_RCC_OscConfig+0x35e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	2b20      	cmp	r3, #32
 8001818:	d108      	bne.n	800182c <HAL_RCC_OscConfig+0x348>
 800181a:	4b70      	ldr	r3, [pc, #448]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001822:	4a6e      	ldr	r2, [pc, #440]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 8001824:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001828:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800182a:	e075      	b.n	8001918 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800182c:	4b6b      	ldr	r3, [pc, #428]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	069b      	lsls	r3, r3, #26
 800183a:	4968      	ldr	r1, [pc, #416]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001840:	e06a      	b.n	8001918 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001842:	4b66      	ldr	r3, [pc, #408]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	061b      	lsls	r3, r3, #24
 8001850:	4962      	ldr	r1, [pc, #392]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 8001852:	4313      	orrs	r3, r2
 8001854:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001856:	e05f      	b.n	8001918 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d042      	beq.n	80018e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001860:	4b5e      	ldr	r3, [pc, #376]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a5d      	ldr	r2, [pc, #372]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 8001866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800186a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff fada 	bl	8000e24 <HAL_GetTick>
 8001870:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001874:	f7ff fad6 	bl	8000e24 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e280      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001886:	4b55      	ldr	r3, [pc, #340]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001892:	f7ff fad3 	bl	8000e3c <HAL_GetREVID>
 8001896:	4603      	mov	r3, r0
 8001898:	f241 0203 	movw	r2, #4099	@ 0x1003
 800189c:	4293      	cmp	r3, r2
 800189e:	d817      	bhi.n	80018d0 <HAL_RCC_OscConfig+0x3ec>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	2b20      	cmp	r3, #32
 80018a6:	d108      	bne.n	80018ba <HAL_RCC_OscConfig+0x3d6>
 80018a8:	4b4c      	ldr	r3, [pc, #304]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80018b0:	4a4a      	ldr	r2, [pc, #296]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 80018b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80018b6:	6053      	str	r3, [r2, #4]
 80018b8:	e02e      	b.n	8001918 <HAL_RCC_OscConfig+0x434>
 80018ba:	4b48      	ldr	r3, [pc, #288]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	069b      	lsls	r3, r3, #26
 80018c8:	4944      	ldr	r1, [pc, #272]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]
 80018ce:	e023      	b.n	8001918 <HAL_RCC_OscConfig+0x434>
 80018d0:	4b42      	ldr	r3, [pc, #264]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	493f      	ldr	r1, [pc, #252]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	60cb      	str	r3, [r1, #12]
 80018e4:	e018      	b.n	8001918 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018e6:	4b3d      	ldr	r3, [pc, #244]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a3c      	ldr	r2, [pc, #240]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 80018ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80018f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f2:	f7ff fa97 	bl	8000e24 <HAL_GetTick>
 80018f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80018fa:	f7ff fa93 	bl	8000e24 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e23d      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800190c:	4b33      	ldr	r3, [pc, #204]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d036      	beq.n	8001992 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d019      	beq.n	8001960 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192c:	4b2b      	ldr	r3, [pc, #172]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 800192e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001930:	4a2a      	ldr	r2, [pc, #168]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff fa74 	bl	8000e24 <HAL_GetTick>
 800193c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001940:	f7ff fa70 	bl	8000e24 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e21a      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001952:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 8001954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x45c>
 800195e:	e018      	b.n	8001992 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001960:	4b1e      	ldr	r3, [pc, #120]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 8001962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001964:	4a1d      	ldr	r2, [pc, #116]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196c:	f7ff fa5a 	bl	8000e24 <HAL_GetTick>
 8001970:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001974:	f7ff fa56 	bl	8000e24 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e200      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 8001988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0320 	and.w	r3, r3, #32
 800199a:	2b00      	cmp	r3, #0
 800199c:	d039      	beq.n	8001a12 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d01c      	beq.n	80019e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019a6:	4b0d      	ldr	r3, [pc, #52]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a0c      	ldr	r2, [pc, #48]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 80019ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fa37 	bl	8000e24 <HAL_GetTick>
 80019b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ba:	f7ff fa33 	bl	8000e24 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e1dd      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019cc:	4b03      	ldr	r3, [pc, #12]	@ (80019dc <HAL_RCC_OscConfig+0x4f8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x4d6>
 80019d8:	e01b      	b.n	8001a12 <HAL_RCC_OscConfig+0x52e>
 80019da:	bf00      	nop
 80019dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019e0:	4b9b      	ldr	r3, [pc, #620]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a9a      	ldr	r2, [pc, #616]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 80019e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019ec:	f7ff fa1a 	bl	8000e24 <HAL_GetTick>
 80019f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019f4:	f7ff fa16 	bl	8000e24 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e1c0      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a06:	4b92      	ldr	r3, [pc, #584]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 8081 	beq.w	8001b22 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a20:	4b8c      	ldr	r3, [pc, #560]	@ (8001c54 <HAL_RCC_OscConfig+0x770>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a8b      	ldr	r2, [pc, #556]	@ (8001c54 <HAL_RCC_OscConfig+0x770>)
 8001a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a2c:	f7ff f9fa 	bl	8000e24 <HAL_GetTick>
 8001a30:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a34:	f7ff f9f6 	bl	8000e24 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	@ 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e1a0      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a46:	4b83      	ldr	r3, [pc, #524]	@ (8001c54 <HAL_RCC_OscConfig+0x770>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d106      	bne.n	8001a68 <HAL_RCC_OscConfig+0x584>
 8001a5a:	4b7d      	ldr	r3, [pc, #500]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5e:	4a7c      	ldr	r2, [pc, #496]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a66:	e02d      	b.n	8001ac4 <HAL_RCC_OscConfig+0x5e0>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10c      	bne.n	8001a8a <HAL_RCC_OscConfig+0x5a6>
 8001a70:	4b77      	ldr	r3, [pc, #476]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a74:	4a76      	ldr	r2, [pc, #472]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a7c:	4b74      	ldr	r3, [pc, #464]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a80:	4a73      	ldr	r2, [pc, #460]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001a82:	f023 0304 	bic.w	r3, r3, #4
 8001a86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a88:	e01c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x5e0>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b05      	cmp	r3, #5
 8001a90:	d10c      	bne.n	8001aac <HAL_RCC_OscConfig+0x5c8>
 8001a92:	4b6f      	ldr	r3, [pc, #444]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a96:	4a6e      	ldr	r2, [pc, #440]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a9e:	4b6c      	ldr	r3, [pc, #432]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa2:	4a6b      	ldr	r2, [pc, #428]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aaa:	e00b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x5e0>
 8001aac:	4b68      	ldr	r3, [pc, #416]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab0:	4a67      	ldr	r2, [pc, #412]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ab8:	4b65      	ldr	r3, [pc, #404]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001abc:	4a64      	ldr	r2, [pc, #400]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001abe:	f023 0304 	bic.w	r3, r3, #4
 8001ac2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d015      	beq.n	8001af8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001acc:	f7ff f9aa 	bl	8000e24 <HAL_GetTick>
 8001ad0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad4:	f7ff f9a6 	bl	8000e24 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e14e      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001aea:	4b59      	ldr	r3, [pc, #356]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0ee      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x5f0>
 8001af6:	e014      	b.n	8001b22 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af8:	f7ff f994 	bl	8000e24 <HAL_GetTick>
 8001afc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b00:	f7ff f990 	bl	8000e24 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e138      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b16:	4b4e      	ldr	r3, [pc, #312]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1ee      	bne.n	8001b00 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 812d 	beq.w	8001d86 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b2c:	4b48      	ldr	r3, [pc, #288]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b34:	2b18      	cmp	r3, #24
 8001b36:	f000 80bd 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	f040 809e 	bne.w	8001c80 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b44:	4b42      	ldr	r3, [pc, #264]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a41      	ldr	r2, [pc, #260]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001b4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff f968 	bl	8000e24 <HAL_GetTick>
 8001b54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f964 	bl	8000e24 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e10e      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b6a:	4b39      	ldr	r3, [pc, #228]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b76:	4b36      	ldr	r3, [pc, #216]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001b78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b7a:	4b37      	ldr	r3, [pc, #220]	@ (8001c58 <HAL_RCC_OscConfig+0x774>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	4931      	ldr	r1, [pc, #196]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	628b      	str	r3, [r1, #40]	@ 0x28
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b94:	3b01      	subs	r3, #1
 8001b96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	025b      	lsls	r3, r3, #9
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001baa:	3b01      	subs	r3, #1
 8001bac:	041b      	lsls	r3, r3, #16
 8001bae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	061b      	lsls	r3, r3, #24
 8001bbc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001bc0:	4923      	ldr	r1, [pc, #140]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001bc6:	4b22      	ldr	r3, [pc, #136]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bca:	4a21      	ldr	r2, [pc, #132]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bd6:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001bde:	00d2      	lsls	r2, r2, #3
 8001be0:	491b      	ldr	r1, [pc, #108]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bea:	f023 020c 	bic.w	r2, r3, #12
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	4917      	ldr	r1, [pc, #92]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001bf8:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfc:	f023 0202 	bic.w	r2, r3, #2
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c04:	4912      	ldr	r1, [pc, #72]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c0a:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0e:	4a10      	ldr	r2, [pc, #64]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c16:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c26:	4a0a      	ldr	r2, [pc, #40]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001c2e:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c32:	4a07      	ldr	r2, [pc, #28]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c3a:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a04      	ldr	r2, [pc, #16]	@ (8001c50 <HAL_RCC_OscConfig+0x76c>)
 8001c40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c46:	f7ff f8ed 	bl	8000e24 <HAL_GetTick>
 8001c4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c4c:	e011      	b.n	8001c72 <HAL_RCC_OscConfig+0x78e>
 8001c4e:	bf00      	nop
 8001c50:	58024400 	.word	0x58024400
 8001c54:	58024800 	.word	0x58024800
 8001c58:	fffffc0c 	.word	0xfffffc0c
 8001c5c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c60:	f7ff f8e0 	bl	8000e24 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e08a      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c72:	4b47      	ldr	r3, [pc, #284]	@ (8001d90 <HAL_RCC_OscConfig+0x8ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x77c>
 8001c7e:	e082      	b.n	8001d86 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c80:	4b43      	ldr	r3, [pc, #268]	@ (8001d90 <HAL_RCC_OscConfig+0x8ac>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a42      	ldr	r2, [pc, #264]	@ (8001d90 <HAL_RCC_OscConfig+0x8ac>)
 8001c86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f8ca 	bl	8000e24 <HAL_GetTick>
 8001c90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c94:	f7ff f8c6 	bl	8000e24 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e070      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ca6:	4b3a      	ldr	r3, [pc, #232]	@ (8001d90 <HAL_RCC_OscConfig+0x8ac>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x7b0>
 8001cb2:	e068      	b.n	8001d86 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001cb4:	4b36      	ldr	r3, [pc, #216]	@ (8001d90 <HAL_RCC_OscConfig+0x8ac>)
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001cba:	4b35      	ldr	r3, [pc, #212]	@ (8001d90 <HAL_RCC_OscConfig+0x8ac>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d031      	beq.n	8001d2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	f003 0203 	and.w	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d12a      	bne.n	8001d2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d122      	bne.n	8001d2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d11a      	bne.n	8001d2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	0a5b      	lsrs	r3, r3, #9
 8001cfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d02:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d111      	bne.n	8001d2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	0c1b      	lsrs	r3, r3, #16
 8001d0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d108      	bne.n	8001d2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	0e1b      	lsrs	r3, r3, #24
 8001d1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e02b      	b.n	8001d88 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001d30:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <HAL_RCC_OscConfig+0x8ac>)
 8001d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d34:	08db      	lsrs	r3, r3, #3
 8001d36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d3a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d01f      	beq.n	8001d86 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001d46:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <HAL_RCC_OscConfig+0x8ac>)
 8001d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4a:	4a11      	ldr	r2, [pc, #68]	@ (8001d90 <HAL_RCC_OscConfig+0x8ac>)
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d52:	f7ff f867 	bl	8000e24 <HAL_GetTick>
 8001d56:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001d58:	bf00      	nop
 8001d5a:	f7ff f863 	bl	8000e24 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d0f9      	beq.n	8001d5a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <HAL_RCC_OscConfig+0x8ac>)
 8001d68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <HAL_RCC_OscConfig+0x8b0>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d72:	00d2      	lsls	r2, r2, #3
 8001d74:	4906      	ldr	r1, [pc, #24]	@ (8001d90 <HAL_RCC_OscConfig+0x8ac>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001d7a:	4b05      	ldr	r3, [pc, #20]	@ (8001d90 <HAL_RCC_OscConfig+0x8ac>)
 8001d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7e:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <HAL_RCC_OscConfig+0x8ac>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3730      	adds	r7, #48	@ 0x30
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	58024400 	.word	0x58024400
 8001d94:	ffff0007 	.word	0xffff0007

08001d98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e19c      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dac:	4b8a      	ldr	r3, [pc, #552]	@ (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d910      	bls.n	8001ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	4b87      	ldr	r3, [pc, #540]	@ (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 020f 	bic.w	r2, r3, #15
 8001dc2:	4985      	ldr	r1, [pc, #532]	@ (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dca:	4b83      	ldr	r3, [pc, #524]	@ (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e184      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d010      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	4b7b      	ldr	r3, [pc, #492]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d908      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001df8:	4b78      	ldr	r3, [pc, #480]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	4975      	ldr	r1, [pc, #468]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d010      	beq.n	8001e38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	4b70      	ldr	r3, [pc, #448]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d908      	bls.n	8001e38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e26:	4b6d      	ldr	r3, [pc, #436]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	496a      	ldr	r1, [pc, #424]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d010      	beq.n	8001e66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	4b64      	ldr	r3, [pc, #400]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d908      	bls.n	8001e66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e54:	4b61      	ldr	r3, [pc, #388]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	495e      	ldr	r1, [pc, #376]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d010      	beq.n	8001e94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69da      	ldr	r2, [r3, #28]
 8001e76:	4b59      	ldr	r3, [pc, #356]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d908      	bls.n	8001e94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e82:	4b56      	ldr	r3, [pc, #344]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4953      	ldr	r1, [pc, #332]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d010      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	4b4d      	ldr	r3, [pc, #308]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d908      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f023 020f 	bic.w	r2, r3, #15
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4947      	ldr	r1, [pc, #284]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d055      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ece:	4b43      	ldr	r3, [pc, #268]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	4940      	ldr	r1, [pc, #256]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d107      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ee8:	4b3c      	ldr	r3, [pc, #240]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d121      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0f6      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d107      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f00:	4b36      	ldr	r3, [pc, #216]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d115      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0ea      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f18:	4b30      	ldr	r3, [pc, #192]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0de      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f28:	4b2c      	ldr	r3, [pc, #176]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0d6      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f38:	4b28      	ldr	r3, [pc, #160]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f023 0207 	bic.w	r2, r3, #7
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4925      	ldr	r1, [pc, #148]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f4a:	f7fe ff6b 	bl	8000e24 <HAL_GetTick>
 8001f4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f52:	f7fe ff67 	bl	8000e24 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0be      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f68:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d1eb      	bne.n	8001f52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d010      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d208      	bcs.n	8001fa8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f023 020f 	bic.w	r2, r3, #15
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	490e      	ldr	r1, [pc, #56]	@ (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d214      	bcs.n	8001fe0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 020f 	bic.w	r2, r3, #15
 8001fbe:	4906      	ldr	r1, [pc, #24]	@ (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e086      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
 8001fd8:	52002000 	.word	0x52002000
 8001fdc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d010      	beq.n	800200e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	4b3f      	ldr	r3, [pc, #252]	@ (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d208      	bcs.n	800200e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ffc:	4b3c      	ldr	r3, [pc, #240]	@ (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	4939      	ldr	r1, [pc, #228]	@ (80020f0 <HAL_RCC_ClockConfig+0x358>)
 800200a:	4313      	orrs	r3, r2
 800200c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d010      	beq.n	800203c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	4b34      	ldr	r3, [pc, #208]	@ (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002026:	429a      	cmp	r2, r3
 8002028:	d208      	bcs.n	800203c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800202a:	4b31      	ldr	r3, [pc, #196]	@ (80020f0 <HAL_RCC_ClockConfig+0x358>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	492e      	ldr	r1, [pc, #184]	@ (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8002038:	4313      	orrs	r3, r2
 800203a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	2b00      	cmp	r3, #0
 8002046:	d010      	beq.n	800206a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	4b28      	ldr	r3, [pc, #160]	@ (80020f0 <HAL_RCC_ClockConfig+0x358>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002054:	429a      	cmp	r2, r3
 8002056:	d208      	bcs.n	800206a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002058:	4b25      	ldr	r3, [pc, #148]	@ (80020f0 <HAL_RCC_ClockConfig+0x358>)
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4922      	ldr	r1, [pc, #136]	@ (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8002066:	4313      	orrs	r3, r2
 8002068:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b00      	cmp	r3, #0
 8002074:	d010      	beq.n	8002098 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69da      	ldr	r2, [r3, #28]
 800207a:	4b1d      	ldr	r3, [pc, #116]	@ (80020f0 <HAL_RCC_ClockConfig+0x358>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002082:	429a      	cmp	r2, r3
 8002084:	d208      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002086:	4b1a      	ldr	r3, [pc, #104]	@ (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4917      	ldr	r1, [pc, #92]	@ (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8002094:	4313      	orrs	r3, r2
 8002096:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002098:	f000 f834 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b14      	ldr	r3, [pc, #80]	@ (80020f0 <HAL_RCC_ClockConfig+0x358>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	4912      	ldr	r1, [pc, #72]	@ (80020f4 <HAL_RCC_ClockConfig+0x35c>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020b6:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <HAL_RCC_ClockConfig+0x358>)
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	4a0d      	ldr	r2, [pc, #52]	@ (80020f4 <HAL_RCC_ClockConfig+0x35c>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
 80020cc:	4a0a      	ldr	r2, [pc, #40]	@ (80020f8 <HAL_RCC_ClockConfig+0x360>)
 80020ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020d0:	4a0a      	ldr	r2, [pc, #40]	@ (80020fc <HAL_RCC_ClockConfig+0x364>)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80020d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002100 <HAL_RCC_ClockConfig+0x368>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fe58 	bl	8000d90 <HAL_InitTick>
 80020e0:	4603      	mov	r3, r0
 80020e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	58024400 	.word	0x58024400
 80020f4:	08003bf0 	.word	0x08003bf0
 80020f8:	24000004 	.word	0x24000004
 80020fc:	24000000 	.word	0x24000000
 8002100:	24000020 	.word	0x24000020

08002104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	@ 0x24
 8002108:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800210a:	4bb3      	ldr	r3, [pc, #716]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002112:	2b18      	cmp	r3, #24
 8002114:	f200 8155 	bhi.w	80023c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002118:	a201      	add	r2, pc, #4	@ (adr r2, 8002120 <HAL_RCC_GetSysClockFreq+0x1c>)
 800211a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211e:	bf00      	nop
 8002120:	08002185 	.word	0x08002185
 8002124:	080023c3 	.word	0x080023c3
 8002128:	080023c3 	.word	0x080023c3
 800212c:	080023c3 	.word	0x080023c3
 8002130:	080023c3 	.word	0x080023c3
 8002134:	080023c3 	.word	0x080023c3
 8002138:	080023c3 	.word	0x080023c3
 800213c:	080023c3 	.word	0x080023c3
 8002140:	080021ab 	.word	0x080021ab
 8002144:	080023c3 	.word	0x080023c3
 8002148:	080023c3 	.word	0x080023c3
 800214c:	080023c3 	.word	0x080023c3
 8002150:	080023c3 	.word	0x080023c3
 8002154:	080023c3 	.word	0x080023c3
 8002158:	080023c3 	.word	0x080023c3
 800215c:	080023c3 	.word	0x080023c3
 8002160:	080021b1 	.word	0x080021b1
 8002164:	080023c3 	.word	0x080023c3
 8002168:	080023c3 	.word	0x080023c3
 800216c:	080023c3 	.word	0x080023c3
 8002170:	080023c3 	.word	0x080023c3
 8002174:	080023c3 	.word	0x080023c3
 8002178:	080023c3 	.word	0x080023c3
 800217c:	080023c3 	.word	0x080023c3
 8002180:	080021b7 	.word	0x080021b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002184:	4b94      	ldr	r3, [pc, #592]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b00      	cmp	r3, #0
 800218e:	d009      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002190:	4b91      	ldr	r3, [pc, #580]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	08db      	lsrs	r3, r3, #3
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	4a90      	ldr	r2, [pc, #576]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
 80021a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80021a2:	e111      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80021a4:	4b8d      	ldr	r3, [pc, #564]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021a6:	61bb      	str	r3, [r7, #24]
      break;
 80021a8:	e10e      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80021aa:	4b8d      	ldr	r3, [pc, #564]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021ac:	61bb      	str	r3, [r7, #24]
      break;
 80021ae:	e10b      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80021b0:	4b8c      	ldr	r3, [pc, #560]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021b2:	61bb      	str	r3, [r7, #24]
      break;
 80021b4:	e108      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021b6:	4b88      	ldr	r3, [pc, #544]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80021c0:	4b85      	ldr	r3, [pc, #532]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021cc:	4b82      	ldr	r3, [pc, #520]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80021d6:	4b80      	ldr	r3, [pc, #512]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021da:	08db      	lsrs	r3, r3, #3
 80021dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80e1 	beq.w	80023bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	f000 8083 	beq.w	8002308 <HAL_RCC_GetSysClockFreq+0x204>
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b02      	cmp	r3, #2
 8002206:	f200 80a1 	bhi.w	800234c <HAL_RCC_GetSysClockFreq+0x248>
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x114>
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d056      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002216:	e099      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002218:	4b6f      	ldr	r3, [pc, #444]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0320 	and.w	r3, r3, #32
 8002220:	2b00      	cmp	r3, #0
 8002222:	d02d      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002224:	4b6c      	ldr	r3, [pc, #432]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	08db      	lsrs	r3, r3, #3
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	4a6b      	ldr	r2, [pc, #428]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
 8002234:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	ee07 3a90 	vmov	s15, r3
 800223c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800224a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800224e:	4b62      	ldr	r3, [pc, #392]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800225e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002262:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800226a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800226e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800227e:	e087      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800228a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80023ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800228e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002292:	4b51      	ldr	r3, [pc, #324]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80022a6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022c2:	e065      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ce:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80023f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022d6:	4b40      	ldr	r3, [pc, #256]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80022ea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002302:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002306:	e043      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002312:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80023f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800231a:	4b2f      	ldr	r3, [pc, #188]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800232a:	ed97 6a02 	vldr	s12, [r7, #8]
 800232e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800233a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800233e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002346:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800234a:	e021      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002356:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80023f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800235a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800235e:	4b1e      	ldr	r3, [pc, #120]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800236e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002372:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800237a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800237e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800238e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002390:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002394:	0a5b      	lsrs	r3, r3, #9
 8002396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800239a:	3301      	adds	r3, #1
 800239c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80023ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023b4:	ee17 3a90 	vmov	r3, s15
 80023b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80023ba:	e005      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
      break;
 80023c0:	e002      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80023c2:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023c4:	61bb      	str	r3, [r7, #24]
      break;
 80023c6:	bf00      	nop
  }

  return sysclockfreq;
 80023c8:	69bb      	ldr	r3, [r7, #24]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3724      	adds	r7, #36	@ 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	58024400 	.word	0x58024400
 80023dc:	03d09000 	.word	0x03d09000
 80023e0:	003d0900 	.word	0x003d0900
 80023e4:	017d7840 	.word	0x017d7840
 80023e8:	46000000 	.word	0x46000000
 80023ec:	4c742400 	.word	0x4c742400
 80023f0:	4a742400 	.word	0x4a742400
 80023f4:	4bbebc20 	.word	0x4bbebc20

080023f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e049      	b.n	800249e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d106      	bne.n	8002424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7fe fb92 	bl	8000b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3304      	adds	r3, #4
 8002434:	4619      	mov	r1, r3
 8002436:	4610      	mov	r0, r2
 8002438:	f000 fd50 	bl	8002edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d001      	beq.n	80024c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e054      	b.n	800256a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a26      	ldr	r2, [pc, #152]	@ (8002578 <HAL_TIM_Base_Start_IT+0xd0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d022      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x80>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ea:	d01d      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x80>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a22      	ldr	r2, [pc, #136]	@ (800257c <HAL_TIM_Base_Start_IT+0xd4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d018      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x80>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a21      	ldr	r2, [pc, #132]	@ (8002580 <HAL_TIM_Base_Start_IT+0xd8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d013      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x80>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1f      	ldr	r2, [pc, #124]	@ (8002584 <HAL_TIM_Base_Start_IT+0xdc>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00e      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x80>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1e      	ldr	r2, [pc, #120]	@ (8002588 <HAL_TIM_Base_Start_IT+0xe0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d009      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x80>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1c      	ldr	r2, [pc, #112]	@ (800258c <HAL_TIM_Base_Start_IT+0xe4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d004      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x80>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1b      	ldr	r2, [pc, #108]	@ (8002590 <HAL_TIM_Base_Start_IT+0xe8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d115      	bne.n	8002554 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <HAL_TIM_Base_Start_IT+0xec>)
 8002530:	4013      	ands	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b06      	cmp	r3, #6
 8002538:	d015      	beq.n	8002566 <HAL_TIM_Base_Start_IT+0xbe>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002540:	d011      	beq.n	8002566 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 0201 	orr.w	r2, r2, #1
 8002550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002552:	e008      	b.n	8002566 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	e000      	b.n	8002568 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002566:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40010000 	.word	0x40010000
 800257c:	40000400 	.word	0x40000400
 8002580:	40000800 	.word	0x40000800
 8002584:	40000c00 	.word	0x40000c00
 8002588:	40010400 	.word	0x40010400
 800258c:	40001800 	.word	0x40001800
 8002590:	40014000 	.word	0x40014000
 8002594:	00010007 	.word	0x00010007

08002598 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e049      	b.n	800263e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe faa0 	bl	8000b04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f000 fc80 	bl	8002edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_TIM_PWM_Start+0x24>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b01      	cmp	r3, #1
 8002662:	bf14      	ite	ne
 8002664:	2301      	movne	r3, #1
 8002666:	2300      	moveq	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	e03c      	b.n	80026e6 <HAL_TIM_PWM_Start+0x9e>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2b04      	cmp	r3, #4
 8002670:	d109      	bne.n	8002686 <HAL_TIM_PWM_Start+0x3e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b01      	cmp	r3, #1
 800267c:	bf14      	ite	ne
 800267e:	2301      	movne	r3, #1
 8002680:	2300      	moveq	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	e02f      	b.n	80026e6 <HAL_TIM_PWM_Start+0x9e>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b08      	cmp	r3, #8
 800268a:	d109      	bne.n	80026a0 <HAL_TIM_PWM_Start+0x58>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	bf14      	ite	ne
 8002698:	2301      	movne	r3, #1
 800269a:	2300      	moveq	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	e022      	b.n	80026e6 <HAL_TIM_PWM_Start+0x9e>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	d109      	bne.n	80026ba <HAL_TIM_PWM_Start+0x72>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	bf14      	ite	ne
 80026b2:	2301      	movne	r3, #1
 80026b4:	2300      	moveq	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	e015      	b.n	80026e6 <HAL_TIM_PWM_Start+0x9e>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b10      	cmp	r3, #16
 80026be:	d109      	bne.n	80026d4 <HAL_TIM_PWM_Start+0x8c>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	bf14      	ite	ne
 80026cc:	2301      	movne	r3, #1
 80026ce:	2300      	moveq	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e008      	b.n	80026e6 <HAL_TIM_PWM_Start+0x9e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0a1      	b.n	8002832 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d104      	bne.n	80026fe <HAL_TIM_PWM_Start+0xb6>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026fc:	e023      	b.n	8002746 <HAL_TIM_PWM_Start+0xfe>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b04      	cmp	r3, #4
 8002702:	d104      	bne.n	800270e <HAL_TIM_PWM_Start+0xc6>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800270c:	e01b      	b.n	8002746 <HAL_TIM_PWM_Start+0xfe>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b08      	cmp	r3, #8
 8002712:	d104      	bne.n	800271e <HAL_TIM_PWM_Start+0xd6>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800271c:	e013      	b.n	8002746 <HAL_TIM_PWM_Start+0xfe>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	d104      	bne.n	800272e <HAL_TIM_PWM_Start+0xe6>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800272c:	e00b      	b.n	8002746 <HAL_TIM_PWM_Start+0xfe>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b10      	cmp	r3, #16
 8002732:	d104      	bne.n	800273e <HAL_TIM_PWM_Start+0xf6>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800273c:	e003      	b.n	8002746 <HAL_TIM_PWM_Start+0xfe>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2201      	movs	r2, #1
 800274c:	6839      	ldr	r1, [r7, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f000 ffde 	bl	8003710 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a38      	ldr	r2, [pc, #224]	@ (800283c <HAL_TIM_PWM_Start+0x1f4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_TIM_PWM_Start+0x13e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a37      	ldr	r2, [pc, #220]	@ (8002840 <HAL_TIM_PWM_Start+0x1f8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00e      	beq.n	8002786 <HAL_TIM_PWM_Start+0x13e>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a35      	ldr	r2, [pc, #212]	@ (8002844 <HAL_TIM_PWM_Start+0x1fc>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d009      	beq.n	8002786 <HAL_TIM_PWM_Start+0x13e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a34      	ldr	r2, [pc, #208]	@ (8002848 <HAL_TIM_PWM_Start+0x200>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d004      	beq.n	8002786 <HAL_TIM_PWM_Start+0x13e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a32      	ldr	r2, [pc, #200]	@ (800284c <HAL_TIM_PWM_Start+0x204>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d101      	bne.n	800278a <HAL_TIM_PWM_Start+0x142>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_TIM_PWM_Start+0x144>
 800278a:	2300      	movs	r3, #0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800279e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a25      	ldr	r2, [pc, #148]	@ (800283c <HAL_TIM_PWM_Start+0x1f4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d022      	beq.n	80027f0 <HAL_TIM_PWM_Start+0x1a8>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027b2:	d01d      	beq.n	80027f0 <HAL_TIM_PWM_Start+0x1a8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a25      	ldr	r2, [pc, #148]	@ (8002850 <HAL_TIM_PWM_Start+0x208>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d018      	beq.n	80027f0 <HAL_TIM_PWM_Start+0x1a8>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a24      	ldr	r2, [pc, #144]	@ (8002854 <HAL_TIM_PWM_Start+0x20c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d013      	beq.n	80027f0 <HAL_TIM_PWM_Start+0x1a8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a22      	ldr	r2, [pc, #136]	@ (8002858 <HAL_TIM_PWM_Start+0x210>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00e      	beq.n	80027f0 <HAL_TIM_PWM_Start+0x1a8>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002840 <HAL_TIM_PWM_Start+0x1f8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d009      	beq.n	80027f0 <HAL_TIM_PWM_Start+0x1a8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1e      	ldr	r2, [pc, #120]	@ (800285c <HAL_TIM_PWM_Start+0x214>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d004      	beq.n	80027f0 <HAL_TIM_PWM_Start+0x1a8>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a16      	ldr	r2, [pc, #88]	@ (8002844 <HAL_TIM_PWM_Start+0x1fc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d115      	bne.n	800281c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002860 <HAL_TIM_PWM_Start+0x218>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b06      	cmp	r3, #6
 8002800:	d015      	beq.n	800282e <HAL_TIM_PWM_Start+0x1e6>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002808:	d011      	beq.n	800282e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281a:	e008      	b.n	800282e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e000      	b.n	8002830 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800282e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40010000 	.word	0x40010000
 8002840:	40010400 	.word	0x40010400
 8002844:	40014000 	.word	0x40014000
 8002848:	40014400 	.word	0x40014400
 800284c:	40014800 	.word	0x40014800
 8002850:	40000400 	.word	0x40000400
 8002854:	40000800 	.word	0x40000800
 8002858:	40000c00 	.word	0x40000c00
 800285c:	40001800 	.word	0x40001800
 8002860:	00010007 	.word	0x00010007

08002864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d020      	beq.n	80028c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01b      	beq.n	80028c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0202 	mvn.w	r2, #2
 8002898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 faf6 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 80028b4:	e005      	b.n	80028c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fae8 	bl	8002e8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 faf9 	bl	8002eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d020      	beq.n	8002914 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01b      	beq.n	8002914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0204 	mvn.w	r2, #4
 80028e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2202      	movs	r2, #2
 80028ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fad0 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002900:	e005      	b.n	800290e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fac2 	bl	8002e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fad3 	bl	8002eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d020      	beq.n	8002960 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01b      	beq.n	8002960 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0208 	mvn.w	r2, #8
 8002930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2204      	movs	r2, #4
 8002936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 faaa 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 800294c:	e005      	b.n	800295a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fa9c 	bl	8002e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 faad 	bl	8002eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b00      	cmp	r3, #0
 8002968:	d020      	beq.n	80029ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01b      	beq.n	80029ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0210 	mvn.w	r2, #16
 800297c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2208      	movs	r2, #8
 8002982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fa84 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002998:	e005      	b.n	80029a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fa76 	bl	8002e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fa87 	bl	8002eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00c      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0201 	mvn.w	r2, #1
 80029c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fd fd1a 	bl	8000404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d104      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00c      	beq.n	80029fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d007      	beq.n	80029fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80029f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f001 f887 	bl	8003b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00c      	beq.n	8002a22 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d007      	beq.n	8002a22 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f001 f87f 	bl	8003b20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00c      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fa41 	bl	8002ec8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00c      	beq.n	8002a6a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f06f 0220 	mvn.w	r2, #32
 8002a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f001 f847 	bl	8003af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e0ff      	b.n	8002c92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b14      	cmp	r3, #20
 8002a9e:	f200 80f0 	bhi.w	8002c82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa8:	08002afd 	.word	0x08002afd
 8002aac:	08002c83 	.word	0x08002c83
 8002ab0:	08002c83 	.word	0x08002c83
 8002ab4:	08002c83 	.word	0x08002c83
 8002ab8:	08002b3d 	.word	0x08002b3d
 8002abc:	08002c83 	.word	0x08002c83
 8002ac0:	08002c83 	.word	0x08002c83
 8002ac4:	08002c83 	.word	0x08002c83
 8002ac8:	08002b7f 	.word	0x08002b7f
 8002acc:	08002c83 	.word	0x08002c83
 8002ad0:	08002c83 	.word	0x08002c83
 8002ad4:	08002c83 	.word	0x08002c83
 8002ad8:	08002bbf 	.word	0x08002bbf
 8002adc:	08002c83 	.word	0x08002c83
 8002ae0:	08002c83 	.word	0x08002c83
 8002ae4:	08002c83 	.word	0x08002c83
 8002ae8:	08002c01 	.word	0x08002c01
 8002aec:	08002c83 	.word	0x08002c83
 8002af0:	08002c83 	.word	0x08002c83
 8002af4:	08002c83 	.word	0x08002c83
 8002af8:	08002c41 	.word	0x08002c41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fa90 	bl	8003028 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0208 	orr.w	r2, r2, #8
 8002b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0204 	bic.w	r2, r2, #4
 8002b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6999      	ldr	r1, [r3, #24]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	619a      	str	r2, [r3, #24]
      break;
 8002b3a:	e0a5      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fb00 	bl	8003148 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6999      	ldr	r1, [r3, #24]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	021a      	lsls	r2, r3, #8
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	619a      	str	r2, [r3, #24]
      break;
 8002b7c:	e084      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fb69 	bl	800325c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69da      	ldr	r2, [r3, #28]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0208 	orr.w	r2, r2, #8
 8002b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0204 	bic.w	r2, r2, #4
 8002ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69d9      	ldr	r1, [r3, #28]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	61da      	str	r2, [r3, #28]
      break;
 8002bbc:	e064      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fbd1 	bl	800336c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69d9      	ldr	r1, [r3, #28]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	021a      	lsls	r2, r3, #8
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	61da      	str	r2, [r3, #28]
      break;
 8002bfe:	e043      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fc1a 	bl	8003440 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0208 	orr.w	r2, r2, #8
 8002c1a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0204 	bic.w	r2, r2, #4
 8002c2a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002c3e:	e023      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fc5e 	bl	8003508 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c5a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c6a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	021a      	lsls	r2, r3, #8
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002c80:	e002      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	75fb      	strb	r3, [r7, #23]
      break;
 8002c86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop

08002c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_TIM_ConfigClockSource+0x1c>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e0dc      	b.n	8002e72 <HAL_TIM_ConfigClockSource+0x1d6>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e7c <HAL_TIM_ConfigClockSource+0x1e0>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a64      	ldr	r2, [pc, #400]	@ (8002e80 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	f000 80a9 	beq.w	8002e46 <HAL_TIM_ConfigClockSource+0x1aa>
 8002cf4:	4a62      	ldr	r2, [pc, #392]	@ (8002e80 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	f200 80ae 	bhi.w	8002e58 <HAL_TIM_ConfigClockSource+0x1bc>
 8002cfc:	4a61      	ldr	r2, [pc, #388]	@ (8002e84 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	f000 80a1 	beq.w	8002e46 <HAL_TIM_ConfigClockSource+0x1aa>
 8002d04:	4a5f      	ldr	r2, [pc, #380]	@ (8002e84 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	f200 80a6 	bhi.w	8002e58 <HAL_TIM_ConfigClockSource+0x1bc>
 8002d0c:	4a5e      	ldr	r2, [pc, #376]	@ (8002e88 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	f000 8099 	beq.w	8002e46 <HAL_TIM_ConfigClockSource+0x1aa>
 8002d14:	4a5c      	ldr	r2, [pc, #368]	@ (8002e88 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	f200 809e 	bhi.w	8002e58 <HAL_TIM_ConfigClockSource+0x1bc>
 8002d1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002d20:	f000 8091 	beq.w	8002e46 <HAL_TIM_ConfigClockSource+0x1aa>
 8002d24:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002d28:	f200 8096 	bhi.w	8002e58 <HAL_TIM_ConfigClockSource+0x1bc>
 8002d2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d30:	f000 8089 	beq.w	8002e46 <HAL_TIM_ConfigClockSource+0x1aa>
 8002d34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d38:	f200 808e 	bhi.w	8002e58 <HAL_TIM_ConfigClockSource+0x1bc>
 8002d3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d40:	d03e      	beq.n	8002dc0 <HAL_TIM_ConfigClockSource+0x124>
 8002d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d46:	f200 8087 	bhi.w	8002e58 <HAL_TIM_ConfigClockSource+0x1bc>
 8002d4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d4e:	f000 8086 	beq.w	8002e5e <HAL_TIM_ConfigClockSource+0x1c2>
 8002d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d56:	d87f      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x1bc>
 8002d58:	2b70      	cmp	r3, #112	@ 0x70
 8002d5a:	d01a      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0xf6>
 8002d5c:	2b70      	cmp	r3, #112	@ 0x70
 8002d5e:	d87b      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x1bc>
 8002d60:	2b60      	cmp	r3, #96	@ 0x60
 8002d62:	d050      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x16a>
 8002d64:	2b60      	cmp	r3, #96	@ 0x60
 8002d66:	d877      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x1bc>
 8002d68:	2b50      	cmp	r3, #80	@ 0x50
 8002d6a:	d03c      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x14a>
 8002d6c:	2b50      	cmp	r3, #80	@ 0x50
 8002d6e:	d873      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x1bc>
 8002d70:	2b40      	cmp	r3, #64	@ 0x40
 8002d72:	d058      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x18a>
 8002d74:	2b40      	cmp	r3, #64	@ 0x40
 8002d76:	d86f      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x1bc>
 8002d78:	2b30      	cmp	r3, #48	@ 0x30
 8002d7a:	d064      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x1aa>
 8002d7c:	2b30      	cmp	r3, #48	@ 0x30
 8002d7e:	d86b      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x1bc>
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d060      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x1aa>
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d867      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x1bc>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d05c      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x1aa>
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d05a      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x1aa>
 8002d90:	e062      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002da2:	f000 fc95 	bl	80036d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002db4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	609a      	str	r2, [r3, #8]
      break;
 8002dbe:	e04f      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dd0:	f000 fc7e 	bl	80036d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002de2:	609a      	str	r2, [r3, #8]
      break;
 8002de4:	e03c      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df2:	461a      	mov	r2, r3
 8002df4:	f000 fbee 	bl	80035d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2150      	movs	r1, #80	@ 0x50
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fc48 	bl	8003694 <TIM_ITRx_SetConfig>
      break;
 8002e04:	e02c      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e12:	461a      	mov	r2, r3
 8002e14:	f000 fc0d 	bl	8003632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2160      	movs	r1, #96	@ 0x60
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fc38 	bl	8003694 <TIM_ITRx_SetConfig>
      break;
 8002e24:	e01c      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e32:	461a      	mov	r2, r3
 8002e34:	f000 fbce 	bl	80035d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2140      	movs	r1, #64	@ 0x40
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fc28 	bl	8003694 <TIM_ITRx_SetConfig>
      break;
 8002e44:	e00c      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4610      	mov	r0, r2
 8002e52:	f000 fc1f 	bl	8003694 <TIM_ITRx_SetConfig>
      break;
 8002e56:	e003      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e5c:	e000      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8002e5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	ffceff88 	.word	0xffceff88
 8002e80:	00100040 	.word	0x00100040
 8002e84:	00100030 	.word	0x00100030
 8002e88:	00100020 	.word	0x00100020

08002e8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a46      	ldr	r2, [pc, #280]	@ (8003008 <TIM_Base_SetConfig+0x12c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d013      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002efa:	d00f      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a43      	ldr	r2, [pc, #268]	@ (800300c <TIM_Base_SetConfig+0x130>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00b      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a42      	ldr	r2, [pc, #264]	@ (8003010 <TIM_Base_SetConfig+0x134>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d007      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a41      	ldr	r2, [pc, #260]	@ (8003014 <TIM_Base_SetConfig+0x138>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d003      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a40      	ldr	r2, [pc, #256]	@ (8003018 <TIM_Base_SetConfig+0x13c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d108      	bne.n	8002f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a35      	ldr	r2, [pc, #212]	@ (8003008 <TIM_Base_SetConfig+0x12c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01f      	beq.n	8002f76 <TIM_Base_SetConfig+0x9a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f3c:	d01b      	beq.n	8002f76 <TIM_Base_SetConfig+0x9a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a32      	ldr	r2, [pc, #200]	@ (800300c <TIM_Base_SetConfig+0x130>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d017      	beq.n	8002f76 <TIM_Base_SetConfig+0x9a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a31      	ldr	r2, [pc, #196]	@ (8003010 <TIM_Base_SetConfig+0x134>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d013      	beq.n	8002f76 <TIM_Base_SetConfig+0x9a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a30      	ldr	r2, [pc, #192]	@ (8003014 <TIM_Base_SetConfig+0x138>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00f      	beq.n	8002f76 <TIM_Base_SetConfig+0x9a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a2f      	ldr	r2, [pc, #188]	@ (8003018 <TIM_Base_SetConfig+0x13c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00b      	beq.n	8002f76 <TIM_Base_SetConfig+0x9a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a2e      	ldr	r2, [pc, #184]	@ (800301c <TIM_Base_SetConfig+0x140>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d007      	beq.n	8002f76 <TIM_Base_SetConfig+0x9a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a2d      	ldr	r2, [pc, #180]	@ (8003020 <TIM_Base_SetConfig+0x144>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d003      	beq.n	8002f76 <TIM_Base_SetConfig+0x9a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a2c      	ldr	r2, [pc, #176]	@ (8003024 <TIM_Base_SetConfig+0x148>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d108      	bne.n	8002f88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a16      	ldr	r2, [pc, #88]	@ (8003008 <TIM_Base_SetConfig+0x12c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00f      	beq.n	8002fd4 <TIM_Base_SetConfig+0xf8>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a18      	ldr	r2, [pc, #96]	@ (8003018 <TIM_Base_SetConfig+0x13c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00b      	beq.n	8002fd4 <TIM_Base_SetConfig+0xf8>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a17      	ldr	r2, [pc, #92]	@ (800301c <TIM_Base_SetConfig+0x140>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d007      	beq.n	8002fd4 <TIM_Base_SetConfig+0xf8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a16      	ldr	r2, [pc, #88]	@ (8003020 <TIM_Base_SetConfig+0x144>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d003      	beq.n	8002fd4 <TIM_Base_SetConfig+0xf8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a15      	ldr	r2, [pc, #84]	@ (8003024 <TIM_Base_SetConfig+0x148>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d103      	bne.n	8002fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d105      	bne.n	8002ffa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f023 0201 	bic.w	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	611a      	str	r2, [r3, #16]
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40010000 	.word	0x40010000
 800300c:	40000400 	.word	0x40000400
 8003010:	40000800 	.word	0x40000800
 8003014:	40000c00 	.word	0x40000c00
 8003018:	40010400 	.word	0x40010400
 800301c:	40014000 	.word	0x40014000
 8003020:	40014400 	.word	0x40014400
 8003024:	40014800 	.word	0x40014800

08003028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	f023 0201 	bic.w	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4b37      	ldr	r3, [pc, #220]	@ (8003130 <TIM_OC1_SetConfig+0x108>)
 8003054:	4013      	ands	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0303 	bic.w	r3, r3, #3
 800305e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f023 0302 	bic.w	r3, r3, #2
 8003070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a2d      	ldr	r2, [pc, #180]	@ (8003134 <TIM_OC1_SetConfig+0x10c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00f      	beq.n	80030a4 <TIM_OC1_SetConfig+0x7c>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a2c      	ldr	r2, [pc, #176]	@ (8003138 <TIM_OC1_SetConfig+0x110>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00b      	beq.n	80030a4 <TIM_OC1_SetConfig+0x7c>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a2b      	ldr	r2, [pc, #172]	@ (800313c <TIM_OC1_SetConfig+0x114>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d007      	beq.n	80030a4 <TIM_OC1_SetConfig+0x7c>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a2a      	ldr	r2, [pc, #168]	@ (8003140 <TIM_OC1_SetConfig+0x118>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d003      	beq.n	80030a4 <TIM_OC1_SetConfig+0x7c>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a29      	ldr	r2, [pc, #164]	@ (8003144 <TIM_OC1_SetConfig+0x11c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d10c      	bne.n	80030be <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f023 0308 	bic.w	r3, r3, #8
 80030aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f023 0304 	bic.w	r3, r3, #4
 80030bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003134 <TIM_OC1_SetConfig+0x10c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00f      	beq.n	80030e6 <TIM_OC1_SetConfig+0xbe>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003138 <TIM_OC1_SetConfig+0x110>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00b      	beq.n	80030e6 <TIM_OC1_SetConfig+0xbe>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a1a      	ldr	r2, [pc, #104]	@ (800313c <TIM_OC1_SetConfig+0x114>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d007      	beq.n	80030e6 <TIM_OC1_SetConfig+0xbe>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a19      	ldr	r2, [pc, #100]	@ (8003140 <TIM_OC1_SetConfig+0x118>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d003      	beq.n	80030e6 <TIM_OC1_SetConfig+0xbe>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a18      	ldr	r2, [pc, #96]	@ (8003144 <TIM_OC1_SetConfig+0x11c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d111      	bne.n	800310a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	621a      	str	r2, [r3, #32]
}
 8003124:	bf00      	nop
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	fffeff8f 	.word	0xfffeff8f
 8003134:	40010000 	.word	0x40010000
 8003138:	40010400 	.word	0x40010400
 800313c:	40014000 	.word	0x40014000
 8003140:	40014400 	.word	0x40014400
 8003144:	40014800 	.word	0x40014800

08003148 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f023 0210 	bic.w	r2, r3, #16
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4b34      	ldr	r3, [pc, #208]	@ (8003244 <TIM_OC2_SetConfig+0xfc>)
 8003174:	4013      	ands	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800317e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f023 0320 	bic.w	r3, r3, #32
 8003192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a29      	ldr	r2, [pc, #164]	@ (8003248 <TIM_OC2_SetConfig+0x100>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d003      	beq.n	80031b0 <TIM_OC2_SetConfig+0x68>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a28      	ldr	r2, [pc, #160]	@ (800324c <TIM_OC2_SetConfig+0x104>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d10d      	bne.n	80031cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003248 <TIM_OC2_SetConfig+0x100>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00f      	beq.n	80031f4 <TIM_OC2_SetConfig+0xac>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a1d      	ldr	r2, [pc, #116]	@ (800324c <TIM_OC2_SetConfig+0x104>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00b      	beq.n	80031f4 <TIM_OC2_SetConfig+0xac>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a1c      	ldr	r2, [pc, #112]	@ (8003250 <TIM_OC2_SetConfig+0x108>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d007      	beq.n	80031f4 <TIM_OC2_SetConfig+0xac>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003254 <TIM_OC2_SetConfig+0x10c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <TIM_OC2_SetConfig+0xac>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003258 <TIM_OC2_SetConfig+0x110>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d113      	bne.n	800321c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	621a      	str	r2, [r3, #32]
}
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	feff8fff 	.word	0xfeff8fff
 8003248:	40010000 	.word	0x40010000
 800324c:	40010400 	.word	0x40010400
 8003250:	40014000 	.word	0x40014000
 8003254:	40014400 	.word	0x40014400
 8003258:	40014800 	.word	0x40014800

0800325c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4b33      	ldr	r3, [pc, #204]	@ (8003354 <TIM_OC3_SetConfig+0xf8>)
 8003288:	4013      	ands	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0303 	bic.w	r3, r3, #3
 8003292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a28      	ldr	r2, [pc, #160]	@ (8003358 <TIM_OC3_SetConfig+0xfc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d003      	beq.n	80032c2 <TIM_OC3_SetConfig+0x66>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a27      	ldr	r2, [pc, #156]	@ (800335c <TIM_OC3_SetConfig+0x100>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d10d      	bne.n	80032de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003358 <TIM_OC3_SetConfig+0xfc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00f      	beq.n	8003306 <TIM_OC3_SetConfig+0xaa>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a1c      	ldr	r2, [pc, #112]	@ (800335c <TIM_OC3_SetConfig+0x100>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00b      	beq.n	8003306 <TIM_OC3_SetConfig+0xaa>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003360 <TIM_OC3_SetConfig+0x104>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <TIM_OC3_SetConfig+0xaa>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003364 <TIM_OC3_SetConfig+0x108>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d003      	beq.n	8003306 <TIM_OC3_SetConfig+0xaa>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a19      	ldr	r2, [pc, #100]	@ (8003368 <TIM_OC3_SetConfig+0x10c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d113      	bne.n	800332e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800330c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	621a      	str	r2, [r3, #32]
}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	fffeff8f 	.word	0xfffeff8f
 8003358:	40010000 	.word	0x40010000
 800335c:	40010400 	.word	0x40010400
 8003360:	40014000 	.word	0x40014000
 8003364:	40014400 	.word	0x40014400
 8003368:	40014800 	.word	0x40014800

0800336c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4b24      	ldr	r3, [pc, #144]	@ (8003428 <TIM_OC4_SetConfig+0xbc>)
 8003398:	4013      	ands	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	021b      	lsls	r3, r3, #8
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	031b      	lsls	r3, r3, #12
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a19      	ldr	r2, [pc, #100]	@ (800342c <TIM_OC4_SetConfig+0xc0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d00f      	beq.n	80033ec <TIM_OC4_SetConfig+0x80>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a18      	ldr	r2, [pc, #96]	@ (8003430 <TIM_OC4_SetConfig+0xc4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00b      	beq.n	80033ec <TIM_OC4_SetConfig+0x80>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a17      	ldr	r2, [pc, #92]	@ (8003434 <TIM_OC4_SetConfig+0xc8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d007      	beq.n	80033ec <TIM_OC4_SetConfig+0x80>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a16      	ldr	r2, [pc, #88]	@ (8003438 <TIM_OC4_SetConfig+0xcc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d003      	beq.n	80033ec <TIM_OC4_SetConfig+0x80>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a15      	ldr	r2, [pc, #84]	@ (800343c <TIM_OC4_SetConfig+0xd0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d109      	bne.n	8003400 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	621a      	str	r2, [r3, #32]
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	feff8fff 	.word	0xfeff8fff
 800342c:	40010000 	.word	0x40010000
 8003430:	40010400 	.word	0x40010400
 8003434:	40014000 	.word	0x40014000
 8003438:	40014400 	.word	0x40014400
 800343c:	40014800 	.word	0x40014800

08003440 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4b21      	ldr	r3, [pc, #132]	@ (80034f0 <TIM_OC5_SetConfig+0xb0>)
 800346c:	4013      	ands	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003480:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a18      	ldr	r2, [pc, #96]	@ (80034f4 <TIM_OC5_SetConfig+0xb4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00f      	beq.n	80034b6 <TIM_OC5_SetConfig+0x76>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a17      	ldr	r2, [pc, #92]	@ (80034f8 <TIM_OC5_SetConfig+0xb8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00b      	beq.n	80034b6 <TIM_OC5_SetConfig+0x76>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a16      	ldr	r2, [pc, #88]	@ (80034fc <TIM_OC5_SetConfig+0xbc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d007      	beq.n	80034b6 <TIM_OC5_SetConfig+0x76>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a15      	ldr	r2, [pc, #84]	@ (8003500 <TIM_OC5_SetConfig+0xc0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d003      	beq.n	80034b6 <TIM_OC5_SetConfig+0x76>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a14      	ldr	r2, [pc, #80]	@ (8003504 <TIM_OC5_SetConfig+0xc4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d109      	bne.n	80034ca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	621a      	str	r2, [r3, #32]
}
 80034e4:	bf00      	nop
 80034e6:	371c      	adds	r7, #28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	fffeff8f 	.word	0xfffeff8f
 80034f4:	40010000 	.word	0x40010000
 80034f8:	40010400 	.word	0x40010400
 80034fc:	40014000 	.word	0x40014000
 8003500:	40014400 	.word	0x40014400
 8003504:	40014800 	.word	0x40014800

08003508 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4b22      	ldr	r3, [pc, #136]	@ (80035bc <TIM_OC6_SetConfig+0xb4>)
 8003534:	4013      	ands	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	021b      	lsls	r3, r3, #8
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800354a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	051b      	lsls	r3, r3, #20
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a19      	ldr	r2, [pc, #100]	@ (80035c0 <TIM_OC6_SetConfig+0xb8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00f      	beq.n	8003580 <TIM_OC6_SetConfig+0x78>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a18      	ldr	r2, [pc, #96]	@ (80035c4 <TIM_OC6_SetConfig+0xbc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00b      	beq.n	8003580 <TIM_OC6_SetConfig+0x78>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a17      	ldr	r2, [pc, #92]	@ (80035c8 <TIM_OC6_SetConfig+0xc0>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d007      	beq.n	8003580 <TIM_OC6_SetConfig+0x78>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a16      	ldr	r2, [pc, #88]	@ (80035cc <TIM_OC6_SetConfig+0xc4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <TIM_OC6_SetConfig+0x78>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a15      	ldr	r2, [pc, #84]	@ (80035d0 <TIM_OC6_SetConfig+0xc8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d109      	bne.n	8003594 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003586:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	029b      	lsls	r3, r3, #10
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	621a      	str	r2, [r3, #32]
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	feff8fff 	.word	0xfeff8fff
 80035c0:	40010000 	.word	0x40010000
 80035c4:	40010400 	.word	0x40010400
 80035c8:	40014000 	.word	0x40014000
 80035cc:	40014400 	.word	0x40014400
 80035d0:	40014800 	.word	0x40014800

080035d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f023 0201 	bic.w	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f023 030a 	bic.w	r3, r3, #10
 8003610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003632:	b480      	push	{r7}
 8003634:	b087      	sub	sp, #28
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f023 0210 	bic.w	r2, r3, #16
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800365c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	031b      	lsls	r3, r3, #12
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800366e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	621a      	str	r2, [r3, #32]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
	...

08003694 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4b09      	ldr	r3, [pc, #36]	@ (80036cc <TIM_ITRx_SetConfig+0x38>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f043 0307 	orr.w	r3, r3, #7
 80036b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	609a      	str	r2, [r3, #8]
}
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	ffcfff8f 	.word	0xffcfff8f

080036d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	021a      	lsls	r2, r3, #8
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	609a      	str	r2, [r3, #8]
}
 8003704:	bf00      	nop
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	2201      	movs	r2, #1
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a1a      	ldr	r2, [r3, #32]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	43db      	mvns	r3, r3
 8003732:	401a      	ands	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a1a      	ldr	r2, [r3, #32]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	fa01 f303 	lsl.w	r3, r1, r3
 8003748:	431a      	orrs	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	621a      	str	r2, [r3, #32]
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
	...

0800375c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d109      	bne.n	8003780 <HAL_TIMEx_PWMN_Start+0x24>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	bf14      	ite	ne
 8003778:	2301      	movne	r3, #1
 800377a:	2300      	moveq	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e022      	b.n	80037c6 <HAL_TIMEx_PWMN_Start+0x6a>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b04      	cmp	r3, #4
 8003784:	d109      	bne.n	800379a <HAL_TIMEx_PWMN_Start+0x3e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b01      	cmp	r3, #1
 8003790:	bf14      	ite	ne
 8003792:	2301      	movne	r3, #1
 8003794:	2300      	moveq	r3, #0
 8003796:	b2db      	uxtb	r3, r3
 8003798:	e015      	b.n	80037c6 <HAL_TIMEx_PWMN_Start+0x6a>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b08      	cmp	r3, #8
 800379e:	d109      	bne.n	80037b4 <HAL_TIMEx_PWMN_Start+0x58>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	bf14      	ite	ne
 80037ac:	2301      	movne	r3, #1
 80037ae:	2300      	moveq	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	e008      	b.n	80037c6 <HAL_TIMEx_PWMN_Start+0x6a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	bf14      	ite	ne
 80037c0:	2301      	movne	r3, #1
 80037c2:	2300      	moveq	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e073      	b.n	80038b6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d104      	bne.n	80037de <HAL_TIMEx_PWMN_Start+0x82>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037dc:	e013      	b.n	8003806 <HAL_TIMEx_PWMN_Start+0xaa>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d104      	bne.n	80037ee <HAL_TIMEx_PWMN_Start+0x92>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037ec:	e00b      	b.n	8003806 <HAL_TIMEx_PWMN_Start+0xaa>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d104      	bne.n	80037fe <HAL_TIMEx_PWMN_Start+0xa2>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037fc:	e003      	b.n	8003806 <HAL_TIMEx_PWMN_Start+0xaa>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2202      	movs	r2, #2
 8003802:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2204      	movs	r2, #4
 800380c:	6839      	ldr	r1, [r7, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f990 	bl	8003b34 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003822:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a25      	ldr	r2, [pc, #148]	@ (80038c0 <HAL_TIMEx_PWMN_Start+0x164>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d022      	beq.n	8003874 <HAL_TIMEx_PWMN_Start+0x118>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003836:	d01d      	beq.n	8003874 <HAL_TIMEx_PWMN_Start+0x118>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a21      	ldr	r2, [pc, #132]	@ (80038c4 <HAL_TIMEx_PWMN_Start+0x168>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d018      	beq.n	8003874 <HAL_TIMEx_PWMN_Start+0x118>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a20      	ldr	r2, [pc, #128]	@ (80038c8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d013      	beq.n	8003874 <HAL_TIMEx_PWMN_Start+0x118>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1e      	ldr	r2, [pc, #120]	@ (80038cc <HAL_TIMEx_PWMN_Start+0x170>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00e      	beq.n	8003874 <HAL_TIMEx_PWMN_Start+0x118>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1d      	ldr	r2, [pc, #116]	@ (80038d0 <HAL_TIMEx_PWMN_Start+0x174>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d009      	beq.n	8003874 <HAL_TIMEx_PWMN_Start+0x118>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1b      	ldr	r2, [pc, #108]	@ (80038d4 <HAL_TIMEx_PWMN_Start+0x178>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <HAL_TIMEx_PWMN_Start+0x118>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a1a      	ldr	r2, [pc, #104]	@ (80038d8 <HAL_TIMEx_PWMN_Start+0x17c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d115      	bne.n	80038a0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	4b18      	ldr	r3, [pc, #96]	@ (80038dc <HAL_TIMEx_PWMN_Start+0x180>)
 800387c:	4013      	ands	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b06      	cmp	r3, #6
 8003884:	d015      	beq.n	80038b2 <HAL_TIMEx_PWMN_Start+0x156>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800388c:	d011      	beq.n	80038b2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0201 	orr.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389e:	e008      	b.n	80038b2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	e000      	b.n	80038b4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40010000 	.word	0x40010000
 80038c4:	40000400 	.word	0x40000400
 80038c8:	40000800 	.word	0x40000800
 80038cc:	40000c00 	.word	0x40000c00
 80038d0:	40010400 	.word	0x40010400
 80038d4:	40001800 	.word	0x40001800
 80038d8:	40014000 	.word	0x40014000
 80038dc:	00010007 	.word	0x00010007

080038e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e06d      	b.n	80039d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a30      	ldr	r2, [pc, #192]	@ (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d004      	beq.n	800392c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2f      	ldr	r2, [pc, #188]	@ (80039e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d108      	bne.n	800393e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003932:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003944:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a20      	ldr	r2, [pc, #128]	@ (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d022      	beq.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800396a:	d01d      	beq.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1d      	ldr	r2, [pc, #116]	@ (80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d018      	beq.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1c      	ldr	r2, [pc, #112]	@ (80039ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d013      	beq.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1a      	ldr	r2, [pc, #104]	@ (80039f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00e      	beq.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a15      	ldr	r2, [pc, #84]	@ (80039e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d009      	beq.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a16      	ldr	r2, [pc, #88]	@ (80039f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d004      	beq.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a15      	ldr	r2, [pc, #84]	@ (80039f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d10c      	bne.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	40010000 	.word	0x40010000
 80039e4:	40010400 	.word	0x40010400
 80039e8:	40000400 	.word	0x40000400
 80039ec:	40000800 	.word	0x40000800
 80039f0:	40000c00 	.word	0x40000c00
 80039f4:	40001800 	.word	0x40001800
 80039f8:	40014000 	.word	0x40014000

080039fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e065      	b.n	8003ae4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	041b      	lsls	r3, r3, #16
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a16      	ldr	r2, [pc, #88]	@ (8003af0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a14      	ldr	r2, [pc, #80]	@ (8003af4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d115      	bne.n	8003ad2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	051b      	lsls	r3, r3, #20
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	40010000 	.word	0x40010000
 8003af4:	40010400 	.word	0x40010400

08003af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	2204      	movs	r2, #4
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a1a      	ldr	r2, [r3, #32]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	43db      	mvns	r3, r3
 8003b56:	401a      	ands	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a1a      	ldr	r2, [r3, #32]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	621a      	str	r2, [r3, #32]
}
 8003b72:	bf00      	nop
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <memset>:
 8003b7e:	4402      	add	r2, r0
 8003b80:	4603      	mov	r3, r0
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d100      	bne.n	8003b88 <memset+0xa>
 8003b86:	4770      	bx	lr
 8003b88:	f803 1b01 	strb.w	r1, [r3], #1
 8003b8c:	e7f9      	b.n	8003b82 <memset+0x4>
	...

08003b90 <__libc_init_array>:
 8003b90:	b570      	push	{r4, r5, r6, lr}
 8003b92:	4d0d      	ldr	r5, [pc, #52]	@ (8003bc8 <__libc_init_array+0x38>)
 8003b94:	4c0d      	ldr	r4, [pc, #52]	@ (8003bcc <__libc_init_array+0x3c>)
 8003b96:	1b64      	subs	r4, r4, r5
 8003b98:	10a4      	asrs	r4, r4, #2
 8003b9a:	2600      	movs	r6, #0
 8003b9c:	42a6      	cmp	r6, r4
 8003b9e:	d109      	bne.n	8003bb4 <__libc_init_array+0x24>
 8003ba0:	4d0b      	ldr	r5, [pc, #44]	@ (8003bd0 <__libc_init_array+0x40>)
 8003ba2:	4c0c      	ldr	r4, [pc, #48]	@ (8003bd4 <__libc_init_array+0x44>)
 8003ba4:	f000 f818 	bl	8003bd8 <_init>
 8003ba8:	1b64      	subs	r4, r4, r5
 8003baa:	10a4      	asrs	r4, r4, #2
 8003bac:	2600      	movs	r6, #0
 8003bae:	42a6      	cmp	r6, r4
 8003bb0:	d105      	bne.n	8003bbe <__libc_init_array+0x2e>
 8003bb2:	bd70      	pop	{r4, r5, r6, pc}
 8003bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bb8:	4798      	blx	r3
 8003bba:	3601      	adds	r6, #1
 8003bbc:	e7ee      	b.n	8003b9c <__libc_init_array+0xc>
 8003bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc2:	4798      	blx	r3
 8003bc4:	3601      	adds	r6, #1
 8003bc6:	e7f2      	b.n	8003bae <__libc_init_array+0x1e>
 8003bc8:	08003c00 	.word	0x08003c00
 8003bcc:	08003c00 	.word	0x08003c00
 8003bd0:	08003c00 	.word	0x08003c00
 8003bd4:	08003c04 	.word	0x08003c04

08003bd8 <_init>:
 8003bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bda:	bf00      	nop
 8003bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bde:	bc08      	pop	{r3}
 8003be0:	469e      	mov	lr, r3
 8003be2:	4770      	bx	lr

08003be4 <_fini>:
 8003be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be6:	bf00      	nop
 8003be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bea:	bc08      	pop	{r3}
 8003bec:	469e      	mov	lr, r3
 8003bee:	4770      	bx	lr
