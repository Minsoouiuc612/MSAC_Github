
accelerometer_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fd0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08007270  08007270  00008270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076e0  080076e0  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  080076e0  080076e0  000086e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076e8  080076e8  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076e8  080076e8  000086e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076ec  080076ec  000086ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  080076f0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  240001d8  080078c8  000091d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400039c  080078c8  0000939c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da63  00000000  00000000  00009206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fcd  00000000  00000000  00016c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00018c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f0  00000000  00000000  00019808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003984a  00000000  00000000  0001a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f95b  00000000  00000000  00053942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017657e  00000000  00000000  0006329d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d981b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e4c  00000000  00000000  001d9860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001dd6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007258 	.word	0x08007258

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08007258 	.word	0x08007258

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b3d      	ldr	r3, [pc, #244]	@ (800048c <SystemInit+0xfc>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800039a:	4a3c      	ldr	r2, [pc, #240]	@ (800048c <SystemInit+0xfc>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b39      	ldr	r3, [pc, #228]	@ (800048c <SystemInit+0xfc>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a38      	ldr	r2, [pc, #224]	@ (800048c <SystemInit+0xfc>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b37      	ldr	r3, [pc, #220]	@ (8000490 <SystemInit+0x100>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b34      	ldr	r3, [pc, #208]	@ (8000490 <SystemInit+0x100>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a32      	ldr	r2, [pc, #200]	@ (8000490 <SystemInit+0x100>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b31      	ldr	r3, [pc, #196]	@ (8000494 <SystemInit+0x104>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a30      	ldr	r2, [pc, #192]	@ (8000494 <SystemInit+0x104>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000494 <SystemInit+0x104>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b2d      	ldr	r3, [pc, #180]	@ (8000494 <SystemInit+0x104>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	492c      	ldr	r1, [pc, #176]	@ (8000494 <SystemInit+0x104>)
 80003e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000498 <SystemInit+0x108>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b29      	ldr	r3, [pc, #164]	@ (8000490 <SystemInit+0x100>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b26      	ldr	r3, [pc, #152]	@ (8000490 <SystemInit+0x100>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a24      	ldr	r2, [pc, #144]	@ (8000490 <SystemInit+0x100>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b23      	ldr	r3, [pc, #140]	@ (8000494 <SystemInit+0x104>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b21      	ldr	r3, [pc, #132]	@ (8000494 <SystemInit+0x104>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b20      	ldr	r3, [pc, #128]	@ (8000494 <SystemInit+0x104>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b1e      	ldr	r3, [pc, #120]	@ (8000494 <SystemInit+0x104>)
 800041a:	4a20      	ldr	r2, [pc, #128]	@ (800049c <SystemInit+0x10c>)
 800041c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b1d      	ldr	r3, [pc, #116]	@ (8000494 <SystemInit+0x104>)
 8000420:	4a1f      	ldr	r2, [pc, #124]	@ (80004a0 <SystemInit+0x110>)
 8000422:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b1b      	ldr	r3, [pc, #108]	@ (8000494 <SystemInit+0x104>)
 8000426:	4a1f      	ldr	r2, [pc, #124]	@ (80004a4 <SystemInit+0x114>)
 8000428:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b1a      	ldr	r3, [pc, #104]	@ (8000494 <SystemInit+0x104>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <SystemInit+0x104>)
 8000432:	4a1c      	ldr	r2, [pc, #112]	@ (80004a4 <SystemInit+0x114>)
 8000434:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b17      	ldr	r3, [pc, #92]	@ (8000494 <SystemInit+0x104>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <SystemInit+0x104>)
 800043e:	4a19      	ldr	r2, [pc, #100]	@ (80004a4 <SystemInit+0x114>)
 8000440:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b14      	ldr	r3, [pc, #80]	@ (8000494 <SystemInit+0x104>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <SystemInit+0x104>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a11      	ldr	r2, [pc, #68]	@ (8000494 <SystemInit+0x104>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <SystemInit+0x104>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <SystemInit+0x118>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800045e:	4a12      	ldr	r2, [pc, #72]	@ (80004a8 <SystemInit+0x118>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000464:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <SystemInit+0x11c>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <SystemInit+0x120>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <SystemInit+0x124>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <SystemInit+0x128>)
 800047c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000480:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	e000ed00 	.word	0xe000ed00
 8000490:	52002000 	.word	0x52002000
 8000494:	58024400 	.word	0x58024400
 8000498:	eaf6ed7f 	.word	0xeaf6ed7f
 800049c:	02020200 	.word	0x02020200
 80004a0:	01ff0000 	.word	0x01ff0000
 80004a4:	01010280 	.word	0x01010280
 80004a8:	580000c0 	.word	0x580000c0
 80004ac:	5c001000 	.word	0x5c001000
 80004b0:	ffff0000 	.word	0xffff0000
 80004b4:	51008108 	.word	0x51008108
 80004b8:	52004000 	.word	0x52004000

080004bc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004c8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80004cc:	f003 0301 	and.w	r3, r3, #1
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d013      	beq.n	80004fc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004d8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80004dc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d00b      	beq.n	80004fc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004e4:	e000      	b.n	80004e8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004e6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d0f9      	beq.n	80004e6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004f2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	b2d2      	uxtb	r2, r2
 80004fa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004fc:	687b      	ldr	r3, [r7, #4]
}
 80004fe:	4618      	mov	r0, r3
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b090      	sub	sp, #64	@ 0x40
 8000510:	af04      	add	r7, sp, #16
int main(void)
 8000512:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000516:	617b      	str	r3, [r7, #20]
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000518:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800051c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800051e:	bf00      	nop
 8000520:	4bba      	ldr	r3, [pc, #744]	@ (800080c <main+0x300>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000528:	2b00      	cmp	r3, #0
 800052a:	d004      	beq.n	8000536 <main+0x2a>
 800052c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800052e:	1e5a      	subs	r2, r3, #1
 8000530:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000532:	2b00      	cmp	r3, #0
 8000534:	dcf4      	bgt.n	8000520 <main+0x14>
	if ( timeout < 0 )
 8000536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000538:	2b00      	cmp	r3, #0
 800053a:	da01      	bge.n	8000540 <main+0x34>
	{
		Error_Handler();
 800053c:	f000 fa9c 	bl	8000a78 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000540:	f000 fc26 	bl	8000d90 <HAL_Init>
	}

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000544:	f000 f978 	bl	8000838 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000548:	4bb0      	ldr	r3, [pc, #704]	@ (800080c <main+0x300>)
 800054a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800054e:	4aaf      	ldr	r2, [pc, #700]	@ (800080c <main+0x300>)
 8000550:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000554:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000558:	4bac      	ldr	r3, [pc, #688]	@ (800080c <main+0x300>)
 800055a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800055e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000566:	2000      	movs	r0, #0
 8000568:	f000 ff82 	bl	8001470 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800056c:	2100      	movs	r1, #0
 800056e:	2000      	movs	r0, #0
 8000570:	f000 ff98 	bl	80014a4 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000574:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000578:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800057a:	bf00      	nop
 800057c:	4ba3      	ldr	r3, [pc, #652]	@ (800080c <main+0x300>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000584:	2b00      	cmp	r3, #0
 8000586:	d104      	bne.n	8000592 <main+0x86>
 8000588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800058a:	1e5a      	subs	r2, r3, #1
 800058c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800058e:	2b00      	cmp	r3, #0
 8000590:	dcf4      	bgt.n	800057c <main+0x70>
	if ( timeout < 0 )
 8000592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000594:	2b00      	cmp	r3, #0
 8000596:	da01      	bge.n	800059c <main+0x90>
	{
		Error_Handler();
 8000598:	f000 fa6e 	bl	8000a78 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800059c:	f000 f9f6 	bl	800098c <MX_GPIO_Init>
	MX_I2C1_Init();
 80005a0:	f000 f9b4 	bl	800090c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, (0b00011111 << 1) + 0, 1, 100);
 80005a4:	2364      	movs	r3, #100	@ 0x64
 80005a6:	2201      	movs	r2, #1
 80005a8:	213e      	movs	r1, #62	@ 0x3e
 80005aa:	4899      	ldr	r0, [pc, #612]	@ (8000810 <main+0x304>)
 80005ac:	f001 fa58 	bl	8001a60 <HAL_I2C_IsDeviceReady>
 80005b0:	4603      	mov	r3, r0
 80005b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	if(ret == HAL_OK)
 80005b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d103      	bne.n	80005c6 <main+0xba>
		printf("Device is recognized \n");
 80005be:	4895      	ldr	r0, [pc, #596]	@ (8000814 <main+0x308>)
 80005c0:	f004 ff48 	bl	8005454 <puts>
 80005c4:	e002      	b.n	80005cc <main+0xc0>
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, 1); // yellow
	else
		printf("Device is not recognized \n");
 80005c6:	4894      	ldr	r0, [pc, #592]	@ (8000818 <main+0x30c>)
 80005c8:	f004 ff44 	bl	8005454 <puts>
	//					 uint8_t *pData,
	//					 uint16_t Size,
	//					 uint32_t Timeout)

	// First, read what's in register already then print it
	uint8_t cntl1 = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	74fb      	strb	r3, [r7, #19]
	HAL_I2C_Mem_Read(&hi2c1, (0b00011111 << 1) + 1, 0x1B, 1, &cntl1, 1, 100);
 80005d0:	2364      	movs	r3, #100	@ 0x64
 80005d2:	9302      	str	r3, [sp, #8]
 80005d4:	2301      	movs	r3, #1
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	f107 0313 	add.w	r3, r7, #19
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2301      	movs	r3, #1
 80005e0:	221b      	movs	r2, #27
 80005e2:	213f      	movs	r1, #63	@ 0x3f
 80005e4:	488a      	ldr	r0, [pc, #552]	@ (8000810 <main+0x304>)
 80005e6:	f001 f921 	bl	800182c <HAL_I2C_Mem_Read>
	printf("cntl1 initial: %d \n", cntl1);
 80005ea:	7cfb      	ldrb	r3, [r7, #19]
 80005ec:	4619      	mov	r1, r3
 80005ee:	488b      	ldr	r0, [pc, #556]	@ (800081c <main+0x310>)
 80005f0:	f004 fec8 	bl	8005384 <iprintf>

	// Reset register
	cntl1 = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	74fb      	strb	r3, [r7, #19]
	HAL_I2C_Mem_Write(&hi2c1, (0b00011111 << 1) + 0, 0x1B, 1, &cntl1, 1, 100);
 80005f8:	2364      	movs	r3, #100	@ 0x64
 80005fa:	9302      	str	r3, [sp, #8]
 80005fc:	2301      	movs	r3, #1
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	f107 0313 	add.w	r3, r7, #19
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	221b      	movs	r2, #27
 800060a:	213e      	movs	r1, #62	@ 0x3e
 800060c:	4880      	ldr	r0, [pc, #512]	@ (8000810 <main+0x304>)
 800060e:	f000 fff9 	bl	8001604 <HAL_I2C_Mem_Write>

	// %%%%%%%%%% Setting up ODCNTL register %%%%%%%%%%
	uint8_t odcntl = 0b00000110;
 8000612:	2306      	movs	r3, #6
 8000614:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Mem_Write(&hi2c1, (0b00011111 << 1) + 0, 0x21, 1, &odcntl, 1, 100);
 8000616:	2364      	movs	r3, #100	@ 0x64
 8000618:	9302      	str	r3, [sp, #8]
 800061a:	2301      	movs	r3, #1
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	f107 0312 	add.w	r3, r7, #18
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	2221      	movs	r2, #33	@ 0x21
 8000628:	213e      	movs	r1, #62	@ 0x3e
 800062a:	4879      	ldr	r0, [pc, #484]	@ (8000810 <main+0x304>)
 800062c:	f000 ffea 	bl	8001604 <HAL_I2C_Mem_Write>

	odcntl = odcntl | 0b00001101;
 8000630:	7cbb      	ldrb	r3, [r7, #18]
 8000632:	f043 030d 	orr.w	r3, r3, #13
 8000636:	b2db      	uxtb	r3, r3
 8000638:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Mem_Write(&hi2c1, (0b00011111 << 1) + 0, 0x21, 1, &odcntl, 1, 100);
 800063a:	2364      	movs	r3, #100	@ 0x64
 800063c:	9302      	str	r3, [sp, #8]
 800063e:	2301      	movs	r3, #1
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	f107 0312 	add.w	r3, r7, #18
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2301      	movs	r3, #1
 800064a:	2221      	movs	r2, #33	@ 0x21
 800064c:	213e      	movs	r1, #62	@ 0x3e
 800064e:	4870      	ldr	r0, [pc, #448]	@ (8000810 <main+0x304>)
 8000650:	f000 ffd8 	bl	8001604 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Read(&hi2c1, (0b00011111 << 1) + 1, 0x21, 1, &odcntl, 1, 100);
 8000654:	2364      	movs	r3, #100	@ 0x64
 8000656:	9302      	str	r3, [sp, #8]
 8000658:	2301      	movs	r3, #1
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	f107 0312 	add.w	r3, r7, #18
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2301      	movs	r3, #1
 8000664:	2221      	movs	r2, #33	@ 0x21
 8000666:	213f      	movs	r1, #63	@ 0x3f
 8000668:	4869      	ldr	r0, [pc, #420]	@ (8000810 <main+0x304>)
 800066a:	f001 f8df 	bl	800182c <HAL_I2C_Mem_Read>
	printf("odcntl after settings: %d \n", odcntl);
 800066e:	7cbb      	ldrb	r3, [r7, #18]
 8000670:	4619      	mov	r1, r3
 8000672:	486b      	ldr	r0, [pc, #428]	@ (8000820 <main+0x314>)
 8000674:	f004 fe86 	bl	8005384 <iprintf>
	// %%%%%%%%%% Setting up ODCNTL register %%%%%%%%%%

	// Read for debugging purposes
	HAL_I2C_Mem_Read(&hi2c1, (0b00011111 << 1) + 1, 0x1B, 1, &cntl1, 1, 100);
 8000678:	2364      	movs	r3, #100	@ 0x64
 800067a:	9302      	str	r3, [sp, #8]
 800067c:	2301      	movs	r3, #1
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	f107 0313 	add.w	r3, r7, #19
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2301      	movs	r3, #1
 8000688:	221b      	movs	r2, #27
 800068a:	213f      	movs	r1, #63	@ 0x3f
 800068c:	4860      	ldr	r0, [pc, #384]	@ (8000810 <main+0x304>)
 800068e:	f001 f8cd 	bl	800182c <HAL_I2C_Mem_Read>
	printf("cntl1 after reset: %d \n", cntl1);
 8000692:	7cfb      	ldrb	r3, [r7, #19]
 8000694:	4619      	mov	r1, r3
 8000696:	4863      	ldr	r0, [pc, #396]	@ (8000824 <main+0x318>)
 8000698:	f004 fe74 	bl	8005384 <iprintf>

	// Then, set everything we want besides most significant bit
	uint8_t new_cntl1 = 0b01010000 | cntl1; // +- 32 g range
 800069c:	7cfb      	ldrb	r3, [r7, #19]
 800069e:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	747b      	strb	r3, [r7, #17]
	//	uint8_t new_cntl1 = 0b01001000 | cntl1; // +- 16 g range
	HAL_I2C_Mem_Write(&hi2c1, (0b00011111 << 1) + 0, 0x1B, 1, &new_cntl1, 1, 100);
 80006a6:	2364      	movs	r3, #100	@ 0x64
 80006a8:	9302      	str	r3, [sp, #8]
 80006aa:	2301      	movs	r3, #1
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	f107 0311 	add.w	r3, r7, #17
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2301      	movs	r3, #1
 80006b6:	221b      	movs	r2, #27
 80006b8:	213e      	movs	r1, #62	@ 0x3e
 80006ba:	4855      	ldr	r0, [pc, #340]	@ (8000810 <main+0x304>)
 80006bc:	f000 ffa2 	bl	8001604 <HAL_I2C_Mem_Write>

	// Read for debugging purposes
	HAL_I2C_Mem_Read(&hi2c1, (0b00011111 << 1) + 1, 0x1B, 1, &cntl1, 1, 100);
 80006c0:	2364      	movs	r3, #100	@ 0x64
 80006c2:	9302      	str	r3, [sp, #8]
 80006c4:	2301      	movs	r3, #1
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	f107 0313 	add.w	r3, r7, #19
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2301      	movs	r3, #1
 80006d0:	221b      	movs	r2, #27
 80006d2:	213f      	movs	r1, #63	@ 0x3f
 80006d4:	484e      	ldr	r0, [pc, #312]	@ (8000810 <main+0x304>)
 80006d6:	f001 f8a9 	bl	800182c <HAL_I2C_Mem_Read>
	printf("cntl1 after settings before enable: %d \n", cntl1);
 80006da:	7cfb      	ldrb	r3, [r7, #19]
 80006dc:	4619      	mov	r1, r3
 80006de:	4852      	ldr	r0, [pc, #328]	@ (8000828 <main+0x31c>)
 80006e0:	f004 fe50 	bl	8005384 <iprintf>

	// Set the most significant bit to 1 to enable accelerometer
	new_cntl1 = 0b10000000 | cntl1;
 80006e4:	7cfb      	ldrb	r3, [r7, #19]
 80006e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Mem_Write(&hi2c1, (0b00011111 << 1) + 0, 0x1B, 1, &new_cntl1, 1, 100);
 80006ee:	2364      	movs	r3, #100	@ 0x64
 80006f0:	9302      	str	r3, [sp, #8]
 80006f2:	2301      	movs	r3, #1
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	f107 0311 	add.w	r3, r7, #17
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2301      	movs	r3, #1
 80006fe:	221b      	movs	r2, #27
 8000700:	213e      	movs	r1, #62	@ 0x3e
 8000702:	4843      	ldr	r0, [pc, #268]	@ (8000810 <main+0x304>)
 8000704:	f000 ff7e 	bl	8001604 <HAL_I2C_Mem_Write>

	// Read for debugging purposes
	HAL_I2C_Mem_Read(&hi2c1, (0b00011111 << 1) + 1, 0x1B, 1, &cntl1, 1, 100);
 8000708:	2364      	movs	r3, #100	@ 0x64
 800070a:	9302      	str	r3, [sp, #8]
 800070c:	2301      	movs	r3, #1
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	f107 0313 	add.w	r3, r7, #19
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2301      	movs	r3, #1
 8000718:	221b      	movs	r2, #27
 800071a:	213f      	movs	r1, #63	@ 0x3f
 800071c:	483c      	ldr	r0, [pc, #240]	@ (8000810 <main+0x304>)
 800071e:	f001 f885 	bl	800182c <HAL_I2C_Mem_Read>
	printf("cntl1 after enable: %d \n", cntl1);
 8000722:	7cfb      	ldrb	r3, [r7, #19]
 8000724:	4619      	mov	r1, r3
 8000726:	4841      	ldr	r0, [pc, #260]	@ (800082c <main+0x320>)
 8000728:	f004 fe2c 	bl	8005384 <iprintf>

	// vars for while loop
	uint8_t data[6];
	int16_t x_acc = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	853b      	strh	r3, [r7, #40]	@ 0x28
	int16_t y_acc = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t z_acc = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	84bb      	strh	r3, [r7, #36]	@ 0x24
	float x_accel_converted = 0.0;
 8000738:	f04f 0300 	mov.w	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
	float y_accel_converted = 0.0;
 800073e:	f04f 0300 	mov.w	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
	float z_accel_converted = 0.0;
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_I2C_Mem_Read(&hi2c1, (0b00011111 << 1) + 1, 0x08, 1, data, 6, 100);
 800074a:	2364      	movs	r3, #100	@ 0x64
 800074c:	9302      	str	r3, [sp, #8]
 800074e:	2306      	movs	r3, #6
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	2208      	movs	r2, #8
 800075c:	213f      	movs	r1, #63	@ 0x3f
 800075e:	482c      	ldr	r0, [pc, #176]	@ (8000810 <main+0x304>)
 8000760:	f001 f864 	bl	800182c <HAL_I2C_Mem_Read>

		x_acc = (data[1] << 8) + data[0];
 8000764:	7a7b      	ldrb	r3, [r7, #9]
 8000766:	021b      	lsls	r3, r3, #8
 8000768:	b29b      	uxth	r3, r3
 800076a:	7a3a      	ldrb	r2, [r7, #8]
 800076c:	4413      	add	r3, r2
 800076e:	b29b      	uxth	r3, r3
 8000770:	853b      	strh	r3, [r7, #40]	@ 0x28
		x_accel_converted = x_acc * ((float)(31.99902 / 32767.0));
 8000772:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8000776:	ee07 3a90 	vmov	s15, r3
 800077a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800077e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000830 <main+0x324>
 8000782:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000786:	edc7 7a08 	vstr	s15, [r7, #32]
		//		x_accel_converted = x_acc * ((float)(15.99951 / 32767.0));

		y_acc = (data[3] << 8) + data[2];
 800078a:	7afb      	ldrb	r3, [r7, #11]
 800078c:	021b      	lsls	r3, r3, #8
 800078e:	b29b      	uxth	r3, r3
 8000790:	7aba      	ldrb	r2, [r7, #10]
 8000792:	4413      	add	r3, r2
 8000794:	b29b      	uxth	r3, r3
 8000796:	84fb      	strh	r3, [r7, #38]	@ 0x26
		y_accel_converted = y_acc * ((float)(31.99902 / 32767.0));
 8000798:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800079c:	ee07 3a90 	vmov	s15, r3
 80007a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007a4:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000830 <main+0x324>
 80007a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007ac:	edc7 7a07 	vstr	s15, [r7, #28]
		//		y_accel_converted = y_acc * ((float)(15.99951 / 32767.0));

		z_acc = (data[5] << 8) + data[4];
 80007b0:	7b7b      	ldrb	r3, [r7, #13]
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	7b3a      	ldrb	r2, [r7, #12]
 80007b8:	4413      	add	r3, r2
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		z_accel_converted = z_acc * ((float)(31.99902 / 32767.0));
 80007be:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80007c2:	ee07 3a90 	vmov	s15, r3
 80007c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007ca:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000830 <main+0x324>
 80007ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007d2:	edc7 7a06 	vstr	s15, [r7, #24]
		//		z_accel_converted = z_acc * ((float)(15.99951 / 32767.0));

		printf("X Accel: %f, Y Accel: %f, Z Accel: %f \n", x_accel_converted, y_accel_converted, z_accel_converted);
 80007d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80007da:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80007de:	edd7 7a07 	vldr	s15, [r7, #28]
 80007e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007e6:	edd7 6a06 	vldr	s13, [r7, #24]
 80007ea:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80007ee:	ed8d 6b02 	vstr	d6, [sp, #8]
 80007f2:	ed8d 7b00 	vstr	d7, [sp]
 80007f6:	ec53 2b15 	vmov	r2, r3, d5
 80007fa:	480e      	ldr	r0, [pc, #56]	@ (8000834 <main+0x328>)
 80007fc:	f004 fdc2 	bl	8005384 <iprintf>
		//		printf("Z Accel float: %0.6f, Z Accel int: %d, MSB: %d, LSM: %d \n", z_accel_converted, z_acc, data[1], data[0]);
		HAL_Delay(500);
 8000800:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000804:	f000 fb56 	bl	8000eb4 <HAL_Delay>
		HAL_I2C_Mem_Read(&hi2c1, (0b00011111 << 1) + 1, 0x08, 1, data, 6, 100);
 8000808:	bf00      	nop
 800080a:	e79e      	b.n	800074a <main+0x23e>
 800080c:	58024400 	.word	0x58024400
 8000810:	240001f4 	.word	0x240001f4
 8000814:	08007270 	.word	0x08007270
 8000818:	08007288 	.word	0x08007288
 800081c:	080072a4 	.word	0x080072a4
 8000820:	080072b8 	.word	0x080072b8
 8000824:	080072d4 	.word	0x080072d4
 8000828:	080072ec 	.word	0x080072ec
 800082c:	08007318 	.word	0x08007318
 8000830:	3a7ffffe 	.word	0x3a7ffffe
 8000834:	08007334 	.word	0x08007334

08000838 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b09c      	sub	sp, #112	@ 0x70
 800083c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000842:	224c      	movs	r2, #76	@ 0x4c
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f004 fee4 	bl	8005614 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2220      	movs	r2, #32
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f004 fede 	bl	8005614 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000858:	2004      	movs	r0, #4
 800085a:	f001 fd47 	bl	80022ec <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b28      	ldr	r3, [pc, #160]	@ (8000904 <SystemClock_Config+0xcc>)
 8000864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000866:	4a27      	ldr	r2, [pc, #156]	@ (8000904 <SystemClock_Config+0xcc>)
 8000868:	f023 0301 	bic.w	r3, r3, #1
 800086c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800086e:	4b25      	ldr	r3, [pc, #148]	@ (8000904 <SystemClock_Config+0xcc>)
 8000870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	4b23      	ldr	r3, [pc, #140]	@ (8000908 <SystemClock_Config+0xd0>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000880:	4a21      	ldr	r2, [pc, #132]	@ (8000908 <SystemClock_Config+0xd0>)
 8000882:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <SystemClock_Config+0xd0>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000894:	bf00      	nop
 8000896:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <SystemClock_Config+0xd0>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800089e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008a2:	d1f8      	bne.n	8000896 <SystemClock_Config+0x5e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a4:	2302      	movs	r3, #2
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ac:	2340      	movs	r3, #64	@ 0x40
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fd71 	bl	80023a0 <HAL_RCC_OscConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x90>
	{
		Error_Handler();
 80008c4:	f000 f8d8 	bl	8000a78 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c8:	233f      	movs	r3, #63	@ 0x3f
 80008ca:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008dc:	2340      	movs	r3, #64	@ 0x40
 80008de:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2101      	movs	r1, #1
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 f9b1 	bl	8002c54 <HAL_RCC_ClockConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80008f8:	f000 f8be 	bl	8000a78 <Error_Handler>
	}
}
 80008fc:	bf00      	nop
 80008fe:	3770      	adds	r7, #112	@ 0x70
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	58000400 	.word	0x58000400
 8000908:	58024800 	.word	0x58024800

0800090c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000910:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000912:	4a1c      	ldr	r2, [pc, #112]	@ (8000984 <MX_I2C1_Init+0x78>)
 8000914:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00707CBB;
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000918:	4a1b      	ldr	r2, [pc, #108]	@ (8000988 <MX_I2C1_Init+0x7c>)
 800091a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800091c:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000924:	2201      	movs	r2, #1
 8000926:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_I2C1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000946:	480e      	ldr	r0, [pc, #56]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000948:	f000 fdc0 	bl	80014cc <HAL_I2C_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000952:	f000 f891 	bl	8000a78 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000956:	2100      	movs	r1, #0
 8000958:	4809      	ldr	r0, [pc, #36]	@ (8000980 <MX_I2C1_Init+0x74>)
 800095a:	f001 fc2f 	bl	80021bc <HAL_I2CEx_ConfigAnalogFilter>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000964:	f000 f888 	bl	8000a78 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_I2C1_Init+0x74>)
 800096c:	f001 fc71 	bl	8002252 <HAL_I2CEx_ConfigDigitalFilter>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8000976:	f000 f87f 	bl	8000a78 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	240001f4 	.word	0x240001f4
 8000984:	40005400 	.word	0x40005400
 8000988:	00707cbb 	.word	0x00707cbb

0800098c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b24      	ldr	r3, [pc, #144]	@ (8000a34 <MX_GPIO_Init+0xa8>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a8:	4a22      	ldr	r2, [pc, #136]	@ (8000a34 <MX_GPIO_Init+0xa8>)
 80009aa:	f043 0302 	orr.w	r3, r3, #2
 80009ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b2:	4b20      	ldr	r3, [pc, #128]	@ (8000a34 <MX_GPIO_Init+0xa8>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b8:	f003 0302 	and.w	r3, r3, #2
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80009c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a34 <MX_GPIO_Init+0xa8>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c6:	4a1b      	ldr	r2, [pc, #108]	@ (8000a34 <MX_GPIO_Init+0xa8>)
 80009c8:	f043 0310 	orr.w	r3, r3, #16
 80009cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d0:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <MX_GPIO_Init+0xa8>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d6:	f003 0310 	and.w	r3, r3, #16
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2101      	movs	r1, #1
 80009e2:	4815      	ldr	r0, [pc, #84]	@ (8000a38 <MX_GPIO_Init+0xac>)
 80009e4:	f000 fd2a 	bl	800143c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2102      	movs	r1, #2
 80009ec:	4813      	ldr	r0, [pc, #76]	@ (8000a3c <MX_GPIO_Init+0xb0>)
 80009ee:	f000 fd25 	bl	800143c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f2:	2301      	movs	r3, #1
 80009f4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	4619      	mov	r1, r3
 8000a08:	480b      	ldr	r0, [pc, #44]	@ (8000a38 <MX_GPIO_Init+0xac>)
 8000a0a:	f000 fb67 	bl	80010dc <HAL_GPIO_Init>

	/*Configure GPIO pin : PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <MX_GPIO_Init+0xb0>)
 8000a26:	f000 fb59 	bl	80010dc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3720      	adds	r7, #32
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	58024400 	.word	0x58024400
 8000a38:	58020400 	.word	0x58020400
 8000a3c:	58021000 	.word	0x58021000

08000a40 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	e009      	b.n	8000a66 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	1c5a      	adds	r2, r3, #1
 8000a56:	60ba      	str	r2, [r7, #8]
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fd2e 	bl	80004bc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	3301      	adds	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	dbf1      	blt.n	8000a52 <_write+0x12>
	}
	return len;
 8000a6e:	687b      	ldr	r3, [r7, #4]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <Error_Handler+0x8>

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <HAL_MspInit+0x30>)
 8000a8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a90:	4a08      	ldr	r2, [pc, #32]	@ (8000ab4 <HAL_MspInit+0x30>)
 8000a92:	f043 0302 	orr.w	r3, r3, #2
 8000a96:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_MspInit+0x30>)
 8000a9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	58024400 	.word	0x58024400

08000ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b0ba      	sub	sp, #232	@ 0xe8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	22c0      	movs	r2, #192	@ 0xc0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f004 fd9b 	bl	8005614 <memset>
  if(hi2c->Instance==I2C1)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a26      	ldr	r2, [pc, #152]	@ (8000b7c <HAL_I2C_MspInit+0xc4>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d145      	bne.n	8000b74 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ae8:	f04f 0208 	mov.w	r2, #8
 8000aec:	f04f 0300 	mov.w	r3, #0
 8000af0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	4618      	mov	r0, r3
 8000b00:	f002 fbd8 	bl	80032b4 <HAL_RCCEx_PeriphCLKConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000b0a:	f7ff ffb5 	bl	8000a78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <HAL_I2C_MspInit+0xc8>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b14:	4a1a      	ldr	r2, [pc, #104]	@ (8000b80 <HAL_I2C_MspInit+0xc8>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <HAL_I2C_MspInit+0xc8>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b2c:	23c0      	movs	r3, #192	@ 0xc0
 8000b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b32:	2312      	movs	r3, #18
 8000b34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b44:	2304      	movs	r3, #4
 8000b46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480c      	ldr	r0, [pc, #48]	@ (8000b84 <HAL_I2C_MspInit+0xcc>)
 8000b52:	f000 fac3 	bl	80010dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b56:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <HAL_I2C_MspInit+0xc8>)
 8000b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b5c:	4a08      	ldr	r2, [pc, #32]	@ (8000b80 <HAL_I2C_MspInit+0xc8>)
 8000b5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_I2C_MspInit+0xc8>)
 8000b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	37e8      	adds	r7, #232	@ 0xe8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	58024400 	.word	0x58024400
 8000b84:	58020400 	.word	0x58020400

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <NMI_Handler+0x4>

08000b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <MemManage_Handler+0x4>

08000ba0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <UsageFault_Handler+0x4>

08000bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bde:	f000 f949 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  return 1;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_kill>:

int _kill(int pid, int sig)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c00:	f004 fd5a 	bl	80056b8 <__errno>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2216      	movs	r2, #22
 8000c08:	601a      	str	r2, [r3, #0]
  return -1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <_exit>:

void _exit (int status)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c1e:	f04f 31ff 	mov.w	r1, #4294967295
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff ffe7 	bl	8000bf6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <_exit+0x12>

08000c2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	e00a      	b.n	8000c54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c3e:	f3af 8000 	nop.w
 8000c42:	4601      	mov	r1, r0
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	60ba      	str	r2, [r7, #8]
 8000c4a:	b2ca      	uxtb	r2, r1
 8000c4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbf0      	blt.n	8000c3e <_read+0x12>
  }

  return len;
 8000c5c:	687b      	ldr	r3, [r7, #4]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_isatty>:

int _isatty(int file)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f004 fcda 	bl	80056b8 <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	220c      	movs	r2, #12
 8000d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	24080000 	.word	0x24080000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	24000248 	.word	0x24000248
 8000d38:	240003a0 	.word	0x240003a0

08000d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d40:	f7ff fb26 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d44:	480c      	ldr	r0, [pc, #48]	@ (8000d78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d46:	490d      	ldr	r1, [pc, #52]	@ (8000d7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d48:	4a0d      	ldr	r2, [pc, #52]	@ (8000d80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f004 fcab 	bl	80056c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6e:	f7ff fbcd 	bl	800050c <main>
  bx  lr
 8000d72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d7c:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8000d80:	080076f0 	.word	0x080076f0
  ldr r2, =_sbss
 8000d84:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8000d88:	2400039c 	.word	0x2400039c

08000d8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC3_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d96:	2003      	movs	r0, #3
 8000d98:	f000 f96e 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d9c:	f002 f910 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8000da0:	4602      	mov	r2, r0
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <HAL_Init+0x68>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	0a1b      	lsrs	r3, r3, #8
 8000da8:	f003 030f 	and.w	r3, r3, #15
 8000dac:	4913      	ldr	r1, [pc, #76]	@ (8000dfc <HAL_Init+0x6c>)
 8000dae:	5ccb      	ldrb	r3, [r1, r3]
 8000db0:	f003 031f 	and.w	r3, r3, #31
 8000db4:	fa22 f303 	lsr.w	r3, r2, r3
 8000db8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000dba:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <HAL_Init+0x68>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000dfc <HAL_Init+0x6c>)
 8000dc4:	5cd3      	ldrb	r3, [r2, r3]
 8000dc6:	f003 031f 	and.w	r3, r3, #31
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	@ (8000e00 <HAL_Init+0x70>)
 8000dd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e04 <HAL_Init+0x74>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f814 	bl	8000e08 <HAL_InitTick>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e002      	b.n	8000df0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000dea:	f7ff fe4b 	bl	8000a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	58024400 	.word	0x58024400
 8000dfc:	0800735c 	.word	0x0800735c
 8000e00:	24000004 	.word	0x24000004
 8000e04:	24000000 	.word	0x24000000

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e10:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <HAL_InitTick+0x60>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d101      	bne.n	8000e1c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e021      	b.n	8000e60 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e1c:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <HAL_InitTick+0x64>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <HAL_InitTick+0x60>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f945 	bl	80010c2 <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f000 f91d 	bl	800108e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	@ (8000e70 <HAL_InitTick+0x68>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2400000c 	.word	0x2400000c
 8000e6c:	24000000 	.word	0x24000000
 8000e70:	24000008 	.word	0x24000008

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	2400000c 	.word	0x2400000c
 8000e98:	2400024c 	.word	0x2400024c

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	2400024c 	.word	0x2400024c

08000eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ebc:	f7ff ffee 	bl	8000e9c <HAL_GetTick>
 8000ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ecc:	d005      	beq.n	8000eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_Delay+0x44>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eda:	bf00      	nop
 8000edc:	f7ff ffde 	bl	8000e9c <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d8f7      	bhi.n	8000edc <HAL_Delay+0x28>
  {
  }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2400000c 	.word	0x2400000c

08000efc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f00:	4b03      	ldr	r3, [pc, #12]	@ (8000f10 <HAL_GetREVID+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	0c1b      	lsrs	r3, r3, #16
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	5c001000 	.word	0x5c001000

08000f14 <__NVIC_SetPriorityGrouping>:
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <__NVIC_SetPriorityGrouping+0x40>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <__NVIC_SetPriorityGrouping+0x40>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00
 8000f58:	05fa0000 	.word	0x05fa0000

08000f5c <__NVIC_GetPriorityGrouping>:
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_SetPriority>:
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	@ (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	@ (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	@ 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	@ 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <SysTick_Config>:
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001044:	d301      	bcc.n	800104a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2301      	movs	r3, #1
 8001048:	e00f      	b.n	800106a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <SysTick_Config+0x40>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001052:	210f      	movs	r1, #15
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f7ff ff8e 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <SysTick_Config+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <SysTick_Config+0x40>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff47 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff5e 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff90 	bl	8000fcc <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5f 	bl	8000f78 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffb2 	bl	8001034 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	@ 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80010ea:	4b89      	ldr	r3, [pc, #548]	@ (8001310 <HAL_GPIO_Init+0x234>)
 80010ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010ee:	e194      	b.n	800141a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 8186 	beq.w	8001414 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d005      	beq.n	8001120 <HAL_GPIO_Init+0x44>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d130      	bne.n	8001182 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001156:	2201      	movs	r2, #1
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	091b      	lsrs	r3, r3, #4
 800116c:	f003 0201 	and.w	r2, r3, #1
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b03      	cmp	r3, #3
 800118c:	d017      	beq.n	80011be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d123      	bne.n	8001212 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	08da      	lsrs	r2, r3, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3208      	adds	r2, #8
 800120c:	69b9      	ldr	r1, [r7, #24]
 800120e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0203 	and.w	r2, r3, #3
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80e0 	beq.w	8001414 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001254:	4b2f      	ldr	r3, [pc, #188]	@ (8001314 <HAL_GPIO_Init+0x238>)
 8001256:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800125a:	4a2e      	ldr	r2, [pc, #184]	@ (8001314 <HAL_GPIO_Init+0x238>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001264:	4b2b      	ldr	r3, [pc, #172]	@ (8001314 <HAL_GPIO_Init+0x238>)
 8001266:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001272:	4a29      	ldr	r2, [pc, #164]	@ (8001318 <HAL_GPIO_Init+0x23c>)
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a20      	ldr	r2, [pc, #128]	@ (800131c <HAL_GPIO_Init+0x240>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d052      	beq.n	8001344 <HAL_GPIO_Init+0x268>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001320 <HAL_GPIO_Init+0x244>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d031      	beq.n	800130a <HAL_GPIO_Init+0x22e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001324 <HAL_GPIO_Init+0x248>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d02b      	beq.n	8001306 <HAL_GPIO_Init+0x22a>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001328 <HAL_GPIO_Init+0x24c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d025      	beq.n	8001302 <HAL_GPIO_Init+0x226>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a1c      	ldr	r2, [pc, #112]	@ (800132c <HAL_GPIO_Init+0x250>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d01f      	beq.n	80012fe <HAL_GPIO_Init+0x222>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001330 <HAL_GPIO_Init+0x254>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x21e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001334 <HAL_GPIO_Init+0x258>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x21a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a19      	ldr	r2, [pc, #100]	@ (8001338 <HAL_GPIO_Init+0x25c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x216>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a18      	ldr	r2, [pc, #96]	@ (800133c <HAL_GPIO_Init+0x260>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x212>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a17      	ldr	r2, [pc, #92]	@ (8001340 <HAL_GPIO_Init+0x264>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x20e>
 80012e6:	2309      	movs	r3, #9
 80012e8:	e02d      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 80012ea:	230a      	movs	r3, #10
 80012ec:	e02b      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 80012ee:	2308      	movs	r3, #8
 80012f0:	e029      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 80012f2:	2307      	movs	r3, #7
 80012f4:	e027      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 80012f6:	2306      	movs	r3, #6
 80012f8:	e025      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 80012fa:	2305      	movs	r3, #5
 80012fc:	e023      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 80012fe:	2304      	movs	r3, #4
 8001300:	e021      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 8001302:	2303      	movs	r3, #3
 8001304:	e01f      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 8001306:	2302      	movs	r3, #2
 8001308:	e01d      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 800130a:	2301      	movs	r3, #1
 800130c:	e01b      	b.n	8001346 <HAL_GPIO_Init+0x26a>
 800130e:	bf00      	nop
 8001310:	58000080 	.word	0x58000080
 8001314:	58024400 	.word	0x58024400
 8001318:	58000400 	.word	0x58000400
 800131c:	58020000 	.word	0x58020000
 8001320:	58020400 	.word	0x58020400
 8001324:	58020800 	.word	0x58020800
 8001328:	58020c00 	.word	0x58020c00
 800132c:	58021000 	.word	0x58021000
 8001330:	58021400 	.word	0x58021400
 8001334:	58021800 	.word	0x58021800
 8001338:	58021c00 	.word	0x58021c00
 800133c:	58022000 	.word	0x58022000
 8001340:	58022400 	.word	0x58022400
 8001344:	2300      	movs	r3, #0
 8001346:	69fa      	ldr	r2, [r7, #28]
 8001348:	f002 0203 	and.w	r2, r2, #3
 800134c:	0092      	lsls	r2, r2, #2
 800134e:	4093      	lsls	r3, r2
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001356:	4938      	ldr	r1, [pc, #224]	@ (8001438 <HAL_GPIO_Init+0x35c>)
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800138a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001392:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	3301      	adds	r3, #1
 8001418:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa22 f303 	lsr.w	r3, r2, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	f47f ae63 	bne.w	80010f0 <HAL_GPIO_Init+0x14>
  }
}
 800142a:	bf00      	nop
 800142c:	bf00      	nop
 800142e:	3724      	adds	r7, #36	@ 0x24
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	58000400 	.word	0x58000400

0800143c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001458:	e003      	b.n	8001462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	041a      	lsls	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	619a      	str	r2, [r3, #24]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001478:	4a08      	ldr	r2, [pc, #32]	@ (800149c <HAL_HSEM_FastTake+0x2c>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3320      	adds	r3, #32
 800147e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001482:	4a07      	ldr	r2, [pc, #28]	@ (80014a0 <HAL_HSEM_FastTake+0x30>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d101      	bne.n	800148c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	e000      	b.n	800148e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	58026400 	.word	0x58026400
 80014a0:	80000300 	.word	0x80000300

080014a4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80014ae:	4906      	ldr	r1, [pc, #24]	@ (80014c8 <HAL_HSEM_Release+0x24>)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	58026400 	.word	0x58026400

080014cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e08b      	b.n	80015f6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d106      	bne.n	80014f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fae0 	bl	8000ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2224      	movs	r2, #36	@ 0x24
 80014fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0201 	bic.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800151c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800152c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d107      	bne.n	8001546 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	e006      	b.n	8001554 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001552:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d108      	bne.n	800156e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	e007      	b.n	800157e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800157c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <HAL_I2C_Init+0x134>)
 800158a:	430b      	orrs	r3, r1
 800158c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800159c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691a      	ldr	r2, [r3, #16]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69d9      	ldr	r1, [r3, #28]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a1a      	ldr	r2, [r3, #32]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2220      	movs	r2, #32
 80015e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	02008000 	.word	0x02008000

08001604 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	4608      	mov	r0, r1
 800160e:	4611      	mov	r1, r2
 8001610:	461a      	mov	r2, r3
 8001612:	4603      	mov	r3, r0
 8001614:	817b      	strh	r3, [r7, #10]
 8001616:	460b      	mov	r3, r1
 8001618:	813b      	strh	r3, [r7, #8]
 800161a:	4613      	mov	r3, r2
 800161c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b20      	cmp	r3, #32
 8001628:	f040 80f9 	bne.w	800181e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <HAL_I2C_Mem_Write+0x34>
 8001632:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001634:	2b00      	cmp	r3, #0
 8001636:	d105      	bne.n	8001644 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800163e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0ed      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_I2C_Mem_Write+0x4e>
 800164e:	2302      	movs	r3, #2
 8001650:	e0e6      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800165a:	f7ff fc1f 	bl	8000e9c <HAL_GetTick>
 800165e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2319      	movs	r3, #25
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 fbaf 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0d1      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2221      	movs	r2, #33	@ 0x21
 8001680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2240      	movs	r2, #64	@ 0x40
 8001688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a3a      	ldr	r2, [r7, #32]
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800169c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016a4:	88f8      	ldrh	r0, [r7, #6]
 80016a6:	893a      	ldrh	r2, [r7, #8]
 80016a8:	8979      	ldrh	r1, [r7, #10]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	4603      	mov	r3, r0
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 fabf 	bl	8001c38 <I2C_RequestMemoryWrite>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0a9      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	2bff      	cmp	r3, #255	@ 0xff
 80016d4:	d90e      	bls.n	80016f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	22ff      	movs	r2, #255	@ 0xff
 80016da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	8979      	ldrh	r1, [r7, #10]
 80016e4:	2300      	movs	r3, #0
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 fd33 	bl	8002158 <I2C_TransferConfig>
 80016f2:	e00f      	b.n	8001714 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001702:	b2da      	uxtb	r2, r3
 8001704:	8979      	ldrh	r1, [r7, #10]
 8001706:	2300      	movs	r3, #0
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 fd22 	bl	8002158 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 fbb2 	bl	8001e82 <I2C_WaitOnTXISFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e07b      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172c:	781a      	ldrb	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001738:	1c5a      	adds	r2, r3, #1
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001742:	b29b      	uxth	r3, r3
 8001744:	3b01      	subs	r3, #1
 8001746:	b29a      	uxth	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001750:	3b01      	subs	r3, #1
 8001752:	b29a      	uxth	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800175c:	b29b      	uxth	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d034      	beq.n	80017cc <HAL_I2C_Mem_Write+0x1c8>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001766:	2b00      	cmp	r3, #0
 8001768:	d130      	bne.n	80017cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001770:	2200      	movs	r2, #0
 8001772:	2180      	movs	r1, #128	@ 0x80
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 fb2b 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e04d      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001788:	b29b      	uxth	r3, r3
 800178a:	2bff      	cmp	r3, #255	@ 0xff
 800178c:	d90e      	bls.n	80017ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	22ff      	movs	r2, #255	@ 0xff
 8001792:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001798:	b2da      	uxtb	r2, r3
 800179a:	8979      	ldrh	r1, [r7, #10]
 800179c:	2300      	movs	r3, #0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 fcd7 	bl	8002158 <I2C_TransferConfig>
 80017aa:	e00f      	b.n	80017cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	8979      	ldrh	r1, [r7, #10]
 80017be:	2300      	movs	r3, #0
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 fcc6 	bl	8002158 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d19e      	bne.n	8001714 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 fb98 	bl	8001f10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e01a      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2220      	movs	r2, #32
 80017f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <HAL_I2C_Mem_Write+0x224>)
 80017fe:	400b      	ands	r3, r1
 8001800:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2220      	movs	r2, #32
 8001806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800181e:	2302      	movs	r3, #2
  }
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	fe00e800 	.word	0xfe00e800

0800182c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	4608      	mov	r0, r1
 8001836:	4611      	mov	r1, r2
 8001838:	461a      	mov	r2, r3
 800183a:	4603      	mov	r3, r0
 800183c:	817b      	strh	r3, [r7, #10]
 800183e:	460b      	mov	r3, r1
 8001840:	813b      	strh	r3, [r7, #8]
 8001842:	4613      	mov	r3, r2
 8001844:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b20      	cmp	r3, #32
 8001850:	f040 80fd 	bne.w	8001a4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_I2C_Mem_Read+0x34>
 800185a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800185c:	2b00      	cmp	r3, #0
 800185e:	d105      	bne.n	800186c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001866:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0f1      	b.n	8001a50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001872:	2b01      	cmp	r3, #1
 8001874:	d101      	bne.n	800187a <HAL_I2C_Mem_Read+0x4e>
 8001876:	2302      	movs	r3, #2
 8001878:	e0ea      	b.n	8001a50 <HAL_I2C_Mem_Read+0x224>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001882:	f7ff fb0b 	bl	8000e9c <HAL_GetTick>
 8001886:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2319      	movs	r3, #25
 800188e:	2201      	movs	r2, #1
 8001890:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 fa9b 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0d5      	b.n	8001a50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2222      	movs	r2, #34	@ 0x22
 80018a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2240      	movs	r2, #64	@ 0x40
 80018b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6a3a      	ldr	r2, [r7, #32]
 80018be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80018c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018cc:	88f8      	ldrh	r0, [r7, #6]
 80018ce:	893a      	ldrh	r2, [r7, #8]
 80018d0:	8979      	ldrh	r1, [r7, #10]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	4603      	mov	r3, r0
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 f9ff 	bl	8001ce0 <I2C_RequestMemoryRead>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0ad      	b.n	8001a50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	2bff      	cmp	r3, #255	@ 0xff
 80018fc:	d90e      	bls.n	800191c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	22ff      	movs	r2, #255	@ 0xff
 8001902:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001908:	b2da      	uxtb	r2, r3
 800190a:	8979      	ldrh	r1, [r7, #10]
 800190c:	4b52      	ldr	r3, [pc, #328]	@ (8001a58 <HAL_I2C_Mem_Read+0x22c>)
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 fc1f 	bl	8002158 <I2C_TransferConfig>
 800191a:	e00f      	b.n	800193c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001920:	b29a      	uxth	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800192a:	b2da      	uxtb	r2, r3
 800192c:	8979      	ldrh	r1, [r7, #10]
 800192e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a58 <HAL_I2C_Mem_Read+0x22c>)
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 fc0e 	bl	8002158 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001942:	2200      	movs	r2, #0
 8001944:	2104      	movs	r1, #4
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 fa42 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e07c      	b.n	8001a50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001972:	3b01      	subs	r3, #1
 8001974:	b29a      	uxth	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800197e:	b29b      	uxth	r3, r3
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800198c:	b29b      	uxth	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d034      	beq.n	80019fc <HAL_I2C_Mem_Read+0x1d0>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001996:	2b00      	cmp	r3, #0
 8001998:	d130      	bne.n	80019fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a0:	2200      	movs	r2, #0
 80019a2:	2180      	movs	r1, #128	@ 0x80
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 fa13 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e04d      	b.n	8001a50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	2bff      	cmp	r3, #255	@ 0xff
 80019bc:	d90e      	bls.n	80019dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	22ff      	movs	r2, #255	@ 0xff
 80019c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	8979      	ldrh	r1, [r7, #10]
 80019cc:	2300      	movs	r3, #0
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 fbbf 	bl	8002158 <I2C_TransferConfig>
 80019da:	e00f      	b.n	80019fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	8979      	ldrh	r1, [r7, #10]
 80019ee:	2300      	movs	r3, #0
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fbae 	bl	8002158 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d19a      	bne.n	800193c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 fa80 	bl	8001f10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e01a      	b.n	8001a50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <HAL_I2C_Mem_Read+0x230>)
 8001a2e:	400b      	ands	r3, r1
 8001a30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2220      	movs	r2, #32
 8001a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001a4e:	2302      	movs	r3, #2
  }
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	80002400 	.word	0x80002400
 8001a5c:	fe00e800 	.word	0xfe00e800

08001a60 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	@ 0x28
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	f040 80d2 	bne.w	8001c26 <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a90:	d101      	bne.n	8001a96 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001a92:	2302      	movs	r3, #2
 8001a94:	e0c8      	b.n	8001c28 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_I2C_IsDeviceReady+0x44>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e0c1      	b.n	8001c28 <HAL_I2C_IsDeviceReady+0x1c8>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2224      	movs	r2, #36	@ 0x24
 8001ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d105      	bne.n	8001ace <HAL_I2C_IsDeviceReady+0x6e>
 8001ac2:	897b      	ldrh	r3, [r7, #10]
 8001ac4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ac8:	4b59      	ldr	r3, [pc, #356]	@ (8001c30 <HAL_I2C_IsDeviceReady+0x1d0>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	e004      	b.n	8001ad8 <HAL_I2C_IsDeviceReady+0x78>
 8001ace:	897b      	ldrh	r3, [r7, #10]
 8001ad0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ad4:	4b57      	ldr	r3, [pc, #348]	@ (8001c34 <HAL_I2C_IsDeviceReady+0x1d4>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001ade:	f7ff f9dd 	bl	8000e9c <HAL_GetTick>
 8001ae2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	f003 0320 	and.w	r3, r3, #32
 8001aee:	2b20      	cmp	r3, #32
 8001af0:	bf0c      	ite	eq
 8001af2:	2301      	moveq	r3, #1
 8001af4:	2300      	movne	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	2b10      	cmp	r3, #16
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b10:	e034      	b.n	8001b7c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d01a      	beq.n	8001b50 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b1a:	f7ff f9bf 	bl	8000e9c <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d302      	bcc.n	8001b30 <HAL_I2C_IsDeviceReady+0xd0>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10f      	bne.n	8001b50 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2220      	movs	r2, #32
 8001b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3c:	f043 0220 	orr.w	r2, r3, #32
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e06b      	b.n	8001c28 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0320 	and.w	r3, r3, #32
 8001b5a:	2b20      	cmp	r3, #32
 8001b5c:	bf0c      	ite	eq
 8001b5e:	2301      	moveq	r3, #1
 8001b60:	2300      	movne	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	2b10      	cmp	r3, #16
 8001b72:	bf0c      	ite	eq
 8001b74:	2301      	moveq	r3, #1
 8001b76:	2300      	movne	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b7c:	7ffb      	ldrb	r3, [r7, #31]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d102      	bne.n	8001b88 <HAL_I2C_IsDeviceReady+0x128>
 8001b82:	7fbb      	ldrb	r3, [r7, #30]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0c4      	beq.n	8001b12 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b10      	cmp	r3, #16
 8001b94:	d01a      	beq.n	8001bcc <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2120      	movs	r1, #32
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f000 f915 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e03b      	b.n	8001c28 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e02d      	b.n	8001c28 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2120      	movs	r1, #32
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 f8fa 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e020      	b.n	8001c28 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2210      	movs	r2, #16
 8001bec:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	f63f af5a 	bhi.w	8001aba <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c12:	f043 0220 	orr.w	r2, r3, #32
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8001c26:	2302      	movs	r3, #2
  }
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	02002000 	.word	0x02002000
 8001c34:	02002800 	.word	0x02002800

08001c38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	4608      	mov	r0, r1
 8001c42:	4611      	mov	r1, r2
 8001c44:	461a      	mov	r2, r3
 8001c46:	4603      	mov	r3, r0
 8001c48:	817b      	strh	r3, [r7, #10]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	813b      	strh	r3, [r7, #8]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	8979      	ldrh	r1, [r7, #10]
 8001c58:	4b20      	ldr	r3, [pc, #128]	@ (8001cdc <I2C_RequestMemoryWrite+0xa4>)
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 fa79 	bl	8002158 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	69b9      	ldr	r1, [r7, #24]
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f909 	bl	8001e82 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e02c      	b.n	8001cd4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c80:	893b      	ldrh	r3, [r7, #8]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c8a:	e015      	b.n	8001cb8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c8c:	893b      	ldrh	r3, [r7, #8]
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	69b9      	ldr	r1, [r7, #24]
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 f8ef 	bl	8001e82 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e012      	b.n	8001cd4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cae:	893b      	ldrh	r3, [r7, #8]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2180      	movs	r1, #128	@ 0x80
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 f884 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	80002000 	.word	0x80002000

08001ce0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	4608      	mov	r0, r1
 8001cea:	4611      	mov	r1, r2
 8001cec:	461a      	mov	r2, r3
 8001cee:	4603      	mov	r3, r0
 8001cf0:	817b      	strh	r3, [r7, #10]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	813b      	strh	r3, [r7, #8]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	8979      	ldrh	r1, [r7, #10]
 8001d00:	4b20      	ldr	r3, [pc, #128]	@ (8001d84 <I2C_RequestMemoryRead+0xa4>)
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2300      	movs	r3, #0
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 fa26 	bl	8002158 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	69b9      	ldr	r1, [r7, #24]
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f000 f8b6 	bl	8001e82 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e02c      	b.n	8001d7a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d105      	bne.n	8001d32 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d26:	893b      	ldrh	r3, [r7, #8]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d30:	e015      	b.n	8001d5e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d32:	893b      	ldrh	r3, [r7, #8]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	69b9      	ldr	r1, [r7, #24]
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 f89c 	bl	8001e82 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e012      	b.n	8001d7a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d54:	893b      	ldrh	r3, [r7, #8]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	2200      	movs	r2, #0
 8001d66:	2140      	movs	r1, #64	@ 0x40
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f831 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	80002000 	.word	0x80002000

08001d88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d103      	bne.n	8001da6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2200      	movs	r2, #0
 8001da4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d007      	beq.n	8001dc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699a      	ldr	r2, [r3, #24]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	619a      	str	r2, [r3, #24]
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de0:	e03b      	b.n	8001e5a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	6839      	ldr	r1, [r7, #0]
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f8d6 	bl	8001f98 <I2C_IsErrorOccurred>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e041      	b.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d02d      	beq.n	8001e5a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfe:	f7ff f84d 	bl	8000e9c <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d302      	bcc.n	8001e14 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d122      	bne.n	8001e5a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	bf0c      	ite	eq
 8001e24:	2301      	moveq	r3, #1
 8001e26:	2300      	movne	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d113      	bne.n	8001e5a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	f043 0220 	orr.w	r2, r3, #32
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2220      	movs	r2, #32
 8001e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00f      	b.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	699a      	ldr	r2, [r3, #24]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4013      	ands	r3, r2
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	bf0c      	ite	eq
 8001e6a:	2301      	moveq	r3, #1
 8001e6c:	2300      	movne	r3, #0
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d0b4      	beq.n	8001de2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e8e:	e033      	b.n	8001ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	68b9      	ldr	r1, [r7, #8]
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 f87f 	bl	8001f98 <I2C_IsErrorOccurred>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e031      	b.n	8001f08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eaa:	d025      	beq.n	8001ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eac:	f7fe fff6 	bl	8000e9c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d302      	bcc.n	8001ec2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d11a      	bne.n	8001ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d013      	beq.n	8001ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed4:	f043 0220 	orr.w	r2, r3, #32
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e007      	b.n	8001f08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d1c4      	bne.n	8001e90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f1c:	e02f      	b.n	8001f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 f838 	bl	8001f98 <I2C_IsErrorOccurred>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e02d      	b.n	8001f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f32:	f7fe ffb3 	bl	8000e9c <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d302      	bcc.n	8001f48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d11a      	bne.n	8001f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f003 0320 	and.w	r3, r3, #32
 8001f52:	2b20      	cmp	r3, #32
 8001f54:	d013      	beq.n	8001f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5a:	f043 0220 	orr.w	r2, r3, #32
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e007      	b.n	8001f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	d1c8      	bne.n	8001f1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	@ 0x28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d068      	beq.n	8002096 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2210      	movs	r2, #16
 8001fca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fcc:	e049      	b.n	8002062 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d045      	beq.n	8002062 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fd6:	f7fe ff61 	bl	8000e9c <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d302      	bcc.n	8001fec <I2C_IsErrorOccurred+0x54>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d13a      	bne.n	8002062 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ff6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ffe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800200a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800200e:	d121      	bne.n	8002054 <I2C_IsErrorOccurred+0xbc>
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002016:	d01d      	beq.n	8002054 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	2b20      	cmp	r3, #32
 800201c:	d01a      	beq.n	8002054 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800202c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800202e:	f7fe ff35 	bl	8000e9c <HAL_GetTick>
 8002032:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002034:	e00e      	b.n	8002054 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002036:	f7fe ff31 	bl	8000e9c <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b19      	cmp	r3, #25
 8002042:	d907      	bls.n	8002054 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	f043 0320 	orr.w	r3, r3, #32
 800204a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002052:	e006      	b.n	8002062 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b20      	cmp	r3, #32
 8002060:	d1e9      	bne.n	8002036 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b20      	cmp	r3, #32
 800206e:	d003      	beq.n	8002078 <I2C_IsErrorOccurred+0xe0>
 8002070:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0aa      	beq.n	8001fce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800207c:	2b00      	cmp	r3, #0
 800207e:	d103      	bne.n	8002088 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2220      	movs	r2, #32
 8002086:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00b      	beq.n	80020c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00b      	beq.n	80020e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	f043 0308 	orr.w	r3, r3, #8
 80020d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00b      	beq.n	8002104 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	f043 0302 	orr.w	r3, r3, #2
 80020f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01c      	beq.n	8002146 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f7ff fe3b 	bl	8001d88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6859      	ldr	r1, [r3, #4]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b0d      	ldr	r3, [pc, #52]	@ (8002154 <I2C_IsErrorOccurred+0x1bc>)
 800211e:	400b      	ands	r3, r1
 8002120:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	431a      	orrs	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002146:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800214a:	4618      	mov	r0, r3
 800214c:	3728      	adds	r7, #40	@ 0x28
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	fe00e800 	.word	0xfe00e800

08002158 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	460b      	mov	r3, r1
 8002164:	817b      	strh	r3, [r7, #10]
 8002166:	4613      	mov	r3, r2
 8002168:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800216a:	897b      	ldrh	r3, [r7, #10]
 800216c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002170:	7a7b      	ldrb	r3, [r7, #9]
 8002172:	041b      	lsls	r3, r3, #16
 8002174:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002178:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	4313      	orrs	r3, r2
 8002182:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002186:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	0d5b      	lsrs	r3, r3, #21
 8002192:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002196:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <I2C_TransferConfig+0x60>)
 8002198:	430b      	orrs	r3, r1
 800219a:	43db      	mvns	r3, r3
 800219c:	ea02 0103 	and.w	r1, r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80021aa:	bf00      	nop
 80021ac:	371c      	adds	r7, #28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	03ff63ff 	.word	0x03ff63ff

080021bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b20      	cmp	r3, #32
 80021d0:	d138      	bne.n	8002244 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021dc:	2302      	movs	r3, #2
 80021de:	e032      	b.n	8002246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2224      	movs	r2, #36	@ 0x24
 80021ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800220e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6819      	ldr	r1, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	e000      	b.n	8002246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002244:	2302      	movs	r3, #2
  }
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002252:	b480      	push	{r7}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b20      	cmp	r3, #32
 8002266:	d139      	bne.n	80022dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002272:	2302      	movs	r3, #2
 8002274:	e033      	b.n	80022de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2224      	movs	r2, #36	@ 0x24
 8002282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0201 	bic.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	e000      	b.n	80022de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022dc:	2302      	movs	r3, #2
  }
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80022f4:	4b29      	ldr	r3, [pc, #164]	@ (800239c <HAL_PWREx_ConfigSupply+0xb0>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	2b06      	cmp	r3, #6
 80022fe:	d00a      	beq.n	8002316 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002300:	4b26      	ldr	r3, [pc, #152]	@ (800239c <HAL_PWREx_ConfigSupply+0xb0>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	429a      	cmp	r2, r3
 800230c:	d001      	beq.n	8002312 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e040      	b.n	8002394 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e03e      	b.n	8002394 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002316:	4b21      	ldr	r3, [pc, #132]	@ (800239c <HAL_PWREx_ConfigSupply+0xb0>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800231e:	491f      	ldr	r1, [pc, #124]	@ (800239c <HAL_PWREx_ConfigSupply+0xb0>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4313      	orrs	r3, r2
 8002324:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002326:	f7fe fdb9 	bl	8000e9c <HAL_GetTick>
 800232a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800232c:	e009      	b.n	8002342 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800232e:	f7fe fdb5 	bl	8000e9c <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800233c:	d901      	bls.n	8002342 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e028      	b.n	8002394 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002342:	4b16      	ldr	r3, [pc, #88]	@ (800239c <HAL_PWREx_ConfigSupply+0xb0>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800234a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800234e:	d1ee      	bne.n	800232e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b1e      	cmp	r3, #30
 8002354:	d008      	beq.n	8002368 <HAL_PWREx_ConfigSupply+0x7c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b2e      	cmp	r3, #46	@ 0x2e
 800235a:	d005      	beq.n	8002368 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b1d      	cmp	r3, #29
 8002360:	d002      	beq.n	8002368 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b2d      	cmp	r3, #45	@ 0x2d
 8002366:	d114      	bne.n	8002392 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002368:	f7fe fd98 	bl	8000e9c <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800236e:	e009      	b.n	8002384 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002370:	f7fe fd94 	bl	8000e9c <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800237e:	d901      	bls.n	8002384 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e007      	b.n	8002394 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002384:	4b05      	ldr	r3, [pc, #20]	@ (800239c <HAL_PWREx_ConfigSupply+0xb0>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002390:	d1ee      	bne.n	8002370 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	58024800 	.word	0x58024800

080023a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08c      	sub	sp, #48	@ 0x30
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d102      	bne.n	80023b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	f000 bc48 	b.w	8002c44 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 8088 	beq.w	80024d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c2:	4b99      	ldr	r3, [pc, #612]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023cc:	4b96      	ldr	r3, [pc, #600]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 80023ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d4:	2b10      	cmp	r3, #16
 80023d6:	d007      	beq.n	80023e8 <HAL_RCC_OscConfig+0x48>
 80023d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023da:	2b18      	cmp	r3, #24
 80023dc:	d111      	bne.n	8002402 <HAL_RCC_OscConfig+0x62>
 80023de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d10c      	bne.n	8002402 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	4b8f      	ldr	r3, [pc, #572]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d06d      	beq.n	80024d0 <HAL_RCC_OscConfig+0x130>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d169      	bne.n	80024d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f000 bc21 	b.w	8002c44 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x7a>
 800240c:	4b86      	ldr	r3, [pc, #536]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a85      	ldr	r2, [pc, #532]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002412:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	e02e      	b.n	8002478 <HAL_RCC_OscConfig+0xd8>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x9c>
 8002422:	4b81      	ldr	r3, [pc, #516]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a80      	ldr	r2, [pc, #512]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002428:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b7e      	ldr	r3, [pc, #504]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a7d      	ldr	r2, [pc, #500]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002434:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e01d      	b.n	8002478 <HAL_RCC_OscConfig+0xd8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0xc0>
 8002446:	4b78      	ldr	r3, [pc, #480]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a77      	ldr	r2, [pc, #476]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 800244c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b75      	ldr	r3, [pc, #468]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a74      	ldr	r2, [pc, #464]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e00b      	b.n	8002478 <HAL_RCC_OscConfig+0xd8>
 8002460:	4b71      	ldr	r3, [pc, #452]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a70      	ldr	r2, [pc, #448]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	4b6e      	ldr	r3, [pc, #440]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a6d      	ldr	r2, [pc, #436]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002472:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d013      	beq.n	80024a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7fe fd0c 	bl	8000e9c <HAL_GetTick>
 8002484:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002488:	f7fe fd08 	bl	8000e9c <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	@ 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e3d4      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800249a:	4b63      	ldr	r3, [pc, #396]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0xe8>
 80024a6:	e014      	b.n	80024d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe fcf8 	bl	8000e9c <HAL_GetTick>
 80024ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b0:	f7fe fcf4 	bl	8000e9c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	@ 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e3c0      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024c2:	4b59      	ldr	r3, [pc, #356]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x110>
 80024ce:	e000      	b.n	80024d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80ca 	beq.w	8002674 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e0:	4b51      	ldr	r3, [pc, #324]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 80024ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_RCC_OscConfig+0x166>
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	2b18      	cmp	r3, #24
 80024fa:	d156      	bne.n	80025aa <HAL_RCC_OscConfig+0x20a>
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d151      	bne.n	80025aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002506:	4b48      	ldr	r3, [pc, #288]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_RCC_OscConfig+0x17e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e392      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800251e:	4b42      	ldr	r3, [pc, #264]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 0219 	bic.w	r2, r3, #25
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	493f      	ldr	r1, [pc, #252]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe fcb4 	bl	8000e9c <HAL_GetTick>
 8002534:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002538:	f7fe fcb0 	bl	8000e9c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e37c      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800254a:	4b37      	ldr	r3, [pc, #220]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002556:	f7fe fcd1 	bl	8000efc <HAL_GetREVID>
 800255a:	4603      	mov	r3, r0
 800255c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002560:	4293      	cmp	r3, r2
 8002562:	d817      	bhi.n	8002594 <HAL_RCC_OscConfig+0x1f4>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	2b40      	cmp	r3, #64	@ 0x40
 800256a:	d108      	bne.n	800257e <HAL_RCC_OscConfig+0x1de>
 800256c:	4b2e      	ldr	r3, [pc, #184]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002574:	4a2c      	ldr	r2, [pc, #176]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800257a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800257c:	e07a      	b.n	8002674 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257e:	4b2a      	ldr	r3, [pc, #168]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	031b      	lsls	r3, r3, #12
 800258c:	4926      	ldr	r1, [pc, #152]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002592:	e06f      	b.n	8002674 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b24      	ldr	r3, [pc, #144]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	4921      	ldr	r1, [pc, #132]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a8:	e064      	b.n	8002674 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d047      	beq.n	8002642 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 0219 	bic.w	r2, r3, #25
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	491a      	ldr	r1, [pc, #104]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7fe fc6a 	bl	8000e9c <HAL_GetTick>
 80025c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025cc:	f7fe fc66 	bl	8000e9c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e332      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025de:	4b12      	ldr	r3, [pc, #72]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ea:	f7fe fc87 	bl	8000efc <HAL_GetREVID>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d819      	bhi.n	800262c <HAL_RCC_OscConfig+0x28c>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2b40      	cmp	r3, #64	@ 0x40
 80025fe:	d108      	bne.n	8002612 <HAL_RCC_OscConfig+0x272>
 8002600:	4b09      	ldr	r3, [pc, #36]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002608:	4a07      	ldr	r2, [pc, #28]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 800260a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800260e:	6053      	str	r3, [r2, #4]
 8002610:	e030      	b.n	8002674 <HAL_RCC_OscConfig+0x2d4>
 8002612:	4b05      	ldr	r3, [pc, #20]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	031b      	lsls	r3, r3, #12
 8002620:	4901      	ldr	r1, [pc, #4]	@ (8002628 <HAL_RCC_OscConfig+0x288>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
 8002626:	e025      	b.n	8002674 <HAL_RCC_OscConfig+0x2d4>
 8002628:	58024400 	.word	0x58024400
 800262c:	4b9a      	ldr	r3, [pc, #616]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	4997      	ldr	r1, [pc, #604]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
 8002640:	e018      	b.n	8002674 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002642:	4b95      	ldr	r3, [pc, #596]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a94      	ldr	r2, [pc, #592]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264e:	f7fe fc25 	bl	8000e9c <HAL_GetTick>
 8002652:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002656:	f7fe fc21 	bl	8000e9c <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e2ed      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002668:	4b8b      	ldr	r3, [pc, #556]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80a9 	beq.w	80027d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002682:	4b85      	ldr	r3, [pc, #532]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800268a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800268c:	4b82      	ldr	r3, [pc, #520]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800268e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002690:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d007      	beq.n	80026a8 <HAL_RCC_OscConfig+0x308>
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2b18      	cmp	r3, #24
 800269c:	d13a      	bne.n	8002714 <HAL_RCC_OscConfig+0x374>
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d135      	bne.n	8002714 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_OscConfig+0x320>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	2b80      	cmp	r3, #128	@ 0x80
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e2c1      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026c0:	f7fe fc1c 	bl	8000efc <HAL_GetREVID>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d817      	bhi.n	80026fe <HAL_RCC_OscConfig+0x35e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d108      	bne.n	80026e8 <HAL_RCC_OscConfig+0x348>
 80026d6:	4b70      	ldr	r3, [pc, #448]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80026de:	4a6e      	ldr	r2, [pc, #440]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80026e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80026e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026e6:	e075      	b.n	80027d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	069b      	lsls	r3, r3, #26
 80026f6:	4968      	ldr	r1, [pc, #416]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026fc:	e06a      	b.n	80027d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026fe:	4b66      	ldr	r3, [pc, #408]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	061b      	lsls	r3, r3, #24
 800270c:	4962      	ldr	r1, [pc, #392]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800270e:	4313      	orrs	r3, r2
 8002710:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002712:	e05f      	b.n	80027d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d042      	beq.n	80027a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800271c:	4b5e      	ldr	r3, [pc, #376]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a5d      	ldr	r2, [pc, #372]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe fbb8 	bl	8000e9c <HAL_GetTick>
 800272c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002730:	f7fe fbb4 	bl	8000e9c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e280      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002742:	4b55      	ldr	r3, [pc, #340]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800274e:	f7fe fbd5 	bl	8000efc <HAL_GetREVID>
 8002752:	4603      	mov	r3, r0
 8002754:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002758:	4293      	cmp	r3, r2
 800275a:	d817      	bhi.n	800278c <HAL_RCC_OscConfig+0x3ec>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	2b20      	cmp	r3, #32
 8002762:	d108      	bne.n	8002776 <HAL_RCC_OscConfig+0x3d6>
 8002764:	4b4c      	ldr	r3, [pc, #304]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800276c:	4a4a      	ldr	r2, [pc, #296]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800276e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002772:	6053      	str	r3, [r2, #4]
 8002774:	e02e      	b.n	80027d4 <HAL_RCC_OscConfig+0x434>
 8002776:	4b48      	ldr	r3, [pc, #288]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	069b      	lsls	r3, r3, #26
 8002784:	4944      	ldr	r1, [pc, #272]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
 800278a:	e023      	b.n	80027d4 <HAL_RCC_OscConfig+0x434>
 800278c:	4b42      	ldr	r3, [pc, #264]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	061b      	lsls	r3, r3, #24
 800279a:	493f      	ldr	r1, [pc, #252]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800279c:	4313      	orrs	r3, r2
 800279e:	60cb      	str	r3, [r1, #12]
 80027a0:	e018      	b.n	80027d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80027a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ae:	f7fe fb75 	bl	8000e9c <HAL_GetTick>
 80027b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027b6:	f7fe fb71 	bl	8000e9c <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e23d      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027c8:	4b33      	ldr	r3, [pc, #204]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d036      	beq.n	800284e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d019      	beq.n	800281c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80027ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7fe fb52 	bl	8000e9c <HAL_GetTick>
 80027f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fc:	f7fe fb4e 	bl	8000e9c <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e21a      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800280e:	4b22      	ldr	r3, [pc, #136]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x45c>
 800281a:	e018      	b.n	800284e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800281c:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800281e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002820:	4a1d      	ldr	r2, [pc, #116]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002822:	f023 0301 	bic.w	r3, r3, #1
 8002826:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7fe fb38 	bl	8000e9c <HAL_GetTick>
 800282c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002830:	f7fe fb34 	bl	8000e9c <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e200      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002842:	4b15      	ldr	r3, [pc, #84]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b00      	cmp	r3, #0
 8002858:	d039      	beq.n	80028ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d01c      	beq.n	800289c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002862:	4b0d      	ldr	r3, [pc, #52]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a0c      	ldr	r2, [pc, #48]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 8002868:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800286c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800286e:	f7fe fb15 	bl	8000e9c <HAL_GetTick>
 8002872:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002876:	f7fe fb11 	bl	8000e9c <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e1dd      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002888:	4b03      	ldr	r3, [pc, #12]	@ (8002898 <HAL_RCC_OscConfig+0x4f8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x4d6>
 8002894:	e01b      	b.n	80028ce <HAL_RCC_OscConfig+0x52e>
 8002896:	bf00      	nop
 8002898:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800289c:	4b9b      	ldr	r3, [pc, #620]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a9a      	ldr	r2, [pc, #616]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 80028a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028a8:	f7fe faf8 	bl	8000e9c <HAL_GetTick>
 80028ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028b0:	f7fe faf4 	bl	8000e9c <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e1c0      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028c2:	4b92      	ldr	r3, [pc, #584]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8081 	beq.w	80029de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028dc:	4b8c      	ldr	r3, [pc, #560]	@ (8002b10 <HAL_RCC_OscConfig+0x770>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a8b      	ldr	r2, [pc, #556]	@ (8002b10 <HAL_RCC_OscConfig+0x770>)
 80028e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028e8:	f7fe fad8 	bl	8000e9c <HAL_GetTick>
 80028ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f0:	f7fe fad4 	bl	8000e9c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	@ 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1a0      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002902:	4b83      	ldr	r3, [pc, #524]	@ (8002b10 <HAL_RCC_OscConfig+0x770>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d106      	bne.n	8002924 <HAL_RCC_OscConfig+0x584>
 8002916:	4b7d      	ldr	r3, [pc, #500]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6713      	str	r3, [r2, #112]	@ 0x70
 8002922:	e02d      	b.n	8002980 <HAL_RCC_OscConfig+0x5e0>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10c      	bne.n	8002946 <HAL_RCC_OscConfig+0x5a6>
 800292c:	4b77      	ldr	r3, [pc, #476]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002930:	4a76      	ldr	r2, [pc, #472]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	6713      	str	r3, [r2, #112]	@ 0x70
 8002938:	4b74      	ldr	r3, [pc, #464]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293c:	4a73      	ldr	r2, [pc, #460]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800293e:	f023 0304 	bic.w	r3, r3, #4
 8002942:	6713      	str	r3, [r2, #112]	@ 0x70
 8002944:	e01c      	b.n	8002980 <HAL_RCC_OscConfig+0x5e0>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b05      	cmp	r3, #5
 800294c:	d10c      	bne.n	8002968 <HAL_RCC_OscConfig+0x5c8>
 800294e:	4b6f      	ldr	r3, [pc, #444]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002952:	4a6e      	ldr	r2, [pc, #440]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	6713      	str	r3, [r2, #112]	@ 0x70
 800295a:	4b6c      	ldr	r3, [pc, #432]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295e:	4a6b      	ldr	r2, [pc, #428]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6713      	str	r3, [r2, #112]	@ 0x70
 8002966:	e00b      	b.n	8002980 <HAL_RCC_OscConfig+0x5e0>
 8002968:	4b68      	ldr	r3, [pc, #416]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296c:	4a67      	ldr	r2, [pc, #412]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	6713      	str	r3, [r2, #112]	@ 0x70
 8002974:	4b65      	ldr	r3, [pc, #404]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002978:	4a64      	ldr	r2, [pc, #400]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 800297a:	f023 0304 	bic.w	r3, r3, #4
 800297e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d015      	beq.n	80029b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fe fa88 	bl	8000e9c <HAL_GetTick>
 800298c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002990:	f7fe fa84 	bl	8000e9c <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e14e      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029a6:	4b59      	ldr	r3, [pc, #356]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0ee      	beq.n	8002990 <HAL_RCC_OscConfig+0x5f0>
 80029b2:	e014      	b.n	80029de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7fe fa72 	bl	8000e9c <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029bc:	f7fe fa6e 	bl	8000e9c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e138      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029d2:	4b4e      	ldr	r3, [pc, #312]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ee      	bne.n	80029bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 812d 	beq.w	8002c42 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029e8:	4b48      	ldr	r3, [pc, #288]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029f0:	2b18      	cmp	r3, #24
 80029f2:	f000 80bd 	beq.w	8002b70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	f040 809e 	bne.w	8002b3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a00:	4b42      	ldr	r3, [pc, #264]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a41      	ldr	r2, [pc, #260]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fa46 	bl	8000e9c <HAL_GetTick>
 8002a10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a14:	f7fe fa42 	bl	8000e9c <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e10e      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a26:	4b39      	ldr	r3, [pc, #228]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a32:	4b36      	ldr	r3, [pc, #216]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a36:	4b37      	ldr	r3, [pc, #220]	@ (8002b14 <HAL_RCC_OscConfig+0x774>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a42:	0112      	lsls	r2, r2, #4
 8002a44:	430a      	orrs	r2, r1
 8002a46:	4931      	ldr	r1, [pc, #196]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a50:	3b01      	subs	r3, #1
 8002a52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	025b      	lsls	r3, r3, #9
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a66:	3b01      	subs	r3, #1
 8002a68:	041b      	lsls	r3, r3, #16
 8002a6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a74:	3b01      	subs	r3, #1
 8002a76:	061b      	lsls	r3, r3, #24
 8002a78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a7c:	4923      	ldr	r1, [pc, #140]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a82:	4b22      	ldr	r3, [pc, #136]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a86:	4a21      	ldr	r2, [pc, #132]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a92:	4b21      	ldr	r3, [pc, #132]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a9a:	00d2      	lsls	r2, r2, #3
 8002a9c:	491b      	ldr	r1, [pc, #108]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa6:	f023 020c 	bic.w	r2, r3, #12
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	4917      	ldr	r1, [pc, #92]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ab4:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab8:	f023 0202 	bic.w	r2, r3, #2
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac0:	4912      	ldr	r1, [pc, #72]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ac6:	4b11      	ldr	r3, [pc, #68]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aca:	4a10      	ldr	r2, [pc, #64]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	4a0d      	ldr	r2, [pc, #52]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002adc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ade:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002ae4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002aea:	4b08      	ldr	r3, [pc, #32]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aee:	4a07      	ldr	r2, [pc, #28]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af6:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a04      	ldr	r2, [pc, #16]	@ (8002b0c <HAL_RCC_OscConfig+0x76c>)
 8002afc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7fe f9cb 	bl	8000e9c <HAL_GetTick>
 8002b06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b08:	e011      	b.n	8002b2e <HAL_RCC_OscConfig+0x78e>
 8002b0a:	bf00      	nop
 8002b0c:	58024400 	.word	0x58024400
 8002b10:	58024800 	.word	0x58024800
 8002b14:	fffffc0c 	.word	0xfffffc0c
 8002b18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe f9be 	bl	8000e9c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e08a      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b2e:	4b47      	ldr	r3, [pc, #284]	@ (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x77c>
 8002b3a:	e082      	b.n	8002c42 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3c:	4b43      	ldr	r3, [pc, #268]	@ (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a42      	ldr	r2, [pc, #264]	@ (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002b42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe f9a8 	bl	8000e9c <HAL_GetTick>
 8002b4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b50:	f7fe f9a4 	bl	8000e9c <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e070      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b62:	4b3a      	ldr	r3, [pc, #232]	@ (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x7b0>
 8002b6e:	e068      	b.n	8002c42 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b70:	4b36      	ldr	r3, [pc, #216]	@ (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b76:	4b35      	ldr	r3, [pc, #212]	@ (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d031      	beq.n	8002be8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f003 0203 	and.w	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d12a      	bne.n	8002be8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d122      	bne.n	8002be8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d11a      	bne.n	8002be8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	0a5b      	lsrs	r3, r3, #9
 8002bb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bbe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d111      	bne.n	8002be8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	0c1b      	lsrs	r3, r3, #16
 8002bc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d108      	bne.n	8002be8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	0e1b      	lsrs	r3, r3, #24
 8002bda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e02b      	b.n	8002c44 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002bec:	4b17      	ldr	r3, [pc, #92]	@ (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf0:	08db      	lsrs	r3, r3, #3
 8002bf2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bf6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d01f      	beq.n	8002c42 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c02:	4b12      	ldr	r3, [pc, #72]	@ (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c06:	4a11      	ldr	r2, [pc, #68]	@ (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c0e:	f7fe f945 	bl	8000e9c <HAL_GetTick>
 8002c12:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c14:	bf00      	nop
 8002c16:	f7fe f941 	bl	8000e9c <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d0f9      	beq.n	8002c16 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c22:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002c24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c26:	4b0a      	ldr	r3, [pc, #40]	@ (8002c50 <HAL_RCC_OscConfig+0x8b0>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c2e:	00d2      	lsls	r2, r2, #3
 8002c30:	4906      	ldr	r1, [pc, #24]	@ (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c36:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	4a04      	ldr	r2, [pc, #16]	@ (8002c4c <HAL_RCC_OscConfig+0x8ac>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3730      	adds	r7, #48	@ 0x30
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	58024400 	.word	0x58024400
 8002c50:	ffff0007 	.word	0xffff0007

08002c54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e19c      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c68:	4b8a      	ldr	r3, [pc, #552]	@ (8002e94 <HAL_RCC_ClockConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d910      	bls.n	8002c98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b87      	ldr	r3, [pc, #540]	@ (8002e94 <HAL_RCC_ClockConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 020f 	bic.w	r2, r3, #15
 8002c7e:	4985      	ldr	r1, [pc, #532]	@ (8002e94 <HAL_RCC_ClockConfig+0x240>)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b83      	ldr	r3, [pc, #524]	@ (8002e94 <HAL_RCC_ClockConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e184      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d010      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	4b7b      	ldr	r3, [pc, #492]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d908      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cb4:	4b78      	ldr	r3, [pc, #480]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	4975      	ldr	r1, [pc, #468]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d010      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	4b70      	ldr	r3, [pc, #448]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d908      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ce2:	4b6d      	ldr	r3, [pc, #436]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	496a      	ldr	r1, [pc, #424]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d010      	beq.n	8002d22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699a      	ldr	r2, [r3, #24]
 8002d04:	4b64      	ldr	r3, [pc, #400]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d908      	bls.n	8002d22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d10:	4b61      	ldr	r3, [pc, #388]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	495e      	ldr	r1, [pc, #376]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d010      	beq.n	8002d50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69da      	ldr	r2, [r3, #28]
 8002d32:	4b59      	ldr	r3, [pc, #356]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d908      	bls.n	8002d50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d3e:	4b56      	ldr	r3, [pc, #344]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	4953      	ldr	r1, [pc, #332]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d010      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	4b4d      	ldr	r3, [pc, #308]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d908      	bls.n	8002d7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d6c:	4b4a      	ldr	r3, [pc, #296]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f023 020f 	bic.w	r2, r3, #15
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4947      	ldr	r1, [pc, #284]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d055      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d8a:	4b43      	ldr	r3, [pc, #268]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	4940      	ldr	r1, [pc, #256]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002da4:	4b3c      	ldr	r3, [pc, #240]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d121      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0f6      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d107      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dbc:	4b36      	ldr	r3, [pc, #216]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d115      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0ea      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dd4:	4b30      	ldr	r3, [pc, #192]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0de      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002de4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0d6      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002df4:	4b28      	ldr	r3, [pc, #160]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f023 0207 	bic.w	r2, r3, #7
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4925      	ldr	r1, [pc, #148]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e06:	f7fe f849 	bl	8000e9c <HAL_GetTick>
 8002e0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0c:	e00a      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e0e:	f7fe f845 	bl	8000e9c <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e0be      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e24:	4b1c      	ldr	r3, [pc, #112]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d1eb      	bne.n	8002e0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	4b14      	ldr	r3, [pc, #80]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d208      	bcs.n	8002e64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e52:	4b11      	ldr	r3, [pc, #68]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f023 020f 	bic.w	r2, r3, #15
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	490e      	ldr	r1, [pc, #56]	@ (8002e98 <HAL_RCC_ClockConfig+0x244>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e64:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <HAL_RCC_ClockConfig+0x240>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d214      	bcs.n	8002e9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b08      	ldr	r3, [pc, #32]	@ (8002e94 <HAL_RCC_ClockConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 020f 	bic.w	r2, r3, #15
 8002e7a:	4906      	ldr	r1, [pc, #24]	@ (8002e94 <HAL_RCC_ClockConfig+0x240>)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b04      	ldr	r3, [pc, #16]	@ (8002e94 <HAL_RCC_ClockConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e086      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x34e>
 8002e94:	52002000 	.word	0x52002000
 8002e98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d010      	beq.n	8002eca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	4b3f      	ldr	r3, [pc, #252]	@ (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d208      	bcs.n	8002eca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002eb8:	4b3c      	ldr	r3, [pc, #240]	@ (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	4939      	ldr	r1, [pc, #228]	@ (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d010      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	4b34      	ldr	r3, [pc, #208]	@ (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d208      	bcs.n	8002ef8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ee6:	4b31      	ldr	r3, [pc, #196]	@ (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	492e      	ldr	r1, [pc, #184]	@ (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d010      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699a      	ldr	r2, [r3, #24]
 8002f08:	4b28      	ldr	r3, [pc, #160]	@ (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d208      	bcs.n	8002f26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f14:	4b25      	ldr	r3, [pc, #148]	@ (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	4922      	ldr	r1, [pc, #136]	@ (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d010      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	4b1d      	ldr	r3, [pc, #116]	@ (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d208      	bcs.n	8002f54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f42:	4b1a      	ldr	r3, [pc, #104]	@ (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4917      	ldr	r1, [pc, #92]	@ (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f54:	f000 f834 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b14      	ldr	r3, [pc, #80]	@ (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	4912      	ldr	r1, [pc, #72]	@ (8002fb0 <HAL_RCC_ClockConfig+0x35c>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f72:	4b0e      	ldr	r3, [pc, #56]	@ (8002fac <HAL_RCC_ClockConfig+0x358>)
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb0 <HAL_RCC_ClockConfig+0x35c>)
 8002f7c:	5cd3      	ldrb	r3, [r2, r3]
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
 8002f88:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb4 <HAL_RCC_ClockConfig+0x360>)
 8002f8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb8 <HAL_RCC_ClockConfig+0x364>)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f92:	4b0a      	ldr	r3, [pc, #40]	@ (8002fbc <HAL_RCC_ClockConfig+0x368>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd ff36 	bl	8000e08 <HAL_InitTick>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	58024400 	.word	0x58024400
 8002fb0:	0800735c 	.word	0x0800735c
 8002fb4:	24000004 	.word	0x24000004
 8002fb8:	24000000 	.word	0x24000000
 8002fbc:	24000008 	.word	0x24000008

08002fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b089      	sub	sp, #36	@ 0x24
 8002fc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc6:	4bb3      	ldr	r3, [pc, #716]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fce:	2b18      	cmp	r3, #24
 8002fd0:	f200 8155 	bhi.w	800327e <HAL_RCC_GetSysClockFreq+0x2be>
 8002fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fdc <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	08003041 	.word	0x08003041
 8002fe0:	0800327f 	.word	0x0800327f
 8002fe4:	0800327f 	.word	0x0800327f
 8002fe8:	0800327f 	.word	0x0800327f
 8002fec:	0800327f 	.word	0x0800327f
 8002ff0:	0800327f 	.word	0x0800327f
 8002ff4:	0800327f 	.word	0x0800327f
 8002ff8:	0800327f 	.word	0x0800327f
 8002ffc:	08003067 	.word	0x08003067
 8003000:	0800327f 	.word	0x0800327f
 8003004:	0800327f 	.word	0x0800327f
 8003008:	0800327f 	.word	0x0800327f
 800300c:	0800327f 	.word	0x0800327f
 8003010:	0800327f 	.word	0x0800327f
 8003014:	0800327f 	.word	0x0800327f
 8003018:	0800327f 	.word	0x0800327f
 800301c:	0800306d 	.word	0x0800306d
 8003020:	0800327f 	.word	0x0800327f
 8003024:	0800327f 	.word	0x0800327f
 8003028:	0800327f 	.word	0x0800327f
 800302c:	0800327f 	.word	0x0800327f
 8003030:	0800327f 	.word	0x0800327f
 8003034:	0800327f 	.word	0x0800327f
 8003038:	0800327f 	.word	0x0800327f
 800303c:	08003073 	.word	0x08003073
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003040:	4b94      	ldr	r3, [pc, #592]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b00      	cmp	r3, #0
 800304a:	d009      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800304c:	4b91      	ldr	r3, [pc, #580]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	08db      	lsrs	r3, r3, #3
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	4a90      	ldr	r2, [pc, #576]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
 800305c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800305e:	e111      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003060:	4b8d      	ldr	r3, [pc, #564]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003062:	61bb      	str	r3, [r7, #24]
      break;
 8003064:	e10e      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003066:	4b8d      	ldr	r3, [pc, #564]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003068:	61bb      	str	r3, [r7, #24]
      break;
 800306a:	e10b      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800306c:	4b8c      	ldr	r3, [pc, #560]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800306e:	61bb      	str	r3, [r7, #24]
      break;
 8003070:	e108      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003072:	4b88      	ldr	r3, [pc, #544]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800307c:	4b85      	ldr	r3, [pc, #532]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003086:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003088:	4b82      	ldr	r3, [pc, #520]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003092:	4b80      	ldr	r3, [pc, #512]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003096:	08db      	lsrs	r3, r3, #3
 8003098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80e1 	beq.w	8003278 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	f000 8083 	beq.w	80031c4 <HAL_RCC_GetSysClockFreq+0x204>
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	f200 80a1 	bhi.w	8003208 <HAL_RCC_GetSysClockFreq+0x248>
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_RCC_GetSysClockFreq+0x114>
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d056      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030d2:	e099      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d02d      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	08db      	lsrs	r3, r3, #3
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	4a6b      	ldr	r2, [pc, #428]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
 80030f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	ee07 3a90 	vmov	s15, r3
 8003102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800310a:	4b62      	ldr	r3, [pc, #392]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003112:	ee07 3a90 	vmov	s15, r3
 8003116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800311a:	ed97 6a02 	vldr	s12, [r7, #8]
 800311e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80032a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800312a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800312e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003136:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800313a:	e087      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003146:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80032a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800314a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800314e:	4b51      	ldr	r3, [pc, #324]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800315e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003162:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80032a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800316a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800316e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800317e:	e065      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80032ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800318e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003192:	4b40      	ldr	r3, [pc, #256]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319a:	ee07 3a90 	vmov	s15, r3
 800319e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80032a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031c2:	e043      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80032b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031de:	ee07 3a90 	vmov	s15, r3
 80031e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80032a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003202:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003206:	e021      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003212:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800321a:	4b1e      	ldr	r3, [pc, #120]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800322a:	ed97 6a02 	vldr	s12, [r7, #8]
 800322e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80032a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800323a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800323e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003246:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800324a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800324c:	4b11      	ldr	r3, [pc, #68]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003250:	0a5b      	lsrs	r3, r3, #9
 8003252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003256:	3301      	adds	r3, #1
 8003258:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	ee07 3a90 	vmov	s15, r3
 8003260:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003264:	edd7 6a07 	vldr	s13, [r7, #28]
 8003268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800326c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003270:	ee17 3a90 	vmov	r3, s15
 8003274:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003276:	e005      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	61bb      	str	r3, [r7, #24]
      break;
 800327c:	e002      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800327e:	4b07      	ldr	r3, [pc, #28]	@ (800329c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003280:	61bb      	str	r3, [r7, #24]
      break;
 8003282:	bf00      	nop
  }

  return sysclockfreq;
 8003284:	69bb      	ldr	r3, [r7, #24]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3724      	adds	r7, #36	@ 0x24
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	58024400 	.word	0x58024400
 8003298:	03d09000 	.word	0x03d09000
 800329c:	003d0900 	.word	0x003d0900
 80032a0:	017d7840 	.word	0x017d7840
 80032a4:	46000000 	.word	0x46000000
 80032a8:	4c742400 	.word	0x4c742400
 80032ac:	4a742400 	.word	0x4a742400
 80032b0:	4bbebc20 	.word	0x4bbebc20

080032b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b8:	b0ca      	sub	sp, #296	@ 0x128
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032c6:	2300      	movs	r3, #0
 80032c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80032d8:	2500      	movs	r5, #0
 80032da:	ea54 0305 	orrs.w	r3, r4, r5
 80032de:	d049      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80032e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032ea:	d02f      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80032ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032f0:	d828      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032f6:	d01a      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032fc:	d822      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003306:	d007      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003308:	e01c      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800330a:	4bb8      	ldr	r3, [pc, #736]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800330c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330e:	4ab7      	ldr	r2, [pc, #732]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003314:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003316:	e01a      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800331c:	3308      	adds	r3, #8
 800331e:	2102      	movs	r1, #2
 8003320:	4618      	mov	r0, r3
 8003322:	f001 f9d1 	bl	80046c8 <RCCEx_PLL2_Config>
 8003326:	4603      	mov	r3, r0
 8003328:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800332c:	e00f      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800332e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003332:	3328      	adds	r3, #40	@ 0x28
 8003334:	2102      	movs	r1, #2
 8003336:	4618      	mov	r0, r3
 8003338:	f001 fa78 	bl	800482c <RCCEx_PLL3_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003342:	e004      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800334a:	e000      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800334c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10a      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003356:	4ba5      	ldr	r3, [pc, #660]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800335a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800335e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003362:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003364:	4aa1      	ldr	r2, [pc, #644]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003366:	430b      	orrs	r3, r1
 8003368:	6513      	str	r3, [r2, #80]	@ 0x50
 800336a:	e003      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003370:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003380:	f04f 0900 	mov.w	r9, #0
 8003384:	ea58 0309 	orrs.w	r3, r8, r9
 8003388:	d047      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800338a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003390:	2b04      	cmp	r3, #4
 8003392:	d82a      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003394:	a201      	add	r2, pc, #4	@ (adr r2, 800339c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339a:	bf00      	nop
 800339c:	080033b1 	.word	0x080033b1
 80033a0:	080033bf 	.word	0x080033bf
 80033a4:	080033d5 	.word	0x080033d5
 80033a8:	080033f3 	.word	0x080033f3
 80033ac:	080033f3 	.word	0x080033f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b0:	4b8e      	ldr	r3, [pc, #568]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	4a8d      	ldr	r2, [pc, #564]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033bc:	e01a      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c2:	3308      	adds	r3, #8
 80033c4:	2100      	movs	r1, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f001 f97e 	bl	80046c8 <RCCEx_PLL2_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033d2:	e00f      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d8:	3328      	adds	r3, #40	@ 0x28
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f001 fa25 	bl	800482c <RCCEx_PLL3_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033e8:	e004      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033f0:	e000      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80033f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033fc:	4b7b      	ldr	r3, [pc, #492]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003400:	f023 0107 	bic.w	r1, r3, #7
 8003404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340a:	4a78      	ldr	r2, [pc, #480]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800340c:	430b      	orrs	r3, r1
 800340e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003410:	e003      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003416:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800341a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003426:	f04f 0b00 	mov.w	fp, #0
 800342a:	ea5a 030b 	orrs.w	r3, sl, fp
 800342e:	d04c      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800343a:	d030      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800343c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003440:	d829      	bhi.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003442:	2bc0      	cmp	r3, #192	@ 0xc0
 8003444:	d02d      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003446:	2bc0      	cmp	r3, #192	@ 0xc0
 8003448:	d825      	bhi.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800344a:	2b80      	cmp	r3, #128	@ 0x80
 800344c:	d018      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800344e:	2b80      	cmp	r3, #128	@ 0x80
 8003450:	d821      	bhi.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003456:	2b40      	cmp	r3, #64	@ 0x40
 8003458:	d007      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800345a:	e01c      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800345c:	4b63      	ldr	r3, [pc, #396]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800345e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003460:	4a62      	ldr	r2, [pc, #392]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003466:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003468:	e01c      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800346a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346e:	3308      	adds	r3, #8
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f001 f928 	bl	80046c8 <RCCEx_PLL2_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800347e:	e011      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003484:	3328      	adds	r3, #40	@ 0x28
 8003486:	2100      	movs	r1, #0
 8003488:	4618      	mov	r0, r3
 800348a:	f001 f9cf 	bl	800482c <RCCEx_PLL3_Config>
 800348e:	4603      	mov	r3, r0
 8003490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003494:	e006      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800349c:	e002      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800349e:	bf00      	nop
 80034a0:	e000      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034ac:	4b4f      	ldr	r3, [pc, #316]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034b0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80034b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ba:	4a4c      	ldr	r2, [pc, #304]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034bc:	430b      	orrs	r3, r1
 80034be:	6513      	str	r3, [r2, #80]	@ 0x50
 80034c0:	e003      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80034d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80034da:	2300      	movs	r3, #0
 80034dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80034e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80034e4:	460b      	mov	r3, r1
 80034e6:	4313      	orrs	r3, r2
 80034e8:	d053      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034f6:	d035      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80034f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034fc:	d82e      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003502:	d031      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003504:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003508:	d828      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800350a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800350e:	d01a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003510:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003514:	d822      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800351a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800351e:	d007      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003520:	e01c      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003522:	4b32      	ldr	r3, [pc, #200]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003526:	4a31      	ldr	r2, [pc, #196]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800352c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800352e:	e01c      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003534:	3308      	adds	r3, #8
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f001 f8c5 	bl	80046c8 <RCCEx_PLL2_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003544:	e011      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354a:	3328      	adds	r3, #40	@ 0x28
 800354c:	2100      	movs	r1, #0
 800354e:	4618      	mov	r0, r3
 8003550:	f001 f96c 	bl	800482c <RCCEx_PLL3_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800355a:	e006      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003562:	e002      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003564:	bf00      	nop
 8003566:	e000      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10b      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003572:	4b1e      	ldr	r3, [pc, #120]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003576:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800357a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800357e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003582:	4a1a      	ldr	r2, [pc, #104]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003584:	430b      	orrs	r3, r1
 8003586:	6593      	str	r3, [r2, #88]	@ 0x58
 8003588:	e003      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800358e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800359e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80035a2:	2300      	movs	r3, #0
 80035a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80035a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80035ac:	460b      	mov	r3, r1
 80035ae:	4313      	orrs	r3, r2
 80035b0:	d056      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035be:	d038      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80035c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035c4:	d831      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035ca:	d034      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80035cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035d0:	d82b      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035d6:	d01d      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80035d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035dc:	d825      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d006      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80035e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035e6:	d00a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80035e8:	e01f      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035ea:	bf00      	nop
 80035ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f0:	4ba2      	ldr	r3, [pc, #648]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f4:	4aa1      	ldr	r2, [pc, #644]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035fc:	e01c      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003602:	3308      	adds	r3, #8
 8003604:	2100      	movs	r1, #0
 8003606:	4618      	mov	r0, r3
 8003608:	f001 f85e 	bl	80046c8 <RCCEx_PLL2_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003612:	e011      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003618:	3328      	adds	r3, #40	@ 0x28
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f001 f905 	bl	800482c <RCCEx_PLL3_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003628:	e006      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003630:	e002      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003632:	bf00      	nop
 8003634:	e000      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003638:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10b      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003640:	4b8e      	ldr	r3, [pc, #568]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003644:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003650:	4a8a      	ldr	r2, [pc, #552]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003652:	430b      	orrs	r3, r1
 8003654:	6593      	str	r3, [r2, #88]	@ 0x58
 8003656:	e003      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800365c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800366c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003670:	2300      	movs	r3, #0
 8003672:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003676:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800367a:	460b      	mov	r3, r1
 800367c:	4313      	orrs	r3, r2
 800367e:	d03a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003686:	2b30      	cmp	r3, #48	@ 0x30
 8003688:	d01f      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800368a:	2b30      	cmp	r3, #48	@ 0x30
 800368c:	d819      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800368e:	2b20      	cmp	r3, #32
 8003690:	d00c      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003692:	2b20      	cmp	r3, #32
 8003694:	d815      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d019      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800369a:	2b10      	cmp	r3, #16
 800369c:	d111      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800369e:	4b77      	ldr	r3, [pc, #476]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a2:	4a76      	ldr	r2, [pc, #472]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036aa:	e011      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b0:	3308      	adds	r3, #8
 80036b2:	2102      	movs	r1, #2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f001 f807 	bl	80046c8 <RCCEx_PLL2_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036c0:	e006      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036c8:	e002      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036ca:	bf00      	nop
 80036cc:	e000      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036d8:	4b68      	ldr	r3, [pc, #416]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036dc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e6:	4a65      	ldr	r2, [pc, #404]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036e8:	430b      	orrs	r3, r1
 80036ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036ec:	e003      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80036f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003702:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003706:	2300      	movs	r3, #0
 8003708:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800370c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003710:	460b      	mov	r3, r1
 8003712:	4313      	orrs	r3, r2
 8003714:	d051      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800371c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003720:	d035      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003722:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003726:	d82e      	bhi.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003728:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800372c:	d031      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800372e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003732:	d828      	bhi.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003738:	d01a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800373a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800373e:	d822      	bhi.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003748:	d007      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800374a:	e01c      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800374c:	4b4b      	ldr	r3, [pc, #300]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800374e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003750:	4a4a      	ldr	r2, [pc, #296]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003756:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003758:	e01c      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800375a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375e:	3308      	adds	r3, #8
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f000 ffb0 	bl	80046c8 <RCCEx_PLL2_Config>
 8003768:	4603      	mov	r3, r0
 800376a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800376e:	e011      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003774:	3328      	adds	r3, #40	@ 0x28
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f001 f857 	bl	800482c <RCCEx_PLL3_Config>
 800377e:	4603      	mov	r3, r0
 8003780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003784:	e006      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800378c:	e002      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800378e:	bf00      	nop
 8003790:	e000      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800379c:	4b37      	ldr	r3, [pc, #220]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800379e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80037a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037aa:	4a34      	ldr	r2, [pc, #208]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80037b0:	e003      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80037c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037ca:	2300      	movs	r3, #0
 80037cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80037d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80037d4:	460b      	mov	r3, r1
 80037d6:	4313      	orrs	r3, r2
 80037d8:	d056      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80037da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037e4:	d033      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80037e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037ea:	d82c      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037f0:	d02f      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80037f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037f6:	d826      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037fc:	d02b      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80037fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003802:	d820      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003804:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003808:	d012      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800380a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800380e:	d81a      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d022      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003818:	d115      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800381a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381e:	3308      	adds	r3, #8
 8003820:	2101      	movs	r1, #1
 8003822:	4618      	mov	r0, r3
 8003824:	f000 ff50 	bl	80046c8 <RCCEx_PLL2_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800382e:	e015      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003834:	3328      	adds	r3, #40	@ 0x28
 8003836:	2101      	movs	r1, #1
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fff7 	bl	800482c <RCCEx_PLL3_Config>
 800383e:	4603      	mov	r3, r0
 8003840:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003844:	e00a      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800384c:	e006      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800384e:	bf00      	nop
 8003850:	e004      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003852:	bf00      	nop
 8003854:	e002      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800385a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10d      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003864:	4b05      	ldr	r3, [pc, #20]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003868:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003872:	4a02      	ldr	r2, [pc, #8]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003874:	430b      	orrs	r3, r1
 8003876:	6513      	str	r3, [r2, #80]	@ 0x50
 8003878:	e006      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800387a:	bf00      	nop
 800387c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003894:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003898:	2300      	movs	r3, #0
 800389a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800389e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4313      	orrs	r3, r2
 80038a6:	d055      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038b4:	d033      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80038b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ba:	d82c      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c0:	d02f      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80038c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c6:	d826      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038cc:	d02b      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80038ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038d2:	d820      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d8:	d012      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80038da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038de:	d81a      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d022      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80038e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038e8:	d115      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ee:	3308      	adds	r3, #8
 80038f0:	2101      	movs	r1, #1
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fee8 	bl	80046c8 <RCCEx_PLL2_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038fe:	e015      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003904:	3328      	adds	r3, #40	@ 0x28
 8003906:	2101      	movs	r1, #1
 8003908:	4618      	mov	r0, r3
 800390a:	f000 ff8f 	bl	800482c <RCCEx_PLL3_Config>
 800390e:	4603      	mov	r3, r0
 8003910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003914:	e00a      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800391c:	e006      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800391e:	bf00      	nop
 8003920:	e004      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003922:	bf00      	nop
 8003924:	e002      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003926:	bf00      	nop
 8003928:	e000      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800392a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800392c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10b      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003934:	4ba3      	ldr	r3, [pc, #652]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003938:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003940:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003944:	4a9f      	ldr	r2, [pc, #636]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003946:	430b      	orrs	r3, r1
 8003948:	6593      	str	r3, [r2, #88]	@ 0x58
 800394a:	e003      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003950:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003960:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003964:	2300      	movs	r3, #0
 8003966:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800396a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800396e:	460b      	mov	r3, r1
 8003970:	4313      	orrs	r3, r2
 8003972:	d037      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800397e:	d00e      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003984:	d816      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d018      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800398a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800398e:	d111      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003990:	4b8c      	ldr	r3, [pc, #560]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003994:	4a8b      	ldr	r2, [pc, #556]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800399a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800399c:	e00f      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800399e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a2:	3308      	adds	r3, #8
 80039a4:	2101      	movs	r1, #1
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fe8e 	bl	80046c8 <RCCEx_PLL2_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039b2:	e004      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039ba:	e000      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80039bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10a      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039c6:	4b7f      	ldr	r3, [pc, #508]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80039ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d4:	4a7b      	ldr	r2, [pc, #492]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039d6:	430b      	orrs	r3, r1
 80039d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80039da:	e003      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80039f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80039fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4313      	orrs	r3, r2
 8003a02:	d039      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	d81c      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a14 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a14:	08003a51 	.word	0x08003a51
 8003a18:	08003a25 	.word	0x08003a25
 8003a1c:	08003a33 	.word	0x08003a33
 8003a20:	08003a51 	.word	0x08003a51
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a24:	4b67      	ldr	r3, [pc, #412]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a28:	4a66      	ldr	r2, [pc, #408]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a30:	e00f      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a36:	3308      	adds	r3, #8
 8003a38:	2102      	movs	r1, #2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fe44 	bl	80046c8 <RCCEx_PLL2_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a46:	e004      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a4e:	e000      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a5a:	4b5a      	ldr	r3, [pc, #360]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5e:	f023 0103 	bic.w	r1, r3, #3
 8003a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a68:	4a56      	ldr	r2, [pc, #344]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a6e:	e003      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a92:	460b      	mov	r3, r1
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f000 809f 	beq.w	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a4a      	ldr	r2, [pc, #296]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aa6:	f7fd f9f9 	bl	8000e9c <HAL_GetTick>
 8003aaa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aae:	e00b      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab0:	f7fd f9f4 	bl	8000e9c <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b64      	cmp	r3, #100	@ 0x64
 8003abe:	d903      	bls.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ac6:	e005      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ac8:	4b3f      	ldr	r3, [pc, #252]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ed      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d179      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003adc:	4b39      	ldr	r3, [pc, #228]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ade:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ae8:	4053      	eors	r3, r2
 8003aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d015      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003af2:	4b34      	ldr	r3, [pc, #208]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003afa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003afe:	4b31      	ldr	r3, [pc, #196]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b02:	4a30      	ldr	r2, [pc, #192]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b08:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b14:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b16:	4a2b      	ldr	r2, [pc, #172]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b1c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b2a:	d118      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd f9b6 	bl	8000e9c <HAL_GetTick>
 8003b30:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b34:	e00d      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b36:	f7fd f9b1 	bl	8000e9c <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b40:	1ad2      	subs	r2, r2, r3
 8003b42:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d903      	bls.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003b50:	e005      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b52:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0eb      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d129      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b76:	d10e      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003b78:	4b12      	ldr	r3, [pc, #72]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b88:	091a      	lsrs	r2, r3, #4
 8003b8a:	4b10      	ldr	r3, [pc, #64]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6113      	str	r3, [r2, #16]
 8003b94:	e005      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003b96:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ba0:	6113      	str	r3, [r2, #16]
 8003ba2:	4b08      	ldr	r3, [pc, #32]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003baa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb2:	4a04      	ldr	r2, [pc, #16]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb8:	e00e      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003bc2:	e009      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003bc4:	58024400 	.word	0x58024400
 8003bc8:	58024800 	.word	0x58024800
 8003bcc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	f002 0301 	and.w	r3, r2, #1
 8003be4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003be8:	2300      	movs	r3, #0
 8003bea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f000 8089 	beq.w	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c00:	2b28      	cmp	r3, #40	@ 0x28
 8003c02:	d86b      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003c04:	a201      	add	r2, pc, #4	@ (adr r2, 8003c0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003ce5 	.word	0x08003ce5
 8003c10:	08003cdd 	.word	0x08003cdd
 8003c14:	08003cdd 	.word	0x08003cdd
 8003c18:	08003cdd 	.word	0x08003cdd
 8003c1c:	08003cdd 	.word	0x08003cdd
 8003c20:	08003cdd 	.word	0x08003cdd
 8003c24:	08003cdd 	.word	0x08003cdd
 8003c28:	08003cdd 	.word	0x08003cdd
 8003c2c:	08003cb1 	.word	0x08003cb1
 8003c30:	08003cdd 	.word	0x08003cdd
 8003c34:	08003cdd 	.word	0x08003cdd
 8003c38:	08003cdd 	.word	0x08003cdd
 8003c3c:	08003cdd 	.word	0x08003cdd
 8003c40:	08003cdd 	.word	0x08003cdd
 8003c44:	08003cdd 	.word	0x08003cdd
 8003c48:	08003cdd 	.word	0x08003cdd
 8003c4c:	08003cc7 	.word	0x08003cc7
 8003c50:	08003cdd 	.word	0x08003cdd
 8003c54:	08003cdd 	.word	0x08003cdd
 8003c58:	08003cdd 	.word	0x08003cdd
 8003c5c:	08003cdd 	.word	0x08003cdd
 8003c60:	08003cdd 	.word	0x08003cdd
 8003c64:	08003cdd 	.word	0x08003cdd
 8003c68:	08003cdd 	.word	0x08003cdd
 8003c6c:	08003ce5 	.word	0x08003ce5
 8003c70:	08003cdd 	.word	0x08003cdd
 8003c74:	08003cdd 	.word	0x08003cdd
 8003c78:	08003cdd 	.word	0x08003cdd
 8003c7c:	08003cdd 	.word	0x08003cdd
 8003c80:	08003cdd 	.word	0x08003cdd
 8003c84:	08003cdd 	.word	0x08003cdd
 8003c88:	08003cdd 	.word	0x08003cdd
 8003c8c:	08003ce5 	.word	0x08003ce5
 8003c90:	08003cdd 	.word	0x08003cdd
 8003c94:	08003cdd 	.word	0x08003cdd
 8003c98:	08003cdd 	.word	0x08003cdd
 8003c9c:	08003cdd 	.word	0x08003cdd
 8003ca0:	08003cdd 	.word	0x08003cdd
 8003ca4:	08003cdd 	.word	0x08003cdd
 8003ca8:	08003cdd 	.word	0x08003cdd
 8003cac:	08003ce5 	.word	0x08003ce5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb4:	3308      	adds	r3, #8
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fd05 	bl	80046c8 <RCCEx_PLL2_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cc4:	e00f      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cca:	3328      	adds	r3, #40	@ 0x28
 8003ccc:	2101      	movs	r1, #1
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fdac 	bl	800482c <RCCEx_PLL3_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cda:	e004      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10a      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003cee:	4bbf      	ldr	r3, [pc, #764]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cfc:	4abb      	ldr	r2, [pc, #748]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d02:	e003      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f002 0302 	and.w	r3, r2, #2
 8003d18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003d22:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003d26:	460b      	mov	r3, r1
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	d041      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d32:	2b05      	cmp	r3, #5
 8003d34:	d824      	bhi.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d36:	a201      	add	r2, pc, #4	@ (adr r2, 8003d3c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3c:	08003d89 	.word	0x08003d89
 8003d40:	08003d55 	.word	0x08003d55
 8003d44:	08003d6b 	.word	0x08003d6b
 8003d48:	08003d89 	.word	0x08003d89
 8003d4c:	08003d89 	.word	0x08003d89
 8003d50:	08003d89 	.word	0x08003d89
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d58:	3308      	adds	r3, #8
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fcb3 	bl	80046c8 <RCCEx_PLL2_Config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d68:	e00f      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6e:	3328      	adds	r3, #40	@ 0x28
 8003d70:	2101      	movs	r1, #1
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fd5a 	bl	800482c <RCCEx_PLL3_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d7e:	e004      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d86:	e000      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10a      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d92:	4b96      	ldr	r3, [pc, #600]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d96:	f023 0107 	bic.w	r1, r3, #7
 8003d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003da0:	4a92      	ldr	r2, [pc, #584]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003da2:	430b      	orrs	r3, r1
 8003da4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003da6:	e003      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db8:	f002 0304 	and.w	r3, r2, #4
 8003dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dc6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	d044      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dd8:	2b05      	cmp	r3, #5
 8003dda:	d825      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8003de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003e31 	.word	0x08003e31
 8003de8:	08003dfd 	.word	0x08003dfd
 8003dec:	08003e13 	.word	0x08003e13
 8003df0:	08003e31 	.word	0x08003e31
 8003df4:	08003e31 	.word	0x08003e31
 8003df8:	08003e31 	.word	0x08003e31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e00:	3308      	adds	r3, #8
 8003e02:	2101      	movs	r1, #1
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fc5f 	bl	80046c8 <RCCEx_PLL2_Config>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e10:	e00f      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e16:	3328      	adds	r3, #40	@ 0x28
 8003e18:	2101      	movs	r1, #1
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fd06 	bl	800482c <RCCEx_PLL3_Config>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e26:	e004      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e2e:	e000      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10b      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e3a:	4b6c      	ldr	r3, [pc, #432]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3e:	f023 0107 	bic.w	r1, r3, #7
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e4a:	4a68      	ldr	r2, [pc, #416]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e50:	e003      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	f002 0320 	and.w	r3, r2, #32
 8003e66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e74:	460b      	mov	r3, r1
 8003e76:	4313      	orrs	r3, r2
 8003e78:	d055      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e86:	d033      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e8c:	d82c      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e92:	d02f      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e98:	d826      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e9e:	d02b      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003ea0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ea4:	d820      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ea6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eaa:	d012      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eb0:	d81a      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d022      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003eb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eba:	d115      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec0:	3308      	adds	r3, #8
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fbff 	bl	80046c8 <RCCEx_PLL2_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ed0:	e015      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed6:	3328      	adds	r3, #40	@ 0x28
 8003ed8:	2102      	movs	r1, #2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fca6 	bl	800482c <RCCEx_PLL3_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ee6:	e00a      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eee:	e006      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ef0:	bf00      	nop
 8003ef2:	e004      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ef4:	bf00      	nop
 8003ef6:	e002      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ef8:	bf00      	nop
 8003efa:	e000      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10b      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f06:	4b39      	ldr	r3, [pc, #228]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f16:	4a35      	ldr	r2, [pc, #212]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f1c:	e003      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f36:	2300      	movs	r3, #0
 8003f38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003f3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4313      	orrs	r3, r2
 8003f44:	d058      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f4e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f52:	d033      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f54:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f58:	d82c      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f5e:	d02f      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003f60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f64:	d826      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f6a:	d02b      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003f6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f70:	d820      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f76:	d012      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003f78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f7c:	d81a      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d022      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f86:	d115      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fb99 	bl	80046c8 <RCCEx_PLL2_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f9c:	e015      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa2:	3328      	adds	r3, #40	@ 0x28
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fc40 	bl	800482c <RCCEx_PLL3_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fb2:	e00a      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fba:	e006      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fbc:	bf00      	nop
 8003fbe:	e004      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fc0:	bf00      	nop
 8003fc2:	e002      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fc4:	bf00      	nop
 8003fc6:	e000      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fd2:	4b06      	ldr	r3, [pc, #24]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fe2:	4a02      	ldr	r2, [pc, #8]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fe8:	e006      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003fea:	bf00      	nop
 8003fec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004004:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004008:	2300      	movs	r3, #0
 800400a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800400e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004012:	460b      	mov	r3, r1
 8004014:	4313      	orrs	r3, r2
 8004016:	d055      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004020:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004024:	d033      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004026:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800402a:	d82c      	bhi.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800402c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004030:	d02f      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004032:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004036:	d826      	bhi.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004038:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800403c:	d02b      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800403e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004042:	d820      	bhi.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004044:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004048:	d012      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800404a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800404e:	d81a      	bhi.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d022      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004058:	d115      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800405a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405e:	3308      	adds	r3, #8
 8004060:	2100      	movs	r1, #0
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fb30 	bl	80046c8 <RCCEx_PLL2_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800406e:	e015      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004074:	3328      	adds	r3, #40	@ 0x28
 8004076:	2102      	movs	r1, #2
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fbd7 	bl	800482c <RCCEx_PLL3_Config>
 800407e:	4603      	mov	r3, r0
 8004080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004084:	e00a      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800408c:	e006      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800408e:	bf00      	nop
 8004090:	e004      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004092:	bf00      	nop
 8004094:	e002      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004096:	bf00      	nop
 8004098:	e000      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800409a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10b      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040a4:	4ba1      	ldr	r3, [pc, #644]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80040ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040b4:	4a9d      	ldr	r2, [pc, #628]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040b6:	430b      	orrs	r3, r1
 80040b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ba:	e003      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040cc:	f002 0308 	and.w	r3, r2, #8
 80040d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040d4:	2300      	movs	r3, #0
 80040d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80040da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80040de:	460b      	mov	r3, r1
 80040e0:	4313      	orrs	r3, r2
 80040e2:	d01e      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f0:	d10c      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f6:	3328      	adds	r3, #40	@ 0x28
 80040f8:	2102      	movs	r1, #2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fb96 	bl	800482c <RCCEx_PLL3_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800410c:	4b87      	ldr	r3, [pc, #540]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800410e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004110:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800411c:	4a83      	ldr	r2, [pc, #524]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800411e:	430b      	orrs	r3, r1
 8004120:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412a:	f002 0310 	and.w	r3, r2, #16
 800412e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004132:	2300      	movs	r3, #0
 8004134:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004138:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800413c:	460b      	mov	r3, r1
 800413e:	4313      	orrs	r3, r2
 8004140:	d01e      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004146:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800414a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800414e:	d10c      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004154:	3328      	adds	r3, #40	@ 0x28
 8004156:	2102      	movs	r1, #2
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fb67 	bl	800482c <RCCEx_PLL3_Config>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800416a:	4b70      	ldr	r3, [pc, #448]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800416c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004176:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800417a:	4a6c      	ldr	r2, [pc, #432]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800417c:	430b      	orrs	r3, r1
 800417e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800418c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004190:	2300      	movs	r3, #0
 8004192:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004196:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800419a:	460b      	mov	r3, r1
 800419c:	4313      	orrs	r3, r2
 800419e:	d03e      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041ac:	d022      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80041ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041b2:	d81b      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80041b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041bc:	d00b      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80041be:	e015      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c4:	3308      	adds	r3, #8
 80041c6:	2100      	movs	r1, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fa7d 	bl	80046c8 <RCCEx_PLL2_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041d4:	e00f      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041da:	3328      	adds	r3, #40	@ 0x28
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fb24 	bl	800482c <RCCEx_PLL3_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041ea:	e004      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041f2:	e000      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80041f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10b      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041fe:	4b4b      	ldr	r3, [pc, #300]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004202:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800420e:	4a47      	ldr	r2, [pc, #284]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004210:	430b      	orrs	r3, r1
 8004212:	6593      	str	r3, [r2, #88]	@ 0x58
 8004214:	e003      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800421a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800421e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004226:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800422a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800422c:	2300      	movs	r3, #0
 800422e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004230:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004234:	460b      	mov	r3, r1
 8004236:	4313      	orrs	r3, r2
 8004238:	d03b      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800423a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004242:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004246:	d01f      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004248:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800424c:	d818      	bhi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800424e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004252:	d003      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004254:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004258:	d007      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800425a:	e011      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425c:	4b33      	ldr	r3, [pc, #204]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800425e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004260:	4a32      	ldr	r2, [pc, #200]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004266:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004268:	e00f      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426e:	3328      	adds	r3, #40	@ 0x28
 8004270:	2101      	movs	r1, #1
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fada 	bl	800482c <RCCEx_PLL3_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800427e:	e004      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004286:	e000      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10b      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004292:	4b26      	ldr	r3, [pc, #152]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004296:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800429a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a2:	4a22      	ldr	r2, [pc, #136]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80042a8:	e003      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80042be:	673b      	str	r3, [r7, #112]	@ 0x70
 80042c0:	2300      	movs	r3, #0
 80042c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80042c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80042c8:	460b      	mov	r3, r1
 80042ca:	4313      	orrs	r3, r2
 80042cc:	d034      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80042d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042dc:	d007      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80042de:	e011      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e0:	4b12      	ldr	r3, [pc, #72]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	4a11      	ldr	r2, [pc, #68]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042ec:	e00e      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f2:	3308      	adds	r3, #8
 80042f4:	2102      	movs	r1, #2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f9e6 	bl	80046c8 <RCCEx_PLL2_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004302:	e003      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800430a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10d      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004314:	4b05      	ldr	r3, [pc, #20]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004318:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800431c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004322:	4a02      	ldr	r2, [pc, #8]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004324:	430b      	orrs	r3, r1
 8004326:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004328:	e006      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800432a:	bf00      	nop
 800432c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004334:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004344:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004346:	2300      	movs	r3, #0
 8004348:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800434a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800434e:	460b      	mov	r3, r1
 8004350:	4313      	orrs	r3, r2
 8004352:	d00c      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004358:	3328      	adds	r3, #40	@ 0x28
 800435a:	2102      	movs	r1, #2
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fa65 	bl	800482c <RCCEx_PLL3_Config>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800437a:	663b      	str	r3, [r7, #96]	@ 0x60
 800437c:	2300      	movs	r3, #0
 800437e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004380:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004384:	460b      	mov	r3, r1
 8004386:	4313      	orrs	r3, r2
 8004388:	d038      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800438a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004396:	d018      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004398:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800439c:	d811      	bhi.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800439e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a2:	d014      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80043a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a8:	d80b      	bhi.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d011      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80043ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043b2:	d106      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b4:	4bc3      	ldr	r3, [pc, #780]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b8:	4ac2      	ldr	r2, [pc, #776]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043c0:	e008      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043c8:	e004      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043ca:	bf00      	nop
 80043cc:	e002      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043ce:	bf00      	nop
 80043d0:	e000      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10b      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043dc:	4bb9      	ldr	r3, [pc, #740]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ec:	4ab5      	ldr	r2, [pc, #724]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ee:	430b      	orrs	r3, r1
 80043f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80043f2:	e003      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004404:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004408:	65bb      	str	r3, [r7, #88]	@ 0x58
 800440a:	2300      	movs	r3, #0
 800440c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800440e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004412:	460b      	mov	r3, r1
 8004414:	4313      	orrs	r3, r2
 8004416:	d009      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004418:	4baa      	ldr	r3, [pc, #680]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800441a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800441c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004426:	4aa7      	ldr	r2, [pc, #668]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004428:	430b      	orrs	r3, r1
 800442a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800442c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004438:	653b      	str	r3, [r7, #80]	@ 0x50
 800443a:	2300      	movs	r3, #0
 800443c:	657b      	str	r3, [r7, #84]	@ 0x54
 800443e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004442:	460b      	mov	r3, r1
 8004444:	4313      	orrs	r3, r2
 8004446:	d00a      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004448:	4b9e      	ldr	r3, [pc, #632]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004454:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004458:	4a9a      	ldr	r2, [pc, #616]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800445a:	430b      	orrs	r3, r1
 800445c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800445e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800446a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800446c:	2300      	movs	r3, #0
 800446e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004470:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004474:	460b      	mov	r3, r1
 8004476:	4313      	orrs	r3, r2
 8004478:	d009      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800447a:	4b92      	ldr	r3, [pc, #584]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800447c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800447e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004488:	4a8e      	ldr	r2, [pc, #568]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800448a:	430b      	orrs	r3, r1
 800448c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800448e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800449a:	643b      	str	r3, [r7, #64]	@ 0x40
 800449c:	2300      	movs	r3, #0
 800449e:	647b      	str	r3, [r7, #68]	@ 0x44
 80044a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80044a4:	460b      	mov	r3, r1
 80044a6:	4313      	orrs	r3, r2
 80044a8:	d00e      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044aa:	4b86      	ldr	r3, [pc, #536]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	4a85      	ldr	r2, [pc, #532]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044b4:	6113      	str	r3, [r2, #16]
 80044b6:	4b83      	ldr	r3, [pc, #524]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b8:	6919      	ldr	r1, [r3, #16]
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80044c2:	4a80      	ldr	r2, [pc, #512]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044c4:	430b      	orrs	r3, r1
 80044c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80044d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044d6:	2300      	movs	r3, #0
 80044d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80044de:	460b      	mov	r3, r1
 80044e0:	4313      	orrs	r3, r2
 80044e2:	d009      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044e4:	4b77      	ldr	r3, [pc, #476]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80044ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f2:	4a74      	ldr	r2, [pc, #464]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044f4:	430b      	orrs	r3, r1
 80044f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004504:	633b      	str	r3, [r7, #48]	@ 0x30
 8004506:	2300      	movs	r3, #0
 8004508:	637b      	str	r3, [r7, #52]	@ 0x34
 800450a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800450e:	460b      	mov	r3, r1
 8004510:	4313      	orrs	r3, r2
 8004512:	d00a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004514:	4b6b      	ldr	r3, [pc, #428]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004518:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800451c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004524:	4a67      	ldr	r2, [pc, #412]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004526:	430b      	orrs	r3, r1
 8004528:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800452a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004532:	2100      	movs	r1, #0
 8004534:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800453c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004540:	460b      	mov	r3, r1
 8004542:	4313      	orrs	r3, r2
 8004544:	d011      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454a:	3308      	adds	r3, #8
 800454c:	2100      	movs	r1, #0
 800454e:	4618      	mov	r0, r3
 8004550:	f000 f8ba 	bl	80046c8 <RCCEx_PLL2_Config>
 8004554:	4603      	mov	r3, r0
 8004556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800455a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800456a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004572:	2100      	movs	r1, #0
 8004574:	6239      	str	r1, [r7, #32]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	627b      	str	r3, [r7, #36]	@ 0x24
 800457c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004580:	460b      	mov	r3, r1
 8004582:	4313      	orrs	r3, r2
 8004584:	d011      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458a:	3308      	adds	r3, #8
 800458c:	2101      	movs	r1, #1
 800458e:	4618      	mov	r0, r3
 8004590:	f000 f89a 	bl	80046c8 <RCCEx_PLL2_Config>
 8004594:	4603      	mov	r3, r0
 8004596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800459a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	2100      	movs	r1, #0
 80045b4:	61b9      	str	r1, [r7, #24]
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045c0:	460b      	mov	r3, r1
 80045c2:	4313      	orrs	r3, r2
 80045c4:	d011      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ca:	3308      	adds	r3, #8
 80045cc:	2102      	movs	r1, #2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f87a 	bl	80046c8 <RCCEx_PLL2_Config>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	2100      	movs	r1, #0
 80045f4:	6139      	str	r1, [r7, #16]
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004600:	460b      	mov	r3, r1
 8004602:	4313      	orrs	r3, r2
 8004604:	d011      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460a:	3328      	adds	r3, #40	@ 0x28
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f90c 	bl	800482c <RCCEx_PLL3_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800461a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004626:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800462a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	2100      	movs	r1, #0
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004640:	460b      	mov	r3, r1
 8004642:	4313      	orrs	r3, r2
 8004644:	d011      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464a:	3328      	adds	r3, #40	@ 0x28
 800464c:	2101      	movs	r1, #1
 800464e:	4618      	mov	r0, r3
 8004650:	f000 f8ec 	bl	800482c <RCCEx_PLL3_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800465a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004666:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	2100      	movs	r1, #0
 8004674:	6039      	str	r1, [r7, #0]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004680:	460b      	mov	r3, r1
 8004682:	4313      	orrs	r3, r2
 8004684:	d011      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468a:	3328      	adds	r3, #40	@ 0x28
 800468c:	2102      	movs	r1, #2
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f8cc 	bl	800482c <RCCEx_PLL3_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800469a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80046aa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e000      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80046be:	46bd      	mov	sp, r7
 80046c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c4:	58024400 	.word	0x58024400

080046c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046d6:	4b53      	ldr	r3, [pc, #332]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 80046d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d101      	bne.n	80046e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e099      	b.n	800481a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80046e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a4e      	ldr	r2, [pc, #312]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 80046ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f2:	f7fc fbd3 	bl	8000e9c <HAL_GetTick>
 80046f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80046f8:	e008      	b.n	800470c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80046fa:	f7fc fbcf 	bl	8000e9c <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e086      	b.n	800481a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800470c:	4b45      	ldr	r3, [pc, #276]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1f0      	bne.n	80046fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004718:	4b42      	ldr	r3, [pc, #264]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 800471a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	031b      	lsls	r3, r3, #12
 8004726:	493f      	ldr	r1, [pc, #252]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 8004728:	4313      	orrs	r3, r2
 800472a:	628b      	str	r3, [r1, #40]	@ 0x28
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	3b01      	subs	r3, #1
 8004732:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	3b01      	subs	r3, #1
 800473c:	025b      	lsls	r3, r3, #9
 800473e:	b29b      	uxth	r3, r3
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	3b01      	subs	r3, #1
 8004748:	041b      	lsls	r3, r3, #16
 800474a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	3b01      	subs	r3, #1
 8004756:	061b      	lsls	r3, r3, #24
 8004758:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800475c:	4931      	ldr	r1, [pc, #196]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 800475e:	4313      	orrs	r3, r2
 8004760:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004762:	4b30      	ldr	r3, [pc, #192]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	492d      	ldr	r1, [pc, #180]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 8004770:	4313      	orrs	r3, r2
 8004772:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004774:	4b2b      	ldr	r3, [pc, #172]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 8004776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004778:	f023 0220 	bic.w	r2, r3, #32
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	4928      	ldr	r1, [pc, #160]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 8004782:	4313      	orrs	r3, r2
 8004784:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004786:	4b27      	ldr	r3, [pc, #156]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 8004788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478a:	4a26      	ldr	r2, [pc, #152]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 800478c:	f023 0310 	bic.w	r3, r3, #16
 8004790:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004792:	4b24      	ldr	r3, [pc, #144]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 8004794:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004796:	4b24      	ldr	r3, [pc, #144]	@ (8004828 <RCCEx_PLL2_Config+0x160>)
 8004798:	4013      	ands	r3, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	69d2      	ldr	r2, [r2, #28]
 800479e:	00d2      	lsls	r2, r2, #3
 80047a0:	4920      	ldr	r1, [pc, #128]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80047a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 80047a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 80047ac:	f043 0310 	orr.w	r3, r3, #16
 80047b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d106      	bne.n	80047c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 80047ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047bc:	4a19      	ldr	r2, [pc, #100]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 80047be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047c4:	e00f      	b.n	80047e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d106      	bne.n	80047da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80047cc:	4b15      	ldr	r3, [pc, #84]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d0:	4a14      	ldr	r2, [pc, #80]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 80047d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047d8:	e005      	b.n	80047e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80047da:	4b12      	ldr	r3, [pc, #72]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 80047dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047de:	4a11      	ldr	r2, [pc, #68]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 80047e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80047e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80047e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 80047ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80047f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f2:	f7fc fb53 	bl	8000e9c <HAL_GetTick>
 80047f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80047f8:	e008      	b.n	800480c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80047fa:	f7fc fb4f 	bl	8000e9c <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e006      	b.n	800481a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800480c:	4b05      	ldr	r3, [pc, #20]	@ (8004824 <RCCEx_PLL2_Config+0x15c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004818:	7bfb      	ldrb	r3, [r7, #15]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	58024400 	.word	0x58024400
 8004828:	ffff0007 	.word	0xffff0007

0800482c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800483a:	4b53      	ldr	r3, [pc, #332]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 800483c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b03      	cmp	r3, #3
 8004844:	d101      	bne.n	800484a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e099      	b.n	800497e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800484a:	4b4f      	ldr	r3, [pc, #316]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a4e      	ldr	r2, [pc, #312]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 8004850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004856:	f7fc fb21 	bl	8000e9c <HAL_GetTick>
 800485a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800485c:	e008      	b.n	8004870 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800485e:	f7fc fb1d 	bl	8000e9c <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e086      	b.n	800497e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004870:	4b45      	ldr	r3, [pc, #276]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f0      	bne.n	800485e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800487c:	4b42      	ldr	r3, [pc, #264]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 800487e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004880:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	051b      	lsls	r3, r3, #20
 800488a:	493f      	ldr	r1, [pc, #252]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 800488c:	4313      	orrs	r3, r2
 800488e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	3b01      	subs	r3, #1
 8004896:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	3b01      	subs	r3, #1
 80048a0:	025b      	lsls	r3, r3, #9
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	041b      	lsls	r3, r3, #16
 80048ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	061b      	lsls	r3, r3, #24
 80048bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80048c0:	4931      	ldr	r1, [pc, #196]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80048c6:	4b30      	ldr	r3, [pc, #192]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 80048c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	492d      	ldr	r1, [pc, #180]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80048d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 80048da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	4928      	ldr	r1, [pc, #160]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80048ea:	4b27      	ldr	r3, [pc, #156]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 80048ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ee:	4a26      	ldr	r2, [pc, #152]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 80048f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80048f6:	4b24      	ldr	r3, [pc, #144]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 80048f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048fa:	4b24      	ldr	r3, [pc, #144]	@ (800498c <RCCEx_PLL3_Config+0x160>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	69d2      	ldr	r2, [r2, #28]
 8004902:	00d2      	lsls	r2, r2, #3
 8004904:	4920      	ldr	r1, [pc, #128]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 8004906:	4313      	orrs	r3, r2
 8004908:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800490a:	4b1f      	ldr	r3, [pc, #124]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 800490c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490e:	4a1e      	ldr	r2, [pc, #120]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 8004910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004914:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d106      	bne.n	800492a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800491c:	4b1a      	ldr	r3, [pc, #104]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 800491e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004920:	4a19      	ldr	r2, [pc, #100]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 8004922:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004926:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004928:	e00f      	b.n	800494a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d106      	bne.n	800493e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004930:	4b15      	ldr	r3, [pc, #84]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 8004932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004934:	4a14      	ldr	r2, [pc, #80]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 8004936:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800493a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800493c:	e005      	b.n	800494a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800493e:	4b12      	ldr	r3, [pc, #72]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 8004940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004942:	4a11      	ldr	r2, [pc, #68]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 8004944:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004948:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800494a:	4b0f      	ldr	r3, [pc, #60]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a0e      	ldr	r2, [pc, #56]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 8004950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004956:	f7fc faa1 	bl	8000e9c <HAL_GetTick>
 800495a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800495c:	e008      	b.n	8004970 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800495e:	f7fc fa9d 	bl	8000e9c <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e006      	b.n	800497e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004970:	4b05      	ldr	r3, [pc, #20]	@ (8004988 <RCCEx_PLL3_Config+0x15c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0f0      	beq.n	800495e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	58024400 	.word	0x58024400
 800498c:	ffff0007 	.word	0xffff0007

08004990 <__cvt>:
 8004990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004992:	ed2d 8b02 	vpush	{d8}
 8004996:	eeb0 8b40 	vmov.f64	d8, d0
 800499a:	b085      	sub	sp, #20
 800499c:	4617      	mov	r7, r2
 800499e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80049a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049a2:	ee18 2a90 	vmov	r2, s17
 80049a6:	f025 0520 	bic.w	r5, r5, #32
 80049aa:	2a00      	cmp	r2, #0
 80049ac:	bfb6      	itet	lt
 80049ae:	222d      	movlt	r2, #45	@ 0x2d
 80049b0:	2200      	movge	r2, #0
 80049b2:	eeb1 8b40 	vneglt.f64	d8, d0
 80049b6:	2d46      	cmp	r5, #70	@ 0x46
 80049b8:	460c      	mov	r4, r1
 80049ba:	701a      	strb	r2, [r3, #0]
 80049bc:	d004      	beq.n	80049c8 <__cvt+0x38>
 80049be:	2d45      	cmp	r5, #69	@ 0x45
 80049c0:	d100      	bne.n	80049c4 <__cvt+0x34>
 80049c2:	3401      	adds	r4, #1
 80049c4:	2102      	movs	r1, #2
 80049c6:	e000      	b.n	80049ca <__cvt+0x3a>
 80049c8:	2103      	movs	r1, #3
 80049ca:	ab03      	add	r3, sp, #12
 80049cc:	9301      	str	r3, [sp, #4]
 80049ce:	ab02      	add	r3, sp, #8
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	4622      	mov	r2, r4
 80049d4:	4633      	mov	r3, r6
 80049d6:	eeb0 0b48 	vmov.f64	d0, d8
 80049da:	f000 ff25 	bl	8005828 <_dtoa_r>
 80049de:	2d47      	cmp	r5, #71	@ 0x47
 80049e0:	d114      	bne.n	8004a0c <__cvt+0x7c>
 80049e2:	07fb      	lsls	r3, r7, #31
 80049e4:	d50a      	bpl.n	80049fc <__cvt+0x6c>
 80049e6:	1902      	adds	r2, r0, r4
 80049e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80049ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f0:	bf08      	it	eq
 80049f2:	9203      	streq	r2, [sp, #12]
 80049f4:	2130      	movs	r1, #48	@ 0x30
 80049f6:	9b03      	ldr	r3, [sp, #12]
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d319      	bcc.n	8004a30 <__cvt+0xa0>
 80049fc:	9b03      	ldr	r3, [sp, #12]
 80049fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a00:	1a1b      	subs	r3, r3, r0
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	b005      	add	sp, #20
 8004a06:	ecbd 8b02 	vpop	{d8}
 8004a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a0c:	2d46      	cmp	r5, #70	@ 0x46
 8004a0e:	eb00 0204 	add.w	r2, r0, r4
 8004a12:	d1e9      	bne.n	80049e8 <__cvt+0x58>
 8004a14:	7803      	ldrb	r3, [r0, #0]
 8004a16:	2b30      	cmp	r3, #48	@ 0x30
 8004a18:	d107      	bne.n	8004a2a <__cvt+0x9a>
 8004a1a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a22:	bf1c      	itt	ne
 8004a24:	f1c4 0401 	rsbne	r4, r4, #1
 8004a28:	6034      	strne	r4, [r6, #0]
 8004a2a:	6833      	ldr	r3, [r6, #0]
 8004a2c:	441a      	add	r2, r3
 8004a2e:	e7db      	b.n	80049e8 <__cvt+0x58>
 8004a30:	1c5c      	adds	r4, r3, #1
 8004a32:	9403      	str	r4, [sp, #12]
 8004a34:	7019      	strb	r1, [r3, #0]
 8004a36:	e7de      	b.n	80049f6 <__cvt+0x66>

08004a38 <__exponent>:
 8004a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a3a:	2900      	cmp	r1, #0
 8004a3c:	bfba      	itte	lt
 8004a3e:	4249      	neglt	r1, r1
 8004a40:	232d      	movlt	r3, #45	@ 0x2d
 8004a42:	232b      	movge	r3, #43	@ 0x2b
 8004a44:	2909      	cmp	r1, #9
 8004a46:	7002      	strb	r2, [r0, #0]
 8004a48:	7043      	strb	r3, [r0, #1]
 8004a4a:	dd29      	ble.n	8004aa0 <__exponent+0x68>
 8004a4c:	f10d 0307 	add.w	r3, sp, #7
 8004a50:	461d      	mov	r5, r3
 8004a52:	270a      	movs	r7, #10
 8004a54:	461a      	mov	r2, r3
 8004a56:	fbb1 f6f7 	udiv	r6, r1, r7
 8004a5a:	fb07 1416 	mls	r4, r7, r6, r1
 8004a5e:	3430      	adds	r4, #48	@ 0x30
 8004a60:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a64:	460c      	mov	r4, r1
 8004a66:	2c63      	cmp	r4, #99	@ 0x63
 8004a68:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a6c:	4631      	mov	r1, r6
 8004a6e:	dcf1      	bgt.n	8004a54 <__exponent+0x1c>
 8004a70:	3130      	adds	r1, #48	@ 0x30
 8004a72:	1e94      	subs	r4, r2, #2
 8004a74:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a78:	1c41      	adds	r1, r0, #1
 8004a7a:	4623      	mov	r3, r4
 8004a7c:	42ab      	cmp	r3, r5
 8004a7e:	d30a      	bcc.n	8004a96 <__exponent+0x5e>
 8004a80:	f10d 0309 	add.w	r3, sp, #9
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	42ac      	cmp	r4, r5
 8004a88:	bf88      	it	hi
 8004a8a:	2300      	movhi	r3, #0
 8004a8c:	3302      	adds	r3, #2
 8004a8e:	4403      	add	r3, r0
 8004a90:	1a18      	subs	r0, r3, r0
 8004a92:	b003      	add	sp, #12
 8004a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a96:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a9a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a9e:	e7ed      	b.n	8004a7c <__exponent+0x44>
 8004aa0:	2330      	movs	r3, #48	@ 0x30
 8004aa2:	3130      	adds	r1, #48	@ 0x30
 8004aa4:	7083      	strb	r3, [r0, #2]
 8004aa6:	70c1      	strb	r1, [r0, #3]
 8004aa8:	1d03      	adds	r3, r0, #4
 8004aaa:	e7f1      	b.n	8004a90 <__exponent+0x58>
 8004aac:	0000      	movs	r0, r0
	...

08004ab0 <_printf_float>:
 8004ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab4:	b08d      	sub	sp, #52	@ 0x34
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004abc:	4616      	mov	r6, r2
 8004abe:	461f      	mov	r7, r3
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	f000 fdaf 	bl	8005624 <_localeconv_r>
 8004ac6:	f8d0 b000 	ldr.w	fp, [r0]
 8004aca:	4658      	mov	r0, fp
 8004acc:	f7fb fc58 	bl	8000380 <strlen>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ad8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004adc:	6822      	ldr	r2, [r4, #0]
 8004ade:	9005      	str	r0, [sp, #20]
 8004ae0:	3307      	adds	r3, #7
 8004ae2:	f023 0307 	bic.w	r3, r3, #7
 8004ae6:	f103 0108 	add.w	r1, r3, #8
 8004aea:	f8c8 1000 	str.w	r1, [r8]
 8004aee:	ed93 0b00 	vldr	d0, [r3]
 8004af2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8004d50 <_printf_float+0x2a0>
 8004af6:	eeb0 7bc0 	vabs.f64	d7, d0
 8004afa:	eeb4 7b46 	vcmp.f64	d7, d6
 8004afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b02:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8004b06:	dd24      	ble.n	8004b52 <_printf_float+0xa2>
 8004b08:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b10:	d502      	bpl.n	8004b18 <_printf_float+0x68>
 8004b12:	232d      	movs	r3, #45	@ 0x2d
 8004b14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b18:	498f      	ldr	r1, [pc, #572]	@ (8004d58 <_printf_float+0x2a8>)
 8004b1a:	4b90      	ldr	r3, [pc, #576]	@ (8004d5c <_printf_float+0x2ac>)
 8004b1c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8004b20:	bf94      	ite	ls
 8004b22:	4688      	movls	r8, r1
 8004b24:	4698      	movhi	r8, r3
 8004b26:	f022 0204 	bic.w	r2, r2, #4
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	6123      	str	r3, [r4, #16]
 8004b2e:	6022      	str	r2, [r4, #0]
 8004b30:	f04f 0a00 	mov.w	sl, #0
 8004b34:	9700      	str	r7, [sp, #0]
 8004b36:	4633      	mov	r3, r6
 8004b38:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f000 f9d1 	bl	8004ee4 <_printf_common>
 8004b42:	3001      	adds	r0, #1
 8004b44:	f040 8089 	bne.w	8004c5a <_printf_float+0x1aa>
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4c:	b00d      	add	sp, #52	@ 0x34
 8004b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b52:	eeb4 0b40 	vcmp.f64	d0, d0
 8004b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5a:	d709      	bvc.n	8004b70 <_printf_float+0xc0>
 8004b5c:	ee10 3a90 	vmov	r3, s1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bfbc      	itt	lt
 8004b64:	232d      	movlt	r3, #45	@ 0x2d
 8004b66:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004b6a:	497d      	ldr	r1, [pc, #500]	@ (8004d60 <_printf_float+0x2b0>)
 8004b6c:	4b7d      	ldr	r3, [pc, #500]	@ (8004d64 <_printf_float+0x2b4>)
 8004b6e:	e7d5      	b.n	8004b1c <_printf_float+0x6c>
 8004b70:	6863      	ldr	r3, [r4, #4]
 8004b72:	1c59      	adds	r1, r3, #1
 8004b74:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8004b78:	d139      	bne.n	8004bee <_printf_float+0x13e>
 8004b7a:	2306      	movs	r3, #6
 8004b7c:	6063      	str	r3, [r4, #4]
 8004b7e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b82:	2300      	movs	r3, #0
 8004b84:	6022      	str	r2, [r4, #0]
 8004b86:	9303      	str	r3, [sp, #12]
 8004b88:	ab0a      	add	r3, sp, #40	@ 0x28
 8004b8a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004b8e:	ab09      	add	r3, sp, #36	@ 0x24
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	6861      	ldr	r1, [r4, #4]
 8004b94:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004b98:	4628      	mov	r0, r5
 8004b9a:	f7ff fef9 	bl	8004990 <__cvt>
 8004b9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004ba2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004ba4:	4680      	mov	r8, r0
 8004ba6:	d129      	bne.n	8004bfc <_printf_float+0x14c>
 8004ba8:	1cc8      	adds	r0, r1, #3
 8004baa:	db02      	blt.n	8004bb2 <_printf_float+0x102>
 8004bac:	6863      	ldr	r3, [r4, #4]
 8004bae:	4299      	cmp	r1, r3
 8004bb0:	dd41      	ble.n	8004c36 <_printf_float+0x186>
 8004bb2:	f1a9 0902 	sub.w	r9, r9, #2
 8004bb6:	fa5f f989 	uxtb.w	r9, r9
 8004bba:	3901      	subs	r1, #1
 8004bbc:	464a      	mov	r2, r9
 8004bbe:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004bc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8004bc4:	f7ff ff38 	bl	8004a38 <__exponent>
 8004bc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004bca:	1813      	adds	r3, r2, r0
 8004bcc:	2a01      	cmp	r2, #1
 8004bce:	4682      	mov	sl, r0
 8004bd0:	6123      	str	r3, [r4, #16]
 8004bd2:	dc02      	bgt.n	8004bda <_printf_float+0x12a>
 8004bd4:	6822      	ldr	r2, [r4, #0]
 8004bd6:	07d2      	lsls	r2, r2, #31
 8004bd8:	d501      	bpl.n	8004bde <_printf_float+0x12e>
 8004bda:	3301      	adds	r3, #1
 8004bdc:	6123      	str	r3, [r4, #16]
 8004bde:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0a6      	beq.n	8004b34 <_printf_float+0x84>
 8004be6:	232d      	movs	r3, #45	@ 0x2d
 8004be8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bec:	e7a2      	b.n	8004b34 <_printf_float+0x84>
 8004bee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004bf2:	d1c4      	bne.n	8004b7e <_printf_float+0xce>
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1c2      	bne.n	8004b7e <_printf_float+0xce>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e7bf      	b.n	8004b7c <_printf_float+0xcc>
 8004bfc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004c00:	d9db      	bls.n	8004bba <_printf_float+0x10a>
 8004c02:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8004c06:	d118      	bne.n	8004c3a <_printf_float+0x18a>
 8004c08:	2900      	cmp	r1, #0
 8004c0a:	6863      	ldr	r3, [r4, #4]
 8004c0c:	dd0b      	ble.n	8004c26 <_printf_float+0x176>
 8004c0e:	6121      	str	r1, [r4, #16]
 8004c10:	b913      	cbnz	r3, 8004c18 <_printf_float+0x168>
 8004c12:	6822      	ldr	r2, [r4, #0]
 8004c14:	07d0      	lsls	r0, r2, #31
 8004c16:	d502      	bpl.n	8004c1e <_printf_float+0x16e>
 8004c18:	3301      	adds	r3, #1
 8004c1a:	440b      	add	r3, r1
 8004c1c:	6123      	str	r3, [r4, #16]
 8004c1e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004c20:	f04f 0a00 	mov.w	sl, #0
 8004c24:	e7db      	b.n	8004bde <_printf_float+0x12e>
 8004c26:	b913      	cbnz	r3, 8004c2e <_printf_float+0x17e>
 8004c28:	6822      	ldr	r2, [r4, #0]
 8004c2a:	07d2      	lsls	r2, r2, #31
 8004c2c:	d501      	bpl.n	8004c32 <_printf_float+0x182>
 8004c2e:	3302      	adds	r3, #2
 8004c30:	e7f4      	b.n	8004c1c <_printf_float+0x16c>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e7f2      	b.n	8004c1c <_printf_float+0x16c>
 8004c36:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8004c3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c3c:	4299      	cmp	r1, r3
 8004c3e:	db05      	blt.n	8004c4c <_printf_float+0x19c>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	6121      	str	r1, [r4, #16]
 8004c44:	07d8      	lsls	r0, r3, #31
 8004c46:	d5ea      	bpl.n	8004c1e <_printf_float+0x16e>
 8004c48:	1c4b      	adds	r3, r1, #1
 8004c4a:	e7e7      	b.n	8004c1c <_printf_float+0x16c>
 8004c4c:	2900      	cmp	r1, #0
 8004c4e:	bfd4      	ite	le
 8004c50:	f1c1 0202 	rsble	r2, r1, #2
 8004c54:	2201      	movgt	r2, #1
 8004c56:	4413      	add	r3, r2
 8004c58:	e7e0      	b.n	8004c1c <_printf_float+0x16c>
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	055a      	lsls	r2, r3, #21
 8004c5e:	d407      	bmi.n	8004c70 <_printf_float+0x1c0>
 8004c60:	6923      	ldr	r3, [r4, #16]
 8004c62:	4642      	mov	r2, r8
 8004c64:	4631      	mov	r1, r6
 8004c66:	4628      	mov	r0, r5
 8004c68:	47b8      	blx	r7
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	d12a      	bne.n	8004cc4 <_printf_float+0x214>
 8004c6e:	e76b      	b.n	8004b48 <_printf_float+0x98>
 8004c70:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004c74:	f240 80e0 	bls.w	8004e38 <_printf_float+0x388>
 8004c78:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004c7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c84:	d133      	bne.n	8004cee <_printf_float+0x23e>
 8004c86:	4a38      	ldr	r2, [pc, #224]	@ (8004d68 <_printf_float+0x2b8>)
 8004c88:	2301      	movs	r3, #1
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	47b8      	blx	r7
 8004c90:	3001      	adds	r0, #1
 8004c92:	f43f af59 	beq.w	8004b48 <_printf_float+0x98>
 8004c96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004c9a:	4543      	cmp	r3, r8
 8004c9c:	db02      	blt.n	8004ca4 <_printf_float+0x1f4>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	07d8      	lsls	r0, r3, #31
 8004ca2:	d50f      	bpl.n	8004cc4 <_printf_float+0x214>
 8004ca4:	9b05      	ldr	r3, [sp, #20]
 8004ca6:	465a      	mov	r2, fp
 8004ca8:	4631      	mov	r1, r6
 8004caa:	4628      	mov	r0, r5
 8004cac:	47b8      	blx	r7
 8004cae:	3001      	adds	r0, #1
 8004cb0:	f43f af4a 	beq.w	8004b48 <_printf_float+0x98>
 8004cb4:	f04f 0900 	mov.w	r9, #0
 8004cb8:	f108 38ff 	add.w	r8, r8, #4294967295
 8004cbc:	f104 0a1a 	add.w	sl, r4, #26
 8004cc0:	45c8      	cmp	r8, r9
 8004cc2:	dc09      	bgt.n	8004cd8 <_printf_float+0x228>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	079b      	lsls	r3, r3, #30
 8004cc8:	f100 8107 	bmi.w	8004eda <_printf_float+0x42a>
 8004ccc:	68e0      	ldr	r0, [r4, #12]
 8004cce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004cd0:	4298      	cmp	r0, r3
 8004cd2:	bfb8      	it	lt
 8004cd4:	4618      	movlt	r0, r3
 8004cd6:	e739      	b.n	8004b4c <_printf_float+0x9c>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	4652      	mov	r2, sl
 8004cdc:	4631      	mov	r1, r6
 8004cde:	4628      	mov	r0, r5
 8004ce0:	47b8      	blx	r7
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	f43f af30 	beq.w	8004b48 <_printf_float+0x98>
 8004ce8:	f109 0901 	add.w	r9, r9, #1
 8004cec:	e7e8      	b.n	8004cc0 <_printf_float+0x210>
 8004cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	dc3b      	bgt.n	8004d6c <_printf_float+0x2bc>
 8004cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d68 <_printf_float+0x2b8>)
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	4631      	mov	r1, r6
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	47b8      	blx	r7
 8004cfe:	3001      	adds	r0, #1
 8004d00:	f43f af22 	beq.w	8004b48 <_printf_float+0x98>
 8004d04:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004d08:	ea59 0303 	orrs.w	r3, r9, r3
 8004d0c:	d102      	bne.n	8004d14 <_printf_float+0x264>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	07d9      	lsls	r1, r3, #31
 8004d12:	d5d7      	bpl.n	8004cc4 <_printf_float+0x214>
 8004d14:	9b05      	ldr	r3, [sp, #20]
 8004d16:	465a      	mov	r2, fp
 8004d18:	4631      	mov	r1, r6
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	47b8      	blx	r7
 8004d1e:	3001      	adds	r0, #1
 8004d20:	f43f af12 	beq.w	8004b48 <_printf_float+0x98>
 8004d24:	f04f 0a00 	mov.w	sl, #0
 8004d28:	f104 0b1a 	add.w	fp, r4, #26
 8004d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d2e:	425b      	negs	r3, r3
 8004d30:	4553      	cmp	r3, sl
 8004d32:	dc01      	bgt.n	8004d38 <_printf_float+0x288>
 8004d34:	464b      	mov	r3, r9
 8004d36:	e794      	b.n	8004c62 <_printf_float+0x1b2>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	465a      	mov	r2, fp
 8004d3c:	4631      	mov	r1, r6
 8004d3e:	4628      	mov	r0, r5
 8004d40:	47b8      	blx	r7
 8004d42:	3001      	adds	r0, #1
 8004d44:	f43f af00 	beq.w	8004b48 <_printf_float+0x98>
 8004d48:	f10a 0a01 	add.w	sl, sl, #1
 8004d4c:	e7ee      	b.n	8004d2c <_printf_float+0x27c>
 8004d4e:	bf00      	nop
 8004d50:	ffffffff 	.word	0xffffffff
 8004d54:	7fefffff 	.word	0x7fefffff
 8004d58:	0800736c 	.word	0x0800736c
 8004d5c:	08007370 	.word	0x08007370
 8004d60:	08007374 	.word	0x08007374
 8004d64:	08007378 	.word	0x08007378
 8004d68:	0800737c 	.word	0x0800737c
 8004d6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004d72:	4553      	cmp	r3, sl
 8004d74:	bfa8      	it	ge
 8004d76:	4653      	movge	r3, sl
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	4699      	mov	r9, r3
 8004d7c:	dc37      	bgt.n	8004dee <_printf_float+0x33e>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	9307      	str	r3, [sp, #28]
 8004d82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d86:	f104 021a 	add.w	r2, r4, #26
 8004d8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d8c:	9907      	ldr	r1, [sp, #28]
 8004d8e:	9306      	str	r3, [sp, #24]
 8004d90:	eba3 0309 	sub.w	r3, r3, r9
 8004d94:	428b      	cmp	r3, r1
 8004d96:	dc31      	bgt.n	8004dfc <_printf_float+0x34c>
 8004d98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d9a:	459a      	cmp	sl, r3
 8004d9c:	dc3b      	bgt.n	8004e16 <_printf_float+0x366>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	07da      	lsls	r2, r3, #31
 8004da2:	d438      	bmi.n	8004e16 <_printf_float+0x366>
 8004da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004da6:	ebaa 0903 	sub.w	r9, sl, r3
 8004daa:	9b06      	ldr	r3, [sp, #24]
 8004dac:	ebaa 0303 	sub.w	r3, sl, r3
 8004db0:	4599      	cmp	r9, r3
 8004db2:	bfa8      	it	ge
 8004db4:	4699      	movge	r9, r3
 8004db6:	f1b9 0f00 	cmp.w	r9, #0
 8004dba:	dc34      	bgt.n	8004e26 <_printf_float+0x376>
 8004dbc:	f04f 0800 	mov.w	r8, #0
 8004dc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dc4:	f104 0b1a 	add.w	fp, r4, #26
 8004dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dca:	ebaa 0303 	sub.w	r3, sl, r3
 8004dce:	eba3 0309 	sub.w	r3, r3, r9
 8004dd2:	4543      	cmp	r3, r8
 8004dd4:	f77f af76 	ble.w	8004cc4 <_printf_float+0x214>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	465a      	mov	r2, fp
 8004ddc:	4631      	mov	r1, r6
 8004dde:	4628      	mov	r0, r5
 8004de0:	47b8      	blx	r7
 8004de2:	3001      	adds	r0, #1
 8004de4:	f43f aeb0 	beq.w	8004b48 <_printf_float+0x98>
 8004de8:	f108 0801 	add.w	r8, r8, #1
 8004dec:	e7ec      	b.n	8004dc8 <_printf_float+0x318>
 8004dee:	4642      	mov	r2, r8
 8004df0:	4631      	mov	r1, r6
 8004df2:	4628      	mov	r0, r5
 8004df4:	47b8      	blx	r7
 8004df6:	3001      	adds	r0, #1
 8004df8:	d1c1      	bne.n	8004d7e <_printf_float+0x2ce>
 8004dfa:	e6a5      	b.n	8004b48 <_printf_float+0x98>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	9206      	str	r2, [sp, #24]
 8004e04:	47b8      	blx	r7
 8004e06:	3001      	adds	r0, #1
 8004e08:	f43f ae9e 	beq.w	8004b48 <_printf_float+0x98>
 8004e0c:	9b07      	ldr	r3, [sp, #28]
 8004e0e:	9a06      	ldr	r2, [sp, #24]
 8004e10:	3301      	adds	r3, #1
 8004e12:	9307      	str	r3, [sp, #28]
 8004e14:	e7b9      	b.n	8004d8a <_printf_float+0x2da>
 8004e16:	9b05      	ldr	r3, [sp, #20]
 8004e18:	465a      	mov	r2, fp
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	47b8      	blx	r7
 8004e20:	3001      	adds	r0, #1
 8004e22:	d1bf      	bne.n	8004da4 <_printf_float+0x2f4>
 8004e24:	e690      	b.n	8004b48 <_printf_float+0x98>
 8004e26:	9a06      	ldr	r2, [sp, #24]
 8004e28:	464b      	mov	r3, r9
 8004e2a:	4442      	add	r2, r8
 8004e2c:	4631      	mov	r1, r6
 8004e2e:	4628      	mov	r0, r5
 8004e30:	47b8      	blx	r7
 8004e32:	3001      	adds	r0, #1
 8004e34:	d1c2      	bne.n	8004dbc <_printf_float+0x30c>
 8004e36:	e687      	b.n	8004b48 <_printf_float+0x98>
 8004e38:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8004e3c:	f1b9 0f01 	cmp.w	r9, #1
 8004e40:	dc01      	bgt.n	8004e46 <_printf_float+0x396>
 8004e42:	07db      	lsls	r3, r3, #31
 8004e44:	d536      	bpl.n	8004eb4 <_printf_float+0x404>
 8004e46:	2301      	movs	r3, #1
 8004e48:	4642      	mov	r2, r8
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	47b8      	blx	r7
 8004e50:	3001      	adds	r0, #1
 8004e52:	f43f ae79 	beq.w	8004b48 <_printf_float+0x98>
 8004e56:	9b05      	ldr	r3, [sp, #20]
 8004e58:	465a      	mov	r2, fp
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	47b8      	blx	r7
 8004e60:	3001      	adds	r0, #1
 8004e62:	f43f ae71 	beq.w	8004b48 <_printf_float+0x98>
 8004e66:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004e6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e72:	f109 39ff 	add.w	r9, r9, #4294967295
 8004e76:	d018      	beq.n	8004eaa <_printf_float+0x3fa>
 8004e78:	464b      	mov	r3, r9
 8004e7a:	f108 0201 	add.w	r2, r8, #1
 8004e7e:	4631      	mov	r1, r6
 8004e80:	4628      	mov	r0, r5
 8004e82:	47b8      	blx	r7
 8004e84:	3001      	adds	r0, #1
 8004e86:	d10c      	bne.n	8004ea2 <_printf_float+0x3f2>
 8004e88:	e65e      	b.n	8004b48 <_printf_float+0x98>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	465a      	mov	r2, fp
 8004e8e:	4631      	mov	r1, r6
 8004e90:	4628      	mov	r0, r5
 8004e92:	47b8      	blx	r7
 8004e94:	3001      	adds	r0, #1
 8004e96:	f43f ae57 	beq.w	8004b48 <_printf_float+0x98>
 8004e9a:	f108 0801 	add.w	r8, r8, #1
 8004e9e:	45c8      	cmp	r8, r9
 8004ea0:	dbf3      	blt.n	8004e8a <_printf_float+0x3da>
 8004ea2:	4653      	mov	r3, sl
 8004ea4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ea8:	e6dc      	b.n	8004c64 <_printf_float+0x1b4>
 8004eaa:	f04f 0800 	mov.w	r8, #0
 8004eae:	f104 0b1a 	add.w	fp, r4, #26
 8004eb2:	e7f4      	b.n	8004e9e <_printf_float+0x3ee>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	4642      	mov	r2, r8
 8004eb8:	e7e1      	b.n	8004e7e <_printf_float+0x3ce>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	464a      	mov	r2, r9
 8004ebe:	4631      	mov	r1, r6
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	47b8      	blx	r7
 8004ec4:	3001      	adds	r0, #1
 8004ec6:	f43f ae3f 	beq.w	8004b48 <_printf_float+0x98>
 8004eca:	f108 0801 	add.w	r8, r8, #1
 8004ece:	68e3      	ldr	r3, [r4, #12]
 8004ed0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004ed2:	1a5b      	subs	r3, r3, r1
 8004ed4:	4543      	cmp	r3, r8
 8004ed6:	dcf0      	bgt.n	8004eba <_printf_float+0x40a>
 8004ed8:	e6f8      	b.n	8004ccc <_printf_float+0x21c>
 8004eda:	f04f 0800 	mov.w	r8, #0
 8004ede:	f104 0919 	add.w	r9, r4, #25
 8004ee2:	e7f4      	b.n	8004ece <_printf_float+0x41e>

08004ee4 <_printf_common>:
 8004ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee8:	4616      	mov	r6, r2
 8004eea:	4698      	mov	r8, r3
 8004eec:	688a      	ldr	r2, [r1, #8]
 8004eee:	690b      	ldr	r3, [r1, #16]
 8004ef0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	bfb8      	it	lt
 8004ef8:	4613      	movlt	r3, r2
 8004efa:	6033      	str	r3, [r6, #0]
 8004efc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f00:	4607      	mov	r7, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	b10a      	cbz	r2, 8004f0a <_printf_common+0x26>
 8004f06:	3301      	adds	r3, #1
 8004f08:	6033      	str	r3, [r6, #0]
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	0699      	lsls	r1, r3, #26
 8004f0e:	bf42      	ittt	mi
 8004f10:	6833      	ldrmi	r3, [r6, #0]
 8004f12:	3302      	addmi	r3, #2
 8004f14:	6033      	strmi	r3, [r6, #0]
 8004f16:	6825      	ldr	r5, [r4, #0]
 8004f18:	f015 0506 	ands.w	r5, r5, #6
 8004f1c:	d106      	bne.n	8004f2c <_printf_common+0x48>
 8004f1e:	f104 0a19 	add.w	sl, r4, #25
 8004f22:	68e3      	ldr	r3, [r4, #12]
 8004f24:	6832      	ldr	r2, [r6, #0]
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	42ab      	cmp	r3, r5
 8004f2a:	dc26      	bgt.n	8004f7a <_printf_common+0x96>
 8004f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f30:	6822      	ldr	r2, [r4, #0]
 8004f32:	3b00      	subs	r3, #0
 8004f34:	bf18      	it	ne
 8004f36:	2301      	movne	r3, #1
 8004f38:	0692      	lsls	r2, r2, #26
 8004f3a:	d42b      	bmi.n	8004f94 <_printf_common+0xb0>
 8004f3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f40:	4641      	mov	r1, r8
 8004f42:	4638      	mov	r0, r7
 8004f44:	47c8      	blx	r9
 8004f46:	3001      	adds	r0, #1
 8004f48:	d01e      	beq.n	8004f88 <_printf_common+0xa4>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	6922      	ldr	r2, [r4, #16]
 8004f4e:	f003 0306 	and.w	r3, r3, #6
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	bf02      	ittt	eq
 8004f56:	68e5      	ldreq	r5, [r4, #12]
 8004f58:	6833      	ldreq	r3, [r6, #0]
 8004f5a:	1aed      	subeq	r5, r5, r3
 8004f5c:	68a3      	ldr	r3, [r4, #8]
 8004f5e:	bf0c      	ite	eq
 8004f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f64:	2500      	movne	r5, #0
 8004f66:	4293      	cmp	r3, r2
 8004f68:	bfc4      	itt	gt
 8004f6a:	1a9b      	subgt	r3, r3, r2
 8004f6c:	18ed      	addgt	r5, r5, r3
 8004f6e:	2600      	movs	r6, #0
 8004f70:	341a      	adds	r4, #26
 8004f72:	42b5      	cmp	r5, r6
 8004f74:	d11a      	bne.n	8004fac <_printf_common+0xc8>
 8004f76:	2000      	movs	r0, #0
 8004f78:	e008      	b.n	8004f8c <_printf_common+0xa8>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4652      	mov	r2, sl
 8004f7e:	4641      	mov	r1, r8
 8004f80:	4638      	mov	r0, r7
 8004f82:	47c8      	blx	r9
 8004f84:	3001      	adds	r0, #1
 8004f86:	d103      	bne.n	8004f90 <_printf_common+0xac>
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f90:	3501      	adds	r5, #1
 8004f92:	e7c6      	b.n	8004f22 <_printf_common+0x3e>
 8004f94:	18e1      	adds	r1, r4, r3
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	2030      	movs	r0, #48	@ 0x30
 8004f9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f9e:	4422      	add	r2, r4
 8004fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fa8:	3302      	adds	r3, #2
 8004faa:	e7c7      	b.n	8004f3c <_printf_common+0x58>
 8004fac:	2301      	movs	r3, #1
 8004fae:	4622      	mov	r2, r4
 8004fb0:	4641      	mov	r1, r8
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	47c8      	blx	r9
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d0e6      	beq.n	8004f88 <_printf_common+0xa4>
 8004fba:	3601      	adds	r6, #1
 8004fbc:	e7d9      	b.n	8004f72 <_printf_common+0x8e>
	...

08004fc0 <_printf_i>:
 8004fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc4:	7e0f      	ldrb	r7, [r1, #24]
 8004fc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fc8:	2f78      	cmp	r7, #120	@ 0x78
 8004fca:	4691      	mov	r9, r2
 8004fcc:	4680      	mov	r8, r0
 8004fce:	460c      	mov	r4, r1
 8004fd0:	469a      	mov	sl, r3
 8004fd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fd6:	d807      	bhi.n	8004fe8 <_printf_i+0x28>
 8004fd8:	2f62      	cmp	r7, #98	@ 0x62
 8004fda:	d80a      	bhi.n	8004ff2 <_printf_i+0x32>
 8004fdc:	2f00      	cmp	r7, #0
 8004fde:	f000 80d2 	beq.w	8005186 <_printf_i+0x1c6>
 8004fe2:	2f58      	cmp	r7, #88	@ 0x58
 8004fe4:	f000 80b9 	beq.w	800515a <_printf_i+0x19a>
 8004fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ff0:	e03a      	b.n	8005068 <_printf_i+0xa8>
 8004ff2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ff6:	2b15      	cmp	r3, #21
 8004ff8:	d8f6      	bhi.n	8004fe8 <_printf_i+0x28>
 8004ffa:	a101      	add	r1, pc, #4	@ (adr r1, 8005000 <_printf_i+0x40>)
 8004ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005000:	08005059 	.word	0x08005059
 8005004:	0800506d 	.word	0x0800506d
 8005008:	08004fe9 	.word	0x08004fe9
 800500c:	08004fe9 	.word	0x08004fe9
 8005010:	08004fe9 	.word	0x08004fe9
 8005014:	08004fe9 	.word	0x08004fe9
 8005018:	0800506d 	.word	0x0800506d
 800501c:	08004fe9 	.word	0x08004fe9
 8005020:	08004fe9 	.word	0x08004fe9
 8005024:	08004fe9 	.word	0x08004fe9
 8005028:	08004fe9 	.word	0x08004fe9
 800502c:	0800516d 	.word	0x0800516d
 8005030:	08005097 	.word	0x08005097
 8005034:	08005127 	.word	0x08005127
 8005038:	08004fe9 	.word	0x08004fe9
 800503c:	08004fe9 	.word	0x08004fe9
 8005040:	0800518f 	.word	0x0800518f
 8005044:	08004fe9 	.word	0x08004fe9
 8005048:	08005097 	.word	0x08005097
 800504c:	08004fe9 	.word	0x08004fe9
 8005050:	08004fe9 	.word	0x08004fe9
 8005054:	0800512f 	.word	0x0800512f
 8005058:	6833      	ldr	r3, [r6, #0]
 800505a:	1d1a      	adds	r2, r3, #4
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6032      	str	r2, [r6, #0]
 8005060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005064:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005068:	2301      	movs	r3, #1
 800506a:	e09d      	b.n	80051a8 <_printf_i+0x1e8>
 800506c:	6833      	ldr	r3, [r6, #0]
 800506e:	6820      	ldr	r0, [r4, #0]
 8005070:	1d19      	adds	r1, r3, #4
 8005072:	6031      	str	r1, [r6, #0]
 8005074:	0606      	lsls	r6, r0, #24
 8005076:	d501      	bpl.n	800507c <_printf_i+0xbc>
 8005078:	681d      	ldr	r5, [r3, #0]
 800507a:	e003      	b.n	8005084 <_printf_i+0xc4>
 800507c:	0645      	lsls	r5, r0, #25
 800507e:	d5fb      	bpl.n	8005078 <_printf_i+0xb8>
 8005080:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005084:	2d00      	cmp	r5, #0
 8005086:	da03      	bge.n	8005090 <_printf_i+0xd0>
 8005088:	232d      	movs	r3, #45	@ 0x2d
 800508a:	426d      	negs	r5, r5
 800508c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005090:	4859      	ldr	r0, [pc, #356]	@ (80051f8 <_printf_i+0x238>)
 8005092:	230a      	movs	r3, #10
 8005094:	e011      	b.n	80050ba <_printf_i+0xfa>
 8005096:	6821      	ldr	r1, [r4, #0]
 8005098:	6833      	ldr	r3, [r6, #0]
 800509a:	0608      	lsls	r0, r1, #24
 800509c:	f853 5b04 	ldr.w	r5, [r3], #4
 80050a0:	d402      	bmi.n	80050a8 <_printf_i+0xe8>
 80050a2:	0649      	lsls	r1, r1, #25
 80050a4:	bf48      	it	mi
 80050a6:	b2ad      	uxthmi	r5, r5
 80050a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80050aa:	4853      	ldr	r0, [pc, #332]	@ (80051f8 <_printf_i+0x238>)
 80050ac:	6033      	str	r3, [r6, #0]
 80050ae:	bf14      	ite	ne
 80050b0:	230a      	movne	r3, #10
 80050b2:	2308      	moveq	r3, #8
 80050b4:	2100      	movs	r1, #0
 80050b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050ba:	6866      	ldr	r6, [r4, #4]
 80050bc:	60a6      	str	r6, [r4, #8]
 80050be:	2e00      	cmp	r6, #0
 80050c0:	bfa2      	ittt	ge
 80050c2:	6821      	ldrge	r1, [r4, #0]
 80050c4:	f021 0104 	bicge.w	r1, r1, #4
 80050c8:	6021      	strge	r1, [r4, #0]
 80050ca:	b90d      	cbnz	r5, 80050d0 <_printf_i+0x110>
 80050cc:	2e00      	cmp	r6, #0
 80050ce:	d04b      	beq.n	8005168 <_printf_i+0x1a8>
 80050d0:	4616      	mov	r6, r2
 80050d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80050d6:	fb03 5711 	mls	r7, r3, r1, r5
 80050da:	5dc7      	ldrb	r7, [r0, r7]
 80050dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050e0:	462f      	mov	r7, r5
 80050e2:	42bb      	cmp	r3, r7
 80050e4:	460d      	mov	r5, r1
 80050e6:	d9f4      	bls.n	80050d2 <_printf_i+0x112>
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d10b      	bne.n	8005104 <_printf_i+0x144>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	07df      	lsls	r7, r3, #31
 80050f0:	d508      	bpl.n	8005104 <_printf_i+0x144>
 80050f2:	6923      	ldr	r3, [r4, #16]
 80050f4:	6861      	ldr	r1, [r4, #4]
 80050f6:	4299      	cmp	r1, r3
 80050f8:	bfde      	ittt	le
 80050fa:	2330      	movle	r3, #48	@ 0x30
 80050fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005100:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005104:	1b92      	subs	r2, r2, r6
 8005106:	6122      	str	r2, [r4, #16]
 8005108:	f8cd a000 	str.w	sl, [sp]
 800510c:	464b      	mov	r3, r9
 800510e:	aa03      	add	r2, sp, #12
 8005110:	4621      	mov	r1, r4
 8005112:	4640      	mov	r0, r8
 8005114:	f7ff fee6 	bl	8004ee4 <_printf_common>
 8005118:	3001      	adds	r0, #1
 800511a:	d14a      	bne.n	80051b2 <_printf_i+0x1f2>
 800511c:	f04f 30ff 	mov.w	r0, #4294967295
 8005120:	b004      	add	sp, #16
 8005122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	f043 0320 	orr.w	r3, r3, #32
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	4833      	ldr	r0, [pc, #204]	@ (80051fc <_printf_i+0x23c>)
 8005130:	2778      	movs	r7, #120	@ 0x78
 8005132:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	6831      	ldr	r1, [r6, #0]
 800513a:	061f      	lsls	r7, r3, #24
 800513c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005140:	d402      	bmi.n	8005148 <_printf_i+0x188>
 8005142:	065f      	lsls	r7, r3, #25
 8005144:	bf48      	it	mi
 8005146:	b2ad      	uxthmi	r5, r5
 8005148:	6031      	str	r1, [r6, #0]
 800514a:	07d9      	lsls	r1, r3, #31
 800514c:	bf44      	itt	mi
 800514e:	f043 0320 	orrmi.w	r3, r3, #32
 8005152:	6023      	strmi	r3, [r4, #0]
 8005154:	b11d      	cbz	r5, 800515e <_printf_i+0x19e>
 8005156:	2310      	movs	r3, #16
 8005158:	e7ac      	b.n	80050b4 <_printf_i+0xf4>
 800515a:	4827      	ldr	r0, [pc, #156]	@ (80051f8 <_printf_i+0x238>)
 800515c:	e7e9      	b.n	8005132 <_printf_i+0x172>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	f023 0320 	bic.w	r3, r3, #32
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	e7f6      	b.n	8005156 <_printf_i+0x196>
 8005168:	4616      	mov	r6, r2
 800516a:	e7bd      	b.n	80050e8 <_printf_i+0x128>
 800516c:	6833      	ldr	r3, [r6, #0]
 800516e:	6825      	ldr	r5, [r4, #0]
 8005170:	6961      	ldr	r1, [r4, #20]
 8005172:	1d18      	adds	r0, r3, #4
 8005174:	6030      	str	r0, [r6, #0]
 8005176:	062e      	lsls	r6, r5, #24
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	d501      	bpl.n	8005180 <_printf_i+0x1c0>
 800517c:	6019      	str	r1, [r3, #0]
 800517e:	e002      	b.n	8005186 <_printf_i+0x1c6>
 8005180:	0668      	lsls	r0, r5, #25
 8005182:	d5fb      	bpl.n	800517c <_printf_i+0x1bc>
 8005184:	8019      	strh	r1, [r3, #0]
 8005186:	2300      	movs	r3, #0
 8005188:	6123      	str	r3, [r4, #16]
 800518a:	4616      	mov	r6, r2
 800518c:	e7bc      	b.n	8005108 <_printf_i+0x148>
 800518e:	6833      	ldr	r3, [r6, #0]
 8005190:	1d1a      	adds	r2, r3, #4
 8005192:	6032      	str	r2, [r6, #0]
 8005194:	681e      	ldr	r6, [r3, #0]
 8005196:	6862      	ldr	r2, [r4, #4]
 8005198:	2100      	movs	r1, #0
 800519a:	4630      	mov	r0, r6
 800519c:	f7fb f8a0 	bl	80002e0 <memchr>
 80051a0:	b108      	cbz	r0, 80051a6 <_printf_i+0x1e6>
 80051a2:	1b80      	subs	r0, r0, r6
 80051a4:	6060      	str	r0, [r4, #4]
 80051a6:	6863      	ldr	r3, [r4, #4]
 80051a8:	6123      	str	r3, [r4, #16]
 80051aa:	2300      	movs	r3, #0
 80051ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051b0:	e7aa      	b.n	8005108 <_printf_i+0x148>
 80051b2:	6923      	ldr	r3, [r4, #16]
 80051b4:	4632      	mov	r2, r6
 80051b6:	4649      	mov	r1, r9
 80051b8:	4640      	mov	r0, r8
 80051ba:	47d0      	blx	sl
 80051bc:	3001      	adds	r0, #1
 80051be:	d0ad      	beq.n	800511c <_printf_i+0x15c>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	079b      	lsls	r3, r3, #30
 80051c4:	d413      	bmi.n	80051ee <_printf_i+0x22e>
 80051c6:	68e0      	ldr	r0, [r4, #12]
 80051c8:	9b03      	ldr	r3, [sp, #12]
 80051ca:	4298      	cmp	r0, r3
 80051cc:	bfb8      	it	lt
 80051ce:	4618      	movlt	r0, r3
 80051d0:	e7a6      	b.n	8005120 <_printf_i+0x160>
 80051d2:	2301      	movs	r3, #1
 80051d4:	4632      	mov	r2, r6
 80051d6:	4649      	mov	r1, r9
 80051d8:	4640      	mov	r0, r8
 80051da:	47d0      	blx	sl
 80051dc:	3001      	adds	r0, #1
 80051de:	d09d      	beq.n	800511c <_printf_i+0x15c>
 80051e0:	3501      	adds	r5, #1
 80051e2:	68e3      	ldr	r3, [r4, #12]
 80051e4:	9903      	ldr	r1, [sp, #12]
 80051e6:	1a5b      	subs	r3, r3, r1
 80051e8:	42ab      	cmp	r3, r5
 80051ea:	dcf2      	bgt.n	80051d2 <_printf_i+0x212>
 80051ec:	e7eb      	b.n	80051c6 <_printf_i+0x206>
 80051ee:	2500      	movs	r5, #0
 80051f0:	f104 0619 	add.w	r6, r4, #25
 80051f4:	e7f5      	b.n	80051e2 <_printf_i+0x222>
 80051f6:	bf00      	nop
 80051f8:	0800737e 	.word	0x0800737e
 80051fc:	0800738f 	.word	0x0800738f

08005200 <std>:
 8005200:	2300      	movs	r3, #0
 8005202:	b510      	push	{r4, lr}
 8005204:	4604      	mov	r4, r0
 8005206:	e9c0 3300 	strd	r3, r3, [r0]
 800520a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800520e:	6083      	str	r3, [r0, #8]
 8005210:	8181      	strh	r1, [r0, #12]
 8005212:	6643      	str	r3, [r0, #100]	@ 0x64
 8005214:	81c2      	strh	r2, [r0, #14]
 8005216:	6183      	str	r3, [r0, #24]
 8005218:	4619      	mov	r1, r3
 800521a:	2208      	movs	r2, #8
 800521c:	305c      	adds	r0, #92	@ 0x5c
 800521e:	f000 f9f9 	bl	8005614 <memset>
 8005222:	4b0d      	ldr	r3, [pc, #52]	@ (8005258 <std+0x58>)
 8005224:	6263      	str	r3, [r4, #36]	@ 0x24
 8005226:	4b0d      	ldr	r3, [pc, #52]	@ (800525c <std+0x5c>)
 8005228:	62a3      	str	r3, [r4, #40]	@ 0x28
 800522a:	4b0d      	ldr	r3, [pc, #52]	@ (8005260 <std+0x60>)
 800522c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800522e:	4b0d      	ldr	r3, [pc, #52]	@ (8005264 <std+0x64>)
 8005230:	6323      	str	r3, [r4, #48]	@ 0x30
 8005232:	4b0d      	ldr	r3, [pc, #52]	@ (8005268 <std+0x68>)
 8005234:	6224      	str	r4, [r4, #32]
 8005236:	429c      	cmp	r4, r3
 8005238:	d006      	beq.n	8005248 <std+0x48>
 800523a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800523e:	4294      	cmp	r4, r2
 8005240:	d002      	beq.n	8005248 <std+0x48>
 8005242:	33d0      	adds	r3, #208	@ 0xd0
 8005244:	429c      	cmp	r4, r3
 8005246:	d105      	bne.n	8005254 <std+0x54>
 8005248:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800524c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005250:	f000 ba5c 	b.w	800570c <__retarget_lock_init_recursive>
 8005254:	bd10      	pop	{r4, pc}
 8005256:	bf00      	nop
 8005258:	08005465 	.word	0x08005465
 800525c:	08005487 	.word	0x08005487
 8005260:	080054bf 	.word	0x080054bf
 8005264:	080054e3 	.word	0x080054e3
 8005268:	24000250 	.word	0x24000250

0800526c <stdio_exit_handler>:
 800526c:	4a02      	ldr	r2, [pc, #8]	@ (8005278 <stdio_exit_handler+0xc>)
 800526e:	4903      	ldr	r1, [pc, #12]	@ (800527c <stdio_exit_handler+0x10>)
 8005270:	4803      	ldr	r0, [pc, #12]	@ (8005280 <stdio_exit_handler+0x14>)
 8005272:	f000 b869 	b.w	8005348 <_fwalk_sglue>
 8005276:	bf00      	nop
 8005278:	24000010 	.word	0x24000010
 800527c:	08006f65 	.word	0x08006f65
 8005280:	24000020 	.word	0x24000020

08005284 <cleanup_stdio>:
 8005284:	6841      	ldr	r1, [r0, #4]
 8005286:	4b0c      	ldr	r3, [pc, #48]	@ (80052b8 <cleanup_stdio+0x34>)
 8005288:	4299      	cmp	r1, r3
 800528a:	b510      	push	{r4, lr}
 800528c:	4604      	mov	r4, r0
 800528e:	d001      	beq.n	8005294 <cleanup_stdio+0x10>
 8005290:	f001 fe68 	bl	8006f64 <_fflush_r>
 8005294:	68a1      	ldr	r1, [r4, #8]
 8005296:	4b09      	ldr	r3, [pc, #36]	@ (80052bc <cleanup_stdio+0x38>)
 8005298:	4299      	cmp	r1, r3
 800529a:	d002      	beq.n	80052a2 <cleanup_stdio+0x1e>
 800529c:	4620      	mov	r0, r4
 800529e:	f001 fe61 	bl	8006f64 <_fflush_r>
 80052a2:	68e1      	ldr	r1, [r4, #12]
 80052a4:	4b06      	ldr	r3, [pc, #24]	@ (80052c0 <cleanup_stdio+0x3c>)
 80052a6:	4299      	cmp	r1, r3
 80052a8:	d004      	beq.n	80052b4 <cleanup_stdio+0x30>
 80052aa:	4620      	mov	r0, r4
 80052ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b0:	f001 be58 	b.w	8006f64 <_fflush_r>
 80052b4:	bd10      	pop	{r4, pc}
 80052b6:	bf00      	nop
 80052b8:	24000250 	.word	0x24000250
 80052bc:	240002b8 	.word	0x240002b8
 80052c0:	24000320 	.word	0x24000320

080052c4 <global_stdio_init.part.0>:
 80052c4:	b510      	push	{r4, lr}
 80052c6:	4b0b      	ldr	r3, [pc, #44]	@ (80052f4 <global_stdio_init.part.0+0x30>)
 80052c8:	4c0b      	ldr	r4, [pc, #44]	@ (80052f8 <global_stdio_init.part.0+0x34>)
 80052ca:	4a0c      	ldr	r2, [pc, #48]	@ (80052fc <global_stdio_init.part.0+0x38>)
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	4620      	mov	r0, r4
 80052d0:	2200      	movs	r2, #0
 80052d2:	2104      	movs	r1, #4
 80052d4:	f7ff ff94 	bl	8005200 <std>
 80052d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052dc:	2201      	movs	r2, #1
 80052de:	2109      	movs	r1, #9
 80052e0:	f7ff ff8e 	bl	8005200 <std>
 80052e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052e8:	2202      	movs	r2, #2
 80052ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ee:	2112      	movs	r1, #18
 80052f0:	f7ff bf86 	b.w	8005200 <std>
 80052f4:	24000388 	.word	0x24000388
 80052f8:	24000250 	.word	0x24000250
 80052fc:	0800526d 	.word	0x0800526d

08005300 <__sfp_lock_acquire>:
 8005300:	4801      	ldr	r0, [pc, #4]	@ (8005308 <__sfp_lock_acquire+0x8>)
 8005302:	f000 ba04 	b.w	800570e <__retarget_lock_acquire_recursive>
 8005306:	bf00      	nop
 8005308:	24000391 	.word	0x24000391

0800530c <__sfp_lock_release>:
 800530c:	4801      	ldr	r0, [pc, #4]	@ (8005314 <__sfp_lock_release+0x8>)
 800530e:	f000 b9ff 	b.w	8005710 <__retarget_lock_release_recursive>
 8005312:	bf00      	nop
 8005314:	24000391 	.word	0x24000391

08005318 <__sinit>:
 8005318:	b510      	push	{r4, lr}
 800531a:	4604      	mov	r4, r0
 800531c:	f7ff fff0 	bl	8005300 <__sfp_lock_acquire>
 8005320:	6a23      	ldr	r3, [r4, #32]
 8005322:	b11b      	cbz	r3, 800532c <__sinit+0x14>
 8005324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005328:	f7ff bff0 	b.w	800530c <__sfp_lock_release>
 800532c:	4b04      	ldr	r3, [pc, #16]	@ (8005340 <__sinit+0x28>)
 800532e:	6223      	str	r3, [r4, #32]
 8005330:	4b04      	ldr	r3, [pc, #16]	@ (8005344 <__sinit+0x2c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1f5      	bne.n	8005324 <__sinit+0xc>
 8005338:	f7ff ffc4 	bl	80052c4 <global_stdio_init.part.0>
 800533c:	e7f2      	b.n	8005324 <__sinit+0xc>
 800533e:	bf00      	nop
 8005340:	08005285 	.word	0x08005285
 8005344:	24000388 	.word	0x24000388

08005348 <_fwalk_sglue>:
 8005348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800534c:	4607      	mov	r7, r0
 800534e:	4688      	mov	r8, r1
 8005350:	4614      	mov	r4, r2
 8005352:	2600      	movs	r6, #0
 8005354:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005358:	f1b9 0901 	subs.w	r9, r9, #1
 800535c:	d505      	bpl.n	800536a <_fwalk_sglue+0x22>
 800535e:	6824      	ldr	r4, [r4, #0]
 8005360:	2c00      	cmp	r4, #0
 8005362:	d1f7      	bne.n	8005354 <_fwalk_sglue+0xc>
 8005364:	4630      	mov	r0, r6
 8005366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800536a:	89ab      	ldrh	r3, [r5, #12]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d907      	bls.n	8005380 <_fwalk_sglue+0x38>
 8005370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005374:	3301      	adds	r3, #1
 8005376:	d003      	beq.n	8005380 <_fwalk_sglue+0x38>
 8005378:	4629      	mov	r1, r5
 800537a:	4638      	mov	r0, r7
 800537c:	47c0      	blx	r8
 800537e:	4306      	orrs	r6, r0
 8005380:	3568      	adds	r5, #104	@ 0x68
 8005382:	e7e9      	b.n	8005358 <_fwalk_sglue+0x10>

08005384 <iprintf>:
 8005384:	b40f      	push	{r0, r1, r2, r3}
 8005386:	b507      	push	{r0, r1, r2, lr}
 8005388:	4906      	ldr	r1, [pc, #24]	@ (80053a4 <iprintf+0x20>)
 800538a:	ab04      	add	r3, sp, #16
 800538c:	6808      	ldr	r0, [r1, #0]
 800538e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005392:	6881      	ldr	r1, [r0, #8]
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	f001 fc49 	bl	8006c2c <_vfiprintf_r>
 800539a:	b003      	add	sp, #12
 800539c:	f85d eb04 	ldr.w	lr, [sp], #4
 80053a0:	b004      	add	sp, #16
 80053a2:	4770      	bx	lr
 80053a4:	2400001c 	.word	0x2400001c

080053a8 <_puts_r>:
 80053a8:	6a03      	ldr	r3, [r0, #32]
 80053aa:	b570      	push	{r4, r5, r6, lr}
 80053ac:	6884      	ldr	r4, [r0, #8]
 80053ae:	4605      	mov	r5, r0
 80053b0:	460e      	mov	r6, r1
 80053b2:	b90b      	cbnz	r3, 80053b8 <_puts_r+0x10>
 80053b4:	f7ff ffb0 	bl	8005318 <__sinit>
 80053b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053ba:	07db      	lsls	r3, r3, #31
 80053bc:	d405      	bmi.n	80053ca <_puts_r+0x22>
 80053be:	89a3      	ldrh	r3, [r4, #12]
 80053c0:	0598      	lsls	r0, r3, #22
 80053c2:	d402      	bmi.n	80053ca <_puts_r+0x22>
 80053c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053c6:	f000 f9a2 	bl	800570e <__retarget_lock_acquire_recursive>
 80053ca:	89a3      	ldrh	r3, [r4, #12]
 80053cc:	0719      	lsls	r1, r3, #28
 80053ce:	d502      	bpl.n	80053d6 <_puts_r+0x2e>
 80053d0:	6923      	ldr	r3, [r4, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d135      	bne.n	8005442 <_puts_r+0x9a>
 80053d6:	4621      	mov	r1, r4
 80053d8:	4628      	mov	r0, r5
 80053da:	f000 f8c5 	bl	8005568 <__swsetup_r>
 80053de:	b380      	cbz	r0, 8005442 <_puts_r+0x9a>
 80053e0:	f04f 35ff 	mov.w	r5, #4294967295
 80053e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053e6:	07da      	lsls	r2, r3, #31
 80053e8:	d405      	bmi.n	80053f6 <_puts_r+0x4e>
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	059b      	lsls	r3, r3, #22
 80053ee:	d402      	bmi.n	80053f6 <_puts_r+0x4e>
 80053f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053f2:	f000 f98d 	bl	8005710 <__retarget_lock_release_recursive>
 80053f6:	4628      	mov	r0, r5
 80053f8:	bd70      	pop	{r4, r5, r6, pc}
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	da04      	bge.n	8005408 <_puts_r+0x60>
 80053fe:	69a2      	ldr	r2, [r4, #24]
 8005400:	429a      	cmp	r2, r3
 8005402:	dc17      	bgt.n	8005434 <_puts_r+0x8c>
 8005404:	290a      	cmp	r1, #10
 8005406:	d015      	beq.n	8005434 <_puts_r+0x8c>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	6022      	str	r2, [r4, #0]
 800540e:	7019      	strb	r1, [r3, #0]
 8005410:	68a3      	ldr	r3, [r4, #8]
 8005412:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005416:	3b01      	subs	r3, #1
 8005418:	60a3      	str	r3, [r4, #8]
 800541a:	2900      	cmp	r1, #0
 800541c:	d1ed      	bne.n	80053fa <_puts_r+0x52>
 800541e:	2b00      	cmp	r3, #0
 8005420:	da11      	bge.n	8005446 <_puts_r+0x9e>
 8005422:	4622      	mov	r2, r4
 8005424:	210a      	movs	r1, #10
 8005426:	4628      	mov	r0, r5
 8005428:	f000 f85f 	bl	80054ea <__swbuf_r>
 800542c:	3001      	adds	r0, #1
 800542e:	d0d7      	beq.n	80053e0 <_puts_r+0x38>
 8005430:	250a      	movs	r5, #10
 8005432:	e7d7      	b.n	80053e4 <_puts_r+0x3c>
 8005434:	4622      	mov	r2, r4
 8005436:	4628      	mov	r0, r5
 8005438:	f000 f857 	bl	80054ea <__swbuf_r>
 800543c:	3001      	adds	r0, #1
 800543e:	d1e7      	bne.n	8005410 <_puts_r+0x68>
 8005440:	e7ce      	b.n	80053e0 <_puts_r+0x38>
 8005442:	3e01      	subs	r6, #1
 8005444:	e7e4      	b.n	8005410 <_puts_r+0x68>
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	6022      	str	r2, [r4, #0]
 800544c:	220a      	movs	r2, #10
 800544e:	701a      	strb	r2, [r3, #0]
 8005450:	e7ee      	b.n	8005430 <_puts_r+0x88>
	...

08005454 <puts>:
 8005454:	4b02      	ldr	r3, [pc, #8]	@ (8005460 <puts+0xc>)
 8005456:	4601      	mov	r1, r0
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	f7ff bfa5 	b.w	80053a8 <_puts_r>
 800545e:	bf00      	nop
 8005460:	2400001c 	.word	0x2400001c

08005464 <__sread>:
 8005464:	b510      	push	{r4, lr}
 8005466:	460c      	mov	r4, r1
 8005468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800546c:	f000 f900 	bl	8005670 <_read_r>
 8005470:	2800      	cmp	r0, #0
 8005472:	bfab      	itete	ge
 8005474:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005476:	89a3      	ldrhlt	r3, [r4, #12]
 8005478:	181b      	addge	r3, r3, r0
 800547a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800547e:	bfac      	ite	ge
 8005480:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005482:	81a3      	strhlt	r3, [r4, #12]
 8005484:	bd10      	pop	{r4, pc}

08005486 <__swrite>:
 8005486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800548a:	461f      	mov	r7, r3
 800548c:	898b      	ldrh	r3, [r1, #12]
 800548e:	05db      	lsls	r3, r3, #23
 8005490:	4605      	mov	r5, r0
 8005492:	460c      	mov	r4, r1
 8005494:	4616      	mov	r6, r2
 8005496:	d505      	bpl.n	80054a4 <__swrite+0x1e>
 8005498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800549c:	2302      	movs	r3, #2
 800549e:	2200      	movs	r2, #0
 80054a0:	f000 f8d4 	bl	800564c <_lseek_r>
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054ae:	81a3      	strh	r3, [r4, #12]
 80054b0:	4632      	mov	r2, r6
 80054b2:	463b      	mov	r3, r7
 80054b4:	4628      	mov	r0, r5
 80054b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ba:	f000 b8eb 	b.w	8005694 <_write_r>

080054be <__sseek>:
 80054be:	b510      	push	{r4, lr}
 80054c0:	460c      	mov	r4, r1
 80054c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c6:	f000 f8c1 	bl	800564c <_lseek_r>
 80054ca:	1c43      	adds	r3, r0, #1
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	bf15      	itete	ne
 80054d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054da:	81a3      	strheq	r3, [r4, #12]
 80054dc:	bf18      	it	ne
 80054de:	81a3      	strhne	r3, [r4, #12]
 80054e0:	bd10      	pop	{r4, pc}

080054e2 <__sclose>:
 80054e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e6:	f000 b8a1 	b.w	800562c <_close_r>

080054ea <__swbuf_r>:
 80054ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ec:	460e      	mov	r6, r1
 80054ee:	4614      	mov	r4, r2
 80054f0:	4605      	mov	r5, r0
 80054f2:	b118      	cbz	r0, 80054fc <__swbuf_r+0x12>
 80054f4:	6a03      	ldr	r3, [r0, #32]
 80054f6:	b90b      	cbnz	r3, 80054fc <__swbuf_r+0x12>
 80054f8:	f7ff ff0e 	bl	8005318 <__sinit>
 80054fc:	69a3      	ldr	r3, [r4, #24]
 80054fe:	60a3      	str	r3, [r4, #8]
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	071a      	lsls	r2, r3, #28
 8005504:	d501      	bpl.n	800550a <__swbuf_r+0x20>
 8005506:	6923      	ldr	r3, [r4, #16]
 8005508:	b943      	cbnz	r3, 800551c <__swbuf_r+0x32>
 800550a:	4621      	mov	r1, r4
 800550c:	4628      	mov	r0, r5
 800550e:	f000 f82b 	bl	8005568 <__swsetup_r>
 8005512:	b118      	cbz	r0, 800551c <__swbuf_r+0x32>
 8005514:	f04f 37ff 	mov.w	r7, #4294967295
 8005518:	4638      	mov	r0, r7
 800551a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	6922      	ldr	r2, [r4, #16]
 8005520:	1a98      	subs	r0, r3, r2
 8005522:	6963      	ldr	r3, [r4, #20]
 8005524:	b2f6      	uxtb	r6, r6
 8005526:	4283      	cmp	r3, r0
 8005528:	4637      	mov	r7, r6
 800552a:	dc05      	bgt.n	8005538 <__swbuf_r+0x4e>
 800552c:	4621      	mov	r1, r4
 800552e:	4628      	mov	r0, r5
 8005530:	f001 fd18 	bl	8006f64 <_fflush_r>
 8005534:	2800      	cmp	r0, #0
 8005536:	d1ed      	bne.n	8005514 <__swbuf_r+0x2a>
 8005538:	68a3      	ldr	r3, [r4, #8]
 800553a:	3b01      	subs	r3, #1
 800553c:	60a3      	str	r3, [r4, #8]
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	6022      	str	r2, [r4, #0]
 8005544:	701e      	strb	r6, [r3, #0]
 8005546:	6962      	ldr	r2, [r4, #20]
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	429a      	cmp	r2, r3
 800554c:	d004      	beq.n	8005558 <__swbuf_r+0x6e>
 800554e:	89a3      	ldrh	r3, [r4, #12]
 8005550:	07db      	lsls	r3, r3, #31
 8005552:	d5e1      	bpl.n	8005518 <__swbuf_r+0x2e>
 8005554:	2e0a      	cmp	r6, #10
 8005556:	d1df      	bne.n	8005518 <__swbuf_r+0x2e>
 8005558:	4621      	mov	r1, r4
 800555a:	4628      	mov	r0, r5
 800555c:	f001 fd02 	bl	8006f64 <_fflush_r>
 8005560:	2800      	cmp	r0, #0
 8005562:	d0d9      	beq.n	8005518 <__swbuf_r+0x2e>
 8005564:	e7d6      	b.n	8005514 <__swbuf_r+0x2a>
	...

08005568 <__swsetup_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	4b29      	ldr	r3, [pc, #164]	@ (8005610 <__swsetup_r+0xa8>)
 800556c:	4605      	mov	r5, r0
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	460c      	mov	r4, r1
 8005572:	b118      	cbz	r0, 800557c <__swsetup_r+0x14>
 8005574:	6a03      	ldr	r3, [r0, #32]
 8005576:	b90b      	cbnz	r3, 800557c <__swsetup_r+0x14>
 8005578:	f7ff fece 	bl	8005318 <__sinit>
 800557c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005580:	0719      	lsls	r1, r3, #28
 8005582:	d422      	bmi.n	80055ca <__swsetup_r+0x62>
 8005584:	06da      	lsls	r2, r3, #27
 8005586:	d407      	bmi.n	8005598 <__swsetup_r+0x30>
 8005588:	2209      	movs	r2, #9
 800558a:	602a      	str	r2, [r5, #0]
 800558c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005590:	81a3      	strh	r3, [r4, #12]
 8005592:	f04f 30ff 	mov.w	r0, #4294967295
 8005596:	e033      	b.n	8005600 <__swsetup_r+0x98>
 8005598:	0758      	lsls	r0, r3, #29
 800559a:	d512      	bpl.n	80055c2 <__swsetup_r+0x5a>
 800559c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800559e:	b141      	cbz	r1, 80055b2 <__swsetup_r+0x4a>
 80055a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055a4:	4299      	cmp	r1, r3
 80055a6:	d002      	beq.n	80055ae <__swsetup_r+0x46>
 80055a8:	4628      	mov	r0, r5
 80055aa:	f000 fe93 	bl	80062d4 <_free_r>
 80055ae:	2300      	movs	r3, #0
 80055b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80055b2:	89a3      	ldrh	r3, [r4, #12]
 80055b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80055b8:	81a3      	strh	r3, [r4, #12]
 80055ba:	2300      	movs	r3, #0
 80055bc:	6063      	str	r3, [r4, #4]
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	f043 0308 	orr.w	r3, r3, #8
 80055c8:	81a3      	strh	r3, [r4, #12]
 80055ca:	6923      	ldr	r3, [r4, #16]
 80055cc:	b94b      	cbnz	r3, 80055e2 <__swsetup_r+0x7a>
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80055d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055d8:	d003      	beq.n	80055e2 <__swsetup_r+0x7a>
 80055da:	4621      	mov	r1, r4
 80055dc:	4628      	mov	r0, r5
 80055de:	f001 fd0f 	bl	8007000 <__smakebuf_r>
 80055e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055e6:	f013 0201 	ands.w	r2, r3, #1
 80055ea:	d00a      	beq.n	8005602 <__swsetup_r+0x9a>
 80055ec:	2200      	movs	r2, #0
 80055ee:	60a2      	str	r2, [r4, #8]
 80055f0:	6962      	ldr	r2, [r4, #20]
 80055f2:	4252      	negs	r2, r2
 80055f4:	61a2      	str	r2, [r4, #24]
 80055f6:	6922      	ldr	r2, [r4, #16]
 80055f8:	b942      	cbnz	r2, 800560c <__swsetup_r+0xa4>
 80055fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80055fe:	d1c5      	bne.n	800558c <__swsetup_r+0x24>
 8005600:	bd38      	pop	{r3, r4, r5, pc}
 8005602:	0799      	lsls	r1, r3, #30
 8005604:	bf58      	it	pl
 8005606:	6962      	ldrpl	r2, [r4, #20]
 8005608:	60a2      	str	r2, [r4, #8]
 800560a:	e7f4      	b.n	80055f6 <__swsetup_r+0x8e>
 800560c:	2000      	movs	r0, #0
 800560e:	e7f7      	b.n	8005600 <__swsetup_r+0x98>
 8005610:	2400001c 	.word	0x2400001c

08005614 <memset>:
 8005614:	4402      	add	r2, r0
 8005616:	4603      	mov	r3, r0
 8005618:	4293      	cmp	r3, r2
 800561a:	d100      	bne.n	800561e <memset+0xa>
 800561c:	4770      	bx	lr
 800561e:	f803 1b01 	strb.w	r1, [r3], #1
 8005622:	e7f9      	b.n	8005618 <memset+0x4>

08005624 <_localeconv_r>:
 8005624:	4800      	ldr	r0, [pc, #0]	@ (8005628 <_localeconv_r+0x4>)
 8005626:	4770      	bx	lr
 8005628:	2400015c 	.word	0x2400015c

0800562c <_close_r>:
 800562c:	b538      	push	{r3, r4, r5, lr}
 800562e:	4d06      	ldr	r5, [pc, #24]	@ (8005648 <_close_r+0x1c>)
 8005630:	2300      	movs	r3, #0
 8005632:	4604      	mov	r4, r0
 8005634:	4608      	mov	r0, r1
 8005636:	602b      	str	r3, [r5, #0]
 8005638:	f7fb fb15 	bl	8000c66 <_close>
 800563c:	1c43      	adds	r3, r0, #1
 800563e:	d102      	bne.n	8005646 <_close_r+0x1a>
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	b103      	cbz	r3, 8005646 <_close_r+0x1a>
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	bd38      	pop	{r3, r4, r5, pc}
 8005648:	2400038c 	.word	0x2400038c

0800564c <_lseek_r>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	4d07      	ldr	r5, [pc, #28]	@ (800566c <_lseek_r+0x20>)
 8005650:	4604      	mov	r4, r0
 8005652:	4608      	mov	r0, r1
 8005654:	4611      	mov	r1, r2
 8005656:	2200      	movs	r2, #0
 8005658:	602a      	str	r2, [r5, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	f7fb fb2a 	bl	8000cb4 <_lseek>
 8005660:	1c43      	adds	r3, r0, #1
 8005662:	d102      	bne.n	800566a <_lseek_r+0x1e>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	b103      	cbz	r3, 800566a <_lseek_r+0x1e>
 8005668:	6023      	str	r3, [r4, #0]
 800566a:	bd38      	pop	{r3, r4, r5, pc}
 800566c:	2400038c 	.word	0x2400038c

08005670 <_read_r>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	4d07      	ldr	r5, [pc, #28]	@ (8005690 <_read_r+0x20>)
 8005674:	4604      	mov	r4, r0
 8005676:	4608      	mov	r0, r1
 8005678:	4611      	mov	r1, r2
 800567a:	2200      	movs	r2, #0
 800567c:	602a      	str	r2, [r5, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	f7fb fad4 	bl	8000c2c <_read>
 8005684:	1c43      	adds	r3, r0, #1
 8005686:	d102      	bne.n	800568e <_read_r+0x1e>
 8005688:	682b      	ldr	r3, [r5, #0]
 800568a:	b103      	cbz	r3, 800568e <_read_r+0x1e>
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	bd38      	pop	{r3, r4, r5, pc}
 8005690:	2400038c 	.word	0x2400038c

08005694 <_write_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	4d07      	ldr	r5, [pc, #28]	@ (80056b4 <_write_r+0x20>)
 8005698:	4604      	mov	r4, r0
 800569a:	4608      	mov	r0, r1
 800569c:	4611      	mov	r1, r2
 800569e:	2200      	movs	r2, #0
 80056a0:	602a      	str	r2, [r5, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	f7fb f9cc 	bl	8000a40 <_write>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d102      	bne.n	80056b2 <_write_r+0x1e>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	b103      	cbz	r3, 80056b2 <_write_r+0x1e>
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	2400038c 	.word	0x2400038c

080056b8 <__errno>:
 80056b8:	4b01      	ldr	r3, [pc, #4]	@ (80056c0 <__errno+0x8>)
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	2400001c 	.word	0x2400001c

080056c4 <__libc_init_array>:
 80056c4:	b570      	push	{r4, r5, r6, lr}
 80056c6:	4d0d      	ldr	r5, [pc, #52]	@ (80056fc <__libc_init_array+0x38>)
 80056c8:	4c0d      	ldr	r4, [pc, #52]	@ (8005700 <__libc_init_array+0x3c>)
 80056ca:	1b64      	subs	r4, r4, r5
 80056cc:	10a4      	asrs	r4, r4, #2
 80056ce:	2600      	movs	r6, #0
 80056d0:	42a6      	cmp	r6, r4
 80056d2:	d109      	bne.n	80056e8 <__libc_init_array+0x24>
 80056d4:	4d0b      	ldr	r5, [pc, #44]	@ (8005704 <__libc_init_array+0x40>)
 80056d6:	4c0c      	ldr	r4, [pc, #48]	@ (8005708 <__libc_init_array+0x44>)
 80056d8:	f001 fdbe 	bl	8007258 <_init>
 80056dc:	1b64      	subs	r4, r4, r5
 80056de:	10a4      	asrs	r4, r4, #2
 80056e0:	2600      	movs	r6, #0
 80056e2:	42a6      	cmp	r6, r4
 80056e4:	d105      	bne.n	80056f2 <__libc_init_array+0x2e>
 80056e6:	bd70      	pop	{r4, r5, r6, pc}
 80056e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ec:	4798      	blx	r3
 80056ee:	3601      	adds	r6, #1
 80056f0:	e7ee      	b.n	80056d0 <__libc_init_array+0xc>
 80056f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f6:	4798      	blx	r3
 80056f8:	3601      	adds	r6, #1
 80056fa:	e7f2      	b.n	80056e2 <__libc_init_array+0x1e>
 80056fc:	080076e8 	.word	0x080076e8
 8005700:	080076e8 	.word	0x080076e8
 8005704:	080076e8 	.word	0x080076e8
 8005708:	080076ec 	.word	0x080076ec

0800570c <__retarget_lock_init_recursive>:
 800570c:	4770      	bx	lr

0800570e <__retarget_lock_acquire_recursive>:
 800570e:	4770      	bx	lr

08005710 <__retarget_lock_release_recursive>:
 8005710:	4770      	bx	lr

08005712 <quorem>:
 8005712:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005716:	6903      	ldr	r3, [r0, #16]
 8005718:	690c      	ldr	r4, [r1, #16]
 800571a:	42a3      	cmp	r3, r4
 800571c:	4607      	mov	r7, r0
 800571e:	db7e      	blt.n	800581e <quorem+0x10c>
 8005720:	3c01      	subs	r4, #1
 8005722:	f101 0814 	add.w	r8, r1, #20
 8005726:	00a3      	lsls	r3, r4, #2
 8005728:	f100 0514 	add.w	r5, r0, #20
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005732:	9301      	str	r3, [sp, #4]
 8005734:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005738:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800573c:	3301      	adds	r3, #1
 800573e:	429a      	cmp	r2, r3
 8005740:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005744:	fbb2 f6f3 	udiv	r6, r2, r3
 8005748:	d32e      	bcc.n	80057a8 <quorem+0x96>
 800574a:	f04f 0a00 	mov.w	sl, #0
 800574e:	46c4      	mov	ip, r8
 8005750:	46ae      	mov	lr, r5
 8005752:	46d3      	mov	fp, sl
 8005754:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005758:	b298      	uxth	r0, r3
 800575a:	fb06 a000 	mla	r0, r6, r0, sl
 800575e:	0c02      	lsrs	r2, r0, #16
 8005760:	0c1b      	lsrs	r3, r3, #16
 8005762:	fb06 2303 	mla	r3, r6, r3, r2
 8005766:	f8de 2000 	ldr.w	r2, [lr]
 800576a:	b280      	uxth	r0, r0
 800576c:	b292      	uxth	r2, r2
 800576e:	1a12      	subs	r2, r2, r0
 8005770:	445a      	add	r2, fp
 8005772:	f8de 0000 	ldr.w	r0, [lr]
 8005776:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800577a:	b29b      	uxth	r3, r3
 800577c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005780:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005784:	b292      	uxth	r2, r2
 8005786:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800578a:	45e1      	cmp	r9, ip
 800578c:	f84e 2b04 	str.w	r2, [lr], #4
 8005790:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005794:	d2de      	bcs.n	8005754 <quorem+0x42>
 8005796:	9b00      	ldr	r3, [sp, #0]
 8005798:	58eb      	ldr	r3, [r5, r3]
 800579a:	b92b      	cbnz	r3, 80057a8 <quorem+0x96>
 800579c:	9b01      	ldr	r3, [sp, #4]
 800579e:	3b04      	subs	r3, #4
 80057a0:	429d      	cmp	r5, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	d32f      	bcc.n	8005806 <quorem+0xf4>
 80057a6:	613c      	str	r4, [r7, #16]
 80057a8:	4638      	mov	r0, r7
 80057aa:	f001 f90d 	bl	80069c8 <__mcmp>
 80057ae:	2800      	cmp	r0, #0
 80057b0:	db25      	blt.n	80057fe <quorem+0xec>
 80057b2:	4629      	mov	r1, r5
 80057b4:	2000      	movs	r0, #0
 80057b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80057ba:	f8d1 c000 	ldr.w	ip, [r1]
 80057be:	fa1f fe82 	uxth.w	lr, r2
 80057c2:	fa1f f38c 	uxth.w	r3, ip
 80057c6:	eba3 030e 	sub.w	r3, r3, lr
 80057ca:	4403      	add	r3, r0
 80057cc:	0c12      	lsrs	r2, r2, #16
 80057ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80057d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057dc:	45c1      	cmp	r9, r8
 80057de:	f841 3b04 	str.w	r3, [r1], #4
 80057e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80057e6:	d2e6      	bcs.n	80057b6 <quorem+0xa4>
 80057e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057f0:	b922      	cbnz	r2, 80057fc <quorem+0xea>
 80057f2:	3b04      	subs	r3, #4
 80057f4:	429d      	cmp	r5, r3
 80057f6:	461a      	mov	r2, r3
 80057f8:	d30b      	bcc.n	8005812 <quorem+0x100>
 80057fa:	613c      	str	r4, [r7, #16]
 80057fc:	3601      	adds	r6, #1
 80057fe:	4630      	mov	r0, r6
 8005800:	b003      	add	sp, #12
 8005802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005806:	6812      	ldr	r2, [r2, #0]
 8005808:	3b04      	subs	r3, #4
 800580a:	2a00      	cmp	r2, #0
 800580c:	d1cb      	bne.n	80057a6 <quorem+0x94>
 800580e:	3c01      	subs	r4, #1
 8005810:	e7c6      	b.n	80057a0 <quorem+0x8e>
 8005812:	6812      	ldr	r2, [r2, #0]
 8005814:	3b04      	subs	r3, #4
 8005816:	2a00      	cmp	r2, #0
 8005818:	d1ef      	bne.n	80057fa <quorem+0xe8>
 800581a:	3c01      	subs	r4, #1
 800581c:	e7ea      	b.n	80057f4 <quorem+0xe2>
 800581e:	2000      	movs	r0, #0
 8005820:	e7ee      	b.n	8005800 <quorem+0xee>
 8005822:	0000      	movs	r0, r0
 8005824:	0000      	movs	r0, r0
	...

08005828 <_dtoa_r>:
 8005828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800582c:	ed2d 8b02 	vpush	{d8}
 8005830:	69c7      	ldr	r7, [r0, #28]
 8005832:	b091      	sub	sp, #68	@ 0x44
 8005834:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005838:	ec55 4b10 	vmov	r4, r5, d0
 800583c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800583e:	9107      	str	r1, [sp, #28]
 8005840:	4681      	mov	r9, r0
 8005842:	9209      	str	r2, [sp, #36]	@ 0x24
 8005844:	930d      	str	r3, [sp, #52]	@ 0x34
 8005846:	b97f      	cbnz	r7, 8005868 <_dtoa_r+0x40>
 8005848:	2010      	movs	r0, #16
 800584a:	f000 fd8d 	bl	8006368 <malloc>
 800584e:	4602      	mov	r2, r0
 8005850:	f8c9 001c 	str.w	r0, [r9, #28]
 8005854:	b920      	cbnz	r0, 8005860 <_dtoa_r+0x38>
 8005856:	4ba0      	ldr	r3, [pc, #640]	@ (8005ad8 <_dtoa_r+0x2b0>)
 8005858:	21ef      	movs	r1, #239	@ 0xef
 800585a:	48a0      	ldr	r0, [pc, #640]	@ (8005adc <_dtoa_r+0x2b4>)
 800585c:	f001 fc4c 	bl	80070f8 <__assert_func>
 8005860:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005864:	6007      	str	r7, [r0, #0]
 8005866:	60c7      	str	r7, [r0, #12]
 8005868:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800586c:	6819      	ldr	r1, [r3, #0]
 800586e:	b159      	cbz	r1, 8005888 <_dtoa_r+0x60>
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	604a      	str	r2, [r1, #4]
 8005874:	2301      	movs	r3, #1
 8005876:	4093      	lsls	r3, r2
 8005878:	608b      	str	r3, [r1, #8]
 800587a:	4648      	mov	r0, r9
 800587c:	f000 fe6a 	bl	8006554 <_Bfree>
 8005880:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	1e2b      	subs	r3, r5, #0
 800588a:	bfbb      	ittet	lt
 800588c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005890:	9303      	strlt	r3, [sp, #12]
 8005892:	2300      	movge	r3, #0
 8005894:	2201      	movlt	r2, #1
 8005896:	bfac      	ite	ge
 8005898:	6033      	strge	r3, [r6, #0]
 800589a:	6032      	strlt	r2, [r6, #0]
 800589c:	4b90      	ldr	r3, [pc, #576]	@ (8005ae0 <_dtoa_r+0x2b8>)
 800589e:	9e03      	ldr	r6, [sp, #12]
 80058a0:	43b3      	bics	r3, r6
 80058a2:	d110      	bne.n	80058c6 <_dtoa_r+0x9e>
 80058a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80058a6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80058b0:	4323      	orrs	r3, r4
 80058b2:	f000 84de 	beq.w	8006272 <_dtoa_r+0xa4a>
 80058b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80058b8:	4f8a      	ldr	r7, [pc, #552]	@ (8005ae4 <_dtoa_r+0x2bc>)
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 84e0 	beq.w	8006280 <_dtoa_r+0xa58>
 80058c0:	1cfb      	adds	r3, r7, #3
 80058c2:	f000 bcdb 	b.w	800627c <_dtoa_r+0xa54>
 80058c6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80058ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80058ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058d2:	d10a      	bne.n	80058ea <_dtoa_r+0xc2>
 80058d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80058d6:	2301      	movs	r3, #1
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80058dc:	b113      	cbz	r3, 80058e4 <_dtoa_r+0xbc>
 80058de:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80058e0:	4b81      	ldr	r3, [pc, #516]	@ (8005ae8 <_dtoa_r+0x2c0>)
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	4f81      	ldr	r7, [pc, #516]	@ (8005aec <_dtoa_r+0x2c4>)
 80058e6:	f000 bccb 	b.w	8006280 <_dtoa_r+0xa58>
 80058ea:	aa0e      	add	r2, sp, #56	@ 0x38
 80058ec:	a90f      	add	r1, sp, #60	@ 0x3c
 80058ee:	4648      	mov	r0, r9
 80058f0:	eeb0 0b48 	vmov.f64	d0, d8
 80058f4:	f001 f918 	bl	8006b28 <__d2b>
 80058f8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80058fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80058fe:	9001      	str	r0, [sp, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d045      	beq.n	8005990 <_dtoa_r+0x168>
 8005904:	eeb0 7b48 	vmov.f64	d7, d8
 8005908:	ee18 1a90 	vmov	r1, s17
 800590c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005910:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8005914:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005918:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800591c:	2500      	movs	r5, #0
 800591e:	ee07 1a90 	vmov	s15, r1
 8005922:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8005926:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005ac0 <_dtoa_r+0x298>
 800592a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800592e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8005ac8 <_dtoa_r+0x2a0>
 8005932:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005936:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005ad0 <_dtoa_r+0x2a8>
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005942:	eeb0 7b46 	vmov.f64	d7, d6
 8005946:	eea4 7b05 	vfma.f64	d7, d4, d5
 800594a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800594e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005956:	ee16 8a90 	vmov	r8, s13
 800595a:	d508      	bpl.n	800596e <_dtoa_r+0x146>
 800595c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005960:	eeb4 6b47 	vcmp.f64	d6, d7
 8005964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005968:	bf18      	it	ne
 800596a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800596e:	f1b8 0f16 	cmp.w	r8, #22
 8005972:	d82b      	bhi.n	80059cc <_dtoa_r+0x1a4>
 8005974:	495e      	ldr	r1, [pc, #376]	@ (8005af0 <_dtoa_r+0x2c8>)
 8005976:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800597a:	ed91 7b00 	vldr	d7, [r1]
 800597e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005986:	d501      	bpl.n	800598c <_dtoa_r+0x164>
 8005988:	f108 38ff 	add.w	r8, r8, #4294967295
 800598c:	2100      	movs	r1, #0
 800598e:	e01e      	b.n	80059ce <_dtoa_r+0x1a6>
 8005990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005992:	4413      	add	r3, r2
 8005994:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8005998:	2920      	cmp	r1, #32
 800599a:	bfc1      	itttt	gt
 800599c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80059a0:	408e      	lslgt	r6, r1
 80059a2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80059a6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80059aa:	bfd6      	itet	le
 80059ac:	f1c1 0120 	rsble	r1, r1, #32
 80059b0:	4331      	orrgt	r1, r6
 80059b2:	fa04 f101 	lslle.w	r1, r4, r1
 80059b6:	ee07 1a90 	vmov	s15, r1
 80059ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80059be:	3b01      	subs	r3, #1
 80059c0:	ee17 1a90 	vmov	r1, s15
 80059c4:	2501      	movs	r5, #1
 80059c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80059ca:	e7a8      	b.n	800591e <_dtoa_r+0xf6>
 80059cc:	2101      	movs	r1, #1
 80059ce:	1ad2      	subs	r2, r2, r3
 80059d0:	1e53      	subs	r3, r2, #1
 80059d2:	9306      	str	r3, [sp, #24]
 80059d4:	bf45      	ittet	mi
 80059d6:	f1c2 0301 	rsbmi	r3, r2, #1
 80059da:	9305      	strmi	r3, [sp, #20]
 80059dc:	2300      	movpl	r3, #0
 80059de:	2300      	movmi	r3, #0
 80059e0:	bf4c      	ite	mi
 80059e2:	9306      	strmi	r3, [sp, #24]
 80059e4:	9305      	strpl	r3, [sp, #20]
 80059e6:	f1b8 0f00 	cmp.w	r8, #0
 80059ea:	910c      	str	r1, [sp, #48]	@ 0x30
 80059ec:	db18      	blt.n	8005a20 <_dtoa_r+0x1f8>
 80059ee:	9b06      	ldr	r3, [sp, #24]
 80059f0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80059f4:	4443      	add	r3, r8
 80059f6:	9306      	str	r3, [sp, #24]
 80059f8:	2300      	movs	r3, #0
 80059fa:	9a07      	ldr	r2, [sp, #28]
 80059fc:	2a09      	cmp	r2, #9
 80059fe:	d849      	bhi.n	8005a94 <_dtoa_r+0x26c>
 8005a00:	2a05      	cmp	r2, #5
 8005a02:	bfc4      	itt	gt
 8005a04:	3a04      	subgt	r2, #4
 8005a06:	9207      	strgt	r2, [sp, #28]
 8005a08:	9a07      	ldr	r2, [sp, #28]
 8005a0a:	f1a2 0202 	sub.w	r2, r2, #2
 8005a0e:	bfcc      	ite	gt
 8005a10:	2400      	movgt	r4, #0
 8005a12:	2401      	movle	r4, #1
 8005a14:	2a03      	cmp	r2, #3
 8005a16:	d848      	bhi.n	8005aaa <_dtoa_r+0x282>
 8005a18:	e8df f002 	tbb	[pc, r2]
 8005a1c:	3a2c2e0b 	.word	0x3a2c2e0b
 8005a20:	9b05      	ldr	r3, [sp, #20]
 8005a22:	2200      	movs	r2, #0
 8005a24:	eba3 0308 	sub.w	r3, r3, r8
 8005a28:	9305      	str	r3, [sp, #20]
 8005a2a:	920a      	str	r2, [sp, #40]	@ 0x28
 8005a2c:	f1c8 0300 	rsb	r3, r8, #0
 8005a30:	e7e3      	b.n	80059fa <_dtoa_r+0x1d2>
 8005a32:	2200      	movs	r2, #0
 8005a34:	9208      	str	r2, [sp, #32]
 8005a36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a38:	2a00      	cmp	r2, #0
 8005a3a:	dc39      	bgt.n	8005ab0 <_dtoa_r+0x288>
 8005a3c:	f04f 0b01 	mov.w	fp, #1
 8005a40:	46da      	mov	sl, fp
 8005a42:	465a      	mov	r2, fp
 8005a44:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8005a48:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	2004      	movs	r0, #4
 8005a50:	f100 0614 	add.w	r6, r0, #20
 8005a54:	4296      	cmp	r6, r2
 8005a56:	d930      	bls.n	8005aba <_dtoa_r+0x292>
 8005a58:	6079      	str	r1, [r7, #4]
 8005a5a:	4648      	mov	r0, r9
 8005a5c:	9304      	str	r3, [sp, #16]
 8005a5e:	f000 fd39 	bl	80064d4 <_Balloc>
 8005a62:	9b04      	ldr	r3, [sp, #16]
 8005a64:	4607      	mov	r7, r0
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d146      	bne.n	8005af8 <_dtoa_r+0x2d0>
 8005a6a:	4b22      	ldr	r3, [pc, #136]	@ (8005af4 <_dtoa_r+0x2cc>)
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005a72:	e6f2      	b.n	800585a <_dtoa_r+0x32>
 8005a74:	2201      	movs	r2, #1
 8005a76:	e7dd      	b.n	8005a34 <_dtoa_r+0x20c>
 8005a78:	2200      	movs	r2, #0
 8005a7a:	9208      	str	r2, [sp, #32]
 8005a7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a7e:	eb08 0b02 	add.w	fp, r8, r2
 8005a82:	f10b 0a01 	add.w	sl, fp, #1
 8005a86:	4652      	mov	r2, sl
 8005a88:	2a01      	cmp	r2, #1
 8005a8a:	bfb8      	it	lt
 8005a8c:	2201      	movlt	r2, #1
 8005a8e:	e7db      	b.n	8005a48 <_dtoa_r+0x220>
 8005a90:	2201      	movs	r2, #1
 8005a92:	e7f2      	b.n	8005a7a <_dtoa_r+0x252>
 8005a94:	2401      	movs	r4, #1
 8005a96:	2200      	movs	r2, #0
 8005a98:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8005a9c:	f04f 3bff 	mov.w	fp, #4294967295
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	46da      	mov	sl, fp
 8005aa4:	2212      	movs	r2, #18
 8005aa6:	9109      	str	r1, [sp, #36]	@ 0x24
 8005aa8:	e7ce      	b.n	8005a48 <_dtoa_r+0x220>
 8005aaa:	2201      	movs	r2, #1
 8005aac:	9208      	str	r2, [sp, #32]
 8005aae:	e7f5      	b.n	8005a9c <_dtoa_r+0x274>
 8005ab0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8005ab4:	46da      	mov	sl, fp
 8005ab6:	465a      	mov	r2, fp
 8005ab8:	e7c6      	b.n	8005a48 <_dtoa_r+0x220>
 8005aba:	3101      	adds	r1, #1
 8005abc:	0040      	lsls	r0, r0, #1
 8005abe:	e7c7      	b.n	8005a50 <_dtoa_r+0x228>
 8005ac0:	636f4361 	.word	0x636f4361
 8005ac4:	3fd287a7 	.word	0x3fd287a7
 8005ac8:	8b60c8b3 	.word	0x8b60c8b3
 8005acc:	3fc68a28 	.word	0x3fc68a28
 8005ad0:	509f79fb 	.word	0x509f79fb
 8005ad4:	3fd34413 	.word	0x3fd34413
 8005ad8:	080073ad 	.word	0x080073ad
 8005adc:	080073c4 	.word	0x080073c4
 8005ae0:	7ff00000 	.word	0x7ff00000
 8005ae4:	080073a9 	.word	0x080073a9
 8005ae8:	0800737d 	.word	0x0800737d
 8005aec:	0800737c 	.word	0x0800737c
 8005af0:	080074c0 	.word	0x080074c0
 8005af4:	0800741c 	.word	0x0800741c
 8005af8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8005afc:	f1ba 0f0e 	cmp.w	sl, #14
 8005b00:	6010      	str	r0, [r2, #0]
 8005b02:	d86f      	bhi.n	8005be4 <_dtoa_r+0x3bc>
 8005b04:	2c00      	cmp	r4, #0
 8005b06:	d06d      	beq.n	8005be4 <_dtoa_r+0x3bc>
 8005b08:	f1b8 0f00 	cmp.w	r8, #0
 8005b0c:	f340 80c2 	ble.w	8005c94 <_dtoa_r+0x46c>
 8005b10:	4aca      	ldr	r2, [pc, #808]	@ (8005e3c <_dtoa_r+0x614>)
 8005b12:	f008 010f 	and.w	r1, r8, #15
 8005b16:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005b1a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8005b1e:	ed92 7b00 	vldr	d7, [r2]
 8005b22:	ea4f 1128 	mov.w	r1, r8, asr #4
 8005b26:	f000 80a9 	beq.w	8005c7c <_dtoa_r+0x454>
 8005b2a:	4ac5      	ldr	r2, [pc, #788]	@ (8005e40 <_dtoa_r+0x618>)
 8005b2c:	ed92 6b08 	vldr	d6, [r2, #32]
 8005b30:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005b34:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005b38:	f001 010f 	and.w	r1, r1, #15
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	48c0      	ldr	r0, [pc, #768]	@ (8005e40 <_dtoa_r+0x618>)
 8005b40:	2900      	cmp	r1, #0
 8005b42:	f040 809d 	bne.w	8005c80 <_dtoa_r+0x458>
 8005b46:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005b4a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005b4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b52:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005b54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b58:	2900      	cmp	r1, #0
 8005b5a:	f000 80c1 	beq.w	8005ce0 <_dtoa_r+0x4b8>
 8005b5e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005b62:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b6a:	f140 80b9 	bpl.w	8005ce0 <_dtoa_r+0x4b8>
 8005b6e:	f1ba 0f00 	cmp.w	sl, #0
 8005b72:	f000 80b5 	beq.w	8005ce0 <_dtoa_r+0x4b8>
 8005b76:	f1bb 0f00 	cmp.w	fp, #0
 8005b7a:	dd31      	ble.n	8005be0 <_dtoa_r+0x3b8>
 8005b7c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8005b80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005b84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b88:	f108 31ff 	add.w	r1, r8, #4294967295
 8005b8c:	9104      	str	r1, [sp, #16]
 8005b8e:	3201      	adds	r2, #1
 8005b90:	465c      	mov	r4, fp
 8005b92:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005b96:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8005b9a:	ee07 2a90 	vmov	s15, r2
 8005b9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005ba2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005ba6:	ee15 2a90 	vmov	r2, s11
 8005baa:	ec51 0b15 	vmov	r0, r1, d5
 8005bae:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8005bb2:	2c00      	cmp	r4, #0
 8005bb4:	f040 8098 	bne.w	8005ce8 <_dtoa_r+0x4c0>
 8005bb8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005bbc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005bc0:	ec41 0b17 	vmov	d7, r0, r1
 8005bc4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bcc:	f300 8261 	bgt.w	8006092 <_dtoa_r+0x86a>
 8005bd0:	eeb1 7b47 	vneg.f64	d7, d7
 8005bd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bdc:	f100 80f5 	bmi.w	8005dca <_dtoa_r+0x5a2>
 8005be0:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005be4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005be6:	2a00      	cmp	r2, #0
 8005be8:	f2c0 812c 	blt.w	8005e44 <_dtoa_r+0x61c>
 8005bec:	f1b8 0f0e 	cmp.w	r8, #14
 8005bf0:	f300 8128 	bgt.w	8005e44 <_dtoa_r+0x61c>
 8005bf4:	4b91      	ldr	r3, [pc, #580]	@ (8005e3c <_dtoa_r+0x614>)
 8005bf6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005bfa:	ed93 6b00 	vldr	d6, [r3]
 8005bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	da03      	bge.n	8005c0c <_dtoa_r+0x3e4>
 8005c04:	f1ba 0f00 	cmp.w	sl, #0
 8005c08:	f340 80d2 	ble.w	8005db0 <_dtoa_r+0x588>
 8005c0c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8005c10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c14:	463e      	mov	r6, r7
 8005c16:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005c1a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005c1e:	ee15 3a10 	vmov	r3, s10
 8005c22:	3330      	adds	r3, #48	@ 0x30
 8005c24:	f806 3b01 	strb.w	r3, [r6], #1
 8005c28:	1bf3      	subs	r3, r6, r7
 8005c2a:	459a      	cmp	sl, r3
 8005c2c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005c30:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005c34:	f040 80f8 	bne.w	8005e28 <_dtoa_r+0x600>
 8005c38:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005c3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c44:	f300 80dd 	bgt.w	8005e02 <_dtoa_r+0x5da>
 8005c48:	eeb4 7b46 	vcmp.f64	d7, d6
 8005c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c50:	d104      	bne.n	8005c5c <_dtoa_r+0x434>
 8005c52:	ee15 3a10 	vmov	r3, s10
 8005c56:	07db      	lsls	r3, r3, #31
 8005c58:	f100 80d3 	bmi.w	8005e02 <_dtoa_r+0x5da>
 8005c5c:	9901      	ldr	r1, [sp, #4]
 8005c5e:	4648      	mov	r0, r9
 8005c60:	f000 fc78 	bl	8006554 <_Bfree>
 8005c64:	2300      	movs	r3, #0
 8005c66:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005c68:	7033      	strb	r3, [r6, #0]
 8005c6a:	f108 0301 	add.w	r3, r8, #1
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 8304 	beq.w	8006280 <_dtoa_r+0xa58>
 8005c78:	601e      	str	r6, [r3, #0]
 8005c7a:	e301      	b.n	8006280 <_dtoa_r+0xa58>
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	e75e      	b.n	8005b3e <_dtoa_r+0x316>
 8005c80:	07cc      	lsls	r4, r1, #31
 8005c82:	d504      	bpl.n	8005c8e <_dtoa_r+0x466>
 8005c84:	ed90 6b00 	vldr	d6, [r0]
 8005c88:	3201      	adds	r2, #1
 8005c8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c8e:	1049      	asrs	r1, r1, #1
 8005c90:	3008      	adds	r0, #8
 8005c92:	e755      	b.n	8005b40 <_dtoa_r+0x318>
 8005c94:	d022      	beq.n	8005cdc <_dtoa_r+0x4b4>
 8005c96:	f1c8 0100 	rsb	r1, r8, #0
 8005c9a:	4a68      	ldr	r2, [pc, #416]	@ (8005e3c <_dtoa_r+0x614>)
 8005c9c:	f001 000f 	and.w	r0, r1, #15
 8005ca0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005ca4:	ed92 7b00 	vldr	d7, [r2]
 8005ca8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005cac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005cb0:	4863      	ldr	r0, [pc, #396]	@ (8005e40 <_dtoa_r+0x618>)
 8005cb2:	1109      	asrs	r1, r1, #4
 8005cb4:	2400      	movs	r4, #0
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	b929      	cbnz	r1, 8005cc6 <_dtoa_r+0x49e>
 8005cba:	2c00      	cmp	r4, #0
 8005cbc:	f43f af49 	beq.w	8005b52 <_dtoa_r+0x32a>
 8005cc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005cc4:	e745      	b.n	8005b52 <_dtoa_r+0x32a>
 8005cc6:	07ce      	lsls	r6, r1, #31
 8005cc8:	d505      	bpl.n	8005cd6 <_dtoa_r+0x4ae>
 8005cca:	ed90 6b00 	vldr	d6, [r0]
 8005cce:	3201      	adds	r2, #1
 8005cd0:	2401      	movs	r4, #1
 8005cd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005cd6:	1049      	asrs	r1, r1, #1
 8005cd8:	3008      	adds	r0, #8
 8005cda:	e7ed      	b.n	8005cb8 <_dtoa_r+0x490>
 8005cdc:	2202      	movs	r2, #2
 8005cde:	e738      	b.n	8005b52 <_dtoa_r+0x32a>
 8005ce0:	f8cd 8010 	str.w	r8, [sp, #16]
 8005ce4:	4654      	mov	r4, sl
 8005ce6:	e754      	b.n	8005b92 <_dtoa_r+0x36a>
 8005ce8:	4a54      	ldr	r2, [pc, #336]	@ (8005e3c <_dtoa_r+0x614>)
 8005cea:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005cee:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005cf2:	9a08      	ldr	r2, [sp, #32]
 8005cf4:	ec41 0b17 	vmov	d7, r0, r1
 8005cf8:	443c      	add	r4, r7
 8005cfa:	b34a      	cbz	r2, 8005d50 <_dtoa_r+0x528>
 8005cfc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8005d00:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8005d04:	463e      	mov	r6, r7
 8005d06:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005d0a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005d0e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005d12:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005d16:	ee14 2a90 	vmov	r2, s9
 8005d1a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005d1e:	3230      	adds	r2, #48	@ 0x30
 8005d20:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005d24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d2c:	f806 2b01 	strb.w	r2, [r6], #1
 8005d30:	d438      	bmi.n	8005da4 <_dtoa_r+0x57c>
 8005d32:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005d36:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3e:	d462      	bmi.n	8005e06 <_dtoa_r+0x5de>
 8005d40:	42a6      	cmp	r6, r4
 8005d42:	f43f af4d 	beq.w	8005be0 <_dtoa_r+0x3b8>
 8005d46:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005d4a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005d4e:	e7e0      	b.n	8005d12 <_dtoa_r+0x4ea>
 8005d50:	4621      	mov	r1, r4
 8005d52:	463e      	mov	r6, r7
 8005d54:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005d58:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005d5c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005d60:	ee14 2a90 	vmov	r2, s9
 8005d64:	3230      	adds	r2, #48	@ 0x30
 8005d66:	f806 2b01 	strb.w	r2, [r6], #1
 8005d6a:	42a6      	cmp	r6, r4
 8005d6c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005d70:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005d74:	d119      	bne.n	8005daa <_dtoa_r+0x582>
 8005d76:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8005d7a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005d7e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d86:	dc3e      	bgt.n	8005e06 <_dtoa_r+0x5de>
 8005d88:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005d8c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d94:	f57f af24 	bpl.w	8005be0 <_dtoa_r+0x3b8>
 8005d98:	460e      	mov	r6, r1
 8005d9a:	3901      	subs	r1, #1
 8005d9c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005da0:	2b30      	cmp	r3, #48	@ 0x30
 8005da2:	d0f9      	beq.n	8005d98 <_dtoa_r+0x570>
 8005da4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005da8:	e758      	b.n	8005c5c <_dtoa_r+0x434>
 8005daa:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005dae:	e7d5      	b.n	8005d5c <_dtoa_r+0x534>
 8005db0:	d10b      	bne.n	8005dca <_dtoa_r+0x5a2>
 8005db2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005db6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005dba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005dbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc6:	f2c0 8161 	blt.w	800608c <_dtoa_r+0x864>
 8005dca:	2400      	movs	r4, #0
 8005dcc:	4625      	mov	r5, r4
 8005dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	9304      	str	r3, [sp, #16]
 8005dd4:	463e      	mov	r6, r7
 8005dd6:	f04f 0800 	mov.w	r8, #0
 8005dda:	4621      	mov	r1, r4
 8005ddc:	4648      	mov	r0, r9
 8005dde:	f000 fbb9 	bl	8006554 <_Bfree>
 8005de2:	2d00      	cmp	r5, #0
 8005de4:	d0de      	beq.n	8005da4 <_dtoa_r+0x57c>
 8005de6:	f1b8 0f00 	cmp.w	r8, #0
 8005dea:	d005      	beq.n	8005df8 <_dtoa_r+0x5d0>
 8005dec:	45a8      	cmp	r8, r5
 8005dee:	d003      	beq.n	8005df8 <_dtoa_r+0x5d0>
 8005df0:	4641      	mov	r1, r8
 8005df2:	4648      	mov	r0, r9
 8005df4:	f000 fbae 	bl	8006554 <_Bfree>
 8005df8:	4629      	mov	r1, r5
 8005dfa:	4648      	mov	r0, r9
 8005dfc:	f000 fbaa 	bl	8006554 <_Bfree>
 8005e00:	e7d0      	b.n	8005da4 <_dtoa_r+0x57c>
 8005e02:	f8cd 8010 	str.w	r8, [sp, #16]
 8005e06:	4633      	mov	r3, r6
 8005e08:	461e      	mov	r6, r3
 8005e0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e0e:	2a39      	cmp	r2, #57	@ 0x39
 8005e10:	d106      	bne.n	8005e20 <_dtoa_r+0x5f8>
 8005e12:	429f      	cmp	r7, r3
 8005e14:	d1f8      	bne.n	8005e08 <_dtoa_r+0x5e0>
 8005e16:	9a04      	ldr	r2, [sp, #16]
 8005e18:	3201      	adds	r2, #1
 8005e1a:	9204      	str	r2, [sp, #16]
 8005e1c:	2230      	movs	r2, #48	@ 0x30
 8005e1e:	703a      	strb	r2, [r7, #0]
 8005e20:	781a      	ldrb	r2, [r3, #0]
 8005e22:	3201      	adds	r2, #1
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	e7bd      	b.n	8005da4 <_dtoa_r+0x57c>
 8005e28:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005e2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e34:	f47f aeef 	bne.w	8005c16 <_dtoa_r+0x3ee>
 8005e38:	e710      	b.n	8005c5c <_dtoa_r+0x434>
 8005e3a:	bf00      	nop
 8005e3c:	080074c0 	.word	0x080074c0
 8005e40:	08007498 	.word	0x08007498
 8005e44:	9908      	ldr	r1, [sp, #32]
 8005e46:	2900      	cmp	r1, #0
 8005e48:	f000 80e3 	beq.w	8006012 <_dtoa_r+0x7ea>
 8005e4c:	9907      	ldr	r1, [sp, #28]
 8005e4e:	2901      	cmp	r1, #1
 8005e50:	f300 80c8 	bgt.w	8005fe4 <_dtoa_r+0x7bc>
 8005e54:	2d00      	cmp	r5, #0
 8005e56:	f000 80c1 	beq.w	8005fdc <_dtoa_r+0x7b4>
 8005e5a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005e5e:	9e05      	ldr	r6, [sp, #20]
 8005e60:	461c      	mov	r4, r3
 8005e62:	9304      	str	r3, [sp, #16]
 8005e64:	9b05      	ldr	r3, [sp, #20]
 8005e66:	4413      	add	r3, r2
 8005e68:	9305      	str	r3, [sp, #20]
 8005e6a:	9b06      	ldr	r3, [sp, #24]
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	4413      	add	r3, r2
 8005e70:	4648      	mov	r0, r9
 8005e72:	9306      	str	r3, [sp, #24]
 8005e74:	f000 fc22 	bl	80066bc <__i2b>
 8005e78:	9b04      	ldr	r3, [sp, #16]
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	b166      	cbz	r6, 8005e98 <_dtoa_r+0x670>
 8005e7e:	9a06      	ldr	r2, [sp, #24]
 8005e80:	2a00      	cmp	r2, #0
 8005e82:	dd09      	ble.n	8005e98 <_dtoa_r+0x670>
 8005e84:	42b2      	cmp	r2, r6
 8005e86:	9905      	ldr	r1, [sp, #20]
 8005e88:	bfa8      	it	ge
 8005e8a:	4632      	movge	r2, r6
 8005e8c:	1a89      	subs	r1, r1, r2
 8005e8e:	9105      	str	r1, [sp, #20]
 8005e90:	9906      	ldr	r1, [sp, #24]
 8005e92:	1ab6      	subs	r6, r6, r2
 8005e94:	1a8a      	subs	r2, r1, r2
 8005e96:	9206      	str	r2, [sp, #24]
 8005e98:	b1fb      	cbz	r3, 8005eda <_dtoa_r+0x6b2>
 8005e9a:	9a08      	ldr	r2, [sp, #32]
 8005e9c:	2a00      	cmp	r2, #0
 8005e9e:	f000 80bc 	beq.w	800601a <_dtoa_r+0x7f2>
 8005ea2:	b19c      	cbz	r4, 8005ecc <_dtoa_r+0x6a4>
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	4622      	mov	r2, r4
 8005ea8:	4648      	mov	r0, r9
 8005eaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005eac:	f000 fcc6 	bl	800683c <__pow5mult>
 8005eb0:	9a01      	ldr	r2, [sp, #4]
 8005eb2:	4601      	mov	r1, r0
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	4648      	mov	r0, r9
 8005eb8:	f000 fc16 	bl	80066e8 <__multiply>
 8005ebc:	9901      	ldr	r1, [sp, #4]
 8005ebe:	9004      	str	r0, [sp, #16]
 8005ec0:	4648      	mov	r0, r9
 8005ec2:	f000 fb47 	bl	8006554 <_Bfree>
 8005ec6:	9a04      	ldr	r2, [sp, #16]
 8005ec8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005eca:	9201      	str	r2, [sp, #4]
 8005ecc:	1b1a      	subs	r2, r3, r4
 8005ece:	d004      	beq.n	8005eda <_dtoa_r+0x6b2>
 8005ed0:	9901      	ldr	r1, [sp, #4]
 8005ed2:	4648      	mov	r0, r9
 8005ed4:	f000 fcb2 	bl	800683c <__pow5mult>
 8005ed8:	9001      	str	r0, [sp, #4]
 8005eda:	2101      	movs	r1, #1
 8005edc:	4648      	mov	r0, r9
 8005ede:	f000 fbed 	bl	80066bc <__i2b>
 8005ee2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 81d0 	beq.w	800628c <_dtoa_r+0xa64>
 8005eec:	461a      	mov	r2, r3
 8005eee:	4601      	mov	r1, r0
 8005ef0:	4648      	mov	r0, r9
 8005ef2:	f000 fca3 	bl	800683c <__pow5mult>
 8005ef6:	9b07      	ldr	r3, [sp, #28]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	4604      	mov	r4, r0
 8005efc:	f300 8095 	bgt.w	800602a <_dtoa_r+0x802>
 8005f00:	9b02      	ldr	r3, [sp, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f040 808b 	bne.w	800601e <_dtoa_r+0x7f6>
 8005f08:	9b03      	ldr	r3, [sp, #12]
 8005f0a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005f0e:	2a00      	cmp	r2, #0
 8005f10:	f040 8087 	bne.w	8006022 <_dtoa_r+0x7fa>
 8005f14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005f18:	0d12      	lsrs	r2, r2, #20
 8005f1a:	0512      	lsls	r2, r2, #20
 8005f1c:	2a00      	cmp	r2, #0
 8005f1e:	f000 8082 	beq.w	8006026 <_dtoa_r+0x7fe>
 8005f22:	9b05      	ldr	r3, [sp, #20]
 8005f24:	3301      	adds	r3, #1
 8005f26:	9305      	str	r3, [sp, #20]
 8005f28:	9b06      	ldr	r3, [sp, #24]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	9306      	str	r3, [sp, #24]
 8005f2e:	2301      	movs	r3, #1
 8005f30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 81af 	beq.w	8006298 <_dtoa_r+0xa70>
 8005f3a:	6922      	ldr	r2, [r4, #16]
 8005f3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005f40:	6910      	ldr	r0, [r2, #16]
 8005f42:	f000 fb6f 	bl	8006624 <__hi0bits>
 8005f46:	f1c0 0020 	rsb	r0, r0, #32
 8005f4a:	9b06      	ldr	r3, [sp, #24]
 8005f4c:	4418      	add	r0, r3
 8005f4e:	f010 001f 	ands.w	r0, r0, #31
 8005f52:	d076      	beq.n	8006042 <_dtoa_r+0x81a>
 8005f54:	f1c0 0220 	rsb	r2, r0, #32
 8005f58:	2a04      	cmp	r2, #4
 8005f5a:	dd69      	ble.n	8006030 <_dtoa_r+0x808>
 8005f5c:	9b05      	ldr	r3, [sp, #20]
 8005f5e:	f1c0 001c 	rsb	r0, r0, #28
 8005f62:	4403      	add	r3, r0
 8005f64:	9305      	str	r3, [sp, #20]
 8005f66:	9b06      	ldr	r3, [sp, #24]
 8005f68:	4406      	add	r6, r0
 8005f6a:	4403      	add	r3, r0
 8005f6c:	9306      	str	r3, [sp, #24]
 8005f6e:	9b05      	ldr	r3, [sp, #20]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	dd05      	ble.n	8005f80 <_dtoa_r+0x758>
 8005f74:	9901      	ldr	r1, [sp, #4]
 8005f76:	461a      	mov	r2, r3
 8005f78:	4648      	mov	r0, r9
 8005f7a:	f000 fcb9 	bl	80068f0 <__lshift>
 8005f7e:	9001      	str	r0, [sp, #4]
 8005f80:	9b06      	ldr	r3, [sp, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	dd05      	ble.n	8005f92 <_dtoa_r+0x76a>
 8005f86:	4621      	mov	r1, r4
 8005f88:	461a      	mov	r2, r3
 8005f8a:	4648      	mov	r0, r9
 8005f8c:	f000 fcb0 	bl	80068f0 <__lshift>
 8005f90:	4604      	mov	r4, r0
 8005f92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d056      	beq.n	8006046 <_dtoa_r+0x81e>
 8005f98:	9801      	ldr	r0, [sp, #4]
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	f000 fd14 	bl	80069c8 <__mcmp>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	da50      	bge.n	8006046 <_dtoa_r+0x81e>
 8005fa4:	f108 33ff 	add.w	r3, r8, #4294967295
 8005fa8:	9304      	str	r3, [sp, #16]
 8005faa:	9901      	ldr	r1, [sp, #4]
 8005fac:	2300      	movs	r3, #0
 8005fae:	220a      	movs	r2, #10
 8005fb0:	4648      	mov	r0, r9
 8005fb2:	f000 faf1 	bl	8006598 <__multadd>
 8005fb6:	9b08      	ldr	r3, [sp, #32]
 8005fb8:	9001      	str	r0, [sp, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 816e 	beq.w	800629c <_dtoa_r+0xa74>
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	220a      	movs	r2, #10
 8005fc6:	4648      	mov	r0, r9
 8005fc8:	f000 fae6 	bl	8006598 <__multadd>
 8005fcc:	f1bb 0f00 	cmp.w	fp, #0
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	dc64      	bgt.n	800609e <_dtoa_r+0x876>
 8005fd4:	9b07      	ldr	r3, [sp, #28]
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	dc3e      	bgt.n	8006058 <_dtoa_r+0x830>
 8005fda:	e060      	b.n	800609e <_dtoa_r+0x876>
 8005fdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005fde:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005fe2:	e73c      	b.n	8005e5e <_dtoa_r+0x636>
 8005fe4:	f10a 34ff 	add.w	r4, sl, #4294967295
 8005fe8:	42a3      	cmp	r3, r4
 8005fea:	bfbf      	itttt	lt
 8005fec:	1ae2      	sublt	r2, r4, r3
 8005fee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005ff0:	189b      	addlt	r3, r3, r2
 8005ff2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8005ff4:	bfae      	itee	ge
 8005ff6:	1b1c      	subge	r4, r3, r4
 8005ff8:	4623      	movlt	r3, r4
 8005ffa:	2400      	movlt	r4, #0
 8005ffc:	f1ba 0f00 	cmp.w	sl, #0
 8006000:	bfb5      	itete	lt
 8006002:	9a05      	ldrlt	r2, [sp, #20]
 8006004:	9e05      	ldrge	r6, [sp, #20]
 8006006:	eba2 060a 	sublt.w	r6, r2, sl
 800600a:	4652      	movge	r2, sl
 800600c:	bfb8      	it	lt
 800600e:	2200      	movlt	r2, #0
 8006010:	e727      	b.n	8005e62 <_dtoa_r+0x63a>
 8006012:	9e05      	ldr	r6, [sp, #20]
 8006014:	9d08      	ldr	r5, [sp, #32]
 8006016:	461c      	mov	r4, r3
 8006018:	e730      	b.n	8005e7c <_dtoa_r+0x654>
 800601a:	461a      	mov	r2, r3
 800601c:	e758      	b.n	8005ed0 <_dtoa_r+0x6a8>
 800601e:	2300      	movs	r3, #0
 8006020:	e786      	b.n	8005f30 <_dtoa_r+0x708>
 8006022:	9b02      	ldr	r3, [sp, #8]
 8006024:	e784      	b.n	8005f30 <_dtoa_r+0x708>
 8006026:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006028:	e783      	b.n	8005f32 <_dtoa_r+0x70a>
 800602a:	2300      	movs	r3, #0
 800602c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800602e:	e784      	b.n	8005f3a <_dtoa_r+0x712>
 8006030:	d09d      	beq.n	8005f6e <_dtoa_r+0x746>
 8006032:	9b05      	ldr	r3, [sp, #20]
 8006034:	321c      	adds	r2, #28
 8006036:	4413      	add	r3, r2
 8006038:	9305      	str	r3, [sp, #20]
 800603a:	9b06      	ldr	r3, [sp, #24]
 800603c:	4416      	add	r6, r2
 800603e:	4413      	add	r3, r2
 8006040:	e794      	b.n	8005f6c <_dtoa_r+0x744>
 8006042:	4602      	mov	r2, r0
 8006044:	e7f5      	b.n	8006032 <_dtoa_r+0x80a>
 8006046:	f1ba 0f00 	cmp.w	sl, #0
 800604a:	f8cd 8010 	str.w	r8, [sp, #16]
 800604e:	46d3      	mov	fp, sl
 8006050:	dc21      	bgt.n	8006096 <_dtoa_r+0x86e>
 8006052:	9b07      	ldr	r3, [sp, #28]
 8006054:	2b02      	cmp	r3, #2
 8006056:	dd1e      	ble.n	8006096 <_dtoa_r+0x86e>
 8006058:	f1bb 0f00 	cmp.w	fp, #0
 800605c:	f47f aeb7 	bne.w	8005dce <_dtoa_r+0x5a6>
 8006060:	4621      	mov	r1, r4
 8006062:	465b      	mov	r3, fp
 8006064:	2205      	movs	r2, #5
 8006066:	4648      	mov	r0, r9
 8006068:	f000 fa96 	bl	8006598 <__multadd>
 800606c:	4601      	mov	r1, r0
 800606e:	4604      	mov	r4, r0
 8006070:	9801      	ldr	r0, [sp, #4]
 8006072:	f000 fca9 	bl	80069c8 <__mcmp>
 8006076:	2800      	cmp	r0, #0
 8006078:	f77f aea9 	ble.w	8005dce <_dtoa_r+0x5a6>
 800607c:	463e      	mov	r6, r7
 800607e:	2331      	movs	r3, #49	@ 0x31
 8006080:	f806 3b01 	strb.w	r3, [r6], #1
 8006084:	9b04      	ldr	r3, [sp, #16]
 8006086:	3301      	adds	r3, #1
 8006088:	9304      	str	r3, [sp, #16]
 800608a:	e6a4      	b.n	8005dd6 <_dtoa_r+0x5ae>
 800608c:	f8cd 8010 	str.w	r8, [sp, #16]
 8006090:	4654      	mov	r4, sl
 8006092:	4625      	mov	r5, r4
 8006094:	e7f2      	b.n	800607c <_dtoa_r+0x854>
 8006096:	9b08      	ldr	r3, [sp, #32]
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 8103 	beq.w	80062a4 <_dtoa_r+0xa7c>
 800609e:	2e00      	cmp	r6, #0
 80060a0:	dd05      	ble.n	80060ae <_dtoa_r+0x886>
 80060a2:	4629      	mov	r1, r5
 80060a4:	4632      	mov	r2, r6
 80060a6:	4648      	mov	r0, r9
 80060a8:	f000 fc22 	bl	80068f0 <__lshift>
 80060ac:	4605      	mov	r5, r0
 80060ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d058      	beq.n	8006166 <_dtoa_r+0x93e>
 80060b4:	6869      	ldr	r1, [r5, #4]
 80060b6:	4648      	mov	r0, r9
 80060b8:	f000 fa0c 	bl	80064d4 <_Balloc>
 80060bc:	4606      	mov	r6, r0
 80060be:	b928      	cbnz	r0, 80060cc <_dtoa_r+0x8a4>
 80060c0:	4b82      	ldr	r3, [pc, #520]	@ (80062cc <_dtoa_r+0xaa4>)
 80060c2:	4602      	mov	r2, r0
 80060c4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80060c8:	f7ff bbc7 	b.w	800585a <_dtoa_r+0x32>
 80060cc:	692a      	ldr	r2, [r5, #16]
 80060ce:	3202      	adds	r2, #2
 80060d0:	0092      	lsls	r2, r2, #2
 80060d2:	f105 010c 	add.w	r1, r5, #12
 80060d6:	300c      	adds	r0, #12
 80060d8:	f001 f800 	bl	80070dc <memcpy>
 80060dc:	2201      	movs	r2, #1
 80060de:	4631      	mov	r1, r6
 80060e0:	4648      	mov	r0, r9
 80060e2:	f000 fc05 	bl	80068f0 <__lshift>
 80060e6:	1c7b      	adds	r3, r7, #1
 80060e8:	9305      	str	r3, [sp, #20]
 80060ea:	eb07 030b 	add.w	r3, r7, fp
 80060ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80060f0:	9b02      	ldr	r3, [sp, #8]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	46a8      	mov	r8, r5
 80060f8:	9308      	str	r3, [sp, #32]
 80060fa:	4605      	mov	r5, r0
 80060fc:	9b05      	ldr	r3, [sp, #20]
 80060fe:	9801      	ldr	r0, [sp, #4]
 8006100:	4621      	mov	r1, r4
 8006102:	f103 3bff 	add.w	fp, r3, #4294967295
 8006106:	f7ff fb04 	bl	8005712 <quorem>
 800610a:	4641      	mov	r1, r8
 800610c:	9002      	str	r0, [sp, #8]
 800610e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006112:	9801      	ldr	r0, [sp, #4]
 8006114:	f000 fc58 	bl	80069c8 <__mcmp>
 8006118:	462a      	mov	r2, r5
 800611a:	9006      	str	r0, [sp, #24]
 800611c:	4621      	mov	r1, r4
 800611e:	4648      	mov	r0, r9
 8006120:	f000 fc6e 	bl	8006a00 <__mdiff>
 8006124:	68c2      	ldr	r2, [r0, #12]
 8006126:	4606      	mov	r6, r0
 8006128:	b9fa      	cbnz	r2, 800616a <_dtoa_r+0x942>
 800612a:	4601      	mov	r1, r0
 800612c:	9801      	ldr	r0, [sp, #4]
 800612e:	f000 fc4b 	bl	80069c8 <__mcmp>
 8006132:	4602      	mov	r2, r0
 8006134:	4631      	mov	r1, r6
 8006136:	4648      	mov	r0, r9
 8006138:	920a      	str	r2, [sp, #40]	@ 0x28
 800613a:	f000 fa0b 	bl	8006554 <_Bfree>
 800613e:	9b07      	ldr	r3, [sp, #28]
 8006140:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006142:	9e05      	ldr	r6, [sp, #20]
 8006144:	ea43 0102 	orr.w	r1, r3, r2
 8006148:	9b08      	ldr	r3, [sp, #32]
 800614a:	4319      	orrs	r1, r3
 800614c:	d10f      	bne.n	800616e <_dtoa_r+0x946>
 800614e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006152:	d028      	beq.n	80061a6 <_dtoa_r+0x97e>
 8006154:	9b06      	ldr	r3, [sp, #24]
 8006156:	2b00      	cmp	r3, #0
 8006158:	dd02      	ble.n	8006160 <_dtoa_r+0x938>
 800615a:	9b02      	ldr	r3, [sp, #8]
 800615c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8006160:	f88b a000 	strb.w	sl, [fp]
 8006164:	e639      	b.n	8005dda <_dtoa_r+0x5b2>
 8006166:	4628      	mov	r0, r5
 8006168:	e7bd      	b.n	80060e6 <_dtoa_r+0x8be>
 800616a:	2201      	movs	r2, #1
 800616c:	e7e2      	b.n	8006134 <_dtoa_r+0x90c>
 800616e:	9b06      	ldr	r3, [sp, #24]
 8006170:	2b00      	cmp	r3, #0
 8006172:	db04      	blt.n	800617e <_dtoa_r+0x956>
 8006174:	9907      	ldr	r1, [sp, #28]
 8006176:	430b      	orrs	r3, r1
 8006178:	9908      	ldr	r1, [sp, #32]
 800617a:	430b      	orrs	r3, r1
 800617c:	d120      	bne.n	80061c0 <_dtoa_r+0x998>
 800617e:	2a00      	cmp	r2, #0
 8006180:	ddee      	ble.n	8006160 <_dtoa_r+0x938>
 8006182:	9901      	ldr	r1, [sp, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	4648      	mov	r0, r9
 8006188:	f000 fbb2 	bl	80068f0 <__lshift>
 800618c:	4621      	mov	r1, r4
 800618e:	9001      	str	r0, [sp, #4]
 8006190:	f000 fc1a 	bl	80069c8 <__mcmp>
 8006194:	2800      	cmp	r0, #0
 8006196:	dc03      	bgt.n	80061a0 <_dtoa_r+0x978>
 8006198:	d1e2      	bne.n	8006160 <_dtoa_r+0x938>
 800619a:	f01a 0f01 	tst.w	sl, #1
 800619e:	d0df      	beq.n	8006160 <_dtoa_r+0x938>
 80061a0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80061a4:	d1d9      	bne.n	800615a <_dtoa_r+0x932>
 80061a6:	2339      	movs	r3, #57	@ 0x39
 80061a8:	f88b 3000 	strb.w	r3, [fp]
 80061ac:	4633      	mov	r3, r6
 80061ae:	461e      	mov	r6, r3
 80061b0:	3b01      	subs	r3, #1
 80061b2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80061b6:	2a39      	cmp	r2, #57	@ 0x39
 80061b8:	d053      	beq.n	8006262 <_dtoa_r+0xa3a>
 80061ba:	3201      	adds	r2, #1
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	e60c      	b.n	8005dda <_dtoa_r+0x5b2>
 80061c0:	2a00      	cmp	r2, #0
 80061c2:	dd07      	ble.n	80061d4 <_dtoa_r+0x9ac>
 80061c4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80061c8:	d0ed      	beq.n	80061a6 <_dtoa_r+0x97e>
 80061ca:	f10a 0301 	add.w	r3, sl, #1
 80061ce:	f88b 3000 	strb.w	r3, [fp]
 80061d2:	e602      	b.n	8005dda <_dtoa_r+0x5b2>
 80061d4:	9b05      	ldr	r3, [sp, #20]
 80061d6:	9a05      	ldr	r2, [sp, #20]
 80061d8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80061dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061de:	4293      	cmp	r3, r2
 80061e0:	d029      	beq.n	8006236 <_dtoa_r+0xa0e>
 80061e2:	9901      	ldr	r1, [sp, #4]
 80061e4:	2300      	movs	r3, #0
 80061e6:	220a      	movs	r2, #10
 80061e8:	4648      	mov	r0, r9
 80061ea:	f000 f9d5 	bl	8006598 <__multadd>
 80061ee:	45a8      	cmp	r8, r5
 80061f0:	9001      	str	r0, [sp, #4]
 80061f2:	f04f 0300 	mov.w	r3, #0
 80061f6:	f04f 020a 	mov.w	r2, #10
 80061fa:	4641      	mov	r1, r8
 80061fc:	4648      	mov	r0, r9
 80061fe:	d107      	bne.n	8006210 <_dtoa_r+0x9e8>
 8006200:	f000 f9ca 	bl	8006598 <__multadd>
 8006204:	4680      	mov	r8, r0
 8006206:	4605      	mov	r5, r0
 8006208:	9b05      	ldr	r3, [sp, #20]
 800620a:	3301      	adds	r3, #1
 800620c:	9305      	str	r3, [sp, #20]
 800620e:	e775      	b.n	80060fc <_dtoa_r+0x8d4>
 8006210:	f000 f9c2 	bl	8006598 <__multadd>
 8006214:	4629      	mov	r1, r5
 8006216:	4680      	mov	r8, r0
 8006218:	2300      	movs	r3, #0
 800621a:	220a      	movs	r2, #10
 800621c:	4648      	mov	r0, r9
 800621e:	f000 f9bb 	bl	8006598 <__multadd>
 8006222:	4605      	mov	r5, r0
 8006224:	e7f0      	b.n	8006208 <_dtoa_r+0x9e0>
 8006226:	f1bb 0f00 	cmp.w	fp, #0
 800622a:	bfcc      	ite	gt
 800622c:	465e      	movgt	r6, fp
 800622e:	2601      	movle	r6, #1
 8006230:	443e      	add	r6, r7
 8006232:	f04f 0800 	mov.w	r8, #0
 8006236:	9901      	ldr	r1, [sp, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	4648      	mov	r0, r9
 800623c:	f000 fb58 	bl	80068f0 <__lshift>
 8006240:	4621      	mov	r1, r4
 8006242:	9001      	str	r0, [sp, #4]
 8006244:	f000 fbc0 	bl	80069c8 <__mcmp>
 8006248:	2800      	cmp	r0, #0
 800624a:	dcaf      	bgt.n	80061ac <_dtoa_r+0x984>
 800624c:	d102      	bne.n	8006254 <_dtoa_r+0xa2c>
 800624e:	f01a 0f01 	tst.w	sl, #1
 8006252:	d1ab      	bne.n	80061ac <_dtoa_r+0x984>
 8006254:	4633      	mov	r3, r6
 8006256:	461e      	mov	r6, r3
 8006258:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800625c:	2a30      	cmp	r2, #48	@ 0x30
 800625e:	d0fa      	beq.n	8006256 <_dtoa_r+0xa2e>
 8006260:	e5bb      	b.n	8005dda <_dtoa_r+0x5b2>
 8006262:	429f      	cmp	r7, r3
 8006264:	d1a3      	bne.n	80061ae <_dtoa_r+0x986>
 8006266:	9b04      	ldr	r3, [sp, #16]
 8006268:	3301      	adds	r3, #1
 800626a:	9304      	str	r3, [sp, #16]
 800626c:	2331      	movs	r3, #49	@ 0x31
 800626e:	703b      	strb	r3, [r7, #0]
 8006270:	e5b3      	b.n	8005dda <_dtoa_r+0x5b2>
 8006272:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006274:	4f16      	ldr	r7, [pc, #88]	@ (80062d0 <_dtoa_r+0xaa8>)
 8006276:	b11b      	cbz	r3, 8006280 <_dtoa_r+0xa58>
 8006278:	f107 0308 	add.w	r3, r7, #8
 800627c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	4638      	mov	r0, r7
 8006282:	b011      	add	sp, #68	@ 0x44
 8006284:	ecbd 8b02 	vpop	{d8}
 8006288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800628c:	9b07      	ldr	r3, [sp, #28]
 800628e:	2b01      	cmp	r3, #1
 8006290:	f77f ae36 	ble.w	8005f00 <_dtoa_r+0x6d8>
 8006294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006296:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006298:	2001      	movs	r0, #1
 800629a:	e656      	b.n	8005f4a <_dtoa_r+0x722>
 800629c:	f1bb 0f00 	cmp.w	fp, #0
 80062a0:	f77f aed7 	ble.w	8006052 <_dtoa_r+0x82a>
 80062a4:	463e      	mov	r6, r7
 80062a6:	9801      	ldr	r0, [sp, #4]
 80062a8:	4621      	mov	r1, r4
 80062aa:	f7ff fa32 	bl	8005712 <quorem>
 80062ae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80062b2:	f806 ab01 	strb.w	sl, [r6], #1
 80062b6:	1bf2      	subs	r2, r6, r7
 80062b8:	4593      	cmp	fp, r2
 80062ba:	ddb4      	ble.n	8006226 <_dtoa_r+0x9fe>
 80062bc:	9901      	ldr	r1, [sp, #4]
 80062be:	2300      	movs	r3, #0
 80062c0:	220a      	movs	r2, #10
 80062c2:	4648      	mov	r0, r9
 80062c4:	f000 f968 	bl	8006598 <__multadd>
 80062c8:	9001      	str	r0, [sp, #4]
 80062ca:	e7ec      	b.n	80062a6 <_dtoa_r+0xa7e>
 80062cc:	0800741c 	.word	0x0800741c
 80062d0:	080073a0 	.word	0x080073a0

080062d4 <_free_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4605      	mov	r5, r0
 80062d8:	2900      	cmp	r1, #0
 80062da:	d041      	beq.n	8006360 <_free_r+0x8c>
 80062dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062e0:	1f0c      	subs	r4, r1, #4
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	bfb8      	it	lt
 80062e6:	18e4      	addlt	r4, r4, r3
 80062e8:	f000 f8e8 	bl	80064bc <__malloc_lock>
 80062ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006364 <_free_r+0x90>)
 80062ee:	6813      	ldr	r3, [r2, #0]
 80062f0:	b933      	cbnz	r3, 8006300 <_free_r+0x2c>
 80062f2:	6063      	str	r3, [r4, #4]
 80062f4:	6014      	str	r4, [r2, #0]
 80062f6:	4628      	mov	r0, r5
 80062f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062fc:	f000 b8e4 	b.w	80064c8 <__malloc_unlock>
 8006300:	42a3      	cmp	r3, r4
 8006302:	d908      	bls.n	8006316 <_free_r+0x42>
 8006304:	6820      	ldr	r0, [r4, #0]
 8006306:	1821      	adds	r1, r4, r0
 8006308:	428b      	cmp	r3, r1
 800630a:	bf01      	itttt	eq
 800630c:	6819      	ldreq	r1, [r3, #0]
 800630e:	685b      	ldreq	r3, [r3, #4]
 8006310:	1809      	addeq	r1, r1, r0
 8006312:	6021      	streq	r1, [r4, #0]
 8006314:	e7ed      	b.n	80062f2 <_free_r+0x1e>
 8006316:	461a      	mov	r2, r3
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	b10b      	cbz	r3, 8006320 <_free_r+0x4c>
 800631c:	42a3      	cmp	r3, r4
 800631e:	d9fa      	bls.n	8006316 <_free_r+0x42>
 8006320:	6811      	ldr	r1, [r2, #0]
 8006322:	1850      	adds	r0, r2, r1
 8006324:	42a0      	cmp	r0, r4
 8006326:	d10b      	bne.n	8006340 <_free_r+0x6c>
 8006328:	6820      	ldr	r0, [r4, #0]
 800632a:	4401      	add	r1, r0
 800632c:	1850      	adds	r0, r2, r1
 800632e:	4283      	cmp	r3, r0
 8006330:	6011      	str	r1, [r2, #0]
 8006332:	d1e0      	bne.n	80062f6 <_free_r+0x22>
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	6053      	str	r3, [r2, #4]
 800633a:	4408      	add	r0, r1
 800633c:	6010      	str	r0, [r2, #0]
 800633e:	e7da      	b.n	80062f6 <_free_r+0x22>
 8006340:	d902      	bls.n	8006348 <_free_r+0x74>
 8006342:	230c      	movs	r3, #12
 8006344:	602b      	str	r3, [r5, #0]
 8006346:	e7d6      	b.n	80062f6 <_free_r+0x22>
 8006348:	6820      	ldr	r0, [r4, #0]
 800634a:	1821      	adds	r1, r4, r0
 800634c:	428b      	cmp	r3, r1
 800634e:	bf04      	itt	eq
 8006350:	6819      	ldreq	r1, [r3, #0]
 8006352:	685b      	ldreq	r3, [r3, #4]
 8006354:	6063      	str	r3, [r4, #4]
 8006356:	bf04      	itt	eq
 8006358:	1809      	addeq	r1, r1, r0
 800635a:	6021      	streq	r1, [r4, #0]
 800635c:	6054      	str	r4, [r2, #4]
 800635e:	e7ca      	b.n	80062f6 <_free_r+0x22>
 8006360:	bd38      	pop	{r3, r4, r5, pc}
 8006362:	bf00      	nop
 8006364:	24000398 	.word	0x24000398

08006368 <malloc>:
 8006368:	4b02      	ldr	r3, [pc, #8]	@ (8006374 <malloc+0xc>)
 800636a:	4601      	mov	r1, r0
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	f000 b825 	b.w	80063bc <_malloc_r>
 8006372:	bf00      	nop
 8006374:	2400001c 	.word	0x2400001c

08006378 <sbrk_aligned>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	4e0f      	ldr	r6, [pc, #60]	@ (80063b8 <sbrk_aligned+0x40>)
 800637c:	460c      	mov	r4, r1
 800637e:	6831      	ldr	r1, [r6, #0]
 8006380:	4605      	mov	r5, r0
 8006382:	b911      	cbnz	r1, 800638a <sbrk_aligned+0x12>
 8006384:	f000 fe9a 	bl	80070bc <_sbrk_r>
 8006388:	6030      	str	r0, [r6, #0]
 800638a:	4621      	mov	r1, r4
 800638c:	4628      	mov	r0, r5
 800638e:	f000 fe95 	bl	80070bc <_sbrk_r>
 8006392:	1c43      	adds	r3, r0, #1
 8006394:	d103      	bne.n	800639e <sbrk_aligned+0x26>
 8006396:	f04f 34ff 	mov.w	r4, #4294967295
 800639a:	4620      	mov	r0, r4
 800639c:	bd70      	pop	{r4, r5, r6, pc}
 800639e:	1cc4      	adds	r4, r0, #3
 80063a0:	f024 0403 	bic.w	r4, r4, #3
 80063a4:	42a0      	cmp	r0, r4
 80063a6:	d0f8      	beq.n	800639a <sbrk_aligned+0x22>
 80063a8:	1a21      	subs	r1, r4, r0
 80063aa:	4628      	mov	r0, r5
 80063ac:	f000 fe86 	bl	80070bc <_sbrk_r>
 80063b0:	3001      	adds	r0, #1
 80063b2:	d1f2      	bne.n	800639a <sbrk_aligned+0x22>
 80063b4:	e7ef      	b.n	8006396 <sbrk_aligned+0x1e>
 80063b6:	bf00      	nop
 80063b8:	24000394 	.word	0x24000394

080063bc <_malloc_r>:
 80063bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c0:	1ccd      	adds	r5, r1, #3
 80063c2:	f025 0503 	bic.w	r5, r5, #3
 80063c6:	3508      	adds	r5, #8
 80063c8:	2d0c      	cmp	r5, #12
 80063ca:	bf38      	it	cc
 80063cc:	250c      	movcc	r5, #12
 80063ce:	2d00      	cmp	r5, #0
 80063d0:	4606      	mov	r6, r0
 80063d2:	db01      	blt.n	80063d8 <_malloc_r+0x1c>
 80063d4:	42a9      	cmp	r1, r5
 80063d6:	d904      	bls.n	80063e2 <_malloc_r+0x26>
 80063d8:	230c      	movs	r3, #12
 80063da:	6033      	str	r3, [r6, #0]
 80063dc:	2000      	movs	r0, #0
 80063de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064b8 <_malloc_r+0xfc>
 80063e6:	f000 f869 	bl	80064bc <__malloc_lock>
 80063ea:	f8d8 3000 	ldr.w	r3, [r8]
 80063ee:	461c      	mov	r4, r3
 80063f0:	bb44      	cbnz	r4, 8006444 <_malloc_r+0x88>
 80063f2:	4629      	mov	r1, r5
 80063f4:	4630      	mov	r0, r6
 80063f6:	f7ff ffbf 	bl	8006378 <sbrk_aligned>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	4604      	mov	r4, r0
 80063fe:	d158      	bne.n	80064b2 <_malloc_r+0xf6>
 8006400:	f8d8 4000 	ldr.w	r4, [r8]
 8006404:	4627      	mov	r7, r4
 8006406:	2f00      	cmp	r7, #0
 8006408:	d143      	bne.n	8006492 <_malloc_r+0xd6>
 800640a:	2c00      	cmp	r4, #0
 800640c:	d04b      	beq.n	80064a6 <_malloc_r+0xea>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	4639      	mov	r1, r7
 8006412:	4630      	mov	r0, r6
 8006414:	eb04 0903 	add.w	r9, r4, r3
 8006418:	f000 fe50 	bl	80070bc <_sbrk_r>
 800641c:	4581      	cmp	r9, r0
 800641e:	d142      	bne.n	80064a6 <_malloc_r+0xea>
 8006420:	6821      	ldr	r1, [r4, #0]
 8006422:	1a6d      	subs	r5, r5, r1
 8006424:	4629      	mov	r1, r5
 8006426:	4630      	mov	r0, r6
 8006428:	f7ff ffa6 	bl	8006378 <sbrk_aligned>
 800642c:	3001      	adds	r0, #1
 800642e:	d03a      	beq.n	80064a6 <_malloc_r+0xea>
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	442b      	add	r3, r5
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	f8d8 3000 	ldr.w	r3, [r8]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	bb62      	cbnz	r2, 8006498 <_malloc_r+0xdc>
 800643e:	f8c8 7000 	str.w	r7, [r8]
 8006442:	e00f      	b.n	8006464 <_malloc_r+0xa8>
 8006444:	6822      	ldr	r2, [r4, #0]
 8006446:	1b52      	subs	r2, r2, r5
 8006448:	d420      	bmi.n	800648c <_malloc_r+0xd0>
 800644a:	2a0b      	cmp	r2, #11
 800644c:	d917      	bls.n	800647e <_malloc_r+0xc2>
 800644e:	1961      	adds	r1, r4, r5
 8006450:	42a3      	cmp	r3, r4
 8006452:	6025      	str	r5, [r4, #0]
 8006454:	bf18      	it	ne
 8006456:	6059      	strne	r1, [r3, #4]
 8006458:	6863      	ldr	r3, [r4, #4]
 800645a:	bf08      	it	eq
 800645c:	f8c8 1000 	streq.w	r1, [r8]
 8006460:	5162      	str	r2, [r4, r5]
 8006462:	604b      	str	r3, [r1, #4]
 8006464:	4630      	mov	r0, r6
 8006466:	f000 f82f 	bl	80064c8 <__malloc_unlock>
 800646a:	f104 000b 	add.w	r0, r4, #11
 800646e:	1d23      	adds	r3, r4, #4
 8006470:	f020 0007 	bic.w	r0, r0, #7
 8006474:	1ac2      	subs	r2, r0, r3
 8006476:	bf1c      	itt	ne
 8006478:	1a1b      	subne	r3, r3, r0
 800647a:	50a3      	strne	r3, [r4, r2]
 800647c:	e7af      	b.n	80063de <_malloc_r+0x22>
 800647e:	6862      	ldr	r2, [r4, #4]
 8006480:	42a3      	cmp	r3, r4
 8006482:	bf0c      	ite	eq
 8006484:	f8c8 2000 	streq.w	r2, [r8]
 8006488:	605a      	strne	r2, [r3, #4]
 800648a:	e7eb      	b.n	8006464 <_malloc_r+0xa8>
 800648c:	4623      	mov	r3, r4
 800648e:	6864      	ldr	r4, [r4, #4]
 8006490:	e7ae      	b.n	80063f0 <_malloc_r+0x34>
 8006492:	463c      	mov	r4, r7
 8006494:	687f      	ldr	r7, [r7, #4]
 8006496:	e7b6      	b.n	8006406 <_malloc_r+0x4a>
 8006498:	461a      	mov	r2, r3
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	42a3      	cmp	r3, r4
 800649e:	d1fb      	bne.n	8006498 <_malloc_r+0xdc>
 80064a0:	2300      	movs	r3, #0
 80064a2:	6053      	str	r3, [r2, #4]
 80064a4:	e7de      	b.n	8006464 <_malloc_r+0xa8>
 80064a6:	230c      	movs	r3, #12
 80064a8:	6033      	str	r3, [r6, #0]
 80064aa:	4630      	mov	r0, r6
 80064ac:	f000 f80c 	bl	80064c8 <__malloc_unlock>
 80064b0:	e794      	b.n	80063dc <_malloc_r+0x20>
 80064b2:	6005      	str	r5, [r0, #0]
 80064b4:	e7d6      	b.n	8006464 <_malloc_r+0xa8>
 80064b6:	bf00      	nop
 80064b8:	24000398 	.word	0x24000398

080064bc <__malloc_lock>:
 80064bc:	4801      	ldr	r0, [pc, #4]	@ (80064c4 <__malloc_lock+0x8>)
 80064be:	f7ff b926 	b.w	800570e <__retarget_lock_acquire_recursive>
 80064c2:	bf00      	nop
 80064c4:	24000390 	.word	0x24000390

080064c8 <__malloc_unlock>:
 80064c8:	4801      	ldr	r0, [pc, #4]	@ (80064d0 <__malloc_unlock+0x8>)
 80064ca:	f7ff b921 	b.w	8005710 <__retarget_lock_release_recursive>
 80064ce:	bf00      	nop
 80064d0:	24000390 	.word	0x24000390

080064d4 <_Balloc>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	69c6      	ldr	r6, [r0, #28]
 80064d8:	4604      	mov	r4, r0
 80064da:	460d      	mov	r5, r1
 80064dc:	b976      	cbnz	r6, 80064fc <_Balloc+0x28>
 80064de:	2010      	movs	r0, #16
 80064e0:	f7ff ff42 	bl	8006368 <malloc>
 80064e4:	4602      	mov	r2, r0
 80064e6:	61e0      	str	r0, [r4, #28]
 80064e8:	b920      	cbnz	r0, 80064f4 <_Balloc+0x20>
 80064ea:	4b18      	ldr	r3, [pc, #96]	@ (800654c <_Balloc+0x78>)
 80064ec:	4818      	ldr	r0, [pc, #96]	@ (8006550 <_Balloc+0x7c>)
 80064ee:	216b      	movs	r1, #107	@ 0x6b
 80064f0:	f000 fe02 	bl	80070f8 <__assert_func>
 80064f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064f8:	6006      	str	r6, [r0, #0]
 80064fa:	60c6      	str	r6, [r0, #12]
 80064fc:	69e6      	ldr	r6, [r4, #28]
 80064fe:	68f3      	ldr	r3, [r6, #12]
 8006500:	b183      	cbz	r3, 8006524 <_Balloc+0x50>
 8006502:	69e3      	ldr	r3, [r4, #28]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800650a:	b9b8      	cbnz	r0, 800653c <_Balloc+0x68>
 800650c:	2101      	movs	r1, #1
 800650e:	fa01 f605 	lsl.w	r6, r1, r5
 8006512:	1d72      	adds	r2, r6, #5
 8006514:	0092      	lsls	r2, r2, #2
 8006516:	4620      	mov	r0, r4
 8006518:	f000 fe0c 	bl	8007134 <_calloc_r>
 800651c:	b160      	cbz	r0, 8006538 <_Balloc+0x64>
 800651e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006522:	e00e      	b.n	8006542 <_Balloc+0x6e>
 8006524:	2221      	movs	r2, #33	@ 0x21
 8006526:	2104      	movs	r1, #4
 8006528:	4620      	mov	r0, r4
 800652a:	f000 fe03 	bl	8007134 <_calloc_r>
 800652e:	69e3      	ldr	r3, [r4, #28]
 8006530:	60f0      	str	r0, [r6, #12]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1e4      	bne.n	8006502 <_Balloc+0x2e>
 8006538:	2000      	movs	r0, #0
 800653a:	bd70      	pop	{r4, r5, r6, pc}
 800653c:	6802      	ldr	r2, [r0, #0]
 800653e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006542:	2300      	movs	r3, #0
 8006544:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006548:	e7f7      	b.n	800653a <_Balloc+0x66>
 800654a:	bf00      	nop
 800654c:	080073ad 	.word	0x080073ad
 8006550:	0800742d 	.word	0x0800742d

08006554 <_Bfree>:
 8006554:	b570      	push	{r4, r5, r6, lr}
 8006556:	69c6      	ldr	r6, [r0, #28]
 8006558:	4605      	mov	r5, r0
 800655a:	460c      	mov	r4, r1
 800655c:	b976      	cbnz	r6, 800657c <_Bfree+0x28>
 800655e:	2010      	movs	r0, #16
 8006560:	f7ff ff02 	bl	8006368 <malloc>
 8006564:	4602      	mov	r2, r0
 8006566:	61e8      	str	r0, [r5, #28]
 8006568:	b920      	cbnz	r0, 8006574 <_Bfree+0x20>
 800656a:	4b09      	ldr	r3, [pc, #36]	@ (8006590 <_Bfree+0x3c>)
 800656c:	4809      	ldr	r0, [pc, #36]	@ (8006594 <_Bfree+0x40>)
 800656e:	218f      	movs	r1, #143	@ 0x8f
 8006570:	f000 fdc2 	bl	80070f8 <__assert_func>
 8006574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006578:	6006      	str	r6, [r0, #0]
 800657a:	60c6      	str	r6, [r0, #12]
 800657c:	b13c      	cbz	r4, 800658e <_Bfree+0x3a>
 800657e:	69eb      	ldr	r3, [r5, #28]
 8006580:	6862      	ldr	r2, [r4, #4]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006588:	6021      	str	r1, [r4, #0]
 800658a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800658e:	bd70      	pop	{r4, r5, r6, pc}
 8006590:	080073ad 	.word	0x080073ad
 8006594:	0800742d 	.word	0x0800742d

08006598 <__multadd>:
 8006598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800659c:	690d      	ldr	r5, [r1, #16]
 800659e:	4607      	mov	r7, r0
 80065a0:	460c      	mov	r4, r1
 80065a2:	461e      	mov	r6, r3
 80065a4:	f101 0c14 	add.w	ip, r1, #20
 80065a8:	2000      	movs	r0, #0
 80065aa:	f8dc 3000 	ldr.w	r3, [ip]
 80065ae:	b299      	uxth	r1, r3
 80065b0:	fb02 6101 	mla	r1, r2, r1, r6
 80065b4:	0c1e      	lsrs	r6, r3, #16
 80065b6:	0c0b      	lsrs	r3, r1, #16
 80065b8:	fb02 3306 	mla	r3, r2, r6, r3
 80065bc:	b289      	uxth	r1, r1
 80065be:	3001      	adds	r0, #1
 80065c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80065c4:	4285      	cmp	r5, r0
 80065c6:	f84c 1b04 	str.w	r1, [ip], #4
 80065ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80065ce:	dcec      	bgt.n	80065aa <__multadd+0x12>
 80065d0:	b30e      	cbz	r6, 8006616 <__multadd+0x7e>
 80065d2:	68a3      	ldr	r3, [r4, #8]
 80065d4:	42ab      	cmp	r3, r5
 80065d6:	dc19      	bgt.n	800660c <__multadd+0x74>
 80065d8:	6861      	ldr	r1, [r4, #4]
 80065da:	4638      	mov	r0, r7
 80065dc:	3101      	adds	r1, #1
 80065de:	f7ff ff79 	bl	80064d4 <_Balloc>
 80065e2:	4680      	mov	r8, r0
 80065e4:	b928      	cbnz	r0, 80065f2 <__multadd+0x5a>
 80065e6:	4602      	mov	r2, r0
 80065e8:	4b0c      	ldr	r3, [pc, #48]	@ (800661c <__multadd+0x84>)
 80065ea:	480d      	ldr	r0, [pc, #52]	@ (8006620 <__multadd+0x88>)
 80065ec:	21ba      	movs	r1, #186	@ 0xba
 80065ee:	f000 fd83 	bl	80070f8 <__assert_func>
 80065f2:	6922      	ldr	r2, [r4, #16]
 80065f4:	3202      	adds	r2, #2
 80065f6:	f104 010c 	add.w	r1, r4, #12
 80065fa:	0092      	lsls	r2, r2, #2
 80065fc:	300c      	adds	r0, #12
 80065fe:	f000 fd6d 	bl	80070dc <memcpy>
 8006602:	4621      	mov	r1, r4
 8006604:	4638      	mov	r0, r7
 8006606:	f7ff ffa5 	bl	8006554 <_Bfree>
 800660a:	4644      	mov	r4, r8
 800660c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006610:	3501      	adds	r5, #1
 8006612:	615e      	str	r6, [r3, #20]
 8006614:	6125      	str	r5, [r4, #16]
 8006616:	4620      	mov	r0, r4
 8006618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800661c:	0800741c 	.word	0x0800741c
 8006620:	0800742d 	.word	0x0800742d

08006624 <__hi0bits>:
 8006624:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006628:	4603      	mov	r3, r0
 800662a:	bf36      	itet	cc
 800662c:	0403      	lslcc	r3, r0, #16
 800662e:	2000      	movcs	r0, #0
 8006630:	2010      	movcc	r0, #16
 8006632:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006636:	bf3c      	itt	cc
 8006638:	021b      	lslcc	r3, r3, #8
 800663a:	3008      	addcc	r0, #8
 800663c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006640:	bf3c      	itt	cc
 8006642:	011b      	lslcc	r3, r3, #4
 8006644:	3004      	addcc	r0, #4
 8006646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800664a:	bf3c      	itt	cc
 800664c:	009b      	lslcc	r3, r3, #2
 800664e:	3002      	addcc	r0, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	db05      	blt.n	8006660 <__hi0bits+0x3c>
 8006654:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006658:	f100 0001 	add.w	r0, r0, #1
 800665c:	bf08      	it	eq
 800665e:	2020      	moveq	r0, #32
 8006660:	4770      	bx	lr

08006662 <__lo0bits>:
 8006662:	6803      	ldr	r3, [r0, #0]
 8006664:	4602      	mov	r2, r0
 8006666:	f013 0007 	ands.w	r0, r3, #7
 800666a:	d00b      	beq.n	8006684 <__lo0bits+0x22>
 800666c:	07d9      	lsls	r1, r3, #31
 800666e:	d421      	bmi.n	80066b4 <__lo0bits+0x52>
 8006670:	0798      	lsls	r0, r3, #30
 8006672:	bf49      	itett	mi
 8006674:	085b      	lsrmi	r3, r3, #1
 8006676:	089b      	lsrpl	r3, r3, #2
 8006678:	2001      	movmi	r0, #1
 800667a:	6013      	strmi	r3, [r2, #0]
 800667c:	bf5c      	itt	pl
 800667e:	6013      	strpl	r3, [r2, #0]
 8006680:	2002      	movpl	r0, #2
 8006682:	4770      	bx	lr
 8006684:	b299      	uxth	r1, r3
 8006686:	b909      	cbnz	r1, 800668c <__lo0bits+0x2a>
 8006688:	0c1b      	lsrs	r3, r3, #16
 800668a:	2010      	movs	r0, #16
 800668c:	b2d9      	uxtb	r1, r3
 800668e:	b909      	cbnz	r1, 8006694 <__lo0bits+0x32>
 8006690:	3008      	adds	r0, #8
 8006692:	0a1b      	lsrs	r3, r3, #8
 8006694:	0719      	lsls	r1, r3, #28
 8006696:	bf04      	itt	eq
 8006698:	091b      	lsreq	r3, r3, #4
 800669a:	3004      	addeq	r0, #4
 800669c:	0799      	lsls	r1, r3, #30
 800669e:	bf04      	itt	eq
 80066a0:	089b      	lsreq	r3, r3, #2
 80066a2:	3002      	addeq	r0, #2
 80066a4:	07d9      	lsls	r1, r3, #31
 80066a6:	d403      	bmi.n	80066b0 <__lo0bits+0x4e>
 80066a8:	085b      	lsrs	r3, r3, #1
 80066aa:	f100 0001 	add.w	r0, r0, #1
 80066ae:	d003      	beq.n	80066b8 <__lo0bits+0x56>
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	4770      	bx	lr
 80066b4:	2000      	movs	r0, #0
 80066b6:	4770      	bx	lr
 80066b8:	2020      	movs	r0, #32
 80066ba:	4770      	bx	lr

080066bc <__i2b>:
 80066bc:	b510      	push	{r4, lr}
 80066be:	460c      	mov	r4, r1
 80066c0:	2101      	movs	r1, #1
 80066c2:	f7ff ff07 	bl	80064d4 <_Balloc>
 80066c6:	4602      	mov	r2, r0
 80066c8:	b928      	cbnz	r0, 80066d6 <__i2b+0x1a>
 80066ca:	4b05      	ldr	r3, [pc, #20]	@ (80066e0 <__i2b+0x24>)
 80066cc:	4805      	ldr	r0, [pc, #20]	@ (80066e4 <__i2b+0x28>)
 80066ce:	f240 1145 	movw	r1, #325	@ 0x145
 80066d2:	f000 fd11 	bl	80070f8 <__assert_func>
 80066d6:	2301      	movs	r3, #1
 80066d8:	6144      	str	r4, [r0, #20]
 80066da:	6103      	str	r3, [r0, #16]
 80066dc:	bd10      	pop	{r4, pc}
 80066de:	bf00      	nop
 80066e0:	0800741c 	.word	0x0800741c
 80066e4:	0800742d 	.word	0x0800742d

080066e8 <__multiply>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	4614      	mov	r4, r2
 80066ee:	690a      	ldr	r2, [r1, #16]
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	bfa8      	it	ge
 80066f6:	4623      	movge	r3, r4
 80066f8:	460f      	mov	r7, r1
 80066fa:	bfa4      	itt	ge
 80066fc:	460c      	movge	r4, r1
 80066fe:	461f      	movge	r7, r3
 8006700:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006704:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006708:	68a3      	ldr	r3, [r4, #8]
 800670a:	6861      	ldr	r1, [r4, #4]
 800670c:	eb0a 0609 	add.w	r6, sl, r9
 8006710:	42b3      	cmp	r3, r6
 8006712:	b085      	sub	sp, #20
 8006714:	bfb8      	it	lt
 8006716:	3101      	addlt	r1, #1
 8006718:	f7ff fedc 	bl	80064d4 <_Balloc>
 800671c:	b930      	cbnz	r0, 800672c <__multiply+0x44>
 800671e:	4602      	mov	r2, r0
 8006720:	4b44      	ldr	r3, [pc, #272]	@ (8006834 <__multiply+0x14c>)
 8006722:	4845      	ldr	r0, [pc, #276]	@ (8006838 <__multiply+0x150>)
 8006724:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006728:	f000 fce6 	bl	80070f8 <__assert_func>
 800672c:	f100 0514 	add.w	r5, r0, #20
 8006730:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006734:	462b      	mov	r3, r5
 8006736:	2200      	movs	r2, #0
 8006738:	4543      	cmp	r3, r8
 800673a:	d321      	bcc.n	8006780 <__multiply+0x98>
 800673c:	f107 0114 	add.w	r1, r7, #20
 8006740:	f104 0214 	add.w	r2, r4, #20
 8006744:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006748:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800674c:	9302      	str	r3, [sp, #8]
 800674e:	1b13      	subs	r3, r2, r4
 8006750:	3b15      	subs	r3, #21
 8006752:	f023 0303 	bic.w	r3, r3, #3
 8006756:	3304      	adds	r3, #4
 8006758:	f104 0715 	add.w	r7, r4, #21
 800675c:	42ba      	cmp	r2, r7
 800675e:	bf38      	it	cc
 8006760:	2304      	movcc	r3, #4
 8006762:	9301      	str	r3, [sp, #4]
 8006764:	9b02      	ldr	r3, [sp, #8]
 8006766:	9103      	str	r1, [sp, #12]
 8006768:	428b      	cmp	r3, r1
 800676a:	d80c      	bhi.n	8006786 <__multiply+0x9e>
 800676c:	2e00      	cmp	r6, #0
 800676e:	dd03      	ble.n	8006778 <__multiply+0x90>
 8006770:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006774:	2b00      	cmp	r3, #0
 8006776:	d05b      	beq.n	8006830 <__multiply+0x148>
 8006778:	6106      	str	r6, [r0, #16]
 800677a:	b005      	add	sp, #20
 800677c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006780:	f843 2b04 	str.w	r2, [r3], #4
 8006784:	e7d8      	b.n	8006738 <__multiply+0x50>
 8006786:	f8b1 a000 	ldrh.w	sl, [r1]
 800678a:	f1ba 0f00 	cmp.w	sl, #0
 800678e:	d024      	beq.n	80067da <__multiply+0xf2>
 8006790:	f104 0e14 	add.w	lr, r4, #20
 8006794:	46a9      	mov	r9, r5
 8006796:	f04f 0c00 	mov.w	ip, #0
 800679a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800679e:	f8d9 3000 	ldr.w	r3, [r9]
 80067a2:	fa1f fb87 	uxth.w	fp, r7
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	fb0a 330b 	mla	r3, sl, fp, r3
 80067ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80067b0:	f8d9 7000 	ldr.w	r7, [r9]
 80067b4:	4463      	add	r3, ip
 80067b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80067ba:	fb0a c70b 	mla	r7, sl, fp, ip
 80067be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80067c8:	4572      	cmp	r2, lr
 80067ca:	f849 3b04 	str.w	r3, [r9], #4
 80067ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80067d2:	d8e2      	bhi.n	800679a <__multiply+0xb2>
 80067d4:	9b01      	ldr	r3, [sp, #4]
 80067d6:	f845 c003 	str.w	ip, [r5, r3]
 80067da:	9b03      	ldr	r3, [sp, #12]
 80067dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80067e0:	3104      	adds	r1, #4
 80067e2:	f1b9 0f00 	cmp.w	r9, #0
 80067e6:	d021      	beq.n	800682c <__multiply+0x144>
 80067e8:	682b      	ldr	r3, [r5, #0]
 80067ea:	f104 0c14 	add.w	ip, r4, #20
 80067ee:	46ae      	mov	lr, r5
 80067f0:	f04f 0a00 	mov.w	sl, #0
 80067f4:	f8bc b000 	ldrh.w	fp, [ip]
 80067f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80067fc:	fb09 770b 	mla	r7, r9, fp, r7
 8006800:	4457      	add	r7, sl
 8006802:	b29b      	uxth	r3, r3
 8006804:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006808:	f84e 3b04 	str.w	r3, [lr], #4
 800680c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006810:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006814:	f8be 3000 	ldrh.w	r3, [lr]
 8006818:	fb09 330a 	mla	r3, r9, sl, r3
 800681c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006820:	4562      	cmp	r2, ip
 8006822:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006826:	d8e5      	bhi.n	80067f4 <__multiply+0x10c>
 8006828:	9f01      	ldr	r7, [sp, #4]
 800682a:	51eb      	str	r3, [r5, r7]
 800682c:	3504      	adds	r5, #4
 800682e:	e799      	b.n	8006764 <__multiply+0x7c>
 8006830:	3e01      	subs	r6, #1
 8006832:	e79b      	b.n	800676c <__multiply+0x84>
 8006834:	0800741c 	.word	0x0800741c
 8006838:	0800742d 	.word	0x0800742d

0800683c <__pow5mult>:
 800683c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006840:	4615      	mov	r5, r2
 8006842:	f012 0203 	ands.w	r2, r2, #3
 8006846:	4607      	mov	r7, r0
 8006848:	460e      	mov	r6, r1
 800684a:	d007      	beq.n	800685c <__pow5mult+0x20>
 800684c:	4c25      	ldr	r4, [pc, #148]	@ (80068e4 <__pow5mult+0xa8>)
 800684e:	3a01      	subs	r2, #1
 8006850:	2300      	movs	r3, #0
 8006852:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006856:	f7ff fe9f 	bl	8006598 <__multadd>
 800685a:	4606      	mov	r6, r0
 800685c:	10ad      	asrs	r5, r5, #2
 800685e:	d03d      	beq.n	80068dc <__pow5mult+0xa0>
 8006860:	69fc      	ldr	r4, [r7, #28]
 8006862:	b97c      	cbnz	r4, 8006884 <__pow5mult+0x48>
 8006864:	2010      	movs	r0, #16
 8006866:	f7ff fd7f 	bl	8006368 <malloc>
 800686a:	4602      	mov	r2, r0
 800686c:	61f8      	str	r0, [r7, #28]
 800686e:	b928      	cbnz	r0, 800687c <__pow5mult+0x40>
 8006870:	4b1d      	ldr	r3, [pc, #116]	@ (80068e8 <__pow5mult+0xac>)
 8006872:	481e      	ldr	r0, [pc, #120]	@ (80068ec <__pow5mult+0xb0>)
 8006874:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006878:	f000 fc3e 	bl	80070f8 <__assert_func>
 800687c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006880:	6004      	str	r4, [r0, #0]
 8006882:	60c4      	str	r4, [r0, #12]
 8006884:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006888:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800688c:	b94c      	cbnz	r4, 80068a2 <__pow5mult+0x66>
 800688e:	f240 2171 	movw	r1, #625	@ 0x271
 8006892:	4638      	mov	r0, r7
 8006894:	f7ff ff12 	bl	80066bc <__i2b>
 8006898:	2300      	movs	r3, #0
 800689a:	f8c8 0008 	str.w	r0, [r8, #8]
 800689e:	4604      	mov	r4, r0
 80068a0:	6003      	str	r3, [r0, #0]
 80068a2:	f04f 0900 	mov.w	r9, #0
 80068a6:	07eb      	lsls	r3, r5, #31
 80068a8:	d50a      	bpl.n	80068c0 <__pow5mult+0x84>
 80068aa:	4631      	mov	r1, r6
 80068ac:	4622      	mov	r2, r4
 80068ae:	4638      	mov	r0, r7
 80068b0:	f7ff ff1a 	bl	80066e8 <__multiply>
 80068b4:	4631      	mov	r1, r6
 80068b6:	4680      	mov	r8, r0
 80068b8:	4638      	mov	r0, r7
 80068ba:	f7ff fe4b 	bl	8006554 <_Bfree>
 80068be:	4646      	mov	r6, r8
 80068c0:	106d      	asrs	r5, r5, #1
 80068c2:	d00b      	beq.n	80068dc <__pow5mult+0xa0>
 80068c4:	6820      	ldr	r0, [r4, #0]
 80068c6:	b938      	cbnz	r0, 80068d8 <__pow5mult+0x9c>
 80068c8:	4622      	mov	r2, r4
 80068ca:	4621      	mov	r1, r4
 80068cc:	4638      	mov	r0, r7
 80068ce:	f7ff ff0b 	bl	80066e8 <__multiply>
 80068d2:	6020      	str	r0, [r4, #0]
 80068d4:	f8c0 9000 	str.w	r9, [r0]
 80068d8:	4604      	mov	r4, r0
 80068da:	e7e4      	b.n	80068a6 <__pow5mult+0x6a>
 80068dc:	4630      	mov	r0, r6
 80068de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e2:	bf00      	nop
 80068e4:	08007488 	.word	0x08007488
 80068e8:	080073ad 	.word	0x080073ad
 80068ec:	0800742d 	.word	0x0800742d

080068f0 <__lshift>:
 80068f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f4:	460c      	mov	r4, r1
 80068f6:	6849      	ldr	r1, [r1, #4]
 80068f8:	6923      	ldr	r3, [r4, #16]
 80068fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068fe:	68a3      	ldr	r3, [r4, #8]
 8006900:	4607      	mov	r7, r0
 8006902:	4691      	mov	r9, r2
 8006904:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006908:	f108 0601 	add.w	r6, r8, #1
 800690c:	42b3      	cmp	r3, r6
 800690e:	db0b      	blt.n	8006928 <__lshift+0x38>
 8006910:	4638      	mov	r0, r7
 8006912:	f7ff fddf 	bl	80064d4 <_Balloc>
 8006916:	4605      	mov	r5, r0
 8006918:	b948      	cbnz	r0, 800692e <__lshift+0x3e>
 800691a:	4602      	mov	r2, r0
 800691c:	4b28      	ldr	r3, [pc, #160]	@ (80069c0 <__lshift+0xd0>)
 800691e:	4829      	ldr	r0, [pc, #164]	@ (80069c4 <__lshift+0xd4>)
 8006920:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006924:	f000 fbe8 	bl	80070f8 <__assert_func>
 8006928:	3101      	adds	r1, #1
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	e7ee      	b.n	800690c <__lshift+0x1c>
 800692e:	2300      	movs	r3, #0
 8006930:	f100 0114 	add.w	r1, r0, #20
 8006934:	f100 0210 	add.w	r2, r0, #16
 8006938:	4618      	mov	r0, r3
 800693a:	4553      	cmp	r3, sl
 800693c:	db33      	blt.n	80069a6 <__lshift+0xb6>
 800693e:	6920      	ldr	r0, [r4, #16]
 8006940:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006944:	f104 0314 	add.w	r3, r4, #20
 8006948:	f019 091f 	ands.w	r9, r9, #31
 800694c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006950:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006954:	d02b      	beq.n	80069ae <__lshift+0xbe>
 8006956:	f1c9 0e20 	rsb	lr, r9, #32
 800695a:	468a      	mov	sl, r1
 800695c:	2200      	movs	r2, #0
 800695e:	6818      	ldr	r0, [r3, #0]
 8006960:	fa00 f009 	lsl.w	r0, r0, r9
 8006964:	4310      	orrs	r0, r2
 8006966:	f84a 0b04 	str.w	r0, [sl], #4
 800696a:	f853 2b04 	ldr.w	r2, [r3], #4
 800696e:	459c      	cmp	ip, r3
 8006970:	fa22 f20e 	lsr.w	r2, r2, lr
 8006974:	d8f3      	bhi.n	800695e <__lshift+0x6e>
 8006976:	ebac 0304 	sub.w	r3, ip, r4
 800697a:	3b15      	subs	r3, #21
 800697c:	f023 0303 	bic.w	r3, r3, #3
 8006980:	3304      	adds	r3, #4
 8006982:	f104 0015 	add.w	r0, r4, #21
 8006986:	4584      	cmp	ip, r0
 8006988:	bf38      	it	cc
 800698a:	2304      	movcc	r3, #4
 800698c:	50ca      	str	r2, [r1, r3]
 800698e:	b10a      	cbz	r2, 8006994 <__lshift+0xa4>
 8006990:	f108 0602 	add.w	r6, r8, #2
 8006994:	3e01      	subs	r6, #1
 8006996:	4638      	mov	r0, r7
 8006998:	612e      	str	r6, [r5, #16]
 800699a:	4621      	mov	r1, r4
 800699c:	f7ff fdda 	bl	8006554 <_Bfree>
 80069a0:	4628      	mov	r0, r5
 80069a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80069aa:	3301      	adds	r3, #1
 80069ac:	e7c5      	b.n	800693a <__lshift+0x4a>
 80069ae:	3904      	subs	r1, #4
 80069b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80069b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80069b8:	459c      	cmp	ip, r3
 80069ba:	d8f9      	bhi.n	80069b0 <__lshift+0xc0>
 80069bc:	e7ea      	b.n	8006994 <__lshift+0xa4>
 80069be:	bf00      	nop
 80069c0:	0800741c 	.word	0x0800741c
 80069c4:	0800742d 	.word	0x0800742d

080069c8 <__mcmp>:
 80069c8:	690a      	ldr	r2, [r1, #16]
 80069ca:	4603      	mov	r3, r0
 80069cc:	6900      	ldr	r0, [r0, #16]
 80069ce:	1a80      	subs	r0, r0, r2
 80069d0:	b530      	push	{r4, r5, lr}
 80069d2:	d10e      	bne.n	80069f2 <__mcmp+0x2a>
 80069d4:	3314      	adds	r3, #20
 80069d6:	3114      	adds	r1, #20
 80069d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80069dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80069e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069e8:	4295      	cmp	r5, r2
 80069ea:	d003      	beq.n	80069f4 <__mcmp+0x2c>
 80069ec:	d205      	bcs.n	80069fa <__mcmp+0x32>
 80069ee:	f04f 30ff 	mov.w	r0, #4294967295
 80069f2:	bd30      	pop	{r4, r5, pc}
 80069f4:	42a3      	cmp	r3, r4
 80069f6:	d3f3      	bcc.n	80069e0 <__mcmp+0x18>
 80069f8:	e7fb      	b.n	80069f2 <__mcmp+0x2a>
 80069fa:	2001      	movs	r0, #1
 80069fc:	e7f9      	b.n	80069f2 <__mcmp+0x2a>
	...

08006a00 <__mdiff>:
 8006a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a04:	4689      	mov	r9, r1
 8006a06:	4606      	mov	r6, r0
 8006a08:	4611      	mov	r1, r2
 8006a0a:	4648      	mov	r0, r9
 8006a0c:	4614      	mov	r4, r2
 8006a0e:	f7ff ffdb 	bl	80069c8 <__mcmp>
 8006a12:	1e05      	subs	r5, r0, #0
 8006a14:	d112      	bne.n	8006a3c <__mdiff+0x3c>
 8006a16:	4629      	mov	r1, r5
 8006a18:	4630      	mov	r0, r6
 8006a1a:	f7ff fd5b 	bl	80064d4 <_Balloc>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	b928      	cbnz	r0, 8006a2e <__mdiff+0x2e>
 8006a22:	4b3f      	ldr	r3, [pc, #252]	@ (8006b20 <__mdiff+0x120>)
 8006a24:	f240 2137 	movw	r1, #567	@ 0x237
 8006a28:	483e      	ldr	r0, [pc, #248]	@ (8006b24 <__mdiff+0x124>)
 8006a2a:	f000 fb65 	bl	80070f8 <__assert_func>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a34:	4610      	mov	r0, r2
 8006a36:	b003      	add	sp, #12
 8006a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3c:	bfbc      	itt	lt
 8006a3e:	464b      	movlt	r3, r9
 8006a40:	46a1      	movlt	r9, r4
 8006a42:	4630      	mov	r0, r6
 8006a44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006a48:	bfba      	itte	lt
 8006a4a:	461c      	movlt	r4, r3
 8006a4c:	2501      	movlt	r5, #1
 8006a4e:	2500      	movge	r5, #0
 8006a50:	f7ff fd40 	bl	80064d4 <_Balloc>
 8006a54:	4602      	mov	r2, r0
 8006a56:	b918      	cbnz	r0, 8006a60 <__mdiff+0x60>
 8006a58:	4b31      	ldr	r3, [pc, #196]	@ (8006b20 <__mdiff+0x120>)
 8006a5a:	f240 2145 	movw	r1, #581	@ 0x245
 8006a5e:	e7e3      	b.n	8006a28 <__mdiff+0x28>
 8006a60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a64:	6926      	ldr	r6, [r4, #16]
 8006a66:	60c5      	str	r5, [r0, #12]
 8006a68:	f109 0310 	add.w	r3, r9, #16
 8006a6c:	f109 0514 	add.w	r5, r9, #20
 8006a70:	f104 0e14 	add.w	lr, r4, #20
 8006a74:	f100 0b14 	add.w	fp, r0, #20
 8006a78:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a7c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	46d9      	mov	r9, fp
 8006a84:	f04f 0c00 	mov.w	ip, #0
 8006a88:	9b01      	ldr	r3, [sp, #4]
 8006a8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a92:	9301      	str	r3, [sp, #4]
 8006a94:	fa1f f38a 	uxth.w	r3, sl
 8006a98:	4619      	mov	r1, r3
 8006a9a:	b283      	uxth	r3, r0
 8006a9c:	1acb      	subs	r3, r1, r3
 8006a9e:	0c00      	lsrs	r0, r0, #16
 8006aa0:	4463      	add	r3, ip
 8006aa2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006aa6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ab0:	4576      	cmp	r6, lr
 8006ab2:	f849 3b04 	str.w	r3, [r9], #4
 8006ab6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006aba:	d8e5      	bhi.n	8006a88 <__mdiff+0x88>
 8006abc:	1b33      	subs	r3, r6, r4
 8006abe:	3b15      	subs	r3, #21
 8006ac0:	f023 0303 	bic.w	r3, r3, #3
 8006ac4:	3415      	adds	r4, #21
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	42a6      	cmp	r6, r4
 8006aca:	bf38      	it	cc
 8006acc:	2304      	movcc	r3, #4
 8006ace:	441d      	add	r5, r3
 8006ad0:	445b      	add	r3, fp
 8006ad2:	461e      	mov	r6, r3
 8006ad4:	462c      	mov	r4, r5
 8006ad6:	4544      	cmp	r4, r8
 8006ad8:	d30e      	bcc.n	8006af8 <__mdiff+0xf8>
 8006ada:	f108 0103 	add.w	r1, r8, #3
 8006ade:	1b49      	subs	r1, r1, r5
 8006ae0:	f021 0103 	bic.w	r1, r1, #3
 8006ae4:	3d03      	subs	r5, #3
 8006ae6:	45a8      	cmp	r8, r5
 8006ae8:	bf38      	it	cc
 8006aea:	2100      	movcc	r1, #0
 8006aec:	440b      	add	r3, r1
 8006aee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006af2:	b191      	cbz	r1, 8006b1a <__mdiff+0x11a>
 8006af4:	6117      	str	r7, [r2, #16]
 8006af6:	e79d      	b.n	8006a34 <__mdiff+0x34>
 8006af8:	f854 1b04 	ldr.w	r1, [r4], #4
 8006afc:	46e6      	mov	lr, ip
 8006afe:	0c08      	lsrs	r0, r1, #16
 8006b00:	fa1c fc81 	uxtah	ip, ip, r1
 8006b04:	4471      	add	r1, lr
 8006b06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006b0a:	b289      	uxth	r1, r1
 8006b0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b10:	f846 1b04 	str.w	r1, [r6], #4
 8006b14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b18:	e7dd      	b.n	8006ad6 <__mdiff+0xd6>
 8006b1a:	3f01      	subs	r7, #1
 8006b1c:	e7e7      	b.n	8006aee <__mdiff+0xee>
 8006b1e:	bf00      	nop
 8006b20:	0800741c 	.word	0x0800741c
 8006b24:	0800742d 	.word	0x0800742d

08006b28 <__d2b>:
 8006b28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b2c:	460f      	mov	r7, r1
 8006b2e:	2101      	movs	r1, #1
 8006b30:	ec59 8b10 	vmov	r8, r9, d0
 8006b34:	4616      	mov	r6, r2
 8006b36:	f7ff fccd 	bl	80064d4 <_Balloc>
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	b930      	cbnz	r0, 8006b4c <__d2b+0x24>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	4b23      	ldr	r3, [pc, #140]	@ (8006bd0 <__d2b+0xa8>)
 8006b42:	4824      	ldr	r0, [pc, #144]	@ (8006bd4 <__d2b+0xac>)
 8006b44:	f240 310f 	movw	r1, #783	@ 0x30f
 8006b48:	f000 fad6 	bl	80070f8 <__assert_func>
 8006b4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b54:	b10d      	cbz	r5, 8006b5a <__d2b+0x32>
 8006b56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	f1b8 0300 	subs.w	r3, r8, #0
 8006b60:	d023      	beq.n	8006baa <__d2b+0x82>
 8006b62:	4668      	mov	r0, sp
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	f7ff fd7c 	bl	8006662 <__lo0bits>
 8006b6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b6e:	b1d0      	cbz	r0, 8006ba6 <__d2b+0x7e>
 8006b70:	f1c0 0320 	rsb	r3, r0, #32
 8006b74:	fa02 f303 	lsl.w	r3, r2, r3
 8006b78:	430b      	orrs	r3, r1
 8006b7a:	40c2      	lsrs	r2, r0
 8006b7c:	6163      	str	r3, [r4, #20]
 8006b7e:	9201      	str	r2, [sp, #4]
 8006b80:	9b01      	ldr	r3, [sp, #4]
 8006b82:	61a3      	str	r3, [r4, #24]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	bf0c      	ite	eq
 8006b88:	2201      	moveq	r2, #1
 8006b8a:	2202      	movne	r2, #2
 8006b8c:	6122      	str	r2, [r4, #16]
 8006b8e:	b1a5      	cbz	r5, 8006bba <__d2b+0x92>
 8006b90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006b94:	4405      	add	r5, r0
 8006b96:	603d      	str	r5, [r7, #0]
 8006b98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006b9c:	6030      	str	r0, [r6, #0]
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	b003      	add	sp, #12
 8006ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ba6:	6161      	str	r1, [r4, #20]
 8006ba8:	e7ea      	b.n	8006b80 <__d2b+0x58>
 8006baa:	a801      	add	r0, sp, #4
 8006bac:	f7ff fd59 	bl	8006662 <__lo0bits>
 8006bb0:	9b01      	ldr	r3, [sp, #4]
 8006bb2:	6163      	str	r3, [r4, #20]
 8006bb4:	3020      	adds	r0, #32
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	e7e8      	b.n	8006b8c <__d2b+0x64>
 8006bba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006bbe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006bc2:	6038      	str	r0, [r7, #0]
 8006bc4:	6918      	ldr	r0, [r3, #16]
 8006bc6:	f7ff fd2d 	bl	8006624 <__hi0bits>
 8006bca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006bce:	e7e5      	b.n	8006b9c <__d2b+0x74>
 8006bd0:	0800741c 	.word	0x0800741c
 8006bd4:	0800742d 	.word	0x0800742d

08006bd8 <__sfputc_r>:
 8006bd8:	6893      	ldr	r3, [r2, #8]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	b410      	push	{r4}
 8006be0:	6093      	str	r3, [r2, #8]
 8006be2:	da08      	bge.n	8006bf6 <__sfputc_r+0x1e>
 8006be4:	6994      	ldr	r4, [r2, #24]
 8006be6:	42a3      	cmp	r3, r4
 8006be8:	db01      	blt.n	8006bee <__sfputc_r+0x16>
 8006bea:	290a      	cmp	r1, #10
 8006bec:	d103      	bne.n	8006bf6 <__sfputc_r+0x1e>
 8006bee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bf2:	f7fe bc7a 	b.w	80054ea <__swbuf_r>
 8006bf6:	6813      	ldr	r3, [r2, #0]
 8006bf8:	1c58      	adds	r0, r3, #1
 8006bfa:	6010      	str	r0, [r2, #0]
 8006bfc:	7019      	strb	r1, [r3, #0]
 8006bfe:	4608      	mov	r0, r1
 8006c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <__sfputs_r>:
 8006c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c08:	4606      	mov	r6, r0
 8006c0a:	460f      	mov	r7, r1
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	18d5      	adds	r5, r2, r3
 8006c10:	42ac      	cmp	r4, r5
 8006c12:	d101      	bne.n	8006c18 <__sfputs_r+0x12>
 8006c14:	2000      	movs	r0, #0
 8006c16:	e007      	b.n	8006c28 <__sfputs_r+0x22>
 8006c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c1c:	463a      	mov	r2, r7
 8006c1e:	4630      	mov	r0, r6
 8006c20:	f7ff ffda 	bl	8006bd8 <__sfputc_r>
 8006c24:	1c43      	adds	r3, r0, #1
 8006c26:	d1f3      	bne.n	8006c10 <__sfputs_r+0xa>
 8006c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c2c <_vfiprintf_r>:
 8006c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c30:	460d      	mov	r5, r1
 8006c32:	b09d      	sub	sp, #116	@ 0x74
 8006c34:	4614      	mov	r4, r2
 8006c36:	4698      	mov	r8, r3
 8006c38:	4606      	mov	r6, r0
 8006c3a:	b118      	cbz	r0, 8006c44 <_vfiprintf_r+0x18>
 8006c3c:	6a03      	ldr	r3, [r0, #32]
 8006c3e:	b90b      	cbnz	r3, 8006c44 <_vfiprintf_r+0x18>
 8006c40:	f7fe fb6a 	bl	8005318 <__sinit>
 8006c44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c46:	07d9      	lsls	r1, r3, #31
 8006c48:	d405      	bmi.n	8006c56 <_vfiprintf_r+0x2a>
 8006c4a:	89ab      	ldrh	r3, [r5, #12]
 8006c4c:	059a      	lsls	r2, r3, #22
 8006c4e:	d402      	bmi.n	8006c56 <_vfiprintf_r+0x2a>
 8006c50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c52:	f7fe fd5c 	bl	800570e <__retarget_lock_acquire_recursive>
 8006c56:	89ab      	ldrh	r3, [r5, #12]
 8006c58:	071b      	lsls	r3, r3, #28
 8006c5a:	d501      	bpl.n	8006c60 <_vfiprintf_r+0x34>
 8006c5c:	692b      	ldr	r3, [r5, #16]
 8006c5e:	b99b      	cbnz	r3, 8006c88 <_vfiprintf_r+0x5c>
 8006c60:	4629      	mov	r1, r5
 8006c62:	4630      	mov	r0, r6
 8006c64:	f7fe fc80 	bl	8005568 <__swsetup_r>
 8006c68:	b170      	cbz	r0, 8006c88 <_vfiprintf_r+0x5c>
 8006c6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c6c:	07dc      	lsls	r4, r3, #31
 8006c6e:	d504      	bpl.n	8006c7a <_vfiprintf_r+0x4e>
 8006c70:	f04f 30ff 	mov.w	r0, #4294967295
 8006c74:	b01d      	add	sp, #116	@ 0x74
 8006c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7a:	89ab      	ldrh	r3, [r5, #12]
 8006c7c:	0598      	lsls	r0, r3, #22
 8006c7e:	d4f7      	bmi.n	8006c70 <_vfiprintf_r+0x44>
 8006c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c82:	f7fe fd45 	bl	8005710 <__retarget_lock_release_recursive>
 8006c86:	e7f3      	b.n	8006c70 <_vfiprintf_r+0x44>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c8c:	2320      	movs	r3, #32
 8006c8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c92:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c96:	2330      	movs	r3, #48	@ 0x30
 8006c98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006e48 <_vfiprintf_r+0x21c>
 8006c9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ca0:	f04f 0901 	mov.w	r9, #1
 8006ca4:	4623      	mov	r3, r4
 8006ca6:	469a      	mov	sl, r3
 8006ca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cac:	b10a      	cbz	r2, 8006cb2 <_vfiprintf_r+0x86>
 8006cae:	2a25      	cmp	r2, #37	@ 0x25
 8006cb0:	d1f9      	bne.n	8006ca6 <_vfiprintf_r+0x7a>
 8006cb2:	ebba 0b04 	subs.w	fp, sl, r4
 8006cb6:	d00b      	beq.n	8006cd0 <_vfiprintf_r+0xa4>
 8006cb8:	465b      	mov	r3, fp
 8006cba:	4622      	mov	r2, r4
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f7ff ffa1 	bl	8006c06 <__sfputs_r>
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	f000 80a7 	beq.w	8006e18 <_vfiprintf_r+0x1ec>
 8006cca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ccc:	445a      	add	r2, fp
 8006cce:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 809f 	beq.w	8006e18 <_vfiprintf_r+0x1ec>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ce4:	f10a 0a01 	add.w	sl, sl, #1
 8006ce8:	9304      	str	r3, [sp, #16]
 8006cea:	9307      	str	r3, [sp, #28]
 8006cec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cf0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cf2:	4654      	mov	r4, sl
 8006cf4:	2205      	movs	r2, #5
 8006cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cfa:	4853      	ldr	r0, [pc, #332]	@ (8006e48 <_vfiprintf_r+0x21c>)
 8006cfc:	f7f9 faf0 	bl	80002e0 <memchr>
 8006d00:	9a04      	ldr	r2, [sp, #16]
 8006d02:	b9d8      	cbnz	r0, 8006d3c <_vfiprintf_r+0x110>
 8006d04:	06d1      	lsls	r1, r2, #27
 8006d06:	bf44      	itt	mi
 8006d08:	2320      	movmi	r3, #32
 8006d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d0e:	0713      	lsls	r3, r2, #28
 8006d10:	bf44      	itt	mi
 8006d12:	232b      	movmi	r3, #43	@ 0x2b
 8006d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d18:	f89a 3000 	ldrb.w	r3, [sl]
 8006d1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d1e:	d015      	beq.n	8006d4c <_vfiprintf_r+0x120>
 8006d20:	9a07      	ldr	r2, [sp, #28]
 8006d22:	4654      	mov	r4, sl
 8006d24:	2000      	movs	r0, #0
 8006d26:	f04f 0c0a 	mov.w	ip, #10
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d30:	3b30      	subs	r3, #48	@ 0x30
 8006d32:	2b09      	cmp	r3, #9
 8006d34:	d94b      	bls.n	8006dce <_vfiprintf_r+0x1a2>
 8006d36:	b1b0      	cbz	r0, 8006d66 <_vfiprintf_r+0x13a>
 8006d38:	9207      	str	r2, [sp, #28]
 8006d3a:	e014      	b.n	8006d66 <_vfiprintf_r+0x13a>
 8006d3c:	eba0 0308 	sub.w	r3, r0, r8
 8006d40:	fa09 f303 	lsl.w	r3, r9, r3
 8006d44:	4313      	orrs	r3, r2
 8006d46:	9304      	str	r3, [sp, #16]
 8006d48:	46a2      	mov	sl, r4
 8006d4a:	e7d2      	b.n	8006cf2 <_vfiprintf_r+0xc6>
 8006d4c:	9b03      	ldr	r3, [sp, #12]
 8006d4e:	1d19      	adds	r1, r3, #4
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	9103      	str	r1, [sp, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	bfbb      	ittet	lt
 8006d58:	425b      	neglt	r3, r3
 8006d5a:	f042 0202 	orrlt.w	r2, r2, #2
 8006d5e:	9307      	strge	r3, [sp, #28]
 8006d60:	9307      	strlt	r3, [sp, #28]
 8006d62:	bfb8      	it	lt
 8006d64:	9204      	strlt	r2, [sp, #16]
 8006d66:	7823      	ldrb	r3, [r4, #0]
 8006d68:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d6a:	d10a      	bne.n	8006d82 <_vfiprintf_r+0x156>
 8006d6c:	7863      	ldrb	r3, [r4, #1]
 8006d6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d70:	d132      	bne.n	8006dd8 <_vfiprintf_r+0x1ac>
 8006d72:	9b03      	ldr	r3, [sp, #12]
 8006d74:	1d1a      	adds	r2, r3, #4
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	9203      	str	r2, [sp, #12]
 8006d7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d7e:	3402      	adds	r4, #2
 8006d80:	9305      	str	r3, [sp, #20]
 8006d82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006e58 <_vfiprintf_r+0x22c>
 8006d86:	7821      	ldrb	r1, [r4, #0]
 8006d88:	2203      	movs	r2, #3
 8006d8a:	4650      	mov	r0, sl
 8006d8c:	f7f9 faa8 	bl	80002e0 <memchr>
 8006d90:	b138      	cbz	r0, 8006da2 <_vfiprintf_r+0x176>
 8006d92:	9b04      	ldr	r3, [sp, #16]
 8006d94:	eba0 000a 	sub.w	r0, r0, sl
 8006d98:	2240      	movs	r2, #64	@ 0x40
 8006d9a:	4082      	lsls	r2, r0
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	3401      	adds	r4, #1
 8006da0:	9304      	str	r3, [sp, #16]
 8006da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da6:	4829      	ldr	r0, [pc, #164]	@ (8006e4c <_vfiprintf_r+0x220>)
 8006da8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006dac:	2206      	movs	r2, #6
 8006dae:	f7f9 fa97 	bl	80002e0 <memchr>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d03f      	beq.n	8006e36 <_vfiprintf_r+0x20a>
 8006db6:	4b26      	ldr	r3, [pc, #152]	@ (8006e50 <_vfiprintf_r+0x224>)
 8006db8:	bb1b      	cbnz	r3, 8006e02 <_vfiprintf_r+0x1d6>
 8006dba:	9b03      	ldr	r3, [sp, #12]
 8006dbc:	3307      	adds	r3, #7
 8006dbe:	f023 0307 	bic.w	r3, r3, #7
 8006dc2:	3308      	adds	r3, #8
 8006dc4:	9303      	str	r3, [sp, #12]
 8006dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dc8:	443b      	add	r3, r7
 8006dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dcc:	e76a      	b.n	8006ca4 <_vfiprintf_r+0x78>
 8006dce:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	2001      	movs	r0, #1
 8006dd6:	e7a8      	b.n	8006d2a <_vfiprintf_r+0xfe>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	3401      	adds	r4, #1
 8006ddc:	9305      	str	r3, [sp, #20]
 8006dde:	4619      	mov	r1, r3
 8006de0:	f04f 0c0a 	mov.w	ip, #10
 8006de4:	4620      	mov	r0, r4
 8006de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dea:	3a30      	subs	r2, #48	@ 0x30
 8006dec:	2a09      	cmp	r2, #9
 8006dee:	d903      	bls.n	8006df8 <_vfiprintf_r+0x1cc>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d0c6      	beq.n	8006d82 <_vfiprintf_r+0x156>
 8006df4:	9105      	str	r1, [sp, #20]
 8006df6:	e7c4      	b.n	8006d82 <_vfiprintf_r+0x156>
 8006df8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e7f0      	b.n	8006de4 <_vfiprintf_r+0x1b8>
 8006e02:	ab03      	add	r3, sp, #12
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	462a      	mov	r2, r5
 8006e08:	4b12      	ldr	r3, [pc, #72]	@ (8006e54 <_vfiprintf_r+0x228>)
 8006e0a:	a904      	add	r1, sp, #16
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	f7fd fe4f 	bl	8004ab0 <_printf_float>
 8006e12:	4607      	mov	r7, r0
 8006e14:	1c78      	adds	r0, r7, #1
 8006e16:	d1d6      	bne.n	8006dc6 <_vfiprintf_r+0x19a>
 8006e18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e1a:	07d9      	lsls	r1, r3, #31
 8006e1c:	d405      	bmi.n	8006e2a <_vfiprintf_r+0x1fe>
 8006e1e:	89ab      	ldrh	r3, [r5, #12]
 8006e20:	059a      	lsls	r2, r3, #22
 8006e22:	d402      	bmi.n	8006e2a <_vfiprintf_r+0x1fe>
 8006e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e26:	f7fe fc73 	bl	8005710 <__retarget_lock_release_recursive>
 8006e2a:	89ab      	ldrh	r3, [r5, #12]
 8006e2c:	065b      	lsls	r3, r3, #25
 8006e2e:	f53f af1f 	bmi.w	8006c70 <_vfiprintf_r+0x44>
 8006e32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e34:	e71e      	b.n	8006c74 <_vfiprintf_r+0x48>
 8006e36:	ab03      	add	r3, sp, #12
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	462a      	mov	r2, r5
 8006e3c:	4b05      	ldr	r3, [pc, #20]	@ (8006e54 <_vfiprintf_r+0x228>)
 8006e3e:	a904      	add	r1, sp, #16
 8006e40:	4630      	mov	r0, r6
 8006e42:	f7fe f8bd 	bl	8004fc0 <_printf_i>
 8006e46:	e7e4      	b.n	8006e12 <_vfiprintf_r+0x1e6>
 8006e48:	08007588 	.word	0x08007588
 8006e4c:	08007592 	.word	0x08007592
 8006e50:	08004ab1 	.word	0x08004ab1
 8006e54:	08006c07 	.word	0x08006c07
 8006e58:	0800758e 	.word	0x0800758e

08006e5c <__sflush_r>:
 8006e5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e64:	0716      	lsls	r6, r2, #28
 8006e66:	4605      	mov	r5, r0
 8006e68:	460c      	mov	r4, r1
 8006e6a:	d454      	bmi.n	8006f16 <__sflush_r+0xba>
 8006e6c:	684b      	ldr	r3, [r1, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	dc02      	bgt.n	8006e78 <__sflush_r+0x1c>
 8006e72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dd48      	ble.n	8006f0a <__sflush_r+0xae>
 8006e78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e7a:	2e00      	cmp	r6, #0
 8006e7c:	d045      	beq.n	8006f0a <__sflush_r+0xae>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e84:	682f      	ldr	r7, [r5, #0]
 8006e86:	6a21      	ldr	r1, [r4, #32]
 8006e88:	602b      	str	r3, [r5, #0]
 8006e8a:	d030      	beq.n	8006eee <__sflush_r+0x92>
 8006e8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e8e:	89a3      	ldrh	r3, [r4, #12]
 8006e90:	0759      	lsls	r1, r3, #29
 8006e92:	d505      	bpl.n	8006ea0 <__sflush_r+0x44>
 8006e94:	6863      	ldr	r3, [r4, #4]
 8006e96:	1ad2      	subs	r2, r2, r3
 8006e98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e9a:	b10b      	cbz	r3, 8006ea0 <__sflush_r+0x44>
 8006e9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e9e:	1ad2      	subs	r2, r2, r3
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ea4:	6a21      	ldr	r1, [r4, #32]
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	47b0      	blx	r6
 8006eaa:	1c43      	adds	r3, r0, #1
 8006eac:	89a3      	ldrh	r3, [r4, #12]
 8006eae:	d106      	bne.n	8006ebe <__sflush_r+0x62>
 8006eb0:	6829      	ldr	r1, [r5, #0]
 8006eb2:	291d      	cmp	r1, #29
 8006eb4:	d82b      	bhi.n	8006f0e <__sflush_r+0xb2>
 8006eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8006f60 <__sflush_r+0x104>)
 8006eb8:	410a      	asrs	r2, r1
 8006eba:	07d6      	lsls	r6, r2, #31
 8006ebc:	d427      	bmi.n	8006f0e <__sflush_r+0xb2>
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	6062      	str	r2, [r4, #4]
 8006ec2:	04d9      	lsls	r1, r3, #19
 8006ec4:	6922      	ldr	r2, [r4, #16]
 8006ec6:	6022      	str	r2, [r4, #0]
 8006ec8:	d504      	bpl.n	8006ed4 <__sflush_r+0x78>
 8006eca:	1c42      	adds	r2, r0, #1
 8006ecc:	d101      	bne.n	8006ed2 <__sflush_r+0x76>
 8006ece:	682b      	ldr	r3, [r5, #0]
 8006ed0:	b903      	cbnz	r3, 8006ed4 <__sflush_r+0x78>
 8006ed2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006ed4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ed6:	602f      	str	r7, [r5, #0]
 8006ed8:	b1b9      	cbz	r1, 8006f0a <__sflush_r+0xae>
 8006eda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ede:	4299      	cmp	r1, r3
 8006ee0:	d002      	beq.n	8006ee8 <__sflush_r+0x8c>
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f7ff f9f6 	bl	80062d4 <_free_r>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	6363      	str	r3, [r4, #52]	@ 0x34
 8006eec:	e00d      	b.n	8006f0a <__sflush_r+0xae>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	47b0      	blx	r6
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	1c50      	adds	r0, r2, #1
 8006ef8:	d1c9      	bne.n	8006e8e <__sflush_r+0x32>
 8006efa:	682b      	ldr	r3, [r5, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d0c6      	beq.n	8006e8e <__sflush_r+0x32>
 8006f00:	2b1d      	cmp	r3, #29
 8006f02:	d001      	beq.n	8006f08 <__sflush_r+0xac>
 8006f04:	2b16      	cmp	r3, #22
 8006f06:	d11e      	bne.n	8006f46 <__sflush_r+0xea>
 8006f08:	602f      	str	r7, [r5, #0]
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	e022      	b.n	8006f54 <__sflush_r+0xf8>
 8006f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f12:	b21b      	sxth	r3, r3
 8006f14:	e01b      	b.n	8006f4e <__sflush_r+0xf2>
 8006f16:	690f      	ldr	r7, [r1, #16]
 8006f18:	2f00      	cmp	r7, #0
 8006f1a:	d0f6      	beq.n	8006f0a <__sflush_r+0xae>
 8006f1c:	0793      	lsls	r3, r2, #30
 8006f1e:	680e      	ldr	r6, [r1, #0]
 8006f20:	bf08      	it	eq
 8006f22:	694b      	ldreq	r3, [r1, #20]
 8006f24:	600f      	str	r7, [r1, #0]
 8006f26:	bf18      	it	ne
 8006f28:	2300      	movne	r3, #0
 8006f2a:	eba6 0807 	sub.w	r8, r6, r7
 8006f2e:	608b      	str	r3, [r1, #8]
 8006f30:	f1b8 0f00 	cmp.w	r8, #0
 8006f34:	dde9      	ble.n	8006f0a <__sflush_r+0xae>
 8006f36:	6a21      	ldr	r1, [r4, #32]
 8006f38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f3a:	4643      	mov	r3, r8
 8006f3c:	463a      	mov	r2, r7
 8006f3e:	4628      	mov	r0, r5
 8006f40:	47b0      	blx	r6
 8006f42:	2800      	cmp	r0, #0
 8006f44:	dc08      	bgt.n	8006f58 <__sflush_r+0xfc>
 8006f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f4e:	81a3      	strh	r3, [r4, #12]
 8006f50:	f04f 30ff 	mov.w	r0, #4294967295
 8006f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f58:	4407      	add	r7, r0
 8006f5a:	eba8 0800 	sub.w	r8, r8, r0
 8006f5e:	e7e7      	b.n	8006f30 <__sflush_r+0xd4>
 8006f60:	dfbffffe 	.word	0xdfbffffe

08006f64 <_fflush_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	690b      	ldr	r3, [r1, #16]
 8006f68:	4605      	mov	r5, r0
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	b913      	cbnz	r3, 8006f74 <_fflush_r+0x10>
 8006f6e:	2500      	movs	r5, #0
 8006f70:	4628      	mov	r0, r5
 8006f72:	bd38      	pop	{r3, r4, r5, pc}
 8006f74:	b118      	cbz	r0, 8006f7e <_fflush_r+0x1a>
 8006f76:	6a03      	ldr	r3, [r0, #32]
 8006f78:	b90b      	cbnz	r3, 8006f7e <_fflush_r+0x1a>
 8006f7a:	f7fe f9cd 	bl	8005318 <__sinit>
 8006f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0f3      	beq.n	8006f6e <_fflush_r+0xa>
 8006f86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f88:	07d0      	lsls	r0, r2, #31
 8006f8a:	d404      	bmi.n	8006f96 <_fflush_r+0x32>
 8006f8c:	0599      	lsls	r1, r3, #22
 8006f8e:	d402      	bmi.n	8006f96 <_fflush_r+0x32>
 8006f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f92:	f7fe fbbc 	bl	800570e <__retarget_lock_acquire_recursive>
 8006f96:	4628      	mov	r0, r5
 8006f98:	4621      	mov	r1, r4
 8006f9a:	f7ff ff5f 	bl	8006e5c <__sflush_r>
 8006f9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fa0:	07da      	lsls	r2, r3, #31
 8006fa2:	4605      	mov	r5, r0
 8006fa4:	d4e4      	bmi.n	8006f70 <_fflush_r+0xc>
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	059b      	lsls	r3, r3, #22
 8006faa:	d4e1      	bmi.n	8006f70 <_fflush_r+0xc>
 8006fac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fae:	f7fe fbaf 	bl	8005710 <__retarget_lock_release_recursive>
 8006fb2:	e7dd      	b.n	8006f70 <_fflush_r+0xc>

08006fb4 <__swhatbuf_r>:
 8006fb4:	b570      	push	{r4, r5, r6, lr}
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fbc:	2900      	cmp	r1, #0
 8006fbe:	b096      	sub	sp, #88	@ 0x58
 8006fc0:	4615      	mov	r5, r2
 8006fc2:	461e      	mov	r6, r3
 8006fc4:	da0d      	bge.n	8006fe2 <__swhatbuf_r+0x2e>
 8006fc6:	89a3      	ldrh	r3, [r4, #12]
 8006fc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006fcc:	f04f 0100 	mov.w	r1, #0
 8006fd0:	bf14      	ite	ne
 8006fd2:	2340      	movne	r3, #64	@ 0x40
 8006fd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006fd8:	2000      	movs	r0, #0
 8006fda:	6031      	str	r1, [r6, #0]
 8006fdc:	602b      	str	r3, [r5, #0]
 8006fde:	b016      	add	sp, #88	@ 0x58
 8006fe0:	bd70      	pop	{r4, r5, r6, pc}
 8006fe2:	466a      	mov	r2, sp
 8006fe4:	f000 f848 	bl	8007078 <_fstat_r>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	dbec      	blt.n	8006fc6 <__swhatbuf_r+0x12>
 8006fec:	9901      	ldr	r1, [sp, #4]
 8006fee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ff2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ff6:	4259      	negs	r1, r3
 8006ff8:	4159      	adcs	r1, r3
 8006ffa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ffe:	e7eb      	b.n	8006fd8 <__swhatbuf_r+0x24>

08007000 <__smakebuf_r>:
 8007000:	898b      	ldrh	r3, [r1, #12]
 8007002:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007004:	079d      	lsls	r5, r3, #30
 8007006:	4606      	mov	r6, r0
 8007008:	460c      	mov	r4, r1
 800700a:	d507      	bpl.n	800701c <__smakebuf_r+0x1c>
 800700c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	6123      	str	r3, [r4, #16]
 8007014:	2301      	movs	r3, #1
 8007016:	6163      	str	r3, [r4, #20]
 8007018:	b003      	add	sp, #12
 800701a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800701c:	ab01      	add	r3, sp, #4
 800701e:	466a      	mov	r2, sp
 8007020:	f7ff ffc8 	bl	8006fb4 <__swhatbuf_r>
 8007024:	9f00      	ldr	r7, [sp, #0]
 8007026:	4605      	mov	r5, r0
 8007028:	4639      	mov	r1, r7
 800702a:	4630      	mov	r0, r6
 800702c:	f7ff f9c6 	bl	80063bc <_malloc_r>
 8007030:	b948      	cbnz	r0, 8007046 <__smakebuf_r+0x46>
 8007032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007036:	059a      	lsls	r2, r3, #22
 8007038:	d4ee      	bmi.n	8007018 <__smakebuf_r+0x18>
 800703a:	f023 0303 	bic.w	r3, r3, #3
 800703e:	f043 0302 	orr.w	r3, r3, #2
 8007042:	81a3      	strh	r3, [r4, #12]
 8007044:	e7e2      	b.n	800700c <__smakebuf_r+0xc>
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	6020      	str	r0, [r4, #0]
 800704a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800704e:	81a3      	strh	r3, [r4, #12]
 8007050:	9b01      	ldr	r3, [sp, #4]
 8007052:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007056:	b15b      	cbz	r3, 8007070 <__smakebuf_r+0x70>
 8007058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800705c:	4630      	mov	r0, r6
 800705e:	f000 f81d 	bl	800709c <_isatty_r>
 8007062:	b128      	cbz	r0, 8007070 <__smakebuf_r+0x70>
 8007064:	89a3      	ldrh	r3, [r4, #12]
 8007066:	f023 0303 	bic.w	r3, r3, #3
 800706a:	f043 0301 	orr.w	r3, r3, #1
 800706e:	81a3      	strh	r3, [r4, #12]
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	431d      	orrs	r5, r3
 8007074:	81a5      	strh	r5, [r4, #12]
 8007076:	e7cf      	b.n	8007018 <__smakebuf_r+0x18>

08007078 <_fstat_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	4d07      	ldr	r5, [pc, #28]	@ (8007098 <_fstat_r+0x20>)
 800707c:	2300      	movs	r3, #0
 800707e:	4604      	mov	r4, r0
 8007080:	4608      	mov	r0, r1
 8007082:	4611      	mov	r1, r2
 8007084:	602b      	str	r3, [r5, #0]
 8007086:	f7f9 fdfa 	bl	8000c7e <_fstat>
 800708a:	1c43      	adds	r3, r0, #1
 800708c:	d102      	bne.n	8007094 <_fstat_r+0x1c>
 800708e:	682b      	ldr	r3, [r5, #0]
 8007090:	b103      	cbz	r3, 8007094 <_fstat_r+0x1c>
 8007092:	6023      	str	r3, [r4, #0]
 8007094:	bd38      	pop	{r3, r4, r5, pc}
 8007096:	bf00      	nop
 8007098:	2400038c 	.word	0x2400038c

0800709c <_isatty_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4d06      	ldr	r5, [pc, #24]	@ (80070b8 <_isatty_r+0x1c>)
 80070a0:	2300      	movs	r3, #0
 80070a2:	4604      	mov	r4, r0
 80070a4:	4608      	mov	r0, r1
 80070a6:	602b      	str	r3, [r5, #0]
 80070a8:	f7f9 fdf9 	bl	8000c9e <_isatty>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_isatty_r+0x1a>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_isatty_r+0x1a>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	2400038c 	.word	0x2400038c

080070bc <_sbrk_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4d06      	ldr	r5, [pc, #24]	@ (80070d8 <_sbrk_r+0x1c>)
 80070c0:	2300      	movs	r3, #0
 80070c2:	4604      	mov	r4, r0
 80070c4:	4608      	mov	r0, r1
 80070c6:	602b      	str	r3, [r5, #0]
 80070c8:	f7f9 fe02 	bl	8000cd0 <_sbrk>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_sbrk_r+0x1a>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_sbrk_r+0x1a>
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	2400038c 	.word	0x2400038c

080070dc <memcpy>:
 80070dc:	440a      	add	r2, r1
 80070de:	4291      	cmp	r1, r2
 80070e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80070e4:	d100      	bne.n	80070e8 <memcpy+0xc>
 80070e6:	4770      	bx	lr
 80070e8:	b510      	push	{r4, lr}
 80070ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070f2:	4291      	cmp	r1, r2
 80070f4:	d1f9      	bne.n	80070ea <memcpy+0xe>
 80070f6:	bd10      	pop	{r4, pc}

080070f8 <__assert_func>:
 80070f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070fa:	4614      	mov	r4, r2
 80070fc:	461a      	mov	r2, r3
 80070fe:	4b09      	ldr	r3, [pc, #36]	@ (8007124 <__assert_func+0x2c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4605      	mov	r5, r0
 8007104:	68d8      	ldr	r0, [r3, #12]
 8007106:	b954      	cbnz	r4, 800711e <__assert_func+0x26>
 8007108:	4b07      	ldr	r3, [pc, #28]	@ (8007128 <__assert_func+0x30>)
 800710a:	461c      	mov	r4, r3
 800710c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007110:	9100      	str	r1, [sp, #0]
 8007112:	462b      	mov	r3, r5
 8007114:	4905      	ldr	r1, [pc, #20]	@ (800712c <__assert_func+0x34>)
 8007116:	f000 f841 	bl	800719c <fiprintf>
 800711a:	f000 f851 	bl	80071c0 <abort>
 800711e:	4b04      	ldr	r3, [pc, #16]	@ (8007130 <__assert_func+0x38>)
 8007120:	e7f4      	b.n	800710c <__assert_func+0x14>
 8007122:	bf00      	nop
 8007124:	2400001c 	.word	0x2400001c
 8007128:	080075de 	.word	0x080075de
 800712c:	080075b0 	.word	0x080075b0
 8007130:	080075a3 	.word	0x080075a3

08007134 <_calloc_r>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	fba1 5402 	umull	r5, r4, r1, r2
 800713a:	b93c      	cbnz	r4, 800714c <_calloc_r+0x18>
 800713c:	4629      	mov	r1, r5
 800713e:	f7ff f93d 	bl	80063bc <_malloc_r>
 8007142:	4606      	mov	r6, r0
 8007144:	b928      	cbnz	r0, 8007152 <_calloc_r+0x1e>
 8007146:	2600      	movs	r6, #0
 8007148:	4630      	mov	r0, r6
 800714a:	bd70      	pop	{r4, r5, r6, pc}
 800714c:	220c      	movs	r2, #12
 800714e:	6002      	str	r2, [r0, #0]
 8007150:	e7f9      	b.n	8007146 <_calloc_r+0x12>
 8007152:	462a      	mov	r2, r5
 8007154:	4621      	mov	r1, r4
 8007156:	f7fe fa5d 	bl	8005614 <memset>
 800715a:	e7f5      	b.n	8007148 <_calloc_r+0x14>

0800715c <__ascii_mbtowc>:
 800715c:	b082      	sub	sp, #8
 800715e:	b901      	cbnz	r1, 8007162 <__ascii_mbtowc+0x6>
 8007160:	a901      	add	r1, sp, #4
 8007162:	b142      	cbz	r2, 8007176 <__ascii_mbtowc+0x1a>
 8007164:	b14b      	cbz	r3, 800717a <__ascii_mbtowc+0x1e>
 8007166:	7813      	ldrb	r3, [r2, #0]
 8007168:	600b      	str	r3, [r1, #0]
 800716a:	7812      	ldrb	r2, [r2, #0]
 800716c:	1e10      	subs	r0, r2, #0
 800716e:	bf18      	it	ne
 8007170:	2001      	movne	r0, #1
 8007172:	b002      	add	sp, #8
 8007174:	4770      	bx	lr
 8007176:	4610      	mov	r0, r2
 8007178:	e7fb      	b.n	8007172 <__ascii_mbtowc+0x16>
 800717a:	f06f 0001 	mvn.w	r0, #1
 800717e:	e7f8      	b.n	8007172 <__ascii_mbtowc+0x16>

08007180 <__ascii_wctomb>:
 8007180:	4603      	mov	r3, r0
 8007182:	4608      	mov	r0, r1
 8007184:	b141      	cbz	r1, 8007198 <__ascii_wctomb+0x18>
 8007186:	2aff      	cmp	r2, #255	@ 0xff
 8007188:	d904      	bls.n	8007194 <__ascii_wctomb+0x14>
 800718a:	228a      	movs	r2, #138	@ 0x8a
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	f04f 30ff 	mov.w	r0, #4294967295
 8007192:	4770      	bx	lr
 8007194:	700a      	strb	r2, [r1, #0]
 8007196:	2001      	movs	r0, #1
 8007198:	4770      	bx	lr
	...

0800719c <fiprintf>:
 800719c:	b40e      	push	{r1, r2, r3}
 800719e:	b503      	push	{r0, r1, lr}
 80071a0:	4601      	mov	r1, r0
 80071a2:	ab03      	add	r3, sp, #12
 80071a4:	4805      	ldr	r0, [pc, #20]	@ (80071bc <fiprintf+0x20>)
 80071a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071aa:	6800      	ldr	r0, [r0, #0]
 80071ac:	9301      	str	r3, [sp, #4]
 80071ae:	f7ff fd3d 	bl	8006c2c <_vfiprintf_r>
 80071b2:	b002      	add	sp, #8
 80071b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071b8:	b003      	add	sp, #12
 80071ba:	4770      	bx	lr
 80071bc:	2400001c 	.word	0x2400001c

080071c0 <abort>:
 80071c0:	b508      	push	{r3, lr}
 80071c2:	2006      	movs	r0, #6
 80071c4:	f000 f82c 	bl	8007220 <raise>
 80071c8:	2001      	movs	r0, #1
 80071ca:	f7f9 fd24 	bl	8000c16 <_exit>

080071ce <_raise_r>:
 80071ce:	291f      	cmp	r1, #31
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	4605      	mov	r5, r0
 80071d4:	460c      	mov	r4, r1
 80071d6:	d904      	bls.n	80071e2 <_raise_r+0x14>
 80071d8:	2316      	movs	r3, #22
 80071da:	6003      	str	r3, [r0, #0]
 80071dc:	f04f 30ff 	mov.w	r0, #4294967295
 80071e0:	bd38      	pop	{r3, r4, r5, pc}
 80071e2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80071e4:	b112      	cbz	r2, 80071ec <_raise_r+0x1e>
 80071e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071ea:	b94b      	cbnz	r3, 8007200 <_raise_r+0x32>
 80071ec:	4628      	mov	r0, r5
 80071ee:	f000 f831 	bl	8007254 <_getpid_r>
 80071f2:	4622      	mov	r2, r4
 80071f4:	4601      	mov	r1, r0
 80071f6:	4628      	mov	r0, r5
 80071f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071fc:	f000 b818 	b.w	8007230 <_kill_r>
 8007200:	2b01      	cmp	r3, #1
 8007202:	d00a      	beq.n	800721a <_raise_r+0x4c>
 8007204:	1c59      	adds	r1, r3, #1
 8007206:	d103      	bne.n	8007210 <_raise_r+0x42>
 8007208:	2316      	movs	r3, #22
 800720a:	6003      	str	r3, [r0, #0]
 800720c:	2001      	movs	r0, #1
 800720e:	e7e7      	b.n	80071e0 <_raise_r+0x12>
 8007210:	2100      	movs	r1, #0
 8007212:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007216:	4620      	mov	r0, r4
 8007218:	4798      	blx	r3
 800721a:	2000      	movs	r0, #0
 800721c:	e7e0      	b.n	80071e0 <_raise_r+0x12>
	...

08007220 <raise>:
 8007220:	4b02      	ldr	r3, [pc, #8]	@ (800722c <raise+0xc>)
 8007222:	4601      	mov	r1, r0
 8007224:	6818      	ldr	r0, [r3, #0]
 8007226:	f7ff bfd2 	b.w	80071ce <_raise_r>
 800722a:	bf00      	nop
 800722c:	2400001c 	.word	0x2400001c

08007230 <_kill_r>:
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	4d07      	ldr	r5, [pc, #28]	@ (8007250 <_kill_r+0x20>)
 8007234:	2300      	movs	r3, #0
 8007236:	4604      	mov	r4, r0
 8007238:	4608      	mov	r0, r1
 800723a:	4611      	mov	r1, r2
 800723c:	602b      	str	r3, [r5, #0]
 800723e:	f7f9 fcda 	bl	8000bf6 <_kill>
 8007242:	1c43      	adds	r3, r0, #1
 8007244:	d102      	bne.n	800724c <_kill_r+0x1c>
 8007246:	682b      	ldr	r3, [r5, #0]
 8007248:	b103      	cbz	r3, 800724c <_kill_r+0x1c>
 800724a:	6023      	str	r3, [r4, #0]
 800724c:	bd38      	pop	{r3, r4, r5, pc}
 800724e:	bf00      	nop
 8007250:	2400038c 	.word	0x2400038c

08007254 <_getpid_r>:
 8007254:	f7f9 bcc7 	b.w	8000be6 <_getpid>

08007258 <_init>:
 8007258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725a:	bf00      	nop
 800725c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725e:	bc08      	pop	{r3}
 8007260:	469e      	mov	lr, r3
 8007262:	4770      	bx	lr

08007264 <_fini>:
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	bf00      	nop
 8007268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726a:	bc08      	pop	{r3}
 800726c:	469e      	mov	lr, r3
 800726e:	4770      	bx	lr
