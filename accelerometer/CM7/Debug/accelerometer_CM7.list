
accelerometer_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005434  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080056d4  080056d4  000066d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005778  08005778  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005778  08005778  00006778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005780  08005780  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005780  08005780  00006780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005784  08005784  00006784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  24000000  08005788  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2400006c  080057f4  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000230  080057f4  00007230  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da0f  00000000  00000000  0000709a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fcd  00000000  00000000  00014aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00016a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f0  00000000  00000000  00017648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003984a  00000000  00000000  00017f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f876  00000000  00000000  00051782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001764e8  00000000  00000000  00060ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d74e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003780  00000000  00000000  001d7524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001daca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080056bc 	.word	0x080056bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	080056bc 	.word	0x080056bc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3d      	ldr	r3, [pc, #244]	@ (800047c <SystemInit+0xfc>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800038a:	4a3c      	ldr	r2, [pc, #240]	@ (800047c <SystemInit+0xfc>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b39      	ldr	r3, [pc, #228]	@ (800047c <SystemInit+0xfc>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a38      	ldr	r2, [pc, #224]	@ (800047c <SystemInit+0xfc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b37      	ldr	r3, [pc, #220]	@ (8000480 <SystemInit+0x100>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b34      	ldr	r3, [pc, #208]	@ (8000480 <SystemInit+0x100>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a32      	ldr	r2, [pc, #200]	@ (8000480 <SystemInit+0x100>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b31      	ldr	r3, [pc, #196]	@ (8000484 <SystemInit+0x104>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a30      	ldr	r2, [pc, #192]	@ (8000484 <SystemInit+0x104>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000484 <SystemInit+0x104>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000484 <SystemInit+0x104>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492c      	ldr	r1, [pc, #176]	@ (8000484 <SystemInit+0x104>)
 80003d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000488 <SystemInit+0x108>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b29      	ldr	r3, [pc, #164]	@ (8000480 <SystemInit+0x100>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b26      	ldr	r3, [pc, #152]	@ (8000480 <SystemInit+0x100>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a24      	ldr	r2, [pc, #144]	@ (8000480 <SystemInit+0x100>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b23      	ldr	r3, [pc, #140]	@ (8000484 <SystemInit+0x104>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b21      	ldr	r3, [pc, #132]	@ (8000484 <SystemInit+0x104>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b20      	ldr	r3, [pc, #128]	@ (8000484 <SystemInit+0x104>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b1e      	ldr	r3, [pc, #120]	@ (8000484 <SystemInit+0x104>)
 800040a:	4a20      	ldr	r2, [pc, #128]	@ (800048c <SystemInit+0x10c>)
 800040c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1d      	ldr	r3, [pc, #116]	@ (8000484 <SystemInit+0x104>)
 8000410:	4a1f      	ldr	r2, [pc, #124]	@ (8000490 <SystemInit+0x110>)
 8000412:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1b      	ldr	r3, [pc, #108]	@ (8000484 <SystemInit+0x104>)
 8000416:	4a1f      	ldr	r2, [pc, #124]	@ (8000494 <SystemInit+0x114>)
 8000418:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1a      	ldr	r3, [pc, #104]	@ (8000484 <SystemInit+0x104>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <SystemInit+0x104>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	@ (8000494 <SystemInit+0x114>)
 8000424:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b17      	ldr	r3, [pc, #92]	@ (8000484 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b15      	ldr	r3, [pc, #84]	@ (8000484 <SystemInit+0x104>)
 800042e:	4a19      	ldr	r2, [pc, #100]	@ (8000494 <SystemInit+0x114>)
 8000430:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b14      	ldr	r3, [pc, #80]	@ (8000484 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b12      	ldr	r3, [pc, #72]	@ (8000484 <SystemInit+0x104>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a11      	ldr	r2, [pc, #68]	@ (8000484 <SystemInit+0x104>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <SystemInit+0x104>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b13      	ldr	r3, [pc, #76]	@ (8000498 <SystemInit+0x118>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800044e:	4a12      	ldr	r2, [pc, #72]	@ (8000498 <SystemInit+0x118>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000454:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b11      	ldr	r3, [pc, #68]	@ (800049c <SystemInit+0x11c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <SystemInit+0x120>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <SystemInit+0x124>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <SystemInit+0x128>)
 800046c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000470:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	52002000 	.word	0x52002000
 8000484:	58024400 	.word	0x58024400
 8000488:	eaf6ed7f 	.word	0xeaf6ed7f
 800048c:	02020200 	.word	0x02020200
 8000490:	01ff0000 	.word	0x01ff0000
 8000494:	01010280 	.word	0x01010280
 8000498:	580000c0 	.word	0x580000c0
 800049c:	5c001000 	.word	0x5c001000
 80004a0:	ffff0000 	.word	0xffff0000
 80004a4:	51008108 	.word	0x51008108
 80004a8:	52004000 	.word	0x52004000

080004ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80004bc:	f003 0301 	and.w	r3, r3, #1
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d013      	beq.n	80004ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80004cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d00b      	beq.n	80004ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004d4:	e000      	b.n	80004d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d0f9      	beq.n	80004d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004e2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	b2d2      	uxtb	r2, r2
 80004ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004ec:	687b      	ldr	r3, [r7, #4]
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
	...

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	@ 0x28
 8000500:	af04      	add	r7, sp, #16
int main(void)
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	60bb      	str	r3, [r7, #8]
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000508:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800050c:	617b      	str	r3, [r7, #20]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800050e:	bf00      	nop
 8000510:	4b59      	ldr	r3, [pc, #356]	@ (8000678 <main+0x17c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000518:	2b00      	cmp	r3, #0
 800051a:	d004      	beq.n	8000526 <main+0x2a>
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	1e5a      	subs	r2, r3, #1
 8000520:	617a      	str	r2, [r7, #20]
 8000522:	2b00      	cmp	r3, #0
 8000524:	dcf4      	bgt.n	8000510 <main+0x14>
	if ( timeout < 0 )
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	2b00      	cmp	r3, #0
 800052a:	da01      	bge.n	8000530 <main+0x34>
	{
		Error_Handler();
 800052c:	f000 f9d0 	bl	80008d0 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 fb36 	bl	8000ba0 <HAL_Init>
	}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f8ac 	bl	8000690 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000538:	4b4f      	ldr	r3, [pc, #316]	@ (8000678 <main+0x17c>)
 800053a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800053e:	4a4e      	ldr	r2, [pc, #312]	@ (8000678 <main+0x17c>)
 8000540:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000544:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000548:	4b4b      	ldr	r3, [pc, #300]	@ (8000678 <main+0x17c>)
 800054a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800054e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000556:	2000      	movs	r0, #0
 8000558:	f000 fe92 	bl	8001280 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800055c:	2100      	movs	r1, #0
 800055e:	2000      	movs	r0, #0
 8000560:	f000 fea8 	bl	80012b4 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000564:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000568:	617b      	str	r3, [r7, #20]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800056a:	bf00      	nop
 800056c:	4b42      	ldr	r3, [pc, #264]	@ (8000678 <main+0x17c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000574:	2b00      	cmp	r3, #0
 8000576:	d104      	bne.n	8000582 <main+0x86>
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	1e5a      	subs	r2, r3, #1
 800057c:	617a      	str	r2, [r7, #20]
 800057e:	2b00      	cmp	r3, #0
 8000580:	dcf4      	bgt.n	800056c <main+0x70>
	if ( timeout < 0 )
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	2b00      	cmp	r3, #0
 8000586:	da01      	bge.n	800058c <main+0x90>
	{
		Error_Handler();
 8000588:	f000 f9a2 	bl	80008d0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f92a 	bl	80007e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000590:	f000 f8e8 	bl	8000764 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, (0b00011111 << 1) + 0, 1, 100);
 8000594:	2364      	movs	r3, #100	@ 0x64
 8000596:	2201      	movs	r2, #1
 8000598:	213e      	movs	r1, #62	@ 0x3e
 800059a:	4838      	ldr	r0, [pc, #224]	@ (800067c <main+0x180>)
 800059c:	f001 f968 	bl	8001870 <HAL_I2C_IsDeviceReady>
 80005a0:	4603      	mov	r3, r0
 80005a2:	74fb      	strb	r3, [r7, #19]

	if(ret == HAL_OK)
 80005a4:	7cfb      	ldrb	r3, [r7, #19]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d103      	bne.n	80005b2 <main+0xb6>
		printf("Device is regconized \n");
 80005aa:	4835      	ldr	r0, [pc, #212]	@ (8000680 <main+0x184>)
 80005ac:	f004 fa22 	bl	80049f4 <puts>
 80005b0:	e002      	b.n	80005b8 <main+0xbc>
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, 1); // yellow
	else
		printf("Device is not regconized \n");
 80005b2:	4834      	ldr	r0, [pc, #208]	@ (8000684 <main+0x188>)
 80005b4:	f004 fa1e 	bl	80049f4 <puts>

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1); //green

	uint8_t cntl1;
	HAL_I2C_Mem_Read(&hi2c1, (0b00011111 << 1) + 1, 0x1B, 1, cntl1, 1, 100);
 80005b8:	7cbb      	ldrb	r3, [r7, #18]
 80005ba:	461a      	mov	r2, r3
 80005bc:	2364      	movs	r3, #100	@ 0x64
 80005be:	9302      	str	r3, [sp, #8]
 80005c0:	2301      	movs	r3, #1
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	221b      	movs	r2, #27
 80005ca:	213f      	movs	r1, #63	@ 0x3f
 80005cc:	482b      	ldr	r0, [pc, #172]	@ (800067c <main+0x180>)
 80005ce:	f001 f835 	bl	800163c <HAL_I2C_Mem_Read>
	printf("cntl1: %d \n", cntl1);
 80005d2:	7cbb      	ldrb	r3, [r7, #18]
 80005d4:	4619      	mov	r1, r3
 80005d6:	482c      	ldr	r0, [pc, #176]	@ (8000688 <main+0x18c>)
 80005d8:	f004 f9a4 	bl	8004924 <iprintf>

	uint8_t new_cntl1 = 0b01111111 & cntl1;
 80005dc:	7cbb      	ldrb	r3, [r7, #18]
 80005de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005e2:	747b      	strb	r3, [r7, #17]

	HAL_I2C_Mem_Write(&hi2c1, (0b00011111 << 1) + 0, 0x1B, 1, new_cntl1, 1, 100);
 80005e4:	7c7b      	ldrb	r3, [r7, #17]
 80005e6:	461a      	mov	r2, r3
 80005e8:	2364      	movs	r3, #100	@ 0x64
 80005ea:	9302      	str	r3, [sp, #8]
 80005ec:	2301      	movs	r3, #1
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	9200      	str	r2, [sp, #0]
 80005f2:	2301      	movs	r3, #1
 80005f4:	221b      	movs	r2, #27
 80005f6:	213e      	movs	r1, #62	@ 0x3e
 80005f8:	4820      	ldr	r0, [pc, #128]	@ (800067c <main+0x180>)
 80005fa:	f000 ff0b 	bl	8001414 <HAL_I2C_Mem_Write>

	new_cntl1 = 0b01010000 | new_cntl1;
 80005fe:	7c7b      	ldrb	r3, [r7, #17]
 8000600:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000604:	747b      	strb	r3, [r7, #17]

	HAL_I2C_Mem_Write(&hi2c1, (0b00011111 << 1) + 0, 0x1B, 1, new_cntl1, 1, 100);
 8000606:	7c7b      	ldrb	r3, [r7, #17]
 8000608:	461a      	mov	r2, r3
 800060a:	2364      	movs	r3, #100	@ 0x64
 800060c:	9302      	str	r3, [sp, #8]
 800060e:	2301      	movs	r3, #1
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	9200      	str	r2, [sp, #0]
 8000614:	2301      	movs	r3, #1
 8000616:	221b      	movs	r2, #27
 8000618:	213e      	movs	r1, #62	@ 0x3e
 800061a:	4818      	ldr	r0, [pc, #96]	@ (800067c <main+0x180>)
 800061c:	f000 fefa 	bl	8001414 <HAL_I2C_Mem_Write>

	new_cntl1 = 0b10000000 | new_cntl1;
 8000620:	7c7b      	ldrb	r3, [r7, #17]
 8000622:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000626:	747b      	strb	r3, [r7, #17]

	HAL_I2C_Mem_Write(&hi2c1, (0b00011111 << 1) + 0, 0x1B, 1, new_cntl1, 1, 100);
 8000628:	7c7b      	ldrb	r3, [r7, #17]
 800062a:	461a      	mov	r2, r3
 800062c:	2364      	movs	r3, #100	@ 0x64
 800062e:	9302      	str	r3, [sp, #8]
 8000630:	2301      	movs	r3, #1
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	9200      	str	r2, [sp, #0]
 8000636:	2301      	movs	r3, #1
 8000638:	221b      	movs	r2, #27
 800063a:	213e      	movs	r1, #62	@ 0x3e
 800063c:	480f      	ldr	r0, [pc, #60]	@ (800067c <main+0x180>)
 800063e:	f000 fee9 	bl	8001414 <HAL_I2C_Mem_Write>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_I2C_Mem_Read(&hi2c1, (0b00011111 << 1) + 1, 0x0C, 1, data, 2, 100);
 8000642:	2364      	movs	r3, #100	@ 0x64
 8000644:	9302      	str	r3, [sp, #8]
 8000646:	2302      	movs	r3, #2
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2301      	movs	r3, #1
 8000650:	220c      	movs	r2, #12
 8000652:	213f      	movs	r1, #63	@ 0x3f
 8000654:	4809      	ldr	r0, [pc, #36]	@ (800067c <main+0x180>)
 8000656:	f000 fff1 	bl	800163c <HAL_I2C_Mem_Read>
		//x_acc = ((int16_t) data[1] << 8) + data[0];

		printf("Z Accel: %d, MSB: %d, LSM: %d \n", x_acc, data[1], data[0]);
 800065a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800065e:	797b      	ldrb	r3, [r7, #5]
 8000660:	461a      	mov	r2, r3
 8000662:	793b      	ldrb	r3, [r7, #4]
 8000664:	4809      	ldr	r0, [pc, #36]	@ (800068c <main+0x190>)
 8000666:	f004 f95d 	bl	8004924 <iprintf>

		//printf("First: %d \n Second: %d \n\n", data[0], data[1]);

		HAL_Delay(1000);
 800066a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800066e:	f000 fb29 	bl	8000cc4 <HAL_Delay>
		HAL_I2C_Mem_Read(&hi2c1, (0b00011111 << 1) + 1, 0x0C, 1, data, 2, 100);
 8000672:	bf00      	nop
 8000674:	e7e5      	b.n	8000642 <main+0x146>
 8000676:	bf00      	nop
 8000678:	58024400 	.word	0x58024400
 800067c:	24000088 	.word	0x24000088
 8000680:	080056d4 	.word	0x080056d4
 8000684:	080056ec 	.word	0x080056ec
 8000688:	08005708 	.word	0x08005708
 800068c:	08005714 	.word	0x08005714

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b09c      	sub	sp, #112	@ 0x70
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800069a:	224c      	movs	r2, #76	@ 0x4c
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 fa88 	bl	8004bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2220      	movs	r2, #32
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f004 fa82 	bl	8004bb4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006b0:	2004      	movs	r0, #4
 80006b2:	f001 fd23 	bl	80020fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4b28      	ldr	r3, [pc, #160]	@ (800075c <SystemClock_Config+0xcc>)
 80006bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006be:	4a27      	ldr	r2, [pc, #156]	@ (800075c <SystemClock_Config+0xcc>)
 80006c0:	f023 0301 	bic.w	r3, r3, #1
 80006c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006c6:	4b25      	ldr	r3, [pc, #148]	@ (800075c <SystemClock_Config+0xcc>)
 80006c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	4b23      	ldr	r3, [pc, #140]	@ (8000760 <SystemClock_Config+0xd0>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006d8:	4a21      	ldr	r2, [pc, #132]	@ (8000760 <SystemClock_Config+0xd0>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <SystemClock_Config+0xd0>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ec:	bf00      	nop
 80006ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000760 <SystemClock_Config+0xd0>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006fa:	d1f8      	bne.n	80006ee <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000700:	2301      	movs	r3, #1
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2340      	movs	r3, #64	@ 0x40
 8000706:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000708:	2300      	movs	r3, #0
 800070a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fd4d 	bl	80021b0 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800071c:	f000 f8d8 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	233f      	movs	r3, #63	@ 0x3f
 8000722:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000734:	2340      	movs	r3, #64	@ 0x40
 8000736:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2101      	movs	r1, #1
 8000744:	4618      	mov	r0, r3
 8000746:	f002 f98d 	bl	8002a64 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000750:	f000 f8be 	bl	80008d0 <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	3770      	adds	r7, #112	@ 0x70
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	58000400 	.word	0x58000400
 8000760:	58024800 	.word	0x58024800

08000764 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <MX_I2C1_Init+0x74>)
 800076a:	4a1c      	ldr	r2, [pc, #112]	@ (80007dc <MX_I2C1_Init+0x78>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_I2C1_Init+0x74>)
 8000770:	4a1b      	ldr	r2, [pc, #108]	@ (80007e0 <MX_I2C1_Init+0x7c>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000774:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <MX_I2C1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077a:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <MX_I2C1_Init+0x74>)
 800077c:	2201      	movs	r2, #1
 800077e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_I2C1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_I2C1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800079e:	480e      	ldr	r0, [pc, #56]	@ (80007d8 <MX_I2C1_Init+0x74>)
 80007a0:	f000 fd9c 	bl	80012dc <HAL_I2C_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007aa:	f000 f891 	bl	80008d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4809      	ldr	r0, [pc, #36]	@ (80007d8 <MX_I2C1_Init+0x74>)
 80007b2:	f001 fc0b 	bl	8001fcc <HAL_I2CEx_ConfigAnalogFilter>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007bc:	f000 f888 	bl	80008d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_I2C1_Init+0x74>)
 80007c4:	f001 fc4d 	bl	8002062 <HAL_I2CEx_ConfigDigitalFilter>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ce:	f000 f87f 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	24000088 	.word	0x24000088
 80007dc:	40005400 	.word	0x40005400
 80007e0:	00707cbb 	.word	0x00707cbb

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b24      	ldr	r3, [pc, #144]	@ (800088c <MX_GPIO_Init+0xa8>)
 80007fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000800:	4a22      	ldr	r2, [pc, #136]	@ (800088c <MX_GPIO_Init+0xa8>)
 8000802:	f043 0302 	orr.w	r3, r3, #2
 8000806:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <MX_GPIO_Init+0xa8>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000810:	f003 0302 	and.w	r3, r3, #2
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000818:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <MX_GPIO_Init+0xa8>)
 800081a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800081e:	4a1b      	ldr	r2, [pc, #108]	@ (800088c <MX_GPIO_Init+0xa8>)
 8000820:	f043 0310 	orr.w	r3, r3, #16
 8000824:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000828:	4b18      	ldr	r3, [pc, #96]	@ (800088c <MX_GPIO_Init+0xa8>)
 800082a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800082e:	f003 0310 	and.w	r3, r3, #16
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2101      	movs	r1, #1
 800083a:	4815      	ldr	r0, [pc, #84]	@ (8000890 <MX_GPIO_Init+0xac>)
 800083c:	f000 fd06 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2102      	movs	r1, #2
 8000844:	4813      	ldr	r0, [pc, #76]	@ (8000894 <MX_GPIO_Init+0xb0>)
 8000846:	f000 fd01 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800084a:	2301      	movs	r3, #1
 800084c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	4619      	mov	r1, r3
 8000860:	480b      	ldr	r0, [pc, #44]	@ (8000890 <MX_GPIO_Init+0xac>)
 8000862:	f000 fb43 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000866:	2302      	movs	r3, #2
 8000868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_GPIO_Init+0xb0>)
 800087e:	f000 fb35 	bl	8000eec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000882:	bf00      	nop
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	58024400 	.word	0x58024400
 8000890:	58020400 	.word	0x58020400
 8000894:	58021000 	.word	0x58021000

08000898 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	e009      	b.n	80008be <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	1c5a      	adds	r2, r3, #1
 80008ae:	60ba      	str	r2, [r7, #8]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fdfa 	bl	80004ac <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	3301      	adds	r3, #1
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	697a      	ldr	r2, [r7, #20]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	dbf1      	blt.n	80008aa <_write+0x12>
	}
	return len;
 80008c6:	687b      	ldr	r3, [r7, #4]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <HAL_MspInit+0x30>)
 80008e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008e8:	4a08      	ldr	r2, [pc, #32]	@ (800090c <HAL_MspInit+0x30>)
 80008ea:	f043 0302 	orr.w	r3, r3, #2
 80008ee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <HAL_MspInit+0x30>)
 80008f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008f8:	f003 0302 	and.w	r3, r3, #2
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	58024400 	.word	0x58024400

08000910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b0ba      	sub	sp, #232	@ 0xe8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	22c0      	movs	r2, #192	@ 0xc0
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f004 f93f 	bl	8004bb4 <memset>
  if(hi2c->Instance==I2C1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a26      	ldr	r2, [pc, #152]	@ (80009d4 <HAL_I2C_MspInit+0xc4>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d145      	bne.n	80009cc <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000940:	f04f 0208 	mov.w	r2, #8
 8000944:	f04f 0300 	mov.w	r3, #0
 8000948:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800094c:	2300      	movs	r3, #0
 800094e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	4618      	mov	r0, r3
 8000958:	f002 fbb4 	bl	80030c4 <HAL_RCCEx_PeriphCLKConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000962:	f7ff ffb5 	bl	80008d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <HAL_I2C_MspInit+0xc8>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096c:	4a1a      	ldr	r2, [pc, #104]	@ (80009d8 <HAL_I2C_MspInit+0xc8>)
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000976:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <HAL_I2C_MspInit+0xc8>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000984:	23c0      	movs	r3, #192	@ 0xc0
 8000986:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098a:	2312      	movs	r3, #18
 800098c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800099c:	2304      	movs	r3, #4
 800099e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009a6:	4619      	mov	r1, r3
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <HAL_I2C_MspInit+0xcc>)
 80009aa:	f000 fa9f 	bl	8000eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <HAL_I2C_MspInit+0xc8>)
 80009b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80009b4:	4a08      	ldr	r2, [pc, #32]	@ (80009d8 <HAL_I2C_MspInit+0xc8>)
 80009b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <HAL_I2C_MspInit+0xc8>)
 80009c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80009c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009cc:	bf00      	nop
 80009ce:	37e8      	adds	r7, #232	@ 0xe8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40005400 	.word	0x40005400
 80009d8:	58024400 	.word	0x58024400
 80009dc:	58020400 	.word	0x58020400

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <NMI_Handler+0x4>

080009e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <MemManage_Handler+0x4>

080009f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a36:	f000 f925 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	60f8      	str	r0, [r7, #12]
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	e00a      	b.n	8000a66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a50:	f3af 8000 	nop.w
 8000a54:	4601      	mov	r1, r0
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1c5a      	adds	r2, r3, #1
 8000a5a:	60ba      	str	r2, [r7, #8]
 8000a5c:	b2ca      	uxtb	r2, r1
 8000a5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	3301      	adds	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	dbf0      	blt.n	8000a50 <_read+0x12>
  }

  return len;
 8000a6e:	687b      	ldr	r3, [r7, #4]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aa0:	605a      	str	r2, [r3, #4]
  return 0;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <_isatty>:

int _isatty(int file)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ab8:	2301      	movs	r3, #1
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b085      	sub	sp, #20
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ad2:	2300      	movs	r3, #0
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae8:	4a14      	ldr	r2, [pc, #80]	@ (8000b3c <_sbrk+0x5c>)
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <_sbrk+0x60>)
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af4:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <_sbrk+0x64>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	@ (8000b48 <_sbrk+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d207      	bcs.n	8000b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b10:	f004 f89e 	bl	8004c50 <__errno>
 8000b14:	4603      	mov	r3, r0
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	e009      	b.n	8000b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b26:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <_sbrk+0x64>)
 8000b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	24080000 	.word	0x24080000
 8000b40:	00000400 	.word	0x00000400
 8000b44:	240000dc 	.word	0x240000dc
 8000b48:	24000230 	.word	0x24000230

08000b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b50:	f7ff fc16 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b54:	480c      	ldr	r0, [pc, #48]	@ (8000b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b56:	490d      	ldr	r1, [pc, #52]	@ (8000b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b58:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f004 f86f 	bl	8004c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7e:	f7ff fcbd 	bl	80004fc <main>
  bx  lr
 8000b82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b84:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b8c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000b90:	08005788 	.word	0x08005788
  ldr r2, =_sbss
 8000b94:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000b98:	24000230 	.word	0x24000230

08000b9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC3_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba6:	2003      	movs	r0, #3
 8000ba8:	f000 f96e 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bac:	f002 f910 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <HAL_Init+0x68>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	0a1b      	lsrs	r3, r3, #8
 8000bb8:	f003 030f 	and.w	r3, r3, #15
 8000bbc:	4913      	ldr	r1, [pc, #76]	@ (8000c0c <HAL_Init+0x6c>)
 8000bbe:	5ccb      	ldrb	r3, [r1, r3]
 8000bc0:	f003 031f 	and.w	r3, r3, #31
 8000bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bca:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <HAL_Init+0x68>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c0c <HAL_Init+0x6c>)
 8000bd4:	5cd3      	ldrb	r3, [r2, r3]
 8000bd6:	f003 031f 	and.w	r3, r3, #31
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000be0:	4a0b      	ldr	r2, [pc, #44]	@ (8000c10 <HAL_Init+0x70>)
 8000be2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000be4:	4a0b      	ldr	r2, [pc, #44]	@ (8000c14 <HAL_Init+0x74>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 f814 	bl	8000c18 <HAL_InitTick>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e002      	b.n	8000c00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfa:	f7ff fe6f 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	08005734 	.word	0x08005734
 8000c10:	24000004 	.word	0x24000004
 8000c14:	24000000 	.word	0x24000000

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c20:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <HAL_InitTick+0x60>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d101      	bne.n	8000c2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e021      	b.n	8000c70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <HAL_InitTick+0x64>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <HAL_InitTick+0x60>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f945 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f000 f91d 	bl	8000e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	@ (8000c80 <HAL_InitTick+0x68>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2400000c 	.word	0x2400000c
 8000c7c:	24000000 	.word	0x24000000
 8000c80:	24000008 	.word	0x24000008

08000c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_IncTick+0x24>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <HAL_IncTick+0x24>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	2400000c 	.word	0x2400000c
 8000ca8:	240000e0 	.word	0x240000e0

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	@ (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	240000e0 	.word	0x240000e0

08000cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff ffee 	bl	8000cac <HAL_GetTick>
 8000cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cdc:	d005      	beq.n	8000cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_Delay+0x44>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cea:	bf00      	nop
 8000cec:	f7ff ffde 	bl	8000cac <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d8f7      	bhi.n	8000cec <HAL_Delay+0x28>
  {
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2400000c 	.word	0x2400000c

08000d0c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d10:	4b03      	ldr	r3, [pc, #12]	@ (8000d20 <HAL_GetREVID+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	0c1b      	lsrs	r3, r3, #16
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	5c001000 	.word	0x5c001000

08000d24 <__NVIC_SetPriorityGrouping>:
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d34:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <__NVIC_SetPriorityGrouping+0x40>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	@ (8000d64 <__NVIC_SetPriorityGrouping+0x40>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00
 8000d68:	05fa0000 	.word	0x05fa0000

08000d6c <__NVIC_GetPriorityGrouping>:
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d70:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <__NVIC_GetPriorityGrouping+0x18>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	f003 0307 	and.w	r3, r3, #7
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_SetPriority>:
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	@ (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	@ (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	@ 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	@ 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <SysTick_Config>:
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f7ff ff8e 	bl	8000d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff47 	bl	8000d24 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eac:	f7ff ff5e 	bl	8000d6c <__NVIC_GetPriorityGrouping>
 8000eb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	6978      	ldr	r0, [r7, #20]
 8000eb8:	f7ff ff90 	bl	8000ddc <NVIC_EncodePriority>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff5f 	bl	8000d88 <__NVIC_SetPriority>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffb2 	bl	8000e44 <SysTick_Config>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	@ 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000efa:	4b89      	ldr	r3, [pc, #548]	@ (8001120 <HAL_GPIO_Init+0x234>)
 8000efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000efe:	e194      	b.n	800122a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	2101      	movs	r1, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8186 	beq.w	8001224 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d005      	beq.n	8000f30 <HAL_GPIO_Init+0x44>
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d130      	bne.n	8000f92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f66:	2201      	movs	r2, #1
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	091b      	lsrs	r3, r3, #4
 8000f7c:	f003 0201 	and.w	r2, r3, #1
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d017      	beq.n	8000fce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2203      	movs	r2, #3
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d123      	bne.n	8001022 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	08da      	lsrs	r2, r3, #3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3208      	adds	r2, #8
 8000fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	691a      	ldr	r2, [r3, #16]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	08da      	lsrs	r2, r3, #3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3208      	adds	r2, #8
 800101c:	69b9      	ldr	r1, [r7, #24]
 800101e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 0203 	and.w	r2, r3, #3
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 80e0 	beq.w	8001224 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001064:	4b2f      	ldr	r3, [pc, #188]	@ (8001124 <HAL_GPIO_Init+0x238>)
 8001066:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800106a:	4a2e      	ldr	r2, [pc, #184]	@ (8001124 <HAL_GPIO_Init+0x238>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001074:	4b2b      	ldr	r3, [pc, #172]	@ (8001124 <HAL_GPIO_Init+0x238>)
 8001076:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001082:	4a29      	ldr	r2, [pc, #164]	@ (8001128 <HAL_GPIO_Init+0x23c>)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a20      	ldr	r2, [pc, #128]	@ (800112c <HAL_GPIO_Init+0x240>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d052      	beq.n	8001154 <HAL_GPIO_Init+0x268>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001130 <HAL_GPIO_Init+0x244>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d031      	beq.n	800111a <HAL_GPIO_Init+0x22e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001134 <HAL_GPIO_Init+0x248>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d02b      	beq.n	8001116 <HAL_GPIO_Init+0x22a>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001138 <HAL_GPIO_Init+0x24c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d025      	beq.n	8001112 <HAL_GPIO_Init+0x226>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a1c      	ldr	r2, [pc, #112]	@ (800113c <HAL_GPIO_Init+0x250>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d01f      	beq.n	800110e <HAL_GPIO_Init+0x222>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001140 <HAL_GPIO_Init+0x254>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d019      	beq.n	800110a <HAL_GPIO_Init+0x21e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001144 <HAL_GPIO_Init+0x258>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0x21a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a19      	ldr	r2, [pc, #100]	@ (8001148 <HAL_GPIO_Init+0x25c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00d      	beq.n	8001102 <HAL_GPIO_Init+0x216>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a18      	ldr	r2, [pc, #96]	@ (800114c <HAL_GPIO_Init+0x260>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x212>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a17      	ldr	r2, [pc, #92]	@ (8001150 <HAL_GPIO_Init+0x264>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_GPIO_Init+0x20e>
 80010f6:	2309      	movs	r3, #9
 80010f8:	e02d      	b.n	8001156 <HAL_GPIO_Init+0x26a>
 80010fa:	230a      	movs	r3, #10
 80010fc:	e02b      	b.n	8001156 <HAL_GPIO_Init+0x26a>
 80010fe:	2308      	movs	r3, #8
 8001100:	e029      	b.n	8001156 <HAL_GPIO_Init+0x26a>
 8001102:	2307      	movs	r3, #7
 8001104:	e027      	b.n	8001156 <HAL_GPIO_Init+0x26a>
 8001106:	2306      	movs	r3, #6
 8001108:	e025      	b.n	8001156 <HAL_GPIO_Init+0x26a>
 800110a:	2305      	movs	r3, #5
 800110c:	e023      	b.n	8001156 <HAL_GPIO_Init+0x26a>
 800110e:	2304      	movs	r3, #4
 8001110:	e021      	b.n	8001156 <HAL_GPIO_Init+0x26a>
 8001112:	2303      	movs	r3, #3
 8001114:	e01f      	b.n	8001156 <HAL_GPIO_Init+0x26a>
 8001116:	2302      	movs	r3, #2
 8001118:	e01d      	b.n	8001156 <HAL_GPIO_Init+0x26a>
 800111a:	2301      	movs	r3, #1
 800111c:	e01b      	b.n	8001156 <HAL_GPIO_Init+0x26a>
 800111e:	bf00      	nop
 8001120:	58000080 	.word	0x58000080
 8001124:	58024400 	.word	0x58024400
 8001128:	58000400 	.word	0x58000400
 800112c:	58020000 	.word	0x58020000
 8001130:	58020400 	.word	0x58020400
 8001134:	58020800 	.word	0x58020800
 8001138:	58020c00 	.word	0x58020c00
 800113c:	58021000 	.word	0x58021000
 8001140:	58021400 	.word	0x58021400
 8001144:	58021800 	.word	0x58021800
 8001148:	58021c00 	.word	0x58021c00
 800114c:	58022000 	.word	0x58022000
 8001150:	58022400 	.word	0x58022400
 8001154:	2300      	movs	r3, #0
 8001156:	69fa      	ldr	r2, [r7, #28]
 8001158:	f002 0203 	and.w	r2, r2, #3
 800115c:	0092      	lsls	r2, r2, #2
 800115e:	4093      	lsls	r3, r2
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001166:	4938      	ldr	r1, [pc, #224]	@ (8001248 <HAL_GPIO_Init+0x35c>)
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800119a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	3301      	adds	r3, #1
 8001228:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa22 f303 	lsr.w	r3, r2, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	f47f ae63 	bne.w	8000f00 <HAL_GPIO_Init+0x14>
  }
}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	3724      	adds	r7, #36	@ 0x24
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	58000400 	.word	0x58000400

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
 8001258:	4613      	mov	r3, r2
 800125a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001268:	e003      	b.n	8001272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	041a      	lsls	r2, r3, #16
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	619a      	str	r2, [r3, #24]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001288:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <HAL_HSEM_FastTake+0x2c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3320      	adds	r3, #32
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	4a07      	ldr	r2, [pc, #28]	@ (80012b0 <HAL_HSEM_FastTake+0x30>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d101      	bne.n	800129c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	e000      	b.n	800129e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	58026400 	.word	0x58026400
 80012b0:	80000300 	.word	0x80000300

080012b4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80012be:	4906      	ldr	r1, [pc, #24]	@ (80012d8 <HAL_HSEM_Release+0x24>)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	58026400 	.word	0x58026400

080012dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e08b      	b.n	8001406 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d106      	bne.n	8001308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fb04 	bl	8000910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2224      	movs	r2, #36	@ 0x24
 800130c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0201 	bic.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800132c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800133c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d107      	bne.n	8001356 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	e006      	b.n	8001364 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001362:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d108      	bne.n	800137e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	e007      	b.n	800138e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800138c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6859      	ldr	r1, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <HAL_I2C_Init+0x134>)
 800139a:	430b      	orrs	r3, r1
 800139c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691a      	ldr	r2, [r3, #16]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69d9      	ldr	r1, [r3, #28]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1a      	ldr	r2, [r3, #32]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0201 	orr.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2220      	movs	r2, #32
 80013f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	02008000 	.word	0x02008000

08001414 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af02      	add	r7, sp, #8
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	4608      	mov	r0, r1
 800141e:	4611      	mov	r1, r2
 8001420:	461a      	mov	r2, r3
 8001422:	4603      	mov	r3, r0
 8001424:	817b      	strh	r3, [r7, #10]
 8001426:	460b      	mov	r3, r1
 8001428:	813b      	strh	r3, [r7, #8]
 800142a:	4613      	mov	r3, r2
 800142c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b20      	cmp	r3, #32
 8001438:	f040 80f9 	bne.w	800162e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <HAL_I2C_Mem_Write+0x34>
 8001442:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001444:	2b00      	cmp	r3, #0
 8001446:	d105      	bne.n	8001454 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800144e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0ed      	b.n	8001630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800145a:	2b01      	cmp	r3, #1
 800145c:	d101      	bne.n	8001462 <HAL_I2C_Mem_Write+0x4e>
 800145e:	2302      	movs	r3, #2
 8001460:	e0e6      	b.n	8001630 <HAL_I2C_Mem_Write+0x21c>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800146a:	f7ff fc1f 	bl	8000cac <HAL_GetTick>
 800146e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2319      	movs	r3, #25
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 fbaf 	bl	8001be0 <I2C_WaitOnFlagUntilTimeout>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0d1      	b.n	8001630 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2221      	movs	r2, #33	@ 0x21
 8001490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2240      	movs	r2, #64	@ 0x40
 8001498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6a3a      	ldr	r2, [r7, #32]
 80014a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80014ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2200      	movs	r2, #0
 80014b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014b4:	88f8      	ldrh	r0, [r7, #6]
 80014b6:	893a      	ldrh	r2, [r7, #8]
 80014b8:	8979      	ldrh	r1, [r7, #10]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	4603      	mov	r3, r0
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f000 fabf 	bl	8001a48 <I2C_RequestMemoryWrite>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0a9      	b.n	8001630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	2bff      	cmp	r3, #255	@ 0xff
 80014e4:	d90e      	bls.n	8001504 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	22ff      	movs	r2, #255	@ 0xff
 80014ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	8979      	ldrh	r1, [r7, #10]
 80014f4:	2300      	movs	r3, #0
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f000 fd33 	bl	8001f68 <I2C_TransferConfig>
 8001502:	e00f      	b.n	8001524 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001508:	b29a      	uxth	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001512:	b2da      	uxtb	r2, r3
 8001514:	8979      	ldrh	r1, [r7, #10]
 8001516:	2300      	movs	r3, #0
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 fd22 	bl	8001f68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 fbb2 	bl	8001c92 <I2C_WaitOnTXISFlagUntilTimeout>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e07b      	b.n	8001630 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001552:	b29b      	uxth	r3, r3
 8001554:	3b01      	subs	r3, #1
 8001556:	b29a      	uxth	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001560:	3b01      	subs	r3, #1
 8001562:	b29a      	uxth	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800156c:	b29b      	uxth	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d034      	beq.n	80015dc <HAL_I2C_Mem_Write+0x1c8>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001576:	2b00      	cmp	r3, #0
 8001578:	d130      	bne.n	80015dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001580:	2200      	movs	r2, #0
 8001582:	2180      	movs	r1, #128	@ 0x80
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f000 fb2b 	bl	8001be0 <I2C_WaitOnFlagUntilTimeout>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e04d      	b.n	8001630 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001598:	b29b      	uxth	r3, r3
 800159a:	2bff      	cmp	r3, #255	@ 0xff
 800159c:	d90e      	bls.n	80015bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	22ff      	movs	r2, #255	@ 0xff
 80015a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	8979      	ldrh	r1, [r7, #10]
 80015ac:	2300      	movs	r3, #0
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 fcd7 	bl	8001f68 <I2C_TransferConfig>
 80015ba:	e00f      	b.n	80015dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	8979      	ldrh	r1, [r7, #10]
 80015ce:	2300      	movs	r3, #0
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 fcc6 	bl	8001f68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d19e      	bne.n	8001524 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 fb98 	bl	8001d20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e01a      	b.n	8001630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2220      	movs	r2, #32
 8001600:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6859      	ldr	r1, [r3, #4]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <HAL_I2C_Mem_Write+0x224>)
 800160e:	400b      	ands	r3, r1
 8001610:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2220      	movs	r2, #32
 8001616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800162e:	2302      	movs	r3, #2
  }
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	fe00e800 	.word	0xfe00e800

0800163c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af02      	add	r7, sp, #8
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	4608      	mov	r0, r1
 8001646:	4611      	mov	r1, r2
 8001648:	461a      	mov	r2, r3
 800164a:	4603      	mov	r3, r0
 800164c:	817b      	strh	r3, [r7, #10]
 800164e:	460b      	mov	r3, r1
 8001650:	813b      	strh	r3, [r7, #8]
 8001652:	4613      	mov	r3, r2
 8001654:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b20      	cmp	r3, #32
 8001660:	f040 80fd 	bne.w	800185e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d002      	beq.n	8001670 <HAL_I2C_Mem_Read+0x34>
 800166a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800166c:	2b00      	cmp	r3, #0
 800166e:	d105      	bne.n	800167c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001676:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0f1      	b.n	8001860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001682:	2b01      	cmp	r3, #1
 8001684:	d101      	bne.n	800168a <HAL_I2C_Mem_Read+0x4e>
 8001686:	2302      	movs	r3, #2
 8001688:	e0ea      	b.n	8001860 <HAL_I2C_Mem_Read+0x224>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001692:	f7ff fb0b 	bl	8000cac <HAL_GetTick>
 8001696:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2319      	movs	r3, #25
 800169e:	2201      	movs	r2, #1
 80016a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f000 fa9b 	bl	8001be0 <I2C_WaitOnFlagUntilTimeout>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0d5      	b.n	8001860 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2222      	movs	r2, #34	@ 0x22
 80016b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2240      	movs	r2, #64	@ 0x40
 80016c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6a3a      	ldr	r2, [r7, #32]
 80016ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80016d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016dc:	88f8      	ldrh	r0, [r7, #6]
 80016de:	893a      	ldrh	r2, [r7, #8]
 80016e0:	8979      	ldrh	r1, [r7, #10]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	4603      	mov	r3, r0
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 f9ff 	bl	8001af0 <I2C_RequestMemoryRead>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0ad      	b.n	8001860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001708:	b29b      	uxth	r3, r3
 800170a:	2bff      	cmp	r3, #255	@ 0xff
 800170c:	d90e      	bls.n	800172c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	22ff      	movs	r2, #255	@ 0xff
 8001712:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001718:	b2da      	uxtb	r2, r3
 800171a:	8979      	ldrh	r1, [r7, #10]
 800171c:	4b52      	ldr	r3, [pc, #328]	@ (8001868 <HAL_I2C_Mem_Read+0x22c>)
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 fc1f 	bl	8001f68 <I2C_TransferConfig>
 800172a:	e00f      	b.n	800174c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800173a:	b2da      	uxtb	r2, r3
 800173c:	8979      	ldrh	r1, [r7, #10]
 800173e:	4b4a      	ldr	r3, [pc, #296]	@ (8001868 <HAL_I2C_Mem_Read+0x22c>)
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 fc0e 	bl	8001f68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001752:	2200      	movs	r2, #0
 8001754:	2104      	movs	r1, #4
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 fa42 	bl	8001be0 <I2C_WaitOnFlagUntilTimeout>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e07c      	b.n	8001860 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001782:	3b01      	subs	r3, #1
 8001784:	b29a      	uxth	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800178e:	b29b      	uxth	r3, r3
 8001790:	3b01      	subs	r3, #1
 8001792:	b29a      	uxth	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800179c:	b29b      	uxth	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d034      	beq.n	800180c <HAL_I2C_Mem_Read+0x1d0>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d130      	bne.n	800180c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b0:	2200      	movs	r2, #0
 80017b2:	2180      	movs	r1, #128	@ 0x80
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 fa13 	bl	8001be0 <I2C_WaitOnFlagUntilTimeout>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e04d      	b.n	8001860 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	2bff      	cmp	r3, #255	@ 0xff
 80017cc:	d90e      	bls.n	80017ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	22ff      	movs	r2, #255	@ 0xff
 80017d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	8979      	ldrh	r1, [r7, #10]
 80017dc:	2300      	movs	r3, #0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 fbbf 	bl	8001f68 <I2C_TransferConfig>
 80017ea:	e00f      	b.n	800180c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	8979      	ldrh	r1, [r7, #10]
 80017fe:	2300      	movs	r3, #0
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 fbae 	bl	8001f68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001810:	b29b      	uxth	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d19a      	bne.n	800174c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 fa80 	bl	8001d20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e01a      	b.n	8001860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2220      	movs	r2, #32
 8001830:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <HAL_I2C_Mem_Read+0x230>)
 800183e:	400b      	ands	r3, r1
 8001840:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2220      	movs	r2, #32
 8001846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e000      	b.n	8001860 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800185e:	2302      	movs	r3, #2
  }
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	80002400 	.word	0x80002400
 800186c:	fe00e800 	.word	0xfe00e800

08001870 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	@ 0x28
 8001874:	af02      	add	r7, sp, #8
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	460b      	mov	r3, r1
 800187e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b20      	cmp	r3, #32
 800188e:	f040 80d2 	bne.w	8001a36 <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800189c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018a0:	d101      	bne.n	80018a6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80018a2:	2302      	movs	r3, #2
 80018a4:	e0c8      	b.n	8001a38 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_I2C_IsDeviceReady+0x44>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e0c1      	b.n	8001a38 <HAL_I2C_IsDeviceReady+0x1c8>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2224      	movs	r2, #36	@ 0x24
 80018c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d105      	bne.n	80018de <HAL_I2C_IsDeviceReady+0x6e>
 80018d2:	897b      	ldrh	r3, [r7, #10]
 80018d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018d8:	4b59      	ldr	r3, [pc, #356]	@ (8001a40 <HAL_I2C_IsDeviceReady+0x1d0>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	e004      	b.n	80018e8 <HAL_I2C_IsDeviceReady+0x78>
 80018de:	897b      	ldrh	r3, [r7, #10]
 80018e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018e4:	4b57      	ldr	r3, [pc, #348]	@ (8001a44 <HAL_I2C_IsDeviceReady+0x1d4>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80018ee:	f7ff f9dd 	bl	8000cac <HAL_GetTick>
 80018f2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	f003 0320 	and.w	r3, r3, #32
 80018fe:	2b20      	cmp	r3, #32
 8001900:	bf0c      	ite	eq
 8001902:	2301      	moveq	r3, #1
 8001904:	2300      	movne	r3, #0
 8001906:	b2db      	uxtb	r3, r3
 8001908:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	2b10      	cmp	r3, #16
 8001916:	bf0c      	ite	eq
 8001918:	2301      	moveq	r3, #1
 800191a:	2300      	movne	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001920:	e034      	b.n	800198c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d01a      	beq.n	8001960 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800192a:	f7ff f9bf 	bl	8000cac <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d302      	bcc.n	8001940 <HAL_I2C_IsDeviceReady+0xd0>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10f      	bne.n	8001960 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2220      	movs	r2, #32
 8001944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194c:	f043 0220 	orr.w	r2, r3, #32
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e06b      	b.n	8001a38 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f003 0320 	and.w	r3, r3, #32
 800196a:	2b20      	cmp	r3, #32
 800196c:	bf0c      	ite	eq
 800196e:	2301      	moveq	r3, #1
 8001970:	2300      	movne	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	2b10      	cmp	r3, #16
 8001982:	bf0c      	ite	eq
 8001984:	2301      	moveq	r3, #1
 8001986:	2300      	movne	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800198c:	7ffb      	ldrb	r3, [r7, #31]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d102      	bne.n	8001998 <HAL_I2C_IsDeviceReady+0x128>
 8001992:	7fbb      	ldrb	r3, [r7, #30]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0c4      	beq.n	8001922 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	d01a      	beq.n	80019dc <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	2200      	movs	r2, #0
 80019ae:	2120      	movs	r1, #32
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 f915 	bl	8001be0 <I2C_WaitOnFlagUntilTimeout>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e03b      	b.n	8001a38 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2220      	movs	r2, #32
 80019c6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2220      	movs	r2, #32
 80019cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	e02d      	b.n	8001a38 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2200      	movs	r2, #0
 80019e4:	2120      	movs	r1, #32
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f8fa 	bl	8001be0 <I2C_WaitOnFlagUntilTimeout>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e020      	b.n	8001a38 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2210      	movs	r2, #16
 80019fc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2220      	movs	r2, #32
 8001a04:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	f63f af5a 	bhi.w	80018ca <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	f043 0220 	orr.w	r2, r3, #32
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8001a36:	2302      	movs	r3, #2
  }
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3720      	adds	r7, #32
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	02002000 	.word	0x02002000
 8001a44:	02002800 	.word	0x02002800

08001a48 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af02      	add	r7, sp, #8
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	4608      	mov	r0, r1
 8001a52:	4611      	mov	r1, r2
 8001a54:	461a      	mov	r2, r3
 8001a56:	4603      	mov	r3, r0
 8001a58:	817b      	strh	r3, [r7, #10]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	813b      	strh	r3, [r7, #8]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	8979      	ldrh	r1, [r7, #10]
 8001a68:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <I2C_RequestMemoryWrite+0xa4>)
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 fa79 	bl	8001f68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	69b9      	ldr	r1, [r7, #24]
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 f909 	bl	8001c92 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e02c      	b.n	8001ae4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a90:	893b      	ldrh	r3, [r7, #8]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a9a:	e015      	b.n	8001ac8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a9c:	893b      	ldrh	r3, [r7, #8]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	69b9      	ldr	r1, [r7, #24]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f8ef 	bl	8001c92 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e012      	b.n	8001ae4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001abe:	893b      	ldrh	r3, [r7, #8]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2180      	movs	r1, #128	@ 0x80
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 f884 	bl	8001be0 <I2C_WaitOnFlagUntilTimeout>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	80002000 	.word	0x80002000

08001af0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	4608      	mov	r0, r1
 8001afa:	4611      	mov	r1, r2
 8001afc:	461a      	mov	r2, r3
 8001afe:	4603      	mov	r3, r0
 8001b00:	817b      	strh	r3, [r7, #10]
 8001b02:	460b      	mov	r3, r1
 8001b04:	813b      	strh	r3, [r7, #8]
 8001b06:	4613      	mov	r3, r2
 8001b08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	8979      	ldrh	r1, [r7, #10]
 8001b10:	4b20      	ldr	r3, [pc, #128]	@ (8001b94 <I2C_RequestMemoryRead+0xa4>)
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2300      	movs	r3, #0
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 fa26 	bl	8001f68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	69b9      	ldr	r1, [r7, #24]
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 f8b6 	bl	8001c92 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e02c      	b.n	8001b8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d105      	bne.n	8001b42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b36:	893b      	ldrh	r3, [r7, #8]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b40:	e015      	b.n	8001b6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b42:	893b      	ldrh	r3, [r7, #8]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	69b9      	ldr	r1, [r7, #24]
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 f89c 	bl	8001c92 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e012      	b.n	8001b8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b64:	893b      	ldrh	r3, [r7, #8]
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2200      	movs	r2, #0
 8001b76:	2140      	movs	r1, #64	@ 0x40
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 f831 	bl	8001be0 <I2C_WaitOnFlagUntilTimeout>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	80002000 	.word	0x80002000

08001b98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d103      	bne.n	8001bb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d007      	beq.n	8001bd4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699a      	ldr	r2, [r3, #24]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	619a      	str	r2, [r3, #24]
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	4613      	mov	r3, r2
 8001bee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bf0:	e03b      	b.n	8001c6a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	6839      	ldr	r1, [r7, #0]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 f8d6 	bl	8001da8 <I2C_IsErrorOccurred>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e041      	b.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d02d      	beq.n	8001c6a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c0e:	f7ff f84d 	bl	8000cac <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d302      	bcc.n	8001c24 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d122      	bne.n	8001c6a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	699a      	ldr	r2, [r3, #24]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	bf0c      	ite	eq
 8001c34:	2301      	moveq	r3, #1
 8001c36:	2300      	movne	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d113      	bne.n	8001c6a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	f043 0220 	orr.w	r2, r3, #32
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2220      	movs	r2, #32
 8001c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699a      	ldr	r2, [r3, #24]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4013      	ands	r3, r2
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	bf0c      	ite	eq
 8001c7a:	2301      	moveq	r3, #1
 8001c7c:	2300      	movne	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d0b4      	beq.n	8001bf2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c9e:	e033      	b.n	8001d08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f87f 	bl	8001da8 <I2C_IsErrorOccurred>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e031      	b.n	8001d18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cba:	d025      	beq.n	8001d08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cbc:	f7fe fff6 	bl	8000cac <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d302      	bcc.n	8001cd2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d11a      	bne.n	8001d08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d013      	beq.n	8001d08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce4:	f043 0220 	orr.w	r2, r3, #32
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e007      	b.n	8001d18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d1c4      	bne.n	8001ca0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d2c:	e02f      	b.n	8001d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 f838 	bl	8001da8 <I2C_IsErrorOccurred>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e02d      	b.n	8001d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d42:	f7fe ffb3 	bl	8000cac <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d302      	bcc.n	8001d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d11a      	bne.n	8001d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f003 0320 	and.w	r3, r3, #32
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d013      	beq.n	8001d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	f043 0220 	orr.w	r2, r3, #32
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e007      	b.n	8001d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	2b20      	cmp	r3, #32
 8001d9a:	d1c8      	bne.n	8001d2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	@ 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d068      	beq.n	8001ea6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2210      	movs	r2, #16
 8001dda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ddc:	e049      	b.n	8001e72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d045      	beq.n	8001e72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001de6:	f7fe ff61 	bl	8000cac <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d302      	bcc.n	8001dfc <I2C_IsErrorOccurred+0x54>
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d13a      	bne.n	8001e72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e1e:	d121      	bne.n	8001e64 <I2C_IsErrorOccurred+0xbc>
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e26:	d01d      	beq.n	8001e64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001e28:	7cfb      	ldrb	r3, [r7, #19]
 8001e2a:	2b20      	cmp	r3, #32
 8001e2c:	d01a      	beq.n	8001e64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e3e:	f7fe ff35 	bl	8000cac <HAL_GetTick>
 8001e42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e44:	e00e      	b.n	8001e64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e46:	f7fe ff31 	bl	8000cac <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b19      	cmp	r3, #25
 8001e52:	d907      	bls.n	8001e64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	f043 0320 	orr.w	r3, r3, #32
 8001e5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001e62:	e006      	b.n	8001e72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d1e9      	bne.n	8001e46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0320 	and.w	r3, r3, #32
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	d003      	beq.n	8001e88 <I2C_IsErrorOccurred+0xe0>
 8001e80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0aa      	beq.n	8001dde <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d103      	bne.n	8001e98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2220      	movs	r2, #32
 8001e96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00b      	beq.n	8001ed0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ec8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00b      	beq.n	8001ef2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00b      	beq.n	8001f14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	f043 0302 	orr.w	r3, r3, #2
 8001f02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001f14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01c      	beq.n	8001f56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f7ff fe3b 	bl	8001b98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <I2C_IsErrorOccurred+0x1bc>)
 8001f2e:	400b      	ands	r3, r1
 8001f30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001f56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3728      	adds	r7, #40	@ 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	fe00e800 	.word	0xfe00e800

08001f68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	460b      	mov	r3, r1
 8001f74:	817b      	strh	r3, [r7, #10]
 8001f76:	4613      	mov	r3, r2
 8001f78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f7a:	897b      	ldrh	r3, [r7, #10]
 8001f7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f80:	7a7b      	ldrb	r3, [r7, #9]
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	0d5b      	lsrs	r3, r3, #21
 8001fa2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001fa6:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <I2C_TransferConfig+0x60>)
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	43db      	mvns	r3, r3
 8001fac:	ea02 0103 	and.w	r1, r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001fba:	bf00      	nop
 8001fbc:	371c      	adds	r7, #28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	03ff63ff 	.word	0x03ff63ff

08001fcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b20      	cmp	r3, #32
 8001fe0:	d138      	bne.n	8002054 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e032      	b.n	8002056 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2224      	movs	r2, #36	@ 0x24
 8001ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800201e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6819      	ldr	r1, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	e000      	b.n	8002056 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002054:	2302      	movs	r3, #2
  }
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002062:	b480      	push	{r7}
 8002064:	b085      	sub	sp, #20
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b20      	cmp	r3, #32
 8002076:	d139      	bne.n	80020ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002082:	2302      	movs	r3, #2
 8002084:	e033      	b.n	80020ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2224      	movs	r2, #36	@ 0x24
 8002092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0201 	bic.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e000      	b.n	80020ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020ec:	2302      	movs	r3, #2
  }
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002104:	4b29      	ldr	r3, [pc, #164]	@ (80021ac <HAL_PWREx_ConfigSupply+0xb0>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	2b06      	cmp	r3, #6
 800210e:	d00a      	beq.n	8002126 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002110:	4b26      	ldr	r3, [pc, #152]	@ (80021ac <HAL_PWREx_ConfigSupply+0xb0>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	429a      	cmp	r2, r3
 800211c:	d001      	beq.n	8002122 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e040      	b.n	80021a4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	e03e      	b.n	80021a4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002126:	4b21      	ldr	r3, [pc, #132]	@ (80021ac <HAL_PWREx_ConfigSupply+0xb0>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800212e:	491f      	ldr	r1, [pc, #124]	@ (80021ac <HAL_PWREx_ConfigSupply+0xb0>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4313      	orrs	r3, r2
 8002134:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002136:	f7fe fdb9 	bl	8000cac <HAL_GetTick>
 800213a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800213c:	e009      	b.n	8002152 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800213e:	f7fe fdb5 	bl	8000cac <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800214c:	d901      	bls.n	8002152 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e028      	b.n	80021a4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002152:	4b16      	ldr	r3, [pc, #88]	@ (80021ac <HAL_PWREx_ConfigSupply+0xb0>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800215a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800215e:	d1ee      	bne.n	800213e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b1e      	cmp	r3, #30
 8002164:	d008      	beq.n	8002178 <HAL_PWREx_ConfigSupply+0x7c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b2e      	cmp	r3, #46	@ 0x2e
 800216a:	d005      	beq.n	8002178 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b1d      	cmp	r3, #29
 8002170:	d002      	beq.n	8002178 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b2d      	cmp	r3, #45	@ 0x2d
 8002176:	d114      	bne.n	80021a2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002178:	f7fe fd98 	bl	8000cac <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800217e:	e009      	b.n	8002194 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002180:	f7fe fd94 	bl	8000cac <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800218e:	d901      	bls.n	8002194 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e007      	b.n	80021a4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002194:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <HAL_PWREx_ConfigSupply+0xb0>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800219c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021a0:	d1ee      	bne.n	8002180 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	58024800 	.word	0x58024800

080021b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	@ 0x30
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d102      	bne.n	80021c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	f000 bc48 	b.w	8002a54 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 8088 	beq.w	80022e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021d2:	4b99      	ldr	r3, [pc, #612]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021dc:	4b96      	ldr	r3, [pc, #600]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 80021de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80021e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e4:	2b10      	cmp	r3, #16
 80021e6:	d007      	beq.n	80021f8 <HAL_RCC_OscConfig+0x48>
 80021e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ea:	2b18      	cmp	r3, #24
 80021ec:	d111      	bne.n	8002212 <HAL_RCC_OscConfig+0x62>
 80021ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d10c      	bne.n	8002212 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d06d      	beq.n	80022e0 <HAL_RCC_OscConfig+0x130>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d169      	bne.n	80022e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	f000 bc21 	b.w	8002a54 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x7a>
 800221c:	4b86      	ldr	r3, [pc, #536]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a85      	ldr	r2, [pc, #532]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	e02e      	b.n	8002288 <HAL_RCC_OscConfig+0xd8>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0x9c>
 8002232:	4b81      	ldr	r3, [pc, #516]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a80      	ldr	r2, [pc, #512]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002238:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b7e      	ldr	r3, [pc, #504]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a7d      	ldr	r2, [pc, #500]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002244:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e01d      	b.n	8002288 <HAL_RCC_OscConfig+0xd8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0xc0>
 8002256:	4b78      	ldr	r3, [pc, #480]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a77      	ldr	r2, [pc, #476]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 800225c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b75      	ldr	r3, [pc, #468]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a74      	ldr	r2, [pc, #464]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e00b      	b.n	8002288 <HAL_RCC_OscConfig+0xd8>
 8002270:	4b71      	ldr	r3, [pc, #452]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a70      	ldr	r2, [pc, #448]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b6e      	ldr	r3, [pc, #440]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a6d      	ldr	r2, [pc, #436]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7fe fd0c 	bl	8000cac <HAL_GetTick>
 8002294:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002298:	f7fe fd08 	bl	8000cac <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	@ 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e3d4      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022aa:	4b63      	ldr	r3, [pc, #396]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0xe8>
 80022b6:	e014      	b.n	80022e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe fcf8 	bl	8000cac <HAL_GetTick>
 80022bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7fe fcf4 	bl	8000cac <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	@ 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e3c0      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022d2:	4b59      	ldr	r3, [pc, #356]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x110>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80ca 	beq.w	8002484 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022f0:	4b51      	ldr	r3, [pc, #324]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 80022fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <HAL_RCC_OscConfig+0x166>
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	2b18      	cmp	r3, #24
 800230a:	d156      	bne.n	80023ba <HAL_RCC_OscConfig+0x20a>
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d151      	bne.n	80023ba <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002316:	4b48      	ldr	r3, [pc, #288]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x17e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e392      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800232e:	4b42      	ldr	r3, [pc, #264]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 0219 	bic.w	r2, r3, #25
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	493f      	ldr	r1, [pc, #252]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe fcb4 	bl	8000cac <HAL_GetTick>
 8002344:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002348:	f7fe fcb0 	bl	8000cac <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e37c      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800235a:	4b37      	ldr	r3, [pc, #220]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002366:	f7fe fcd1 	bl	8000d0c <HAL_GetREVID>
 800236a:	4603      	mov	r3, r0
 800236c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002370:	4293      	cmp	r3, r2
 8002372:	d817      	bhi.n	80023a4 <HAL_RCC_OscConfig+0x1f4>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2b40      	cmp	r3, #64	@ 0x40
 800237a:	d108      	bne.n	800238e <HAL_RCC_OscConfig+0x1de>
 800237c:	4b2e      	ldr	r3, [pc, #184]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002384:	4a2c      	ldr	r2, [pc, #176]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800238a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800238c:	e07a      	b.n	8002484 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238e:	4b2a      	ldr	r3, [pc, #168]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	031b      	lsls	r3, r3, #12
 800239c:	4926      	ldr	r1, [pc, #152]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a2:	e06f      	b.n	8002484 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a4:	4b24      	ldr	r3, [pc, #144]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	4921      	ldr	r1, [pc, #132]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b8:	e064      	b.n	8002484 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d047      	beq.n	8002452 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 0219 	bic.w	r2, r3, #25
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	491a      	ldr	r1, [pc, #104]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7fe fc6a 	bl	8000cac <HAL_GetTick>
 80023d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023dc:	f7fe fc66 	bl	8000cac <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e332      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023ee:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fa:	f7fe fc87 	bl	8000d0c <HAL_GetREVID>
 80023fe:	4603      	mov	r3, r0
 8002400:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002404:	4293      	cmp	r3, r2
 8002406:	d819      	bhi.n	800243c <HAL_RCC_OscConfig+0x28c>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	2b40      	cmp	r3, #64	@ 0x40
 800240e:	d108      	bne.n	8002422 <HAL_RCC_OscConfig+0x272>
 8002410:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002418:	4a07      	ldr	r2, [pc, #28]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 800241a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800241e:	6053      	str	r3, [r2, #4]
 8002420:	e030      	b.n	8002484 <HAL_RCC_OscConfig+0x2d4>
 8002422:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	031b      	lsls	r3, r3, #12
 8002430:	4901      	ldr	r1, [pc, #4]	@ (8002438 <HAL_RCC_OscConfig+0x288>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
 8002436:	e025      	b.n	8002484 <HAL_RCC_OscConfig+0x2d4>
 8002438:	58024400 	.word	0x58024400
 800243c:	4b9a      	ldr	r3, [pc, #616]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	061b      	lsls	r3, r3, #24
 800244a:	4997      	ldr	r1, [pc, #604]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
 8002450:	e018      	b.n	8002484 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002452:	4b95      	ldr	r3, [pc, #596]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a94      	ldr	r2, [pc, #592]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe fc25 	bl	8000cac <HAL_GetTick>
 8002462:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002466:	f7fe fc21 	bl	8000cac <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e2ed      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002478:	4b8b      	ldr	r3, [pc, #556]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80a9 	beq.w	80025e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002492:	4b85      	ldr	r3, [pc, #532]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800249a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800249c:	4b82      	ldr	r3, [pc, #520]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 800249e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d007      	beq.n	80024b8 <HAL_RCC_OscConfig+0x308>
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2b18      	cmp	r3, #24
 80024ac:	d13a      	bne.n	8002524 <HAL_RCC_OscConfig+0x374>
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d135      	bne.n	8002524 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024b8:	4b7b      	ldr	r3, [pc, #492]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_OscConfig+0x320>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	2b80      	cmp	r3, #128	@ 0x80
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e2c1      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024d0:	f7fe fc1c 	bl	8000d0c <HAL_GetREVID>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024da:	4293      	cmp	r3, r2
 80024dc:	d817      	bhi.n	800250e <HAL_RCC_OscConfig+0x35e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	d108      	bne.n	80024f8 <HAL_RCC_OscConfig+0x348>
 80024e6:	4b70      	ldr	r3, [pc, #448]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80024ee:	4a6e      	ldr	r2, [pc, #440]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 80024f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80024f4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024f6:	e075      	b.n	80025e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024f8:	4b6b      	ldr	r3, [pc, #428]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	069b      	lsls	r3, r3, #26
 8002506:	4968      	ldr	r1, [pc, #416]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800250c:	e06a      	b.n	80025e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800250e:	4b66      	ldr	r3, [pc, #408]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	061b      	lsls	r3, r3, #24
 800251c:	4962      	ldr	r1, [pc, #392]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 800251e:	4313      	orrs	r3, r2
 8002520:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002522:	e05f      	b.n	80025e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d042      	beq.n	80025b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800252c:	4b5e      	ldr	r3, [pc, #376]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a5d      	ldr	r2, [pc, #372]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 8002532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe fbb8 	bl	8000cac <HAL_GetTick>
 800253c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002540:	f7fe fbb4 	bl	8000cac <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e280      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002552:	4b55      	ldr	r3, [pc, #340]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800255e:	f7fe fbd5 	bl	8000d0c <HAL_GetREVID>
 8002562:	4603      	mov	r3, r0
 8002564:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002568:	4293      	cmp	r3, r2
 800256a:	d817      	bhi.n	800259c <HAL_RCC_OscConfig+0x3ec>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	2b20      	cmp	r3, #32
 8002572:	d108      	bne.n	8002586 <HAL_RCC_OscConfig+0x3d6>
 8002574:	4b4c      	ldr	r3, [pc, #304]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800257c:	4a4a      	ldr	r2, [pc, #296]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 800257e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002582:	6053      	str	r3, [r2, #4]
 8002584:	e02e      	b.n	80025e4 <HAL_RCC_OscConfig+0x434>
 8002586:	4b48      	ldr	r3, [pc, #288]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	069b      	lsls	r3, r3, #26
 8002594:	4944      	ldr	r1, [pc, #272]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
 800259a:	e023      	b.n	80025e4 <HAL_RCC_OscConfig+0x434>
 800259c:	4b42      	ldr	r3, [pc, #264]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	061b      	lsls	r3, r3, #24
 80025aa:	493f      	ldr	r1, [pc, #252]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60cb      	str	r3, [r1, #12]
 80025b0:	e018      	b.n	80025e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80025b2:	4b3d      	ldr	r3, [pc, #244]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a3c      	ldr	r2, [pc, #240]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 80025b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7fe fb75 	bl	8000cac <HAL_GetTick>
 80025c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025c6:	f7fe fb71 	bl	8000cac <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e23d      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025d8:	4b33      	ldr	r3, [pc, #204]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d036      	beq.n	800265e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d019      	beq.n	800262c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f8:	4b2b      	ldr	r3, [pc, #172]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 80025fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025fc:	4a2a      	ldr	r2, [pc, #168]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002604:	f7fe fb52 	bl	8000cac <HAL_GetTick>
 8002608:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800260c:	f7fe fb4e 	bl	8000cac <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e21a      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800261e:	4b22      	ldr	r3, [pc, #136]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 8002620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0x45c>
 800262a:	e018      	b.n	800265e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262c:	4b1e      	ldr	r3, [pc, #120]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 800262e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002630:	4a1d      	ldr	r2, [pc, #116]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 8002632:	f023 0301 	bic.w	r3, r3, #1
 8002636:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7fe fb38 	bl	8000cac <HAL_GetTick>
 800263c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002640:	f7fe fb34 	bl	8000cac <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e200      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002652:	4b15      	ldr	r3, [pc, #84]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 8002654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	2b00      	cmp	r3, #0
 8002668:	d039      	beq.n	80026de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d01c      	beq.n	80026ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002672:	4b0d      	ldr	r3, [pc, #52]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a0c      	ldr	r2, [pc, #48]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 8002678:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800267c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800267e:	f7fe fb15 	bl	8000cac <HAL_GetTick>
 8002682:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002686:	f7fe fb11 	bl	8000cac <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e1dd      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002698:	4b03      	ldr	r3, [pc, #12]	@ (80026a8 <HAL_RCC_OscConfig+0x4f8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x4d6>
 80026a4:	e01b      	b.n	80026de <HAL_RCC_OscConfig+0x52e>
 80026a6:	bf00      	nop
 80026a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026ac:	4b9b      	ldr	r3, [pc, #620]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a9a      	ldr	r2, [pc, #616]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80026b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026b8:	f7fe faf8 	bl	8000cac <HAL_GetTick>
 80026bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026c0:	f7fe faf4 	bl	8000cac <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e1c0      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026d2:	4b92      	ldr	r3, [pc, #584]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8081 	beq.w	80027ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002920 <HAL_RCC_OscConfig+0x770>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a8b      	ldr	r2, [pc, #556]	@ (8002920 <HAL_RCC_OscConfig+0x770>)
 80026f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026f8:	f7fe fad8 	bl	8000cac <HAL_GetTick>
 80026fc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002700:	f7fe fad4 	bl	8000cac <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	@ 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e1a0      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002712:	4b83      	ldr	r3, [pc, #524]	@ (8002920 <HAL_RCC_OscConfig+0x770>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d106      	bne.n	8002734 <HAL_RCC_OscConfig+0x584>
 8002726:	4b7d      	ldr	r3, [pc, #500]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272a:	4a7c      	ldr	r2, [pc, #496]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6713      	str	r3, [r2, #112]	@ 0x70
 8002732:	e02d      	b.n	8002790 <HAL_RCC_OscConfig+0x5e0>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10c      	bne.n	8002756 <HAL_RCC_OscConfig+0x5a6>
 800273c:	4b77      	ldr	r3, [pc, #476]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002740:	4a76      	ldr	r2, [pc, #472]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	6713      	str	r3, [r2, #112]	@ 0x70
 8002748:	4b74      	ldr	r3, [pc, #464]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274c:	4a73      	ldr	r2, [pc, #460]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 800274e:	f023 0304 	bic.w	r3, r3, #4
 8002752:	6713      	str	r3, [r2, #112]	@ 0x70
 8002754:	e01c      	b.n	8002790 <HAL_RCC_OscConfig+0x5e0>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b05      	cmp	r3, #5
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x5c8>
 800275e:	4b6f      	ldr	r3, [pc, #444]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002762:	4a6e      	ldr	r2, [pc, #440]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 8002764:	f043 0304 	orr.w	r3, r3, #4
 8002768:	6713      	str	r3, [r2, #112]	@ 0x70
 800276a:	4b6c      	ldr	r3, [pc, #432]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276e:	4a6b      	ldr	r2, [pc, #428]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6713      	str	r3, [r2, #112]	@ 0x70
 8002776:	e00b      	b.n	8002790 <HAL_RCC_OscConfig+0x5e0>
 8002778:	4b68      	ldr	r3, [pc, #416]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277c:	4a67      	ldr	r2, [pc, #412]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	6713      	str	r3, [r2, #112]	@ 0x70
 8002784:	4b65      	ldr	r3, [pc, #404]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002788:	4a64      	ldr	r2, [pc, #400]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 800278a:	f023 0304 	bic.w	r3, r3, #4
 800278e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d015      	beq.n	80027c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7fe fa88 	bl	8000cac <HAL_GetTick>
 800279c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7fe fa84 	bl	8000cac <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e14e      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027b6:	4b59      	ldr	r3, [pc, #356]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0ee      	beq.n	80027a0 <HAL_RCC_OscConfig+0x5f0>
 80027c2:	e014      	b.n	80027ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7fe fa72 	bl	8000cac <HAL_GetTick>
 80027c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7fe fa6e 	bl	8000cac <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e138      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027e2:	4b4e      	ldr	r3, [pc, #312]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1ee      	bne.n	80027cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 812d 	beq.w	8002a52 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027f8:	4b48      	ldr	r3, [pc, #288]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002800:	2b18      	cmp	r3, #24
 8002802:	f000 80bd 	beq.w	8002980 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280a:	2b02      	cmp	r3, #2
 800280c:	f040 809e 	bne.w	800294c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002810:	4b42      	ldr	r3, [pc, #264]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a41      	ldr	r2, [pc, #260]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 8002816:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800281a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7fe fa46 	bl	8000cac <HAL_GetTick>
 8002820:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe fa42 	bl	8000cac <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e10e      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002836:	4b39      	ldr	r3, [pc, #228]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002842:	4b36      	ldr	r3, [pc, #216]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 8002844:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002846:	4b37      	ldr	r3, [pc, #220]	@ (8002924 <HAL_RCC_OscConfig+0x774>)
 8002848:	4013      	ands	r3, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002852:	0112      	lsls	r2, r2, #4
 8002854:	430a      	orrs	r2, r1
 8002856:	4931      	ldr	r1, [pc, #196]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 8002858:	4313      	orrs	r3, r2
 800285a:	628b      	str	r3, [r1, #40]	@ 0x28
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002860:	3b01      	subs	r3, #1
 8002862:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800286a:	3b01      	subs	r3, #1
 800286c:	025b      	lsls	r3, r3, #9
 800286e:	b29b      	uxth	r3, r3
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002876:	3b01      	subs	r3, #1
 8002878:	041b      	lsls	r3, r3, #16
 800287a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002884:	3b01      	subs	r3, #1
 8002886:	061b      	lsls	r3, r3, #24
 8002888:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800288c:	4923      	ldr	r1, [pc, #140]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 800288e:	4313      	orrs	r3, r2
 8002890:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002892:	4b22      	ldr	r3, [pc, #136]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002896:	4a21      	ldr	r2, [pc, #132]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 8002898:	f023 0301 	bic.w	r3, r3, #1
 800289c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800289e:	4b1f      	ldr	r3, [pc, #124]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80028a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028a2:	4b21      	ldr	r3, [pc, #132]	@ (8002928 <HAL_RCC_OscConfig+0x778>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028aa:	00d2      	lsls	r2, r2, #3
 80028ac:	491b      	ldr	r1, [pc, #108]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028b2:	4b1a      	ldr	r3, [pc, #104]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80028b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b6:	f023 020c 	bic.w	r2, r3, #12
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	4917      	ldr	r1, [pc, #92]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80028c4:	4b15      	ldr	r3, [pc, #84]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80028c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c8:	f023 0202 	bic.w	r2, r3, #2
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d0:	4912      	ldr	r1, [pc, #72]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028d6:	4b11      	ldr	r3, [pc, #68]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	4a10      	ldr	r2, [pc, #64]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e2:	4b0e      	ldr	r3, [pc, #56]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80028e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e6:	4a0d      	ldr	r2, [pc, #52]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80028e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80028ee:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80028f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f2:	4a0a      	ldr	r2, [pc, #40]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80028f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80028fa:	4b08      	ldr	r3, [pc, #32]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 80028fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fe:	4a07      	ldr	r2, [pc, #28]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002906:	4b05      	ldr	r3, [pc, #20]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a04      	ldr	r2, [pc, #16]	@ (800291c <HAL_RCC_OscConfig+0x76c>)
 800290c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002912:	f7fe f9cb 	bl	8000cac <HAL_GetTick>
 8002916:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002918:	e011      	b.n	800293e <HAL_RCC_OscConfig+0x78e>
 800291a:	bf00      	nop
 800291c:	58024400 	.word	0x58024400
 8002920:	58024800 	.word	0x58024800
 8002924:	fffffc0c 	.word	0xfffffc0c
 8002928:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe f9be 	bl	8000cac <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e08a      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800293e:	4b47      	ldr	r3, [pc, #284]	@ (8002a5c <HAL_RCC_OscConfig+0x8ac>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x77c>
 800294a:	e082      	b.n	8002a52 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294c:	4b43      	ldr	r3, [pc, #268]	@ (8002a5c <HAL_RCC_OscConfig+0x8ac>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a42      	ldr	r2, [pc, #264]	@ (8002a5c <HAL_RCC_OscConfig+0x8ac>)
 8002952:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe f9a8 	bl	8000cac <HAL_GetTick>
 800295c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe f9a4 	bl	8000cac <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e070      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002972:	4b3a      	ldr	r3, [pc, #232]	@ (8002a5c <HAL_RCC_OscConfig+0x8ac>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x7b0>
 800297e:	e068      	b.n	8002a52 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002980:	4b36      	ldr	r3, [pc, #216]	@ (8002a5c <HAL_RCC_OscConfig+0x8ac>)
 8002982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002984:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002986:	4b35      	ldr	r3, [pc, #212]	@ (8002a5c <HAL_RCC_OscConfig+0x8ac>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	2b01      	cmp	r3, #1
 8002992:	d031      	beq.n	80029f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f003 0203 	and.w	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d12a      	bne.n	80029f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d122      	bne.n	80029f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d11a      	bne.n	80029f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	0a5b      	lsrs	r3, r3, #9
 80029c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d111      	bne.n	80029f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	0c1b      	lsrs	r3, r3, #16
 80029d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d108      	bne.n	80029f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	0e1b      	lsrs	r3, r3, #24
 80029ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e02b      	b.n	8002a54 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80029fc:	4b17      	ldr	r3, [pc, #92]	@ (8002a5c <HAL_RCC_OscConfig+0x8ac>)
 80029fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a00:	08db      	lsrs	r3, r3, #3
 8002a02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a06:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d01f      	beq.n	8002a52 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a12:	4b12      	ldr	r3, [pc, #72]	@ (8002a5c <HAL_RCC_OscConfig+0x8ac>)
 8002a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a16:	4a11      	ldr	r2, [pc, #68]	@ (8002a5c <HAL_RCC_OscConfig+0x8ac>)
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a1e:	f7fe f945 	bl	8000cac <HAL_GetTick>
 8002a22:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002a24:	bf00      	nop
 8002a26:	f7fe f941 	bl	8000cac <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d0f9      	beq.n	8002a26 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a32:	4b0a      	ldr	r3, [pc, #40]	@ (8002a5c <HAL_RCC_OscConfig+0x8ac>)
 8002a34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a36:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <HAL_RCC_OscConfig+0x8b0>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a3e:	00d2      	lsls	r2, r2, #3
 8002a40:	4906      	ldr	r1, [pc, #24]	@ (8002a5c <HAL_RCC_OscConfig+0x8ac>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a46:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <HAL_RCC_OscConfig+0x8ac>)
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4a:	4a04      	ldr	r2, [pc, #16]	@ (8002a5c <HAL_RCC_OscConfig+0x8ac>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3730      	adds	r7, #48	@ 0x30
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	58024400 	.word	0x58024400
 8002a60:	ffff0007 	.word	0xffff0007

08002a64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e19c      	b.n	8002db2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a78:	4b8a      	ldr	r3, [pc, #552]	@ (8002ca4 <HAL_RCC_ClockConfig+0x240>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d910      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b87      	ldr	r3, [pc, #540]	@ (8002ca4 <HAL_RCC_ClockConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 020f 	bic.w	r2, r3, #15
 8002a8e:	4985      	ldr	r1, [pc, #532]	@ (8002ca4 <HAL_RCC_ClockConfig+0x240>)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b83      	ldr	r3, [pc, #524]	@ (8002ca4 <HAL_RCC_ClockConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e184      	b.n	8002db2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d010      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d908      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ac4:	4b78      	ldr	r3, [pc, #480]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	4975      	ldr	r1, [pc, #468]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d010      	beq.n	8002b04 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	4b70      	ldr	r3, [pc, #448]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d908      	bls.n	8002b04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002af2:	4b6d      	ldr	r3, [pc, #436]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	496a      	ldr	r1, [pc, #424]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d010      	beq.n	8002b32 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699a      	ldr	r2, [r3, #24]
 8002b14:	4b64      	ldr	r3, [pc, #400]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d908      	bls.n	8002b32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b20:	4b61      	ldr	r3, [pc, #388]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	495e      	ldr	r1, [pc, #376]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d010      	beq.n	8002b60 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	4b59      	ldr	r3, [pc, #356]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d908      	bls.n	8002b60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b4e:	4b56      	ldr	r3, [pc, #344]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	4953      	ldr	r1, [pc, #332]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d010      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	4b4d      	ldr	r3, [pc, #308]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d908      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b7c:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f023 020f 	bic.w	r2, r3, #15
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4947      	ldr	r1, [pc, #284]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d055      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b9a:	4b43      	ldr	r3, [pc, #268]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4940      	ldr	r1, [pc, #256]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bb4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d121      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0f6      	b.n	8002db2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bcc:	4b36      	ldr	r3, [pc, #216]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d115      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0ea      	b.n	8002db2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002be4:	4b30      	ldr	r3, [pc, #192]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d109      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0de      	b.n	8002db2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0d6      	b.n	8002db2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c04:	4b28      	ldr	r3, [pc, #160]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	f023 0207 	bic.w	r2, r3, #7
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4925      	ldr	r1, [pc, #148]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c16:	f7fe f849 	bl	8000cac <HAL_GetTick>
 8002c1a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1e:	f7fe f845 	bl	8000cac <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e0be      	b.n	8002db2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c34:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d1eb      	bne.n	8002c1e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d010      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d208      	bcs.n	8002c74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f023 020f 	bic.w	r2, r3, #15
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	490e      	ldr	r1, [pc, #56]	@ (8002ca8 <HAL_RCC_ClockConfig+0x244>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <HAL_RCC_ClockConfig+0x240>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d214      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c82:	4b08      	ldr	r3, [pc, #32]	@ (8002ca4 <HAL_RCC_ClockConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 020f 	bic.w	r2, r3, #15
 8002c8a:	4906      	ldr	r1, [pc, #24]	@ (8002ca4 <HAL_RCC_ClockConfig+0x240>)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c92:	4b04      	ldr	r3, [pc, #16]	@ (8002ca4 <HAL_RCC_ClockConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d005      	beq.n	8002cac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e086      	b.n	8002db2 <HAL_RCC_ClockConfig+0x34e>
 8002ca4:	52002000 	.word	0x52002000
 8002ca8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d010      	beq.n	8002cda <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	4b3f      	ldr	r3, [pc, #252]	@ (8002dbc <HAL_RCC_ClockConfig+0x358>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d208      	bcs.n	8002cda <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cc8:	4b3c      	ldr	r3, [pc, #240]	@ (8002dbc <HAL_RCC_ClockConfig+0x358>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	4939      	ldr	r1, [pc, #228]	@ (8002dbc <HAL_RCC_ClockConfig+0x358>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d010      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	4b34      	ldr	r3, [pc, #208]	@ (8002dbc <HAL_RCC_ClockConfig+0x358>)
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d208      	bcs.n	8002d08 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cf6:	4b31      	ldr	r3, [pc, #196]	@ (8002dbc <HAL_RCC_ClockConfig+0x358>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	492e      	ldr	r1, [pc, #184]	@ (8002dbc <HAL_RCC_ClockConfig+0x358>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d010      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	4b28      	ldr	r3, [pc, #160]	@ (8002dbc <HAL_RCC_ClockConfig+0x358>)
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d208      	bcs.n	8002d36 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d24:	4b25      	ldr	r3, [pc, #148]	@ (8002dbc <HAL_RCC_ClockConfig+0x358>)
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	4922      	ldr	r1, [pc, #136]	@ (8002dbc <HAL_RCC_ClockConfig+0x358>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d010      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69da      	ldr	r2, [r3, #28]
 8002d46:	4b1d      	ldr	r3, [pc, #116]	@ (8002dbc <HAL_RCC_ClockConfig+0x358>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d208      	bcs.n	8002d64 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d52:	4b1a      	ldr	r3, [pc, #104]	@ (8002dbc <HAL_RCC_ClockConfig+0x358>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	4917      	ldr	r1, [pc, #92]	@ (8002dbc <HAL_RCC_ClockConfig+0x358>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d64:	f000 f834 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b14      	ldr	r3, [pc, #80]	@ (8002dbc <HAL_RCC_ClockConfig+0x358>)
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	0a1b      	lsrs	r3, r3, #8
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	4912      	ldr	r1, [pc, #72]	@ (8002dc0 <HAL_RCC_ClockConfig+0x35c>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d80:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d82:	4b0e      	ldr	r3, [pc, #56]	@ (8002dbc <HAL_RCC_ClockConfig+0x358>)
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc0 <HAL_RCC_ClockConfig+0x35c>)
 8002d8c:	5cd3      	ldrb	r3, [r2, r3]
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
 8002d98:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc4 <HAL_RCC_ClockConfig+0x360>)
 8002d9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc8 <HAL_RCC_ClockConfig+0x364>)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002da2:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <HAL_RCC_ClockConfig+0x368>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd ff36 	bl	8000c18 <HAL_InitTick>
 8002dac:	4603      	mov	r3, r0
 8002dae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	58024400 	.word	0x58024400
 8002dc0:	08005734 	.word	0x08005734
 8002dc4:	24000004 	.word	0x24000004
 8002dc8:	24000000 	.word	0x24000000
 8002dcc:	24000008 	.word	0x24000008

08002dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	@ 0x24
 8002dd4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dd6:	4bb3      	ldr	r3, [pc, #716]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dde:	2b18      	cmp	r3, #24
 8002de0:	f200 8155 	bhi.w	800308e <HAL_RCC_GetSysClockFreq+0x2be>
 8002de4:	a201      	add	r2, pc, #4	@ (adr r2, 8002dec <HAL_RCC_GetSysClockFreq+0x1c>)
 8002de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dea:	bf00      	nop
 8002dec:	08002e51 	.word	0x08002e51
 8002df0:	0800308f 	.word	0x0800308f
 8002df4:	0800308f 	.word	0x0800308f
 8002df8:	0800308f 	.word	0x0800308f
 8002dfc:	0800308f 	.word	0x0800308f
 8002e00:	0800308f 	.word	0x0800308f
 8002e04:	0800308f 	.word	0x0800308f
 8002e08:	0800308f 	.word	0x0800308f
 8002e0c:	08002e77 	.word	0x08002e77
 8002e10:	0800308f 	.word	0x0800308f
 8002e14:	0800308f 	.word	0x0800308f
 8002e18:	0800308f 	.word	0x0800308f
 8002e1c:	0800308f 	.word	0x0800308f
 8002e20:	0800308f 	.word	0x0800308f
 8002e24:	0800308f 	.word	0x0800308f
 8002e28:	0800308f 	.word	0x0800308f
 8002e2c:	08002e7d 	.word	0x08002e7d
 8002e30:	0800308f 	.word	0x0800308f
 8002e34:	0800308f 	.word	0x0800308f
 8002e38:	0800308f 	.word	0x0800308f
 8002e3c:	0800308f 	.word	0x0800308f
 8002e40:	0800308f 	.word	0x0800308f
 8002e44:	0800308f 	.word	0x0800308f
 8002e48:	0800308f 	.word	0x0800308f
 8002e4c:	08002e83 	.word	0x08002e83
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e50:	4b94      	ldr	r3, [pc, #592]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e5c:	4b91      	ldr	r3, [pc, #580]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	08db      	lsrs	r3, r3, #3
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	4a90      	ldr	r2, [pc, #576]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002e6e:	e111      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e70:	4b8d      	ldr	r3, [pc, #564]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e72:	61bb      	str	r3, [r7, #24]
      break;
 8002e74:	e10e      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002e76:	4b8d      	ldr	r3, [pc, #564]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e78:	61bb      	str	r3, [r7, #24]
      break;
 8002e7a:	e10b      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002e7c:	4b8c      	ldr	r3, [pc, #560]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e7e:	61bb      	str	r3, [r7, #24]
      break;
 8002e80:	e108      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e82:	4b88      	ldr	r3, [pc, #544]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002e8c:	4b85      	ldr	r3, [pc, #532]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e96:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e98:	4b82      	ldr	r3, [pc, #520]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002ea2:	4b80      	ldr	r3, [pc, #512]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea6:	08db      	lsrs	r3, r3, #3
 8002ea8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80e1 	beq.w	8003088 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	f000 8083 	beq.w	8002fd4 <HAL_RCC_GetSysClockFreq+0x204>
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	f200 80a1 	bhi.w	8003018 <HAL_RCC_GetSysClockFreq+0x248>
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x114>
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d056      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002ee2:	e099      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d02d      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ef0:	4b6c      	ldr	r3, [pc, #432]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	08db      	lsrs	r3, r3, #3
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	4a6b      	ldr	r2, [pc, #428]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
 8002f00:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	ee07 3a90 	vmov	s15, r3
 8002f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f1a:	4b62      	ldr	r3, [pc, #392]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f2e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80030b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f46:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f4a:	e087      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f56:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80030b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f5e:	4b51      	ldr	r3, [pc, #324]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f72:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80030b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f8e:	e065      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	ee07 3a90 	vmov	s15, r3
 8002f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80030bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa2:	4b40      	ldr	r3, [pc, #256]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002faa:	ee07 3a90 	vmov	s15, r3
 8002fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fb6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80030b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fd2:	e043      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fde:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80030c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ffa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80030b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800300a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800300e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003012:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003016:	e021      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	ee07 3a90 	vmov	s15, r3
 800301e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003022:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80030bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800302a:	4b1e      	ldr	r3, [pc, #120]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003032:	ee07 3a90 	vmov	s15, r3
 8003036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800303a:	ed97 6a02 	vldr	s12, [r7, #8]
 800303e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80030b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800304a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800304e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003056:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800305a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800305c:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003060:	0a5b      	lsrs	r3, r3, #9
 8003062:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003066:	3301      	adds	r3, #1
 8003068:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	ee07 3a90 	vmov	s15, r3
 8003070:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003074:	edd7 6a07 	vldr	s13, [r7, #28]
 8003078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800307c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003080:	ee17 3a90 	vmov	r3, s15
 8003084:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003086:	e005      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	61bb      	str	r3, [r7, #24]
      break;
 800308c:	e002      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800308e:	4b07      	ldr	r3, [pc, #28]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003090:	61bb      	str	r3, [r7, #24]
      break;
 8003092:	bf00      	nop
  }

  return sysclockfreq;
 8003094:	69bb      	ldr	r3, [r7, #24]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3724      	adds	r7, #36	@ 0x24
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	58024400 	.word	0x58024400
 80030a8:	03d09000 	.word	0x03d09000
 80030ac:	003d0900 	.word	0x003d0900
 80030b0:	017d7840 	.word	0x017d7840
 80030b4:	46000000 	.word	0x46000000
 80030b8:	4c742400 	.word	0x4c742400
 80030bc:	4a742400 	.word	0x4a742400
 80030c0:	4bbebc20 	.word	0x4bbebc20

080030c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c8:	b0ca      	sub	sp, #296	@ 0x128
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030d0:	2300      	movs	r3, #0
 80030d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030d6:	2300      	movs	r3, #0
 80030d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80030e8:	2500      	movs	r5, #0
 80030ea:	ea54 0305 	orrs.w	r3, r4, r5
 80030ee:	d049      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80030f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030fa:	d02f      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80030fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003100:	d828      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003102:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003106:	d01a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003108:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800310c:	d822      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003112:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003116:	d007      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003118:	e01c      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800311a:	4bb8      	ldr	r3, [pc, #736]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800311c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311e:	4ab7      	ldr	r2, [pc, #732]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003124:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003126:	e01a      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312c:	3308      	adds	r3, #8
 800312e:	2102      	movs	r1, #2
 8003130:	4618      	mov	r0, r3
 8003132:	f001 f9d1 	bl	80044d8 <RCCEx_PLL2_Config>
 8003136:	4603      	mov	r3, r0
 8003138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800313c:	e00f      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800313e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003142:	3328      	adds	r3, #40	@ 0x28
 8003144:	2102      	movs	r1, #2
 8003146:	4618      	mov	r0, r3
 8003148:	f001 fa78 	bl	800463c <RCCEx_PLL3_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003152:	e004      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800315a:	e000      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800315c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800315e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003166:	4ba5      	ldr	r3, [pc, #660]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800316a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800316e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003172:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003174:	4aa1      	ldr	r2, [pc, #644]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003176:	430b      	orrs	r3, r1
 8003178:	6513      	str	r3, [r2, #80]	@ 0x50
 800317a:	e003      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003180:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003190:	f04f 0900 	mov.w	r9, #0
 8003194:	ea58 0309 	orrs.w	r3, r8, r9
 8003198:	d047      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800319a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800319e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d82a      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80031a4:	a201      	add	r2, pc, #4	@ (adr r2, 80031ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80031a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031aa:	bf00      	nop
 80031ac:	080031c1 	.word	0x080031c1
 80031b0:	080031cf 	.word	0x080031cf
 80031b4:	080031e5 	.word	0x080031e5
 80031b8:	08003203 	.word	0x08003203
 80031bc:	08003203 	.word	0x08003203
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c0:	4b8e      	ldr	r3, [pc, #568]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c4:	4a8d      	ldr	r2, [pc, #564]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031cc:	e01a      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d2:	3308      	adds	r3, #8
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 f97e 	bl	80044d8 <RCCEx_PLL2_Config>
 80031dc:	4603      	mov	r3, r0
 80031de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031e2:	e00f      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e8:	3328      	adds	r3, #40	@ 0x28
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f001 fa25 	bl	800463c <RCCEx_PLL3_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031f8:	e004      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003200:	e000      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003202:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800320c:	4b7b      	ldr	r3, [pc, #492]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800320e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003210:	f023 0107 	bic.w	r1, r3, #7
 8003214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321a:	4a78      	ldr	r2, [pc, #480]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800321c:	430b      	orrs	r3, r1
 800321e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003220:	e003      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003226:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800322a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800322e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003232:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003236:	f04f 0b00 	mov.w	fp, #0
 800323a:	ea5a 030b 	orrs.w	r3, sl, fp
 800323e:	d04c      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800324a:	d030      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800324c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003250:	d829      	bhi.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003252:	2bc0      	cmp	r3, #192	@ 0xc0
 8003254:	d02d      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003256:	2bc0      	cmp	r3, #192	@ 0xc0
 8003258:	d825      	bhi.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800325a:	2b80      	cmp	r3, #128	@ 0x80
 800325c:	d018      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800325e:	2b80      	cmp	r3, #128	@ 0x80
 8003260:	d821      	bhi.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003266:	2b40      	cmp	r3, #64	@ 0x40
 8003268:	d007      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800326a:	e01c      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800326c:	4b63      	ldr	r3, [pc, #396]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003270:	4a62      	ldr	r2, [pc, #392]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003276:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003278:	e01c      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800327a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327e:	3308      	adds	r3, #8
 8003280:	2100      	movs	r1, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f001 f928 	bl	80044d8 <RCCEx_PLL2_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800328e:	e011      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003294:	3328      	adds	r3, #40	@ 0x28
 8003296:	2100      	movs	r1, #0
 8003298:	4618      	mov	r0, r3
 800329a:	f001 f9cf 	bl	800463c <RCCEx_PLL3_Config>
 800329e:	4603      	mov	r3, r0
 80032a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80032a4:	e006      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032ac:	e002      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80032ae:	bf00      	nop
 80032b0:	e000      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80032b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10a      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80032bc:	4b4f      	ldr	r3, [pc, #316]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80032c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ca:	4a4c      	ldr	r2, [pc, #304]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032cc:	430b      	orrs	r3, r1
 80032ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80032d0:	e003      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80032da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80032e6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80032ea:	2300      	movs	r3, #0
 80032ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80032f0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80032f4:	460b      	mov	r3, r1
 80032f6:	4313      	orrs	r3, r2
 80032f8:	d053      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80032fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003302:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003306:	d035      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003308:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800330c:	d82e      	bhi.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800330e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003312:	d031      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003314:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003318:	d828      	bhi.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800331a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800331e:	d01a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003320:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003324:	d822      	bhi.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800332a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800332e:	d007      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003330:	e01c      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003332:	4b32      	ldr	r3, [pc, #200]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003336:	4a31      	ldr	r2, [pc, #196]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800333c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800333e:	e01c      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003344:	3308      	adds	r3, #8
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f001 f8c5 	bl	80044d8 <RCCEx_PLL2_Config>
 800334e:	4603      	mov	r3, r0
 8003350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003354:	e011      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335a:	3328      	adds	r3, #40	@ 0x28
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f001 f96c 	bl	800463c <RCCEx_PLL3_Config>
 8003364:	4603      	mov	r3, r0
 8003366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800336a:	e006      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003372:	e002      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003374:	bf00      	nop
 8003376:	e000      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800337a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10b      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003382:	4b1e      	ldr	r3, [pc, #120]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003386:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800338a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003392:	4a1a      	ldr	r2, [pc, #104]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003394:	430b      	orrs	r3, r1
 8003396:	6593      	str	r3, [r2, #88]	@ 0x58
 8003398:	e003      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800339e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80033a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80033ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80033b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80033bc:	460b      	mov	r3, r1
 80033be:	4313      	orrs	r3, r2
 80033c0:	d056      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80033c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80033ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033ce:	d038      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80033d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033d4:	d831      	bhi.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033da:	d034      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80033dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033e0:	d82b      	bhi.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033e6:	d01d      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80033e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033ec:	d825      	bhi.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d006      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80033f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033f6:	d00a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80033f8:	e01f      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033fa:	bf00      	nop
 80033fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003400:	4ba2      	ldr	r3, [pc, #648]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003404:	4aa1      	ldr	r2, [pc, #644]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800340a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800340c:	e01c      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003412:	3308      	adds	r3, #8
 8003414:	2100      	movs	r1, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f001 f85e 	bl	80044d8 <RCCEx_PLL2_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003422:	e011      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003428:	3328      	adds	r3, #40	@ 0x28
 800342a:	2100      	movs	r1, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f001 f905 	bl	800463c <RCCEx_PLL3_Config>
 8003432:	4603      	mov	r3, r0
 8003434:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003438:	e006      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003440:	e002      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003442:	bf00      	nop
 8003444:	e000      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003448:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10b      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003450:	4b8e      	ldr	r3, [pc, #568]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003454:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003460:	4a8a      	ldr	r2, [pc, #552]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003462:	430b      	orrs	r3, r1
 8003464:	6593      	str	r3, [r2, #88]	@ 0x58
 8003466:	e003      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800346c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800347c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003480:	2300      	movs	r3, #0
 8003482:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003486:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800348a:	460b      	mov	r3, r1
 800348c:	4313      	orrs	r3, r2
 800348e:	d03a      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003496:	2b30      	cmp	r3, #48	@ 0x30
 8003498:	d01f      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800349a:	2b30      	cmp	r3, #48	@ 0x30
 800349c:	d819      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d00c      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d815      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d019      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80034aa:	2b10      	cmp	r3, #16
 80034ac:	d111      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ae:	4b77      	ldr	r3, [pc, #476]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b2:	4a76      	ldr	r2, [pc, #472]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80034ba:	e011      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c0:	3308      	adds	r3, #8
 80034c2:	2102      	movs	r1, #2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f001 f807 	bl	80044d8 <RCCEx_PLL2_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80034d0:	e006      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034d8:	e002      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80034da:	bf00      	nop
 80034dc:	e000      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80034de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80034e8:	4b68      	ldr	r3, [pc, #416]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80034f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f6:	4a65      	ldr	r2, [pc, #404]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034f8:	430b      	orrs	r3, r1
 80034fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034fc:	e003      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003502:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003512:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003516:	2300      	movs	r3, #0
 8003518:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800351c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003520:	460b      	mov	r3, r1
 8003522:	4313      	orrs	r3, r2
 8003524:	d051      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003530:	d035      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003532:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003536:	d82e      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003538:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800353c:	d031      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800353e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003542:	d828      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003544:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003548:	d01a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800354a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800354e:	d822      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003558:	d007      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800355a:	e01c      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355c:	4b4b      	ldr	r3, [pc, #300]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	4a4a      	ldr	r2, [pc, #296]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003568:	e01c      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800356a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356e:	3308      	adds	r3, #8
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f000 ffb0 	bl	80044d8 <RCCEx_PLL2_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800357e:	e011      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003584:	3328      	adds	r3, #40	@ 0x28
 8003586:	2100      	movs	r1, #0
 8003588:	4618      	mov	r0, r3
 800358a:	f001 f857 	bl	800463c <RCCEx_PLL3_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003594:	e006      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800359c:	e002      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800359e:	bf00      	nop
 80035a0:	e000      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80035a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035ac:	4b37      	ldr	r3, [pc, #220]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80035b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ba:	4a34      	ldr	r2, [pc, #208]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035bc:	430b      	orrs	r3, r1
 80035be:	6513      	str	r3, [r2, #80]	@ 0x50
 80035c0:	e003      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80035d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035da:	2300      	movs	r3, #0
 80035dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80035e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80035e4:	460b      	mov	r3, r1
 80035e6:	4313      	orrs	r3, r2
 80035e8:	d056      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80035ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035f4:	d033      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80035f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035fa:	d82c      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80035fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003600:	d02f      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003602:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003606:	d826      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003608:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800360c:	d02b      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800360e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003612:	d820      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003618:	d012      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800361a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800361e:	d81a      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d022      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003628:	d115      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800362a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362e:	3308      	adds	r3, #8
 8003630:	2101      	movs	r1, #1
 8003632:	4618      	mov	r0, r3
 8003634:	f000 ff50 	bl	80044d8 <RCCEx_PLL2_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800363e:	e015      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003644:	3328      	adds	r3, #40	@ 0x28
 8003646:	2101      	movs	r1, #1
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fff7 	bl	800463c <RCCEx_PLL3_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003654:	e00a      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800365c:	e006      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800365e:	bf00      	nop
 8003660:	e004      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003662:	bf00      	nop
 8003664:	e002      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003666:	bf00      	nop
 8003668:	e000      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800366a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800366c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10d      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003674:	4b05      	ldr	r3, [pc, #20]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003678:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800367c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003680:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003682:	4a02      	ldr	r2, [pc, #8]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003684:	430b      	orrs	r3, r1
 8003686:	6513      	str	r3, [r2, #80]	@ 0x50
 8003688:	e006      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800368a:	bf00      	nop
 800368c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003694:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80036a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036a8:	2300      	movs	r3, #0
 80036aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4313      	orrs	r3, r2
 80036b6:	d055      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80036b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80036c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036c4:	d033      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80036c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ca:	d82c      	bhi.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d0:	d02f      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80036d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d6:	d826      	bhi.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036dc:	d02b      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80036de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036e2:	d820      	bhi.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036e8:	d012      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80036ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036ee:	d81a      	bhi.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d022      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80036f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036f8:	d115      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fe:	3308      	adds	r3, #8
 8003700:	2101      	movs	r1, #1
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fee8 	bl	80044d8 <RCCEx_PLL2_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800370e:	e015      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003714:	3328      	adds	r3, #40	@ 0x28
 8003716:	2101      	movs	r1, #1
 8003718:	4618      	mov	r0, r3
 800371a:	f000 ff8f 	bl	800463c <RCCEx_PLL3_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003724:	e00a      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800372c:	e006      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800372e:	bf00      	nop
 8003730:	e004      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003732:	bf00      	nop
 8003734:	e002      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003736:	bf00      	nop
 8003738:	e000      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800373a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800373c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10b      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003744:	4ba3      	ldr	r3, [pc, #652]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003748:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003750:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003754:	4a9f      	ldr	r2, [pc, #636]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003756:	430b      	orrs	r3, r1
 8003758:	6593      	str	r3, [r2, #88]	@ 0x58
 800375a:	e003      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003760:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003770:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003774:	2300      	movs	r3, #0
 8003776:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800377a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800377e:	460b      	mov	r3, r1
 8003780:	4313      	orrs	r3, r2
 8003782:	d037      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800378e:	d00e      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003790:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003794:	d816      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d018      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800379a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800379e:	d111      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a0:	4b8c      	ldr	r3, [pc, #560]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a4:	4a8b      	ldr	r2, [pc, #556]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037ac:	e00f      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b2:	3308      	adds	r3, #8
 80037b4:	2101      	movs	r1, #1
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fe8e 	bl	80044d8 <RCCEx_PLL2_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037c2:	e004      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037ca:	e000      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80037cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037d6:	4b7f      	ldr	r3, [pc, #508]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e4:	4a7b      	ldr	r2, [pc, #492]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037e6:	430b      	orrs	r3, r1
 80037e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80037ea:	e003      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80037f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003804:	2300      	movs	r3, #0
 8003806:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800380a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800380e:	460b      	mov	r3, r1
 8003810:	4313      	orrs	r3, r2
 8003812:	d039      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800381a:	2b03      	cmp	r3, #3
 800381c:	d81c      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800381e:	a201      	add	r2, pc, #4	@ (adr r2, 8003824 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003824:	08003861 	.word	0x08003861
 8003828:	08003835 	.word	0x08003835
 800382c:	08003843 	.word	0x08003843
 8003830:	08003861 	.word	0x08003861
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003834:	4b67      	ldr	r3, [pc, #412]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	4a66      	ldr	r2, [pc, #408]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800383a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800383e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003840:	e00f      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003846:	3308      	adds	r3, #8
 8003848:	2102      	movs	r1, #2
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fe44 	bl	80044d8 <RCCEx_PLL2_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003856:	e004      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800385e:	e000      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800386a:	4b5a      	ldr	r3, [pc, #360]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800386c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386e:	f023 0103 	bic.w	r1, r3, #3
 8003872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003878:	4a56      	ldr	r2, [pc, #344]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800387a:	430b      	orrs	r3, r1
 800387c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800387e:	e003      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003894:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003898:	2300      	movs	r3, #0
 800389a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800389e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80038a2:	460b      	mov	r3, r1
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f000 809f 	beq.w	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038aa:	4b4b      	ldr	r3, [pc, #300]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a4a      	ldr	r2, [pc, #296]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038b6:	f7fd f9f9 	bl	8000cac <HAL_GetTick>
 80038ba:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038be:	e00b      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c0:	f7fd f9f4 	bl	8000cac <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b64      	cmp	r3, #100	@ 0x64
 80038ce:	d903      	bls.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038d6:	e005      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038d8:	4b3f      	ldr	r3, [pc, #252]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0ed      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80038e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d179      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80038ec:	4b39      	ldr	r3, [pc, #228]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038f8:	4053      	eors	r3, r2
 80038fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d015      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003902:	4b34      	ldr	r3, [pc, #208]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800390a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800390e:	4b31      	ldr	r3, [pc, #196]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003912:	4a30      	ldr	r2, [pc, #192]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003918:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800391a:	4b2e      	ldr	r3, [pc, #184]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391e:	4a2d      	ldr	r2, [pc, #180]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003920:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003924:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003926:	4a2b      	ldr	r2, [pc, #172]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003928:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800392c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003932:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800393a:	d118      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fd f9b6 	bl	8000cac <HAL_GetTick>
 8003940:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003944:	e00d      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fd f9b1 	bl	8000cac <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003950:	1ad2      	subs	r2, r2, r3
 8003952:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003956:	429a      	cmp	r2, r3
 8003958:	d903      	bls.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003960:	e005      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003962:	4b1c      	ldr	r3, [pc, #112]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0eb      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800396e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003972:	2b00      	cmp	r3, #0
 8003974:	d129      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800397e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003982:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003986:	d10e      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003988:	4b12      	ldr	r3, [pc, #72]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003994:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003998:	091a      	lsrs	r2, r3, #4
 800399a:	4b10      	ldr	r3, [pc, #64]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800399c:	4013      	ands	r3, r2
 800399e:	4a0d      	ldr	r2, [pc, #52]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6113      	str	r3, [r2, #16]
 80039a4:	e005      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80039a6:	4b0b      	ldr	r3, [pc, #44]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	4a0a      	ldr	r2, [pc, #40]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80039b0:	6113      	str	r3, [r2, #16]
 80039b2:	4b08      	ldr	r3, [pc, #32]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c2:	4a04      	ldr	r2, [pc, #16]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039c4:	430b      	orrs	r3, r1
 80039c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039c8:	e00e      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80039d2:	e009      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80039d4:	58024400 	.word	0x58024400
 80039d8:	58024800 	.word	0x58024800
 80039dc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80039e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	f002 0301 	and.w	r3, r2, #1
 80039f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039f8:	2300      	movs	r3, #0
 80039fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f000 8089 	beq.w	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a10:	2b28      	cmp	r3, #40	@ 0x28
 8003a12:	d86b      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003a14:	a201      	add	r2, pc, #4	@ (adr r2, 8003a1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003af5 	.word	0x08003af5
 8003a20:	08003aed 	.word	0x08003aed
 8003a24:	08003aed 	.word	0x08003aed
 8003a28:	08003aed 	.word	0x08003aed
 8003a2c:	08003aed 	.word	0x08003aed
 8003a30:	08003aed 	.word	0x08003aed
 8003a34:	08003aed 	.word	0x08003aed
 8003a38:	08003aed 	.word	0x08003aed
 8003a3c:	08003ac1 	.word	0x08003ac1
 8003a40:	08003aed 	.word	0x08003aed
 8003a44:	08003aed 	.word	0x08003aed
 8003a48:	08003aed 	.word	0x08003aed
 8003a4c:	08003aed 	.word	0x08003aed
 8003a50:	08003aed 	.word	0x08003aed
 8003a54:	08003aed 	.word	0x08003aed
 8003a58:	08003aed 	.word	0x08003aed
 8003a5c:	08003ad7 	.word	0x08003ad7
 8003a60:	08003aed 	.word	0x08003aed
 8003a64:	08003aed 	.word	0x08003aed
 8003a68:	08003aed 	.word	0x08003aed
 8003a6c:	08003aed 	.word	0x08003aed
 8003a70:	08003aed 	.word	0x08003aed
 8003a74:	08003aed 	.word	0x08003aed
 8003a78:	08003aed 	.word	0x08003aed
 8003a7c:	08003af5 	.word	0x08003af5
 8003a80:	08003aed 	.word	0x08003aed
 8003a84:	08003aed 	.word	0x08003aed
 8003a88:	08003aed 	.word	0x08003aed
 8003a8c:	08003aed 	.word	0x08003aed
 8003a90:	08003aed 	.word	0x08003aed
 8003a94:	08003aed 	.word	0x08003aed
 8003a98:	08003aed 	.word	0x08003aed
 8003a9c:	08003af5 	.word	0x08003af5
 8003aa0:	08003aed 	.word	0x08003aed
 8003aa4:	08003aed 	.word	0x08003aed
 8003aa8:	08003aed 	.word	0x08003aed
 8003aac:	08003aed 	.word	0x08003aed
 8003ab0:	08003aed 	.word	0x08003aed
 8003ab4:	08003aed 	.word	0x08003aed
 8003ab8:	08003aed 	.word	0x08003aed
 8003abc:	08003af5 	.word	0x08003af5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fd05 	bl	80044d8 <RCCEx_PLL2_Config>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ad4:	e00f      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ada:	3328      	adds	r3, #40	@ 0x28
 8003adc:	2101      	movs	r1, #1
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fdac 	bl	800463c <RCCEx_PLL3_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003aea:	e004      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003af2:	e000      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003afe:	4bbf      	ldr	r3, [pc, #764]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b02:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b0c:	4abb      	ldr	r2, [pc, #748]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b12:	e003      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	f002 0302 	and.w	r3, r2, #2
 8003b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003b32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003b36:	460b      	mov	r3, r1
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	d041      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b42:	2b05      	cmp	r3, #5
 8003b44:	d824      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003b46:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b99 	.word	0x08003b99
 8003b50:	08003b65 	.word	0x08003b65
 8003b54:	08003b7b 	.word	0x08003b7b
 8003b58:	08003b99 	.word	0x08003b99
 8003b5c:	08003b99 	.word	0x08003b99
 8003b60:	08003b99 	.word	0x08003b99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b68:	3308      	adds	r3, #8
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fcb3 	bl	80044d8 <RCCEx_PLL2_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b78:	e00f      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7e:	3328      	adds	r3, #40	@ 0x28
 8003b80:	2101      	movs	r1, #1
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fd5a 	bl	800463c <RCCEx_PLL3_Config>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b8e:	e004      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b96:	e000      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ba2:	4b96      	ldr	r3, [pc, #600]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba6:	f023 0107 	bic.w	r1, r3, #7
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bb0:	4a92      	ldr	r2, [pc, #584]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003bb6:	e003      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	f002 0304 	and.w	r3, r2, #4
 8003bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bd6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	d044      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003be8:	2b05      	cmp	r3, #5
 8003bea:	d825      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003bec:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf2:	bf00      	nop
 8003bf4:	08003c41 	.word	0x08003c41
 8003bf8:	08003c0d 	.word	0x08003c0d
 8003bfc:	08003c23 	.word	0x08003c23
 8003c00:	08003c41 	.word	0x08003c41
 8003c04:	08003c41 	.word	0x08003c41
 8003c08:	08003c41 	.word	0x08003c41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c10:	3308      	adds	r3, #8
 8003c12:	2101      	movs	r1, #1
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fc5f 	bl	80044d8 <RCCEx_PLL2_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c20:	e00f      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c26:	3328      	adds	r3, #40	@ 0x28
 8003c28:	2101      	movs	r1, #1
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fd06 	bl	800463c <RCCEx_PLL3_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c36:	e004      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c3e:	e000      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10b      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c4a:	4b6c      	ldr	r3, [pc, #432]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	f023 0107 	bic.w	r1, r3, #7
 8003c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c5a:	4a68      	ldr	r2, [pc, #416]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c60:	e003      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	f002 0320 	and.w	r3, r2, #32
 8003c76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c84:	460b      	mov	r3, r1
 8003c86:	4313      	orrs	r3, r2
 8003c88:	d055      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c96:	d033      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c9c:	d82c      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca2:	d02f      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca8:	d826      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003caa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003cae:	d02b      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003cb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003cb4:	d820      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003cb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cba:	d012      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003cbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cc0:	d81a      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d022      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003cc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cca:	d115      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fbff 	bl	80044d8 <RCCEx_PLL2_Config>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ce0:	e015      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce6:	3328      	adds	r3, #40	@ 0x28
 8003ce8:	2102      	movs	r1, #2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fca6 	bl	800463c <RCCEx_PLL3_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003cf6:	e00a      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cfe:	e006      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d00:	bf00      	nop
 8003d02:	e004      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d04:	bf00      	nop
 8003d06:	e002      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d08:	bf00      	nop
 8003d0a:	e000      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d16:	4b39      	ldr	r3, [pc, #228]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d26:	4a35      	ldr	r2, [pc, #212]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d2c:	e003      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003d42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d46:	2300      	movs	r3, #0
 8003d48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003d4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4313      	orrs	r3, r2
 8003d54:	d058      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d5e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003d62:	d033      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003d64:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003d68:	d82c      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d6e:	d02f      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003d70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d74:	d826      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d7a:	d02b      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003d7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d80:	d820      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d86:	d012      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d8c:	d81a      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d022      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d96:	d115      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fb99 	bl	80044d8 <RCCEx_PLL2_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003dac:	e015      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db2:	3328      	adds	r3, #40	@ 0x28
 8003db4:	2102      	movs	r1, #2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fc40 	bl	800463c <RCCEx_PLL3_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003dc2:	e00a      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dca:	e006      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003dcc:	bf00      	nop
 8003dce:	e004      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003dd0:	bf00      	nop
 8003dd2:	e002      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003dd4:	bf00      	nop
 8003dd6:	e000      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10e      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003de2:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003df2:	4a02      	ldr	r2, [pc, #8]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003df4:	430b      	orrs	r3, r1
 8003df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003df8:	e006      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003dfa:	bf00      	nop
 8003dfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003e14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003e22:	460b      	mov	r3, r1
 8003e24:	4313      	orrs	r3, r2
 8003e26:	d055      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e30:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003e34:	d033      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003e36:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003e3a:	d82c      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e40:	d02f      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003e42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e46:	d826      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e48:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003e4c:	d02b      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003e4e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003e52:	d820      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e58:	d012      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003e5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e5e:	d81a      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d022      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003e64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e68:	d115      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6e:	3308      	adds	r3, #8
 8003e70:	2100      	movs	r1, #0
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fb30 	bl	80044d8 <RCCEx_PLL2_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e7e:	e015      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e84:	3328      	adds	r3, #40	@ 0x28
 8003e86:	2102      	movs	r1, #2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fbd7 	bl	800463c <RCCEx_PLL3_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e94:	e00a      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e9c:	e006      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e9e:	bf00      	nop
 8003ea0:	e004      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ea2:	bf00      	nop
 8003ea4:	e002      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10b      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003eb4:	4ba1      	ldr	r3, [pc, #644]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ec4:	4a9d      	ldr	r2, [pc, #628]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eca:	e003      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	f002 0308 	and.w	r3, r2, #8
 8003ee0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003eea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	d01e      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f06:	3328      	adds	r3, #40	@ 0x28
 8003f08:	2102      	movs	r1, #2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fb96 	bl	800463c <RCCEx_PLL3_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f1c:	4b87      	ldr	r3, [pc, #540]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f20:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f2c:	4a83      	ldr	r2, [pc, #524]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3a:	f002 0310 	and.w	r3, r2, #16
 8003f3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f42:	2300      	movs	r3, #0
 8003f44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f48:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	d01e      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f5e:	d10c      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f64:	3328      	adds	r3, #40	@ 0x28
 8003f66:	2102      	movs	r1, #2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fb67 	bl	800463c <RCCEx_PLL3_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f7a:	4b70      	ldr	r3, [pc, #448]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f8a:	4a6c      	ldr	r2, [pc, #432]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003f9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fa6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003faa:	460b      	mov	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	d03e      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003fb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fbc:	d022      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003fbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fc2:	d81b      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fcc:	d00b      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003fce:	e015      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fa7d 	bl	80044d8 <RCCEx_PLL2_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003fe4:	e00f      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fea:	3328      	adds	r3, #40	@ 0x28
 8003fec:	2102      	movs	r1, #2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fb24 	bl	800463c <RCCEx_PLL3_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ffa:	e004      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004002:	e000      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10b      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800400e:	4b4b      	ldr	r3, [pc, #300]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004012:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800401e:	4a47      	ldr	r2, [pc, #284]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004020:	430b      	orrs	r3, r1
 8004022:	6593      	str	r3, [r2, #88]	@ 0x58
 8004024:	e003      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800402a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800403a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800403c:	2300      	movs	r3, #0
 800403e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004040:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004044:	460b      	mov	r3, r1
 8004046:	4313      	orrs	r3, r2
 8004048:	d03b      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800404a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004052:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004056:	d01f      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004058:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800405c:	d818      	bhi.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800405e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004062:	d003      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004064:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004068:	d007      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800406a:	e011      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406c:	4b33      	ldr	r3, [pc, #204]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	4a32      	ldr	r2, [pc, #200]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004076:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004078:	e00f      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800407a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407e:	3328      	adds	r3, #40	@ 0x28
 8004080:	2101      	movs	r1, #1
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fada 	bl	800463c <RCCEx_PLL3_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800408e:	e004      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004096:	e000      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a2:	4b26      	ldr	r3, [pc, #152]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80040aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b2:	4a22      	ldr	r2, [pc, #136]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80040b8:	e003      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80040ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80040d0:	2300      	movs	r3, #0
 80040d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80040d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80040d8:	460b      	mov	r3, r1
 80040da:	4313      	orrs	r3, r2
 80040dc:	d034      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80040e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ec:	d007      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80040ee:	e011      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f0:	4b12      	ldr	r3, [pc, #72]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f4:	4a11      	ldr	r2, [pc, #68]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040fc:	e00e      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004102:	3308      	adds	r3, #8
 8004104:	2102      	movs	r1, #2
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f9e6 	bl	80044d8 <RCCEx_PLL2_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004112:	e003      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800411a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10d      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004124:	4b05      	ldr	r3, [pc, #20]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004128:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004132:	4a02      	ldr	r2, [pc, #8]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004134:	430b      	orrs	r3, r1
 8004136:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004138:	e006      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800413a:	bf00      	nop
 800413c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004140:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004144:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004154:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004156:	2300      	movs	r3, #0
 8004158:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800415a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800415e:	460b      	mov	r3, r1
 8004160:	4313      	orrs	r3, r2
 8004162:	d00c      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004168:	3328      	adds	r3, #40	@ 0x28
 800416a:	2102      	movs	r1, #2
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fa65 	bl	800463c <RCCEx_PLL3_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800417e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004186:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800418a:	663b      	str	r3, [r7, #96]	@ 0x60
 800418c:	2300      	movs	r3, #0
 800418e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004190:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004194:	460b      	mov	r3, r1
 8004196:	4313      	orrs	r3, r2
 8004198:	d038      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800419a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041a6:	d018      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80041a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041ac:	d811      	bhi.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80041ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041b2:	d014      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80041b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041b8:	d80b      	bhi.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d011      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80041be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041c2:	d106      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c4:	4bc3      	ldr	r3, [pc, #780]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c8:	4ac2      	ldr	r2, [pc, #776]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80041d0:	e008      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041d8:	e004      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041da:	bf00      	nop
 80041dc:	e002      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041de:	bf00      	nop
 80041e0:	e000      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041ec:	4bb9      	ldr	r3, [pc, #740]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041fc:	4ab5      	ldr	r2, [pc, #724]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041fe:	430b      	orrs	r3, r1
 8004200:	6553      	str	r3, [r2, #84]	@ 0x54
 8004202:	e003      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004208:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800420c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004214:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004218:	65bb      	str	r3, [r7, #88]	@ 0x58
 800421a:	2300      	movs	r3, #0
 800421c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800421e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004222:	460b      	mov	r3, r1
 8004224:	4313      	orrs	r3, r2
 8004226:	d009      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004228:	4baa      	ldr	r3, [pc, #680]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800422a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800422c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004236:	4aa7      	ldr	r2, [pc, #668]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004238:	430b      	orrs	r3, r1
 800423a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800423c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004244:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004248:	653b      	str	r3, [r7, #80]	@ 0x50
 800424a:	2300      	movs	r3, #0
 800424c:	657b      	str	r3, [r7, #84]	@ 0x54
 800424e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004252:	460b      	mov	r3, r1
 8004254:	4313      	orrs	r3, r2
 8004256:	d00a      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004258:	4b9e      	ldr	r3, [pc, #632]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004264:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004268:	4a9a      	ldr	r2, [pc, #616]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800426a:	430b      	orrs	r3, r1
 800426c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800426e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004276:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800427a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800427c:	2300      	movs	r3, #0
 800427e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004280:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004284:	460b      	mov	r3, r1
 8004286:	4313      	orrs	r3, r2
 8004288:	d009      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800428a:	4b92      	ldr	r3, [pc, #584]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800428c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800428e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004298:	4a8e      	ldr	r2, [pc, #568]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800429a:	430b      	orrs	r3, r1
 800429c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80042aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80042ac:	2300      	movs	r3, #0
 80042ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80042b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80042b4:	460b      	mov	r3, r1
 80042b6:	4313      	orrs	r3, r2
 80042b8:	d00e      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042ba:	4b86      	ldr	r3, [pc, #536]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	4a85      	ldr	r2, [pc, #532]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80042c4:	6113      	str	r3, [r2, #16]
 80042c6:	4b83      	ldr	r3, [pc, #524]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042c8:	6919      	ldr	r1, [r3, #16]
 80042ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80042d2:	4a80      	ldr	r2, [pc, #512]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80042e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042e6:	2300      	movs	r3, #0
 80042e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042ea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80042ee:	460b      	mov	r3, r1
 80042f0:	4313      	orrs	r3, r2
 80042f2:	d009      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042f4:	4b77      	ldr	r3, [pc, #476]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80042fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004302:	4a74      	ldr	r2, [pc, #464]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004304:	430b      	orrs	r3, r1
 8004306:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004314:	633b      	str	r3, [r7, #48]	@ 0x30
 8004316:	2300      	movs	r3, #0
 8004318:	637b      	str	r3, [r7, #52]	@ 0x34
 800431a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800431e:	460b      	mov	r3, r1
 8004320:	4313      	orrs	r3, r2
 8004322:	d00a      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004324:	4b6b      	ldr	r3, [pc, #428]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004328:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800432c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004334:	4a67      	ldr	r2, [pc, #412]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004336:	430b      	orrs	r3, r1
 8004338:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800433a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	2100      	movs	r1, #0
 8004344:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800434c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004350:	460b      	mov	r3, r1
 8004352:	4313      	orrs	r3, r2
 8004354:	d011      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435a:	3308      	adds	r3, #8
 800435c:	2100      	movs	r1, #0
 800435e:	4618      	mov	r0, r3
 8004360:	f000 f8ba 	bl	80044d8 <RCCEx_PLL2_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800436a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	2100      	movs	r1, #0
 8004384:	6239      	str	r1, [r7, #32]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	627b      	str	r3, [r7, #36]	@ 0x24
 800438c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004390:	460b      	mov	r3, r1
 8004392:	4313      	orrs	r3, r2
 8004394:	d011      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439a:	3308      	adds	r3, #8
 800439c:	2101      	movs	r1, #1
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 f89a 	bl	80044d8 <RCCEx_PLL2_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80043aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	2100      	movs	r1, #0
 80043c4:	61b9      	str	r1, [r7, #24]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80043d0:	460b      	mov	r3, r1
 80043d2:	4313      	orrs	r3, r2
 80043d4:	d011      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043da:	3308      	adds	r3, #8
 80043dc:	2102      	movs	r1, #2
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 f87a 	bl	80044d8 <RCCEx_PLL2_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80043ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80043fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004402:	2100      	movs	r1, #0
 8004404:	6139      	str	r1, [r7, #16]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004410:	460b      	mov	r3, r1
 8004412:	4313      	orrs	r3, r2
 8004414:	d011      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441a:	3328      	adds	r3, #40	@ 0x28
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f000 f90c 	bl	800463c <RCCEx_PLL3_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800442a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004436:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	2100      	movs	r1, #0
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004450:	460b      	mov	r3, r1
 8004452:	4313      	orrs	r3, r2
 8004454:	d011      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445a:	3328      	adds	r3, #40	@ 0x28
 800445c:	2101      	movs	r1, #1
 800445e:	4618      	mov	r0, r3
 8004460:	f000 f8ec 	bl	800463c <RCCEx_PLL3_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800446a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	2100      	movs	r1, #0
 8004484:	6039      	str	r1, [r7, #0]
 8004486:	f003 0320 	and.w	r3, r3, #32
 800448a:	607b      	str	r3, [r7, #4]
 800448c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004490:	460b      	mov	r3, r1
 8004492:	4313      	orrs	r3, r2
 8004494:	d011      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449a:	3328      	adds	r3, #40	@ 0x28
 800449c:	2102      	movs	r1, #2
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 f8cc 	bl	800463c <RCCEx_PLL3_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80044ba:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	e000      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80044ce:	46bd      	mov	sp, r7
 80044d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044d4:	58024400 	.word	0x58024400

080044d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044e6:	4b53      	ldr	r3, [pc, #332]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 80044e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d101      	bne.n	80044f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e099      	b.n	800462a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80044f6:	4b4f      	ldr	r3, [pc, #316]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a4e      	ldr	r2, [pc, #312]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 80044fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004502:	f7fc fbd3 	bl	8000cac <HAL_GetTick>
 8004506:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004508:	e008      	b.n	800451c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800450a:	f7fc fbcf 	bl	8000cac <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e086      	b.n	800462a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800451c:	4b45      	ldr	r3, [pc, #276]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f0      	bne.n	800450a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004528:	4b42      	ldr	r3, [pc, #264]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 800452a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	031b      	lsls	r3, r3, #12
 8004536:	493f      	ldr	r1, [pc, #252]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 8004538:	4313      	orrs	r3, r2
 800453a:	628b      	str	r3, [r1, #40]	@ 0x28
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	3b01      	subs	r3, #1
 8004542:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	3b01      	subs	r3, #1
 800454c:	025b      	lsls	r3, r3, #9
 800454e:	b29b      	uxth	r3, r3
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	3b01      	subs	r3, #1
 8004558:	041b      	lsls	r3, r3, #16
 800455a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	3b01      	subs	r3, #1
 8004566:	061b      	lsls	r3, r3, #24
 8004568:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800456c:	4931      	ldr	r1, [pc, #196]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 800456e:	4313      	orrs	r3, r2
 8004570:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004572:	4b30      	ldr	r3, [pc, #192]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 8004574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004576:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	492d      	ldr	r1, [pc, #180]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 8004580:	4313      	orrs	r3, r2
 8004582:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004584:	4b2b      	ldr	r3, [pc, #172]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 8004586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004588:	f023 0220 	bic.w	r2, r3, #32
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	4928      	ldr	r1, [pc, #160]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 8004592:	4313      	orrs	r3, r2
 8004594:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004596:	4b27      	ldr	r3, [pc, #156]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 8004598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459a:	4a26      	ldr	r2, [pc, #152]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 800459c:	f023 0310 	bic.w	r3, r3, #16
 80045a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80045a2:	4b24      	ldr	r3, [pc, #144]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 80045a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045a6:	4b24      	ldr	r3, [pc, #144]	@ (8004638 <RCCEx_PLL2_Config+0x160>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	69d2      	ldr	r2, [r2, #28]
 80045ae:	00d2      	lsls	r2, r2, #3
 80045b0:	4920      	ldr	r1, [pc, #128]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80045b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 80045b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 80045bc:	f043 0310 	orr.w	r3, r3, #16
 80045c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d106      	bne.n	80045d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80045c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045cc:	4a19      	ldr	r2, [pc, #100]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 80045ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80045d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80045d4:	e00f      	b.n	80045f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d106      	bne.n	80045ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80045dc:	4b15      	ldr	r3, [pc, #84]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	4a14      	ldr	r2, [pc, #80]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 80045e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80045e8:	e005      	b.n	80045f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80045ea:	4b12      	ldr	r3, [pc, #72]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 80045ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ee:	4a11      	ldr	r2, [pc, #68]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 80045f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80045f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80045f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 80045fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004600:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004602:	f7fc fb53 	bl	8000cac <HAL_GetTick>
 8004606:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004608:	e008      	b.n	800461c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800460a:	f7fc fb4f 	bl	8000cac <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e006      	b.n	800462a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800461c:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <RCCEx_PLL2_Config+0x15c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004628:	7bfb      	ldrb	r3, [r7, #15]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	58024400 	.word	0x58024400
 8004638:	ffff0007 	.word	0xffff0007

0800463c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800464a:	4b53      	ldr	r3, [pc, #332]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 800464c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	2b03      	cmp	r3, #3
 8004654:	d101      	bne.n	800465a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e099      	b.n	800478e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800465a:	4b4f      	ldr	r3, [pc, #316]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a4e      	ldr	r2, [pc, #312]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 8004660:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004666:	f7fc fb21 	bl	8000cac <HAL_GetTick>
 800466a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800466c:	e008      	b.n	8004680 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800466e:	f7fc fb1d 	bl	8000cac <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e086      	b.n	800478e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004680:	4b45      	ldr	r3, [pc, #276]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800468c:	4b42      	ldr	r3, [pc, #264]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 800468e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004690:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	051b      	lsls	r3, r3, #20
 800469a:	493f      	ldr	r1, [pc, #252]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 800469c:	4313      	orrs	r3, r2
 800469e:	628b      	str	r3, [r1, #40]	@ 0x28
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	025b      	lsls	r3, r3, #9
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	041b      	lsls	r3, r3, #16
 80046be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	061b      	lsls	r3, r3, #24
 80046cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80046d0:	4931      	ldr	r1, [pc, #196]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80046d6:	4b30      	ldr	r3, [pc, #192]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 80046d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	492d      	ldr	r1, [pc, #180]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80046e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 80046ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	4928      	ldr	r1, [pc, #160]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80046fa:	4b27      	ldr	r3, [pc, #156]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 80046fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fe:	4a26      	ldr	r2, [pc, #152]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 8004700:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004704:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004706:	4b24      	ldr	r3, [pc, #144]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 8004708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800470a:	4b24      	ldr	r3, [pc, #144]	@ (800479c <RCCEx_PLL3_Config+0x160>)
 800470c:	4013      	ands	r3, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	69d2      	ldr	r2, [r2, #28]
 8004712:	00d2      	lsls	r2, r2, #3
 8004714:	4920      	ldr	r1, [pc, #128]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 8004716:	4313      	orrs	r3, r2
 8004718:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800471a:	4b1f      	ldr	r3, [pc, #124]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 800471c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471e:	4a1e      	ldr	r2, [pc, #120]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 8004720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004724:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d106      	bne.n	800473a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800472c:	4b1a      	ldr	r3, [pc, #104]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 800472e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004730:	4a19      	ldr	r2, [pc, #100]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 8004732:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004736:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004738:	e00f      	b.n	800475a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d106      	bne.n	800474e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004740:	4b15      	ldr	r3, [pc, #84]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 8004742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004744:	4a14      	ldr	r2, [pc, #80]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 8004746:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800474a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800474c:	e005      	b.n	800475a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800474e:	4b12      	ldr	r3, [pc, #72]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	4a11      	ldr	r2, [pc, #68]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 8004754:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004758:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800475a:	4b0f      	ldr	r3, [pc, #60]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a0e      	ldr	r2, [pc, #56]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 8004760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004764:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004766:	f7fc faa1 	bl	8000cac <HAL_GetTick>
 800476a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800476c:	e008      	b.n	8004780 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800476e:	f7fc fa9d 	bl	8000cac <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e006      	b.n	800478e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004780:	4b05      	ldr	r3, [pc, #20]	@ (8004798 <RCCEx_PLL3_Config+0x15c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	58024400 	.word	0x58024400
 800479c:	ffff0007 	.word	0xffff0007

080047a0 <std>:
 80047a0:	2300      	movs	r3, #0
 80047a2:	b510      	push	{r4, lr}
 80047a4:	4604      	mov	r4, r0
 80047a6:	e9c0 3300 	strd	r3, r3, [r0]
 80047aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047ae:	6083      	str	r3, [r0, #8]
 80047b0:	8181      	strh	r1, [r0, #12]
 80047b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80047b4:	81c2      	strh	r2, [r0, #14]
 80047b6:	6183      	str	r3, [r0, #24]
 80047b8:	4619      	mov	r1, r3
 80047ba:	2208      	movs	r2, #8
 80047bc:	305c      	adds	r0, #92	@ 0x5c
 80047be:	f000 f9f9 	bl	8004bb4 <memset>
 80047c2:	4b0d      	ldr	r3, [pc, #52]	@ (80047f8 <std+0x58>)
 80047c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80047c6:	4b0d      	ldr	r3, [pc, #52]	@ (80047fc <std+0x5c>)
 80047c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004800 <std+0x60>)
 80047cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80047ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004804 <std+0x64>)
 80047d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80047d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004808 <std+0x68>)
 80047d4:	6224      	str	r4, [r4, #32]
 80047d6:	429c      	cmp	r4, r3
 80047d8:	d006      	beq.n	80047e8 <std+0x48>
 80047da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80047de:	4294      	cmp	r4, r2
 80047e0:	d002      	beq.n	80047e8 <std+0x48>
 80047e2:	33d0      	adds	r3, #208	@ 0xd0
 80047e4:	429c      	cmp	r4, r3
 80047e6:	d105      	bne.n	80047f4 <std+0x54>
 80047e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80047ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f0:	f000 ba58 	b.w	8004ca4 <__retarget_lock_init_recursive>
 80047f4:	bd10      	pop	{r4, pc}
 80047f6:	bf00      	nop
 80047f8:	08004a05 	.word	0x08004a05
 80047fc:	08004a27 	.word	0x08004a27
 8004800:	08004a5f 	.word	0x08004a5f
 8004804:	08004a83 	.word	0x08004a83
 8004808:	240000e4 	.word	0x240000e4

0800480c <stdio_exit_handler>:
 800480c:	4a02      	ldr	r2, [pc, #8]	@ (8004818 <stdio_exit_handler+0xc>)
 800480e:	4903      	ldr	r1, [pc, #12]	@ (800481c <stdio_exit_handler+0x10>)
 8004810:	4803      	ldr	r0, [pc, #12]	@ (8004820 <stdio_exit_handler+0x14>)
 8004812:	f000 b869 	b.w	80048e8 <_fwalk_sglue>
 8004816:	bf00      	nop
 8004818:	24000010 	.word	0x24000010
 800481c:	08005545 	.word	0x08005545
 8004820:	24000020 	.word	0x24000020

08004824 <cleanup_stdio>:
 8004824:	6841      	ldr	r1, [r0, #4]
 8004826:	4b0c      	ldr	r3, [pc, #48]	@ (8004858 <cleanup_stdio+0x34>)
 8004828:	4299      	cmp	r1, r3
 800482a:	b510      	push	{r4, lr}
 800482c:	4604      	mov	r4, r0
 800482e:	d001      	beq.n	8004834 <cleanup_stdio+0x10>
 8004830:	f000 fe88 	bl	8005544 <_fflush_r>
 8004834:	68a1      	ldr	r1, [r4, #8]
 8004836:	4b09      	ldr	r3, [pc, #36]	@ (800485c <cleanup_stdio+0x38>)
 8004838:	4299      	cmp	r1, r3
 800483a:	d002      	beq.n	8004842 <cleanup_stdio+0x1e>
 800483c:	4620      	mov	r0, r4
 800483e:	f000 fe81 	bl	8005544 <_fflush_r>
 8004842:	68e1      	ldr	r1, [r4, #12]
 8004844:	4b06      	ldr	r3, [pc, #24]	@ (8004860 <cleanup_stdio+0x3c>)
 8004846:	4299      	cmp	r1, r3
 8004848:	d004      	beq.n	8004854 <cleanup_stdio+0x30>
 800484a:	4620      	mov	r0, r4
 800484c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004850:	f000 be78 	b.w	8005544 <_fflush_r>
 8004854:	bd10      	pop	{r4, pc}
 8004856:	bf00      	nop
 8004858:	240000e4 	.word	0x240000e4
 800485c:	2400014c 	.word	0x2400014c
 8004860:	240001b4 	.word	0x240001b4

08004864 <global_stdio_init.part.0>:
 8004864:	b510      	push	{r4, lr}
 8004866:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <global_stdio_init.part.0+0x30>)
 8004868:	4c0b      	ldr	r4, [pc, #44]	@ (8004898 <global_stdio_init.part.0+0x34>)
 800486a:	4a0c      	ldr	r2, [pc, #48]	@ (800489c <global_stdio_init.part.0+0x38>)
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	4620      	mov	r0, r4
 8004870:	2200      	movs	r2, #0
 8004872:	2104      	movs	r1, #4
 8004874:	f7ff ff94 	bl	80047a0 <std>
 8004878:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800487c:	2201      	movs	r2, #1
 800487e:	2109      	movs	r1, #9
 8004880:	f7ff ff8e 	bl	80047a0 <std>
 8004884:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004888:	2202      	movs	r2, #2
 800488a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800488e:	2112      	movs	r1, #18
 8004890:	f7ff bf86 	b.w	80047a0 <std>
 8004894:	2400021c 	.word	0x2400021c
 8004898:	240000e4 	.word	0x240000e4
 800489c:	0800480d 	.word	0x0800480d

080048a0 <__sfp_lock_acquire>:
 80048a0:	4801      	ldr	r0, [pc, #4]	@ (80048a8 <__sfp_lock_acquire+0x8>)
 80048a2:	f000 ba00 	b.w	8004ca6 <__retarget_lock_acquire_recursive>
 80048a6:	bf00      	nop
 80048a8:	24000225 	.word	0x24000225

080048ac <__sfp_lock_release>:
 80048ac:	4801      	ldr	r0, [pc, #4]	@ (80048b4 <__sfp_lock_release+0x8>)
 80048ae:	f000 b9fb 	b.w	8004ca8 <__retarget_lock_release_recursive>
 80048b2:	bf00      	nop
 80048b4:	24000225 	.word	0x24000225

080048b8 <__sinit>:
 80048b8:	b510      	push	{r4, lr}
 80048ba:	4604      	mov	r4, r0
 80048bc:	f7ff fff0 	bl	80048a0 <__sfp_lock_acquire>
 80048c0:	6a23      	ldr	r3, [r4, #32]
 80048c2:	b11b      	cbz	r3, 80048cc <__sinit+0x14>
 80048c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048c8:	f7ff bff0 	b.w	80048ac <__sfp_lock_release>
 80048cc:	4b04      	ldr	r3, [pc, #16]	@ (80048e0 <__sinit+0x28>)
 80048ce:	6223      	str	r3, [r4, #32]
 80048d0:	4b04      	ldr	r3, [pc, #16]	@ (80048e4 <__sinit+0x2c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f5      	bne.n	80048c4 <__sinit+0xc>
 80048d8:	f7ff ffc4 	bl	8004864 <global_stdio_init.part.0>
 80048dc:	e7f2      	b.n	80048c4 <__sinit+0xc>
 80048de:	bf00      	nop
 80048e0:	08004825 	.word	0x08004825
 80048e4:	2400021c 	.word	0x2400021c

080048e8 <_fwalk_sglue>:
 80048e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048ec:	4607      	mov	r7, r0
 80048ee:	4688      	mov	r8, r1
 80048f0:	4614      	mov	r4, r2
 80048f2:	2600      	movs	r6, #0
 80048f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048f8:	f1b9 0901 	subs.w	r9, r9, #1
 80048fc:	d505      	bpl.n	800490a <_fwalk_sglue+0x22>
 80048fe:	6824      	ldr	r4, [r4, #0]
 8004900:	2c00      	cmp	r4, #0
 8004902:	d1f7      	bne.n	80048f4 <_fwalk_sglue+0xc>
 8004904:	4630      	mov	r0, r6
 8004906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800490a:	89ab      	ldrh	r3, [r5, #12]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d907      	bls.n	8004920 <_fwalk_sglue+0x38>
 8004910:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004914:	3301      	adds	r3, #1
 8004916:	d003      	beq.n	8004920 <_fwalk_sglue+0x38>
 8004918:	4629      	mov	r1, r5
 800491a:	4638      	mov	r0, r7
 800491c:	47c0      	blx	r8
 800491e:	4306      	orrs	r6, r0
 8004920:	3568      	adds	r5, #104	@ 0x68
 8004922:	e7e9      	b.n	80048f8 <_fwalk_sglue+0x10>

08004924 <iprintf>:
 8004924:	b40f      	push	{r0, r1, r2, r3}
 8004926:	b507      	push	{r0, r1, r2, lr}
 8004928:	4906      	ldr	r1, [pc, #24]	@ (8004944 <iprintf+0x20>)
 800492a:	ab04      	add	r3, sp, #16
 800492c:	6808      	ldr	r0, [r1, #0]
 800492e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004932:	6881      	ldr	r1, [r0, #8]
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	f000 fadb 	bl	8004ef0 <_vfiprintf_r>
 800493a:	b003      	add	sp, #12
 800493c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004940:	b004      	add	sp, #16
 8004942:	4770      	bx	lr
 8004944:	2400001c 	.word	0x2400001c

08004948 <_puts_r>:
 8004948:	6a03      	ldr	r3, [r0, #32]
 800494a:	b570      	push	{r4, r5, r6, lr}
 800494c:	6884      	ldr	r4, [r0, #8]
 800494e:	4605      	mov	r5, r0
 8004950:	460e      	mov	r6, r1
 8004952:	b90b      	cbnz	r3, 8004958 <_puts_r+0x10>
 8004954:	f7ff ffb0 	bl	80048b8 <__sinit>
 8004958:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800495a:	07db      	lsls	r3, r3, #31
 800495c:	d405      	bmi.n	800496a <_puts_r+0x22>
 800495e:	89a3      	ldrh	r3, [r4, #12]
 8004960:	0598      	lsls	r0, r3, #22
 8004962:	d402      	bmi.n	800496a <_puts_r+0x22>
 8004964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004966:	f000 f99e 	bl	8004ca6 <__retarget_lock_acquire_recursive>
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	0719      	lsls	r1, r3, #28
 800496e:	d502      	bpl.n	8004976 <_puts_r+0x2e>
 8004970:	6923      	ldr	r3, [r4, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d135      	bne.n	80049e2 <_puts_r+0x9a>
 8004976:	4621      	mov	r1, r4
 8004978:	4628      	mov	r0, r5
 800497a:	f000 f8c5 	bl	8004b08 <__swsetup_r>
 800497e:	b380      	cbz	r0, 80049e2 <_puts_r+0x9a>
 8004980:	f04f 35ff 	mov.w	r5, #4294967295
 8004984:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004986:	07da      	lsls	r2, r3, #31
 8004988:	d405      	bmi.n	8004996 <_puts_r+0x4e>
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	059b      	lsls	r3, r3, #22
 800498e:	d402      	bmi.n	8004996 <_puts_r+0x4e>
 8004990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004992:	f000 f989 	bl	8004ca8 <__retarget_lock_release_recursive>
 8004996:	4628      	mov	r0, r5
 8004998:	bd70      	pop	{r4, r5, r6, pc}
 800499a:	2b00      	cmp	r3, #0
 800499c:	da04      	bge.n	80049a8 <_puts_r+0x60>
 800499e:	69a2      	ldr	r2, [r4, #24]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	dc17      	bgt.n	80049d4 <_puts_r+0x8c>
 80049a4:	290a      	cmp	r1, #10
 80049a6:	d015      	beq.n	80049d4 <_puts_r+0x8c>
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	6022      	str	r2, [r4, #0]
 80049ae:	7019      	strb	r1, [r3, #0]
 80049b0:	68a3      	ldr	r3, [r4, #8]
 80049b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049b6:	3b01      	subs	r3, #1
 80049b8:	60a3      	str	r3, [r4, #8]
 80049ba:	2900      	cmp	r1, #0
 80049bc:	d1ed      	bne.n	800499a <_puts_r+0x52>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	da11      	bge.n	80049e6 <_puts_r+0x9e>
 80049c2:	4622      	mov	r2, r4
 80049c4:	210a      	movs	r1, #10
 80049c6:	4628      	mov	r0, r5
 80049c8:	f000 f85f 	bl	8004a8a <__swbuf_r>
 80049cc:	3001      	adds	r0, #1
 80049ce:	d0d7      	beq.n	8004980 <_puts_r+0x38>
 80049d0:	250a      	movs	r5, #10
 80049d2:	e7d7      	b.n	8004984 <_puts_r+0x3c>
 80049d4:	4622      	mov	r2, r4
 80049d6:	4628      	mov	r0, r5
 80049d8:	f000 f857 	bl	8004a8a <__swbuf_r>
 80049dc:	3001      	adds	r0, #1
 80049de:	d1e7      	bne.n	80049b0 <_puts_r+0x68>
 80049e0:	e7ce      	b.n	8004980 <_puts_r+0x38>
 80049e2:	3e01      	subs	r6, #1
 80049e4:	e7e4      	b.n	80049b0 <_puts_r+0x68>
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	6022      	str	r2, [r4, #0]
 80049ec:	220a      	movs	r2, #10
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	e7ee      	b.n	80049d0 <_puts_r+0x88>
	...

080049f4 <puts>:
 80049f4:	4b02      	ldr	r3, [pc, #8]	@ (8004a00 <puts+0xc>)
 80049f6:	4601      	mov	r1, r0
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	f7ff bfa5 	b.w	8004948 <_puts_r>
 80049fe:	bf00      	nop
 8004a00:	2400001c 	.word	0x2400001c

08004a04 <__sread>:
 8004a04:	b510      	push	{r4, lr}
 8004a06:	460c      	mov	r4, r1
 8004a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a0c:	f000 f8fc 	bl	8004c08 <_read_r>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	bfab      	itete	ge
 8004a14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a16:	89a3      	ldrhlt	r3, [r4, #12]
 8004a18:	181b      	addge	r3, r3, r0
 8004a1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a1e:	bfac      	ite	ge
 8004a20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a22:	81a3      	strhlt	r3, [r4, #12]
 8004a24:	bd10      	pop	{r4, pc}

08004a26 <__swrite>:
 8004a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2a:	461f      	mov	r7, r3
 8004a2c:	898b      	ldrh	r3, [r1, #12]
 8004a2e:	05db      	lsls	r3, r3, #23
 8004a30:	4605      	mov	r5, r0
 8004a32:	460c      	mov	r4, r1
 8004a34:	4616      	mov	r6, r2
 8004a36:	d505      	bpl.n	8004a44 <__swrite+0x1e>
 8004a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f000 f8d0 	bl	8004be4 <_lseek_r>
 8004a44:	89a3      	ldrh	r3, [r4, #12]
 8004a46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a4e:	81a3      	strh	r3, [r4, #12]
 8004a50:	4632      	mov	r2, r6
 8004a52:	463b      	mov	r3, r7
 8004a54:	4628      	mov	r0, r5
 8004a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5a:	f000 b8e7 	b.w	8004c2c <_write_r>

08004a5e <__sseek>:
 8004a5e:	b510      	push	{r4, lr}
 8004a60:	460c      	mov	r4, r1
 8004a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a66:	f000 f8bd 	bl	8004be4 <_lseek_r>
 8004a6a:	1c43      	adds	r3, r0, #1
 8004a6c:	89a3      	ldrh	r3, [r4, #12]
 8004a6e:	bf15      	itete	ne
 8004a70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a7a:	81a3      	strheq	r3, [r4, #12]
 8004a7c:	bf18      	it	ne
 8004a7e:	81a3      	strhne	r3, [r4, #12]
 8004a80:	bd10      	pop	{r4, pc}

08004a82 <__sclose>:
 8004a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a86:	f000 b89d 	b.w	8004bc4 <_close_r>

08004a8a <__swbuf_r>:
 8004a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8c:	460e      	mov	r6, r1
 8004a8e:	4614      	mov	r4, r2
 8004a90:	4605      	mov	r5, r0
 8004a92:	b118      	cbz	r0, 8004a9c <__swbuf_r+0x12>
 8004a94:	6a03      	ldr	r3, [r0, #32]
 8004a96:	b90b      	cbnz	r3, 8004a9c <__swbuf_r+0x12>
 8004a98:	f7ff ff0e 	bl	80048b8 <__sinit>
 8004a9c:	69a3      	ldr	r3, [r4, #24]
 8004a9e:	60a3      	str	r3, [r4, #8]
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	071a      	lsls	r2, r3, #28
 8004aa4:	d501      	bpl.n	8004aaa <__swbuf_r+0x20>
 8004aa6:	6923      	ldr	r3, [r4, #16]
 8004aa8:	b943      	cbnz	r3, 8004abc <__swbuf_r+0x32>
 8004aaa:	4621      	mov	r1, r4
 8004aac:	4628      	mov	r0, r5
 8004aae:	f000 f82b 	bl	8004b08 <__swsetup_r>
 8004ab2:	b118      	cbz	r0, 8004abc <__swbuf_r+0x32>
 8004ab4:	f04f 37ff 	mov.w	r7, #4294967295
 8004ab8:	4638      	mov	r0, r7
 8004aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	6922      	ldr	r2, [r4, #16]
 8004ac0:	1a98      	subs	r0, r3, r2
 8004ac2:	6963      	ldr	r3, [r4, #20]
 8004ac4:	b2f6      	uxtb	r6, r6
 8004ac6:	4283      	cmp	r3, r0
 8004ac8:	4637      	mov	r7, r6
 8004aca:	dc05      	bgt.n	8004ad8 <__swbuf_r+0x4e>
 8004acc:	4621      	mov	r1, r4
 8004ace:	4628      	mov	r0, r5
 8004ad0:	f000 fd38 	bl	8005544 <_fflush_r>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d1ed      	bne.n	8004ab4 <__swbuf_r+0x2a>
 8004ad8:	68a3      	ldr	r3, [r4, #8]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	60a3      	str	r3, [r4, #8]
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	6022      	str	r2, [r4, #0]
 8004ae4:	701e      	strb	r6, [r3, #0]
 8004ae6:	6962      	ldr	r2, [r4, #20]
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d004      	beq.n	8004af8 <__swbuf_r+0x6e>
 8004aee:	89a3      	ldrh	r3, [r4, #12]
 8004af0:	07db      	lsls	r3, r3, #31
 8004af2:	d5e1      	bpl.n	8004ab8 <__swbuf_r+0x2e>
 8004af4:	2e0a      	cmp	r6, #10
 8004af6:	d1df      	bne.n	8004ab8 <__swbuf_r+0x2e>
 8004af8:	4621      	mov	r1, r4
 8004afa:	4628      	mov	r0, r5
 8004afc:	f000 fd22 	bl	8005544 <_fflush_r>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	d0d9      	beq.n	8004ab8 <__swbuf_r+0x2e>
 8004b04:	e7d6      	b.n	8004ab4 <__swbuf_r+0x2a>
	...

08004b08 <__swsetup_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4b29      	ldr	r3, [pc, #164]	@ (8004bb0 <__swsetup_r+0xa8>)
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	460c      	mov	r4, r1
 8004b12:	b118      	cbz	r0, 8004b1c <__swsetup_r+0x14>
 8004b14:	6a03      	ldr	r3, [r0, #32]
 8004b16:	b90b      	cbnz	r3, 8004b1c <__swsetup_r+0x14>
 8004b18:	f7ff fece 	bl	80048b8 <__sinit>
 8004b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b20:	0719      	lsls	r1, r3, #28
 8004b22:	d422      	bmi.n	8004b6a <__swsetup_r+0x62>
 8004b24:	06da      	lsls	r2, r3, #27
 8004b26:	d407      	bmi.n	8004b38 <__swsetup_r+0x30>
 8004b28:	2209      	movs	r2, #9
 8004b2a:	602a      	str	r2, [r5, #0]
 8004b2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b30:	81a3      	strh	r3, [r4, #12]
 8004b32:	f04f 30ff 	mov.w	r0, #4294967295
 8004b36:	e033      	b.n	8004ba0 <__swsetup_r+0x98>
 8004b38:	0758      	lsls	r0, r3, #29
 8004b3a:	d512      	bpl.n	8004b62 <__swsetup_r+0x5a>
 8004b3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b3e:	b141      	cbz	r1, 8004b52 <__swsetup_r+0x4a>
 8004b40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b44:	4299      	cmp	r1, r3
 8004b46:	d002      	beq.n	8004b4e <__swsetup_r+0x46>
 8004b48:	4628      	mov	r0, r5
 8004b4a:	f000 f8af 	bl	8004cac <_free_r>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b52:	89a3      	ldrh	r3, [r4, #12]
 8004b54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004b58:	81a3      	strh	r3, [r4, #12]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	6063      	str	r3, [r4, #4]
 8004b5e:	6923      	ldr	r3, [r4, #16]
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	89a3      	ldrh	r3, [r4, #12]
 8004b64:	f043 0308 	orr.w	r3, r3, #8
 8004b68:	81a3      	strh	r3, [r4, #12]
 8004b6a:	6923      	ldr	r3, [r4, #16]
 8004b6c:	b94b      	cbnz	r3, 8004b82 <__swsetup_r+0x7a>
 8004b6e:	89a3      	ldrh	r3, [r4, #12]
 8004b70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b78:	d003      	beq.n	8004b82 <__swsetup_r+0x7a>
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	f000 fd2f 	bl	80055e0 <__smakebuf_r>
 8004b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b86:	f013 0201 	ands.w	r2, r3, #1
 8004b8a:	d00a      	beq.n	8004ba2 <__swsetup_r+0x9a>
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	60a2      	str	r2, [r4, #8]
 8004b90:	6962      	ldr	r2, [r4, #20]
 8004b92:	4252      	negs	r2, r2
 8004b94:	61a2      	str	r2, [r4, #24]
 8004b96:	6922      	ldr	r2, [r4, #16]
 8004b98:	b942      	cbnz	r2, 8004bac <__swsetup_r+0xa4>
 8004b9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b9e:	d1c5      	bne.n	8004b2c <__swsetup_r+0x24>
 8004ba0:	bd38      	pop	{r3, r4, r5, pc}
 8004ba2:	0799      	lsls	r1, r3, #30
 8004ba4:	bf58      	it	pl
 8004ba6:	6962      	ldrpl	r2, [r4, #20]
 8004ba8:	60a2      	str	r2, [r4, #8]
 8004baa:	e7f4      	b.n	8004b96 <__swsetup_r+0x8e>
 8004bac:	2000      	movs	r0, #0
 8004bae:	e7f7      	b.n	8004ba0 <__swsetup_r+0x98>
 8004bb0:	2400001c 	.word	0x2400001c

08004bb4 <memset>:
 8004bb4:	4402      	add	r2, r0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d100      	bne.n	8004bbe <memset+0xa>
 8004bbc:	4770      	bx	lr
 8004bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc2:	e7f9      	b.n	8004bb8 <memset+0x4>

08004bc4 <_close_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	4d06      	ldr	r5, [pc, #24]	@ (8004be0 <_close_r+0x1c>)
 8004bc8:	2300      	movs	r3, #0
 8004bca:	4604      	mov	r4, r0
 8004bcc:	4608      	mov	r0, r1
 8004bce:	602b      	str	r3, [r5, #0]
 8004bd0:	f7fb ff52 	bl	8000a78 <_close>
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d102      	bne.n	8004bde <_close_r+0x1a>
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	b103      	cbz	r3, 8004bde <_close_r+0x1a>
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	bd38      	pop	{r3, r4, r5, pc}
 8004be0:	24000220 	.word	0x24000220

08004be4 <_lseek_r>:
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	4d07      	ldr	r5, [pc, #28]	@ (8004c04 <_lseek_r+0x20>)
 8004be8:	4604      	mov	r4, r0
 8004bea:	4608      	mov	r0, r1
 8004bec:	4611      	mov	r1, r2
 8004bee:	2200      	movs	r2, #0
 8004bf0:	602a      	str	r2, [r5, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f7fb ff67 	bl	8000ac6 <_lseek>
 8004bf8:	1c43      	adds	r3, r0, #1
 8004bfa:	d102      	bne.n	8004c02 <_lseek_r+0x1e>
 8004bfc:	682b      	ldr	r3, [r5, #0]
 8004bfe:	b103      	cbz	r3, 8004c02 <_lseek_r+0x1e>
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	bd38      	pop	{r3, r4, r5, pc}
 8004c04:	24000220 	.word	0x24000220

08004c08 <_read_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	4d07      	ldr	r5, [pc, #28]	@ (8004c28 <_read_r+0x20>)
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	4608      	mov	r0, r1
 8004c10:	4611      	mov	r1, r2
 8004c12:	2200      	movs	r2, #0
 8004c14:	602a      	str	r2, [r5, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f7fb ff11 	bl	8000a3e <_read>
 8004c1c:	1c43      	adds	r3, r0, #1
 8004c1e:	d102      	bne.n	8004c26 <_read_r+0x1e>
 8004c20:	682b      	ldr	r3, [r5, #0]
 8004c22:	b103      	cbz	r3, 8004c26 <_read_r+0x1e>
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	bd38      	pop	{r3, r4, r5, pc}
 8004c28:	24000220 	.word	0x24000220

08004c2c <_write_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	4d07      	ldr	r5, [pc, #28]	@ (8004c4c <_write_r+0x20>)
 8004c30:	4604      	mov	r4, r0
 8004c32:	4608      	mov	r0, r1
 8004c34:	4611      	mov	r1, r2
 8004c36:	2200      	movs	r2, #0
 8004c38:	602a      	str	r2, [r5, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f7fb fe2c 	bl	8000898 <_write>
 8004c40:	1c43      	adds	r3, r0, #1
 8004c42:	d102      	bne.n	8004c4a <_write_r+0x1e>
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	b103      	cbz	r3, 8004c4a <_write_r+0x1e>
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	bd38      	pop	{r3, r4, r5, pc}
 8004c4c:	24000220 	.word	0x24000220

08004c50 <__errno>:
 8004c50:	4b01      	ldr	r3, [pc, #4]	@ (8004c58 <__errno+0x8>)
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	2400001c 	.word	0x2400001c

08004c5c <__libc_init_array>:
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	4d0d      	ldr	r5, [pc, #52]	@ (8004c94 <__libc_init_array+0x38>)
 8004c60:	4c0d      	ldr	r4, [pc, #52]	@ (8004c98 <__libc_init_array+0x3c>)
 8004c62:	1b64      	subs	r4, r4, r5
 8004c64:	10a4      	asrs	r4, r4, #2
 8004c66:	2600      	movs	r6, #0
 8004c68:	42a6      	cmp	r6, r4
 8004c6a:	d109      	bne.n	8004c80 <__libc_init_array+0x24>
 8004c6c:	4d0b      	ldr	r5, [pc, #44]	@ (8004c9c <__libc_init_array+0x40>)
 8004c6e:	4c0c      	ldr	r4, [pc, #48]	@ (8004ca0 <__libc_init_array+0x44>)
 8004c70:	f000 fd24 	bl	80056bc <_init>
 8004c74:	1b64      	subs	r4, r4, r5
 8004c76:	10a4      	asrs	r4, r4, #2
 8004c78:	2600      	movs	r6, #0
 8004c7a:	42a6      	cmp	r6, r4
 8004c7c:	d105      	bne.n	8004c8a <__libc_init_array+0x2e>
 8004c7e:	bd70      	pop	{r4, r5, r6, pc}
 8004c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c84:	4798      	blx	r3
 8004c86:	3601      	adds	r6, #1
 8004c88:	e7ee      	b.n	8004c68 <__libc_init_array+0xc>
 8004c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c8e:	4798      	blx	r3
 8004c90:	3601      	adds	r6, #1
 8004c92:	e7f2      	b.n	8004c7a <__libc_init_array+0x1e>
 8004c94:	08005780 	.word	0x08005780
 8004c98:	08005780 	.word	0x08005780
 8004c9c:	08005780 	.word	0x08005780
 8004ca0:	08005784 	.word	0x08005784

08004ca4 <__retarget_lock_init_recursive>:
 8004ca4:	4770      	bx	lr

08004ca6 <__retarget_lock_acquire_recursive>:
 8004ca6:	4770      	bx	lr

08004ca8 <__retarget_lock_release_recursive>:
 8004ca8:	4770      	bx	lr
	...

08004cac <_free_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4605      	mov	r5, r0
 8004cb0:	2900      	cmp	r1, #0
 8004cb2:	d041      	beq.n	8004d38 <_free_r+0x8c>
 8004cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cb8:	1f0c      	subs	r4, r1, #4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	bfb8      	it	lt
 8004cbe:	18e4      	addlt	r4, r4, r3
 8004cc0:	f000 f8e0 	bl	8004e84 <__malloc_lock>
 8004cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d3c <_free_r+0x90>)
 8004cc6:	6813      	ldr	r3, [r2, #0]
 8004cc8:	b933      	cbnz	r3, 8004cd8 <_free_r+0x2c>
 8004cca:	6063      	str	r3, [r4, #4]
 8004ccc:	6014      	str	r4, [r2, #0]
 8004cce:	4628      	mov	r0, r5
 8004cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cd4:	f000 b8dc 	b.w	8004e90 <__malloc_unlock>
 8004cd8:	42a3      	cmp	r3, r4
 8004cda:	d908      	bls.n	8004cee <_free_r+0x42>
 8004cdc:	6820      	ldr	r0, [r4, #0]
 8004cde:	1821      	adds	r1, r4, r0
 8004ce0:	428b      	cmp	r3, r1
 8004ce2:	bf01      	itttt	eq
 8004ce4:	6819      	ldreq	r1, [r3, #0]
 8004ce6:	685b      	ldreq	r3, [r3, #4]
 8004ce8:	1809      	addeq	r1, r1, r0
 8004cea:	6021      	streq	r1, [r4, #0]
 8004cec:	e7ed      	b.n	8004cca <_free_r+0x1e>
 8004cee:	461a      	mov	r2, r3
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	b10b      	cbz	r3, 8004cf8 <_free_r+0x4c>
 8004cf4:	42a3      	cmp	r3, r4
 8004cf6:	d9fa      	bls.n	8004cee <_free_r+0x42>
 8004cf8:	6811      	ldr	r1, [r2, #0]
 8004cfa:	1850      	adds	r0, r2, r1
 8004cfc:	42a0      	cmp	r0, r4
 8004cfe:	d10b      	bne.n	8004d18 <_free_r+0x6c>
 8004d00:	6820      	ldr	r0, [r4, #0]
 8004d02:	4401      	add	r1, r0
 8004d04:	1850      	adds	r0, r2, r1
 8004d06:	4283      	cmp	r3, r0
 8004d08:	6011      	str	r1, [r2, #0]
 8004d0a:	d1e0      	bne.n	8004cce <_free_r+0x22>
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	6053      	str	r3, [r2, #4]
 8004d12:	4408      	add	r0, r1
 8004d14:	6010      	str	r0, [r2, #0]
 8004d16:	e7da      	b.n	8004cce <_free_r+0x22>
 8004d18:	d902      	bls.n	8004d20 <_free_r+0x74>
 8004d1a:	230c      	movs	r3, #12
 8004d1c:	602b      	str	r3, [r5, #0]
 8004d1e:	e7d6      	b.n	8004cce <_free_r+0x22>
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	1821      	adds	r1, r4, r0
 8004d24:	428b      	cmp	r3, r1
 8004d26:	bf04      	itt	eq
 8004d28:	6819      	ldreq	r1, [r3, #0]
 8004d2a:	685b      	ldreq	r3, [r3, #4]
 8004d2c:	6063      	str	r3, [r4, #4]
 8004d2e:	bf04      	itt	eq
 8004d30:	1809      	addeq	r1, r1, r0
 8004d32:	6021      	streq	r1, [r4, #0]
 8004d34:	6054      	str	r4, [r2, #4]
 8004d36:	e7ca      	b.n	8004cce <_free_r+0x22>
 8004d38:	bd38      	pop	{r3, r4, r5, pc}
 8004d3a:	bf00      	nop
 8004d3c:	2400022c 	.word	0x2400022c

08004d40 <sbrk_aligned>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	4e0f      	ldr	r6, [pc, #60]	@ (8004d80 <sbrk_aligned+0x40>)
 8004d44:	460c      	mov	r4, r1
 8004d46:	6831      	ldr	r1, [r6, #0]
 8004d48:	4605      	mov	r5, r0
 8004d4a:	b911      	cbnz	r1, 8004d52 <sbrk_aligned+0x12>
 8004d4c:	f000 fca6 	bl	800569c <_sbrk_r>
 8004d50:	6030      	str	r0, [r6, #0]
 8004d52:	4621      	mov	r1, r4
 8004d54:	4628      	mov	r0, r5
 8004d56:	f000 fca1 	bl	800569c <_sbrk_r>
 8004d5a:	1c43      	adds	r3, r0, #1
 8004d5c:	d103      	bne.n	8004d66 <sbrk_aligned+0x26>
 8004d5e:	f04f 34ff 	mov.w	r4, #4294967295
 8004d62:	4620      	mov	r0, r4
 8004d64:	bd70      	pop	{r4, r5, r6, pc}
 8004d66:	1cc4      	adds	r4, r0, #3
 8004d68:	f024 0403 	bic.w	r4, r4, #3
 8004d6c:	42a0      	cmp	r0, r4
 8004d6e:	d0f8      	beq.n	8004d62 <sbrk_aligned+0x22>
 8004d70:	1a21      	subs	r1, r4, r0
 8004d72:	4628      	mov	r0, r5
 8004d74:	f000 fc92 	bl	800569c <_sbrk_r>
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d1f2      	bne.n	8004d62 <sbrk_aligned+0x22>
 8004d7c:	e7ef      	b.n	8004d5e <sbrk_aligned+0x1e>
 8004d7e:	bf00      	nop
 8004d80:	24000228 	.word	0x24000228

08004d84 <_malloc_r>:
 8004d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d88:	1ccd      	adds	r5, r1, #3
 8004d8a:	f025 0503 	bic.w	r5, r5, #3
 8004d8e:	3508      	adds	r5, #8
 8004d90:	2d0c      	cmp	r5, #12
 8004d92:	bf38      	it	cc
 8004d94:	250c      	movcc	r5, #12
 8004d96:	2d00      	cmp	r5, #0
 8004d98:	4606      	mov	r6, r0
 8004d9a:	db01      	blt.n	8004da0 <_malloc_r+0x1c>
 8004d9c:	42a9      	cmp	r1, r5
 8004d9e:	d904      	bls.n	8004daa <_malloc_r+0x26>
 8004da0:	230c      	movs	r3, #12
 8004da2:	6033      	str	r3, [r6, #0]
 8004da4:	2000      	movs	r0, #0
 8004da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004daa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e80 <_malloc_r+0xfc>
 8004dae:	f000 f869 	bl	8004e84 <__malloc_lock>
 8004db2:	f8d8 3000 	ldr.w	r3, [r8]
 8004db6:	461c      	mov	r4, r3
 8004db8:	bb44      	cbnz	r4, 8004e0c <_malloc_r+0x88>
 8004dba:	4629      	mov	r1, r5
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	f7ff ffbf 	bl	8004d40 <sbrk_aligned>
 8004dc2:	1c43      	adds	r3, r0, #1
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	d158      	bne.n	8004e7a <_malloc_r+0xf6>
 8004dc8:	f8d8 4000 	ldr.w	r4, [r8]
 8004dcc:	4627      	mov	r7, r4
 8004dce:	2f00      	cmp	r7, #0
 8004dd0:	d143      	bne.n	8004e5a <_malloc_r+0xd6>
 8004dd2:	2c00      	cmp	r4, #0
 8004dd4:	d04b      	beq.n	8004e6e <_malloc_r+0xea>
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	4639      	mov	r1, r7
 8004dda:	4630      	mov	r0, r6
 8004ddc:	eb04 0903 	add.w	r9, r4, r3
 8004de0:	f000 fc5c 	bl	800569c <_sbrk_r>
 8004de4:	4581      	cmp	r9, r0
 8004de6:	d142      	bne.n	8004e6e <_malloc_r+0xea>
 8004de8:	6821      	ldr	r1, [r4, #0]
 8004dea:	1a6d      	subs	r5, r5, r1
 8004dec:	4629      	mov	r1, r5
 8004dee:	4630      	mov	r0, r6
 8004df0:	f7ff ffa6 	bl	8004d40 <sbrk_aligned>
 8004df4:	3001      	adds	r0, #1
 8004df6:	d03a      	beq.n	8004e6e <_malloc_r+0xea>
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	442b      	add	r3, r5
 8004dfc:	6023      	str	r3, [r4, #0]
 8004dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	bb62      	cbnz	r2, 8004e60 <_malloc_r+0xdc>
 8004e06:	f8c8 7000 	str.w	r7, [r8]
 8004e0a:	e00f      	b.n	8004e2c <_malloc_r+0xa8>
 8004e0c:	6822      	ldr	r2, [r4, #0]
 8004e0e:	1b52      	subs	r2, r2, r5
 8004e10:	d420      	bmi.n	8004e54 <_malloc_r+0xd0>
 8004e12:	2a0b      	cmp	r2, #11
 8004e14:	d917      	bls.n	8004e46 <_malloc_r+0xc2>
 8004e16:	1961      	adds	r1, r4, r5
 8004e18:	42a3      	cmp	r3, r4
 8004e1a:	6025      	str	r5, [r4, #0]
 8004e1c:	bf18      	it	ne
 8004e1e:	6059      	strne	r1, [r3, #4]
 8004e20:	6863      	ldr	r3, [r4, #4]
 8004e22:	bf08      	it	eq
 8004e24:	f8c8 1000 	streq.w	r1, [r8]
 8004e28:	5162      	str	r2, [r4, r5]
 8004e2a:	604b      	str	r3, [r1, #4]
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f000 f82f 	bl	8004e90 <__malloc_unlock>
 8004e32:	f104 000b 	add.w	r0, r4, #11
 8004e36:	1d23      	adds	r3, r4, #4
 8004e38:	f020 0007 	bic.w	r0, r0, #7
 8004e3c:	1ac2      	subs	r2, r0, r3
 8004e3e:	bf1c      	itt	ne
 8004e40:	1a1b      	subne	r3, r3, r0
 8004e42:	50a3      	strne	r3, [r4, r2]
 8004e44:	e7af      	b.n	8004da6 <_malloc_r+0x22>
 8004e46:	6862      	ldr	r2, [r4, #4]
 8004e48:	42a3      	cmp	r3, r4
 8004e4a:	bf0c      	ite	eq
 8004e4c:	f8c8 2000 	streq.w	r2, [r8]
 8004e50:	605a      	strne	r2, [r3, #4]
 8004e52:	e7eb      	b.n	8004e2c <_malloc_r+0xa8>
 8004e54:	4623      	mov	r3, r4
 8004e56:	6864      	ldr	r4, [r4, #4]
 8004e58:	e7ae      	b.n	8004db8 <_malloc_r+0x34>
 8004e5a:	463c      	mov	r4, r7
 8004e5c:	687f      	ldr	r7, [r7, #4]
 8004e5e:	e7b6      	b.n	8004dce <_malloc_r+0x4a>
 8004e60:	461a      	mov	r2, r3
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	42a3      	cmp	r3, r4
 8004e66:	d1fb      	bne.n	8004e60 <_malloc_r+0xdc>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	6053      	str	r3, [r2, #4]
 8004e6c:	e7de      	b.n	8004e2c <_malloc_r+0xa8>
 8004e6e:	230c      	movs	r3, #12
 8004e70:	6033      	str	r3, [r6, #0]
 8004e72:	4630      	mov	r0, r6
 8004e74:	f000 f80c 	bl	8004e90 <__malloc_unlock>
 8004e78:	e794      	b.n	8004da4 <_malloc_r+0x20>
 8004e7a:	6005      	str	r5, [r0, #0]
 8004e7c:	e7d6      	b.n	8004e2c <_malloc_r+0xa8>
 8004e7e:	bf00      	nop
 8004e80:	2400022c 	.word	0x2400022c

08004e84 <__malloc_lock>:
 8004e84:	4801      	ldr	r0, [pc, #4]	@ (8004e8c <__malloc_lock+0x8>)
 8004e86:	f7ff bf0e 	b.w	8004ca6 <__retarget_lock_acquire_recursive>
 8004e8a:	bf00      	nop
 8004e8c:	24000224 	.word	0x24000224

08004e90 <__malloc_unlock>:
 8004e90:	4801      	ldr	r0, [pc, #4]	@ (8004e98 <__malloc_unlock+0x8>)
 8004e92:	f7ff bf09 	b.w	8004ca8 <__retarget_lock_release_recursive>
 8004e96:	bf00      	nop
 8004e98:	24000224 	.word	0x24000224

08004e9c <__sfputc_r>:
 8004e9c:	6893      	ldr	r3, [r2, #8]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	b410      	push	{r4}
 8004ea4:	6093      	str	r3, [r2, #8]
 8004ea6:	da08      	bge.n	8004eba <__sfputc_r+0x1e>
 8004ea8:	6994      	ldr	r4, [r2, #24]
 8004eaa:	42a3      	cmp	r3, r4
 8004eac:	db01      	blt.n	8004eb2 <__sfputc_r+0x16>
 8004eae:	290a      	cmp	r1, #10
 8004eb0:	d103      	bne.n	8004eba <__sfputc_r+0x1e>
 8004eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eb6:	f7ff bde8 	b.w	8004a8a <__swbuf_r>
 8004eba:	6813      	ldr	r3, [r2, #0]
 8004ebc:	1c58      	adds	r0, r3, #1
 8004ebe:	6010      	str	r0, [r2, #0]
 8004ec0:	7019      	strb	r1, [r3, #0]
 8004ec2:	4608      	mov	r0, r1
 8004ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <__sfputs_r>:
 8004eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ecc:	4606      	mov	r6, r0
 8004ece:	460f      	mov	r7, r1
 8004ed0:	4614      	mov	r4, r2
 8004ed2:	18d5      	adds	r5, r2, r3
 8004ed4:	42ac      	cmp	r4, r5
 8004ed6:	d101      	bne.n	8004edc <__sfputs_r+0x12>
 8004ed8:	2000      	movs	r0, #0
 8004eda:	e007      	b.n	8004eec <__sfputs_r+0x22>
 8004edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee0:	463a      	mov	r2, r7
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	f7ff ffda 	bl	8004e9c <__sfputc_r>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d1f3      	bne.n	8004ed4 <__sfputs_r+0xa>
 8004eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ef0 <_vfiprintf_r>:
 8004ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef4:	460d      	mov	r5, r1
 8004ef6:	b09d      	sub	sp, #116	@ 0x74
 8004ef8:	4614      	mov	r4, r2
 8004efa:	4698      	mov	r8, r3
 8004efc:	4606      	mov	r6, r0
 8004efe:	b118      	cbz	r0, 8004f08 <_vfiprintf_r+0x18>
 8004f00:	6a03      	ldr	r3, [r0, #32]
 8004f02:	b90b      	cbnz	r3, 8004f08 <_vfiprintf_r+0x18>
 8004f04:	f7ff fcd8 	bl	80048b8 <__sinit>
 8004f08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f0a:	07d9      	lsls	r1, r3, #31
 8004f0c:	d405      	bmi.n	8004f1a <_vfiprintf_r+0x2a>
 8004f0e:	89ab      	ldrh	r3, [r5, #12]
 8004f10:	059a      	lsls	r2, r3, #22
 8004f12:	d402      	bmi.n	8004f1a <_vfiprintf_r+0x2a>
 8004f14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f16:	f7ff fec6 	bl	8004ca6 <__retarget_lock_acquire_recursive>
 8004f1a:	89ab      	ldrh	r3, [r5, #12]
 8004f1c:	071b      	lsls	r3, r3, #28
 8004f1e:	d501      	bpl.n	8004f24 <_vfiprintf_r+0x34>
 8004f20:	692b      	ldr	r3, [r5, #16]
 8004f22:	b99b      	cbnz	r3, 8004f4c <_vfiprintf_r+0x5c>
 8004f24:	4629      	mov	r1, r5
 8004f26:	4630      	mov	r0, r6
 8004f28:	f7ff fdee 	bl	8004b08 <__swsetup_r>
 8004f2c:	b170      	cbz	r0, 8004f4c <_vfiprintf_r+0x5c>
 8004f2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f30:	07dc      	lsls	r4, r3, #31
 8004f32:	d504      	bpl.n	8004f3e <_vfiprintf_r+0x4e>
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295
 8004f38:	b01d      	add	sp, #116	@ 0x74
 8004f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f3e:	89ab      	ldrh	r3, [r5, #12]
 8004f40:	0598      	lsls	r0, r3, #22
 8004f42:	d4f7      	bmi.n	8004f34 <_vfiprintf_r+0x44>
 8004f44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f46:	f7ff feaf 	bl	8004ca8 <__retarget_lock_release_recursive>
 8004f4a:	e7f3      	b.n	8004f34 <_vfiprintf_r+0x44>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f50:	2320      	movs	r3, #32
 8004f52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f5a:	2330      	movs	r3, #48	@ 0x30
 8004f5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800510c <_vfiprintf_r+0x21c>
 8004f60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f64:	f04f 0901 	mov.w	r9, #1
 8004f68:	4623      	mov	r3, r4
 8004f6a:	469a      	mov	sl, r3
 8004f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f70:	b10a      	cbz	r2, 8004f76 <_vfiprintf_r+0x86>
 8004f72:	2a25      	cmp	r2, #37	@ 0x25
 8004f74:	d1f9      	bne.n	8004f6a <_vfiprintf_r+0x7a>
 8004f76:	ebba 0b04 	subs.w	fp, sl, r4
 8004f7a:	d00b      	beq.n	8004f94 <_vfiprintf_r+0xa4>
 8004f7c:	465b      	mov	r3, fp
 8004f7e:	4622      	mov	r2, r4
 8004f80:	4629      	mov	r1, r5
 8004f82:	4630      	mov	r0, r6
 8004f84:	f7ff ffa1 	bl	8004eca <__sfputs_r>
 8004f88:	3001      	adds	r0, #1
 8004f8a:	f000 80a7 	beq.w	80050dc <_vfiprintf_r+0x1ec>
 8004f8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f90:	445a      	add	r2, fp
 8004f92:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f94:	f89a 3000 	ldrb.w	r3, [sl]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 809f 	beq.w	80050dc <_vfiprintf_r+0x1ec>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa8:	f10a 0a01 	add.w	sl, sl, #1
 8004fac:	9304      	str	r3, [sp, #16]
 8004fae:	9307      	str	r3, [sp, #28]
 8004fb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fb6:	4654      	mov	r4, sl
 8004fb8:	2205      	movs	r2, #5
 8004fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fbe:	4853      	ldr	r0, [pc, #332]	@ (800510c <_vfiprintf_r+0x21c>)
 8004fc0:	f7fb f98e 	bl	80002e0 <memchr>
 8004fc4:	9a04      	ldr	r2, [sp, #16]
 8004fc6:	b9d8      	cbnz	r0, 8005000 <_vfiprintf_r+0x110>
 8004fc8:	06d1      	lsls	r1, r2, #27
 8004fca:	bf44      	itt	mi
 8004fcc:	2320      	movmi	r3, #32
 8004fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fd2:	0713      	lsls	r3, r2, #28
 8004fd4:	bf44      	itt	mi
 8004fd6:	232b      	movmi	r3, #43	@ 0x2b
 8004fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fe2:	d015      	beq.n	8005010 <_vfiprintf_r+0x120>
 8004fe4:	9a07      	ldr	r2, [sp, #28]
 8004fe6:	4654      	mov	r4, sl
 8004fe8:	2000      	movs	r0, #0
 8004fea:	f04f 0c0a 	mov.w	ip, #10
 8004fee:	4621      	mov	r1, r4
 8004ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ff4:	3b30      	subs	r3, #48	@ 0x30
 8004ff6:	2b09      	cmp	r3, #9
 8004ff8:	d94b      	bls.n	8005092 <_vfiprintf_r+0x1a2>
 8004ffa:	b1b0      	cbz	r0, 800502a <_vfiprintf_r+0x13a>
 8004ffc:	9207      	str	r2, [sp, #28]
 8004ffe:	e014      	b.n	800502a <_vfiprintf_r+0x13a>
 8005000:	eba0 0308 	sub.w	r3, r0, r8
 8005004:	fa09 f303 	lsl.w	r3, r9, r3
 8005008:	4313      	orrs	r3, r2
 800500a:	9304      	str	r3, [sp, #16]
 800500c:	46a2      	mov	sl, r4
 800500e:	e7d2      	b.n	8004fb6 <_vfiprintf_r+0xc6>
 8005010:	9b03      	ldr	r3, [sp, #12]
 8005012:	1d19      	adds	r1, r3, #4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	9103      	str	r1, [sp, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	bfbb      	ittet	lt
 800501c:	425b      	neglt	r3, r3
 800501e:	f042 0202 	orrlt.w	r2, r2, #2
 8005022:	9307      	strge	r3, [sp, #28]
 8005024:	9307      	strlt	r3, [sp, #28]
 8005026:	bfb8      	it	lt
 8005028:	9204      	strlt	r2, [sp, #16]
 800502a:	7823      	ldrb	r3, [r4, #0]
 800502c:	2b2e      	cmp	r3, #46	@ 0x2e
 800502e:	d10a      	bne.n	8005046 <_vfiprintf_r+0x156>
 8005030:	7863      	ldrb	r3, [r4, #1]
 8005032:	2b2a      	cmp	r3, #42	@ 0x2a
 8005034:	d132      	bne.n	800509c <_vfiprintf_r+0x1ac>
 8005036:	9b03      	ldr	r3, [sp, #12]
 8005038:	1d1a      	adds	r2, r3, #4
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	9203      	str	r2, [sp, #12]
 800503e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005042:	3402      	adds	r4, #2
 8005044:	9305      	str	r3, [sp, #20]
 8005046:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800511c <_vfiprintf_r+0x22c>
 800504a:	7821      	ldrb	r1, [r4, #0]
 800504c:	2203      	movs	r2, #3
 800504e:	4650      	mov	r0, sl
 8005050:	f7fb f946 	bl	80002e0 <memchr>
 8005054:	b138      	cbz	r0, 8005066 <_vfiprintf_r+0x176>
 8005056:	9b04      	ldr	r3, [sp, #16]
 8005058:	eba0 000a 	sub.w	r0, r0, sl
 800505c:	2240      	movs	r2, #64	@ 0x40
 800505e:	4082      	lsls	r2, r0
 8005060:	4313      	orrs	r3, r2
 8005062:	3401      	adds	r4, #1
 8005064:	9304      	str	r3, [sp, #16]
 8005066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800506a:	4829      	ldr	r0, [pc, #164]	@ (8005110 <_vfiprintf_r+0x220>)
 800506c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005070:	2206      	movs	r2, #6
 8005072:	f7fb f935 	bl	80002e0 <memchr>
 8005076:	2800      	cmp	r0, #0
 8005078:	d03f      	beq.n	80050fa <_vfiprintf_r+0x20a>
 800507a:	4b26      	ldr	r3, [pc, #152]	@ (8005114 <_vfiprintf_r+0x224>)
 800507c:	bb1b      	cbnz	r3, 80050c6 <_vfiprintf_r+0x1d6>
 800507e:	9b03      	ldr	r3, [sp, #12]
 8005080:	3307      	adds	r3, #7
 8005082:	f023 0307 	bic.w	r3, r3, #7
 8005086:	3308      	adds	r3, #8
 8005088:	9303      	str	r3, [sp, #12]
 800508a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800508c:	443b      	add	r3, r7
 800508e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005090:	e76a      	b.n	8004f68 <_vfiprintf_r+0x78>
 8005092:	fb0c 3202 	mla	r2, ip, r2, r3
 8005096:	460c      	mov	r4, r1
 8005098:	2001      	movs	r0, #1
 800509a:	e7a8      	b.n	8004fee <_vfiprintf_r+0xfe>
 800509c:	2300      	movs	r3, #0
 800509e:	3401      	adds	r4, #1
 80050a0:	9305      	str	r3, [sp, #20]
 80050a2:	4619      	mov	r1, r3
 80050a4:	f04f 0c0a 	mov.w	ip, #10
 80050a8:	4620      	mov	r0, r4
 80050aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050ae:	3a30      	subs	r2, #48	@ 0x30
 80050b0:	2a09      	cmp	r2, #9
 80050b2:	d903      	bls.n	80050bc <_vfiprintf_r+0x1cc>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0c6      	beq.n	8005046 <_vfiprintf_r+0x156>
 80050b8:	9105      	str	r1, [sp, #20]
 80050ba:	e7c4      	b.n	8005046 <_vfiprintf_r+0x156>
 80050bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80050c0:	4604      	mov	r4, r0
 80050c2:	2301      	movs	r3, #1
 80050c4:	e7f0      	b.n	80050a8 <_vfiprintf_r+0x1b8>
 80050c6:	ab03      	add	r3, sp, #12
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	462a      	mov	r2, r5
 80050cc:	4b12      	ldr	r3, [pc, #72]	@ (8005118 <_vfiprintf_r+0x228>)
 80050ce:	a904      	add	r1, sp, #16
 80050d0:	4630      	mov	r0, r6
 80050d2:	f3af 8000 	nop.w
 80050d6:	4607      	mov	r7, r0
 80050d8:	1c78      	adds	r0, r7, #1
 80050da:	d1d6      	bne.n	800508a <_vfiprintf_r+0x19a>
 80050dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80050de:	07d9      	lsls	r1, r3, #31
 80050e0:	d405      	bmi.n	80050ee <_vfiprintf_r+0x1fe>
 80050e2:	89ab      	ldrh	r3, [r5, #12]
 80050e4:	059a      	lsls	r2, r3, #22
 80050e6:	d402      	bmi.n	80050ee <_vfiprintf_r+0x1fe>
 80050e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80050ea:	f7ff fddd 	bl	8004ca8 <__retarget_lock_release_recursive>
 80050ee:	89ab      	ldrh	r3, [r5, #12]
 80050f0:	065b      	lsls	r3, r3, #25
 80050f2:	f53f af1f 	bmi.w	8004f34 <_vfiprintf_r+0x44>
 80050f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050f8:	e71e      	b.n	8004f38 <_vfiprintf_r+0x48>
 80050fa:	ab03      	add	r3, sp, #12
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	462a      	mov	r2, r5
 8005100:	4b05      	ldr	r3, [pc, #20]	@ (8005118 <_vfiprintf_r+0x228>)
 8005102:	a904      	add	r1, sp, #16
 8005104:	4630      	mov	r0, r6
 8005106:	f000 f879 	bl	80051fc <_printf_i>
 800510a:	e7e4      	b.n	80050d6 <_vfiprintf_r+0x1e6>
 800510c:	08005744 	.word	0x08005744
 8005110:	0800574e 	.word	0x0800574e
 8005114:	00000000 	.word	0x00000000
 8005118:	08004ecb 	.word	0x08004ecb
 800511c:	0800574a 	.word	0x0800574a

08005120 <_printf_common>:
 8005120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005124:	4616      	mov	r6, r2
 8005126:	4698      	mov	r8, r3
 8005128:	688a      	ldr	r2, [r1, #8]
 800512a:	690b      	ldr	r3, [r1, #16]
 800512c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005130:	4293      	cmp	r3, r2
 8005132:	bfb8      	it	lt
 8005134:	4613      	movlt	r3, r2
 8005136:	6033      	str	r3, [r6, #0]
 8005138:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800513c:	4607      	mov	r7, r0
 800513e:	460c      	mov	r4, r1
 8005140:	b10a      	cbz	r2, 8005146 <_printf_common+0x26>
 8005142:	3301      	adds	r3, #1
 8005144:	6033      	str	r3, [r6, #0]
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	0699      	lsls	r1, r3, #26
 800514a:	bf42      	ittt	mi
 800514c:	6833      	ldrmi	r3, [r6, #0]
 800514e:	3302      	addmi	r3, #2
 8005150:	6033      	strmi	r3, [r6, #0]
 8005152:	6825      	ldr	r5, [r4, #0]
 8005154:	f015 0506 	ands.w	r5, r5, #6
 8005158:	d106      	bne.n	8005168 <_printf_common+0x48>
 800515a:	f104 0a19 	add.w	sl, r4, #25
 800515e:	68e3      	ldr	r3, [r4, #12]
 8005160:	6832      	ldr	r2, [r6, #0]
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	42ab      	cmp	r3, r5
 8005166:	dc26      	bgt.n	80051b6 <_printf_common+0x96>
 8005168:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800516c:	6822      	ldr	r2, [r4, #0]
 800516e:	3b00      	subs	r3, #0
 8005170:	bf18      	it	ne
 8005172:	2301      	movne	r3, #1
 8005174:	0692      	lsls	r2, r2, #26
 8005176:	d42b      	bmi.n	80051d0 <_printf_common+0xb0>
 8005178:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800517c:	4641      	mov	r1, r8
 800517e:	4638      	mov	r0, r7
 8005180:	47c8      	blx	r9
 8005182:	3001      	adds	r0, #1
 8005184:	d01e      	beq.n	80051c4 <_printf_common+0xa4>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	6922      	ldr	r2, [r4, #16]
 800518a:	f003 0306 	and.w	r3, r3, #6
 800518e:	2b04      	cmp	r3, #4
 8005190:	bf02      	ittt	eq
 8005192:	68e5      	ldreq	r5, [r4, #12]
 8005194:	6833      	ldreq	r3, [r6, #0]
 8005196:	1aed      	subeq	r5, r5, r3
 8005198:	68a3      	ldr	r3, [r4, #8]
 800519a:	bf0c      	ite	eq
 800519c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a0:	2500      	movne	r5, #0
 80051a2:	4293      	cmp	r3, r2
 80051a4:	bfc4      	itt	gt
 80051a6:	1a9b      	subgt	r3, r3, r2
 80051a8:	18ed      	addgt	r5, r5, r3
 80051aa:	2600      	movs	r6, #0
 80051ac:	341a      	adds	r4, #26
 80051ae:	42b5      	cmp	r5, r6
 80051b0:	d11a      	bne.n	80051e8 <_printf_common+0xc8>
 80051b2:	2000      	movs	r0, #0
 80051b4:	e008      	b.n	80051c8 <_printf_common+0xa8>
 80051b6:	2301      	movs	r3, #1
 80051b8:	4652      	mov	r2, sl
 80051ba:	4641      	mov	r1, r8
 80051bc:	4638      	mov	r0, r7
 80051be:	47c8      	blx	r9
 80051c0:	3001      	adds	r0, #1
 80051c2:	d103      	bne.n	80051cc <_printf_common+0xac>
 80051c4:	f04f 30ff 	mov.w	r0, #4294967295
 80051c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051cc:	3501      	adds	r5, #1
 80051ce:	e7c6      	b.n	800515e <_printf_common+0x3e>
 80051d0:	18e1      	adds	r1, r4, r3
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	2030      	movs	r0, #48	@ 0x30
 80051d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051da:	4422      	add	r2, r4
 80051dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051e4:	3302      	adds	r3, #2
 80051e6:	e7c7      	b.n	8005178 <_printf_common+0x58>
 80051e8:	2301      	movs	r3, #1
 80051ea:	4622      	mov	r2, r4
 80051ec:	4641      	mov	r1, r8
 80051ee:	4638      	mov	r0, r7
 80051f0:	47c8      	blx	r9
 80051f2:	3001      	adds	r0, #1
 80051f4:	d0e6      	beq.n	80051c4 <_printf_common+0xa4>
 80051f6:	3601      	adds	r6, #1
 80051f8:	e7d9      	b.n	80051ae <_printf_common+0x8e>
	...

080051fc <_printf_i>:
 80051fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005200:	7e0f      	ldrb	r7, [r1, #24]
 8005202:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005204:	2f78      	cmp	r7, #120	@ 0x78
 8005206:	4691      	mov	r9, r2
 8005208:	4680      	mov	r8, r0
 800520a:	460c      	mov	r4, r1
 800520c:	469a      	mov	sl, r3
 800520e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005212:	d807      	bhi.n	8005224 <_printf_i+0x28>
 8005214:	2f62      	cmp	r7, #98	@ 0x62
 8005216:	d80a      	bhi.n	800522e <_printf_i+0x32>
 8005218:	2f00      	cmp	r7, #0
 800521a:	f000 80d2 	beq.w	80053c2 <_printf_i+0x1c6>
 800521e:	2f58      	cmp	r7, #88	@ 0x58
 8005220:	f000 80b9 	beq.w	8005396 <_printf_i+0x19a>
 8005224:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005228:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800522c:	e03a      	b.n	80052a4 <_printf_i+0xa8>
 800522e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005232:	2b15      	cmp	r3, #21
 8005234:	d8f6      	bhi.n	8005224 <_printf_i+0x28>
 8005236:	a101      	add	r1, pc, #4	@ (adr r1, 800523c <_printf_i+0x40>)
 8005238:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800523c:	08005295 	.word	0x08005295
 8005240:	080052a9 	.word	0x080052a9
 8005244:	08005225 	.word	0x08005225
 8005248:	08005225 	.word	0x08005225
 800524c:	08005225 	.word	0x08005225
 8005250:	08005225 	.word	0x08005225
 8005254:	080052a9 	.word	0x080052a9
 8005258:	08005225 	.word	0x08005225
 800525c:	08005225 	.word	0x08005225
 8005260:	08005225 	.word	0x08005225
 8005264:	08005225 	.word	0x08005225
 8005268:	080053a9 	.word	0x080053a9
 800526c:	080052d3 	.word	0x080052d3
 8005270:	08005363 	.word	0x08005363
 8005274:	08005225 	.word	0x08005225
 8005278:	08005225 	.word	0x08005225
 800527c:	080053cb 	.word	0x080053cb
 8005280:	08005225 	.word	0x08005225
 8005284:	080052d3 	.word	0x080052d3
 8005288:	08005225 	.word	0x08005225
 800528c:	08005225 	.word	0x08005225
 8005290:	0800536b 	.word	0x0800536b
 8005294:	6833      	ldr	r3, [r6, #0]
 8005296:	1d1a      	adds	r2, r3, #4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6032      	str	r2, [r6, #0]
 800529c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052a4:	2301      	movs	r3, #1
 80052a6:	e09d      	b.n	80053e4 <_printf_i+0x1e8>
 80052a8:	6833      	ldr	r3, [r6, #0]
 80052aa:	6820      	ldr	r0, [r4, #0]
 80052ac:	1d19      	adds	r1, r3, #4
 80052ae:	6031      	str	r1, [r6, #0]
 80052b0:	0606      	lsls	r6, r0, #24
 80052b2:	d501      	bpl.n	80052b8 <_printf_i+0xbc>
 80052b4:	681d      	ldr	r5, [r3, #0]
 80052b6:	e003      	b.n	80052c0 <_printf_i+0xc4>
 80052b8:	0645      	lsls	r5, r0, #25
 80052ba:	d5fb      	bpl.n	80052b4 <_printf_i+0xb8>
 80052bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052c0:	2d00      	cmp	r5, #0
 80052c2:	da03      	bge.n	80052cc <_printf_i+0xd0>
 80052c4:	232d      	movs	r3, #45	@ 0x2d
 80052c6:	426d      	negs	r5, r5
 80052c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052cc:	4859      	ldr	r0, [pc, #356]	@ (8005434 <_printf_i+0x238>)
 80052ce:	230a      	movs	r3, #10
 80052d0:	e011      	b.n	80052f6 <_printf_i+0xfa>
 80052d2:	6821      	ldr	r1, [r4, #0]
 80052d4:	6833      	ldr	r3, [r6, #0]
 80052d6:	0608      	lsls	r0, r1, #24
 80052d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80052dc:	d402      	bmi.n	80052e4 <_printf_i+0xe8>
 80052de:	0649      	lsls	r1, r1, #25
 80052e0:	bf48      	it	mi
 80052e2:	b2ad      	uxthmi	r5, r5
 80052e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80052e6:	4853      	ldr	r0, [pc, #332]	@ (8005434 <_printf_i+0x238>)
 80052e8:	6033      	str	r3, [r6, #0]
 80052ea:	bf14      	ite	ne
 80052ec:	230a      	movne	r3, #10
 80052ee:	2308      	moveq	r3, #8
 80052f0:	2100      	movs	r1, #0
 80052f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052f6:	6866      	ldr	r6, [r4, #4]
 80052f8:	60a6      	str	r6, [r4, #8]
 80052fa:	2e00      	cmp	r6, #0
 80052fc:	bfa2      	ittt	ge
 80052fe:	6821      	ldrge	r1, [r4, #0]
 8005300:	f021 0104 	bicge.w	r1, r1, #4
 8005304:	6021      	strge	r1, [r4, #0]
 8005306:	b90d      	cbnz	r5, 800530c <_printf_i+0x110>
 8005308:	2e00      	cmp	r6, #0
 800530a:	d04b      	beq.n	80053a4 <_printf_i+0x1a8>
 800530c:	4616      	mov	r6, r2
 800530e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005312:	fb03 5711 	mls	r7, r3, r1, r5
 8005316:	5dc7      	ldrb	r7, [r0, r7]
 8005318:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800531c:	462f      	mov	r7, r5
 800531e:	42bb      	cmp	r3, r7
 8005320:	460d      	mov	r5, r1
 8005322:	d9f4      	bls.n	800530e <_printf_i+0x112>
 8005324:	2b08      	cmp	r3, #8
 8005326:	d10b      	bne.n	8005340 <_printf_i+0x144>
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	07df      	lsls	r7, r3, #31
 800532c:	d508      	bpl.n	8005340 <_printf_i+0x144>
 800532e:	6923      	ldr	r3, [r4, #16]
 8005330:	6861      	ldr	r1, [r4, #4]
 8005332:	4299      	cmp	r1, r3
 8005334:	bfde      	ittt	le
 8005336:	2330      	movle	r3, #48	@ 0x30
 8005338:	f806 3c01 	strble.w	r3, [r6, #-1]
 800533c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005340:	1b92      	subs	r2, r2, r6
 8005342:	6122      	str	r2, [r4, #16]
 8005344:	f8cd a000 	str.w	sl, [sp]
 8005348:	464b      	mov	r3, r9
 800534a:	aa03      	add	r2, sp, #12
 800534c:	4621      	mov	r1, r4
 800534e:	4640      	mov	r0, r8
 8005350:	f7ff fee6 	bl	8005120 <_printf_common>
 8005354:	3001      	adds	r0, #1
 8005356:	d14a      	bne.n	80053ee <_printf_i+0x1f2>
 8005358:	f04f 30ff 	mov.w	r0, #4294967295
 800535c:	b004      	add	sp, #16
 800535e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	f043 0320 	orr.w	r3, r3, #32
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	4833      	ldr	r0, [pc, #204]	@ (8005438 <_printf_i+0x23c>)
 800536c:	2778      	movs	r7, #120	@ 0x78
 800536e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	6831      	ldr	r1, [r6, #0]
 8005376:	061f      	lsls	r7, r3, #24
 8005378:	f851 5b04 	ldr.w	r5, [r1], #4
 800537c:	d402      	bmi.n	8005384 <_printf_i+0x188>
 800537e:	065f      	lsls	r7, r3, #25
 8005380:	bf48      	it	mi
 8005382:	b2ad      	uxthmi	r5, r5
 8005384:	6031      	str	r1, [r6, #0]
 8005386:	07d9      	lsls	r1, r3, #31
 8005388:	bf44      	itt	mi
 800538a:	f043 0320 	orrmi.w	r3, r3, #32
 800538e:	6023      	strmi	r3, [r4, #0]
 8005390:	b11d      	cbz	r5, 800539a <_printf_i+0x19e>
 8005392:	2310      	movs	r3, #16
 8005394:	e7ac      	b.n	80052f0 <_printf_i+0xf4>
 8005396:	4827      	ldr	r0, [pc, #156]	@ (8005434 <_printf_i+0x238>)
 8005398:	e7e9      	b.n	800536e <_printf_i+0x172>
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	f023 0320 	bic.w	r3, r3, #32
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	e7f6      	b.n	8005392 <_printf_i+0x196>
 80053a4:	4616      	mov	r6, r2
 80053a6:	e7bd      	b.n	8005324 <_printf_i+0x128>
 80053a8:	6833      	ldr	r3, [r6, #0]
 80053aa:	6825      	ldr	r5, [r4, #0]
 80053ac:	6961      	ldr	r1, [r4, #20]
 80053ae:	1d18      	adds	r0, r3, #4
 80053b0:	6030      	str	r0, [r6, #0]
 80053b2:	062e      	lsls	r6, r5, #24
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	d501      	bpl.n	80053bc <_printf_i+0x1c0>
 80053b8:	6019      	str	r1, [r3, #0]
 80053ba:	e002      	b.n	80053c2 <_printf_i+0x1c6>
 80053bc:	0668      	lsls	r0, r5, #25
 80053be:	d5fb      	bpl.n	80053b8 <_printf_i+0x1bc>
 80053c0:	8019      	strh	r1, [r3, #0]
 80053c2:	2300      	movs	r3, #0
 80053c4:	6123      	str	r3, [r4, #16]
 80053c6:	4616      	mov	r6, r2
 80053c8:	e7bc      	b.n	8005344 <_printf_i+0x148>
 80053ca:	6833      	ldr	r3, [r6, #0]
 80053cc:	1d1a      	adds	r2, r3, #4
 80053ce:	6032      	str	r2, [r6, #0]
 80053d0:	681e      	ldr	r6, [r3, #0]
 80053d2:	6862      	ldr	r2, [r4, #4]
 80053d4:	2100      	movs	r1, #0
 80053d6:	4630      	mov	r0, r6
 80053d8:	f7fa ff82 	bl	80002e0 <memchr>
 80053dc:	b108      	cbz	r0, 80053e2 <_printf_i+0x1e6>
 80053de:	1b80      	subs	r0, r0, r6
 80053e0:	6060      	str	r0, [r4, #4]
 80053e2:	6863      	ldr	r3, [r4, #4]
 80053e4:	6123      	str	r3, [r4, #16]
 80053e6:	2300      	movs	r3, #0
 80053e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053ec:	e7aa      	b.n	8005344 <_printf_i+0x148>
 80053ee:	6923      	ldr	r3, [r4, #16]
 80053f0:	4632      	mov	r2, r6
 80053f2:	4649      	mov	r1, r9
 80053f4:	4640      	mov	r0, r8
 80053f6:	47d0      	blx	sl
 80053f8:	3001      	adds	r0, #1
 80053fa:	d0ad      	beq.n	8005358 <_printf_i+0x15c>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	079b      	lsls	r3, r3, #30
 8005400:	d413      	bmi.n	800542a <_printf_i+0x22e>
 8005402:	68e0      	ldr	r0, [r4, #12]
 8005404:	9b03      	ldr	r3, [sp, #12]
 8005406:	4298      	cmp	r0, r3
 8005408:	bfb8      	it	lt
 800540a:	4618      	movlt	r0, r3
 800540c:	e7a6      	b.n	800535c <_printf_i+0x160>
 800540e:	2301      	movs	r3, #1
 8005410:	4632      	mov	r2, r6
 8005412:	4649      	mov	r1, r9
 8005414:	4640      	mov	r0, r8
 8005416:	47d0      	blx	sl
 8005418:	3001      	adds	r0, #1
 800541a:	d09d      	beq.n	8005358 <_printf_i+0x15c>
 800541c:	3501      	adds	r5, #1
 800541e:	68e3      	ldr	r3, [r4, #12]
 8005420:	9903      	ldr	r1, [sp, #12]
 8005422:	1a5b      	subs	r3, r3, r1
 8005424:	42ab      	cmp	r3, r5
 8005426:	dcf2      	bgt.n	800540e <_printf_i+0x212>
 8005428:	e7eb      	b.n	8005402 <_printf_i+0x206>
 800542a:	2500      	movs	r5, #0
 800542c:	f104 0619 	add.w	r6, r4, #25
 8005430:	e7f5      	b.n	800541e <_printf_i+0x222>
 8005432:	bf00      	nop
 8005434:	08005755 	.word	0x08005755
 8005438:	08005766 	.word	0x08005766

0800543c <__sflush_r>:
 800543c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005444:	0716      	lsls	r6, r2, #28
 8005446:	4605      	mov	r5, r0
 8005448:	460c      	mov	r4, r1
 800544a:	d454      	bmi.n	80054f6 <__sflush_r+0xba>
 800544c:	684b      	ldr	r3, [r1, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	dc02      	bgt.n	8005458 <__sflush_r+0x1c>
 8005452:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005454:	2b00      	cmp	r3, #0
 8005456:	dd48      	ble.n	80054ea <__sflush_r+0xae>
 8005458:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800545a:	2e00      	cmp	r6, #0
 800545c:	d045      	beq.n	80054ea <__sflush_r+0xae>
 800545e:	2300      	movs	r3, #0
 8005460:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005464:	682f      	ldr	r7, [r5, #0]
 8005466:	6a21      	ldr	r1, [r4, #32]
 8005468:	602b      	str	r3, [r5, #0]
 800546a:	d030      	beq.n	80054ce <__sflush_r+0x92>
 800546c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800546e:	89a3      	ldrh	r3, [r4, #12]
 8005470:	0759      	lsls	r1, r3, #29
 8005472:	d505      	bpl.n	8005480 <__sflush_r+0x44>
 8005474:	6863      	ldr	r3, [r4, #4]
 8005476:	1ad2      	subs	r2, r2, r3
 8005478:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800547a:	b10b      	cbz	r3, 8005480 <__sflush_r+0x44>
 800547c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800547e:	1ad2      	subs	r2, r2, r3
 8005480:	2300      	movs	r3, #0
 8005482:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005484:	6a21      	ldr	r1, [r4, #32]
 8005486:	4628      	mov	r0, r5
 8005488:	47b0      	blx	r6
 800548a:	1c43      	adds	r3, r0, #1
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	d106      	bne.n	800549e <__sflush_r+0x62>
 8005490:	6829      	ldr	r1, [r5, #0]
 8005492:	291d      	cmp	r1, #29
 8005494:	d82b      	bhi.n	80054ee <__sflush_r+0xb2>
 8005496:	4a2a      	ldr	r2, [pc, #168]	@ (8005540 <__sflush_r+0x104>)
 8005498:	410a      	asrs	r2, r1
 800549a:	07d6      	lsls	r6, r2, #31
 800549c:	d427      	bmi.n	80054ee <__sflush_r+0xb2>
 800549e:	2200      	movs	r2, #0
 80054a0:	6062      	str	r2, [r4, #4]
 80054a2:	04d9      	lsls	r1, r3, #19
 80054a4:	6922      	ldr	r2, [r4, #16]
 80054a6:	6022      	str	r2, [r4, #0]
 80054a8:	d504      	bpl.n	80054b4 <__sflush_r+0x78>
 80054aa:	1c42      	adds	r2, r0, #1
 80054ac:	d101      	bne.n	80054b2 <__sflush_r+0x76>
 80054ae:	682b      	ldr	r3, [r5, #0]
 80054b0:	b903      	cbnz	r3, 80054b4 <__sflush_r+0x78>
 80054b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80054b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054b6:	602f      	str	r7, [r5, #0]
 80054b8:	b1b9      	cbz	r1, 80054ea <__sflush_r+0xae>
 80054ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054be:	4299      	cmp	r1, r3
 80054c0:	d002      	beq.n	80054c8 <__sflush_r+0x8c>
 80054c2:	4628      	mov	r0, r5
 80054c4:	f7ff fbf2 	bl	8004cac <_free_r>
 80054c8:	2300      	movs	r3, #0
 80054ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80054cc:	e00d      	b.n	80054ea <__sflush_r+0xae>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4628      	mov	r0, r5
 80054d2:	47b0      	blx	r6
 80054d4:	4602      	mov	r2, r0
 80054d6:	1c50      	adds	r0, r2, #1
 80054d8:	d1c9      	bne.n	800546e <__sflush_r+0x32>
 80054da:	682b      	ldr	r3, [r5, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0c6      	beq.n	800546e <__sflush_r+0x32>
 80054e0:	2b1d      	cmp	r3, #29
 80054e2:	d001      	beq.n	80054e8 <__sflush_r+0xac>
 80054e4:	2b16      	cmp	r3, #22
 80054e6:	d11e      	bne.n	8005526 <__sflush_r+0xea>
 80054e8:	602f      	str	r7, [r5, #0]
 80054ea:	2000      	movs	r0, #0
 80054ec:	e022      	b.n	8005534 <__sflush_r+0xf8>
 80054ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054f2:	b21b      	sxth	r3, r3
 80054f4:	e01b      	b.n	800552e <__sflush_r+0xf2>
 80054f6:	690f      	ldr	r7, [r1, #16]
 80054f8:	2f00      	cmp	r7, #0
 80054fa:	d0f6      	beq.n	80054ea <__sflush_r+0xae>
 80054fc:	0793      	lsls	r3, r2, #30
 80054fe:	680e      	ldr	r6, [r1, #0]
 8005500:	bf08      	it	eq
 8005502:	694b      	ldreq	r3, [r1, #20]
 8005504:	600f      	str	r7, [r1, #0]
 8005506:	bf18      	it	ne
 8005508:	2300      	movne	r3, #0
 800550a:	eba6 0807 	sub.w	r8, r6, r7
 800550e:	608b      	str	r3, [r1, #8]
 8005510:	f1b8 0f00 	cmp.w	r8, #0
 8005514:	dde9      	ble.n	80054ea <__sflush_r+0xae>
 8005516:	6a21      	ldr	r1, [r4, #32]
 8005518:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800551a:	4643      	mov	r3, r8
 800551c:	463a      	mov	r2, r7
 800551e:	4628      	mov	r0, r5
 8005520:	47b0      	blx	r6
 8005522:	2800      	cmp	r0, #0
 8005524:	dc08      	bgt.n	8005538 <__sflush_r+0xfc>
 8005526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800552a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800552e:	81a3      	strh	r3, [r4, #12]
 8005530:	f04f 30ff 	mov.w	r0, #4294967295
 8005534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005538:	4407      	add	r7, r0
 800553a:	eba8 0800 	sub.w	r8, r8, r0
 800553e:	e7e7      	b.n	8005510 <__sflush_r+0xd4>
 8005540:	dfbffffe 	.word	0xdfbffffe

08005544 <_fflush_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	690b      	ldr	r3, [r1, #16]
 8005548:	4605      	mov	r5, r0
 800554a:	460c      	mov	r4, r1
 800554c:	b913      	cbnz	r3, 8005554 <_fflush_r+0x10>
 800554e:	2500      	movs	r5, #0
 8005550:	4628      	mov	r0, r5
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	b118      	cbz	r0, 800555e <_fflush_r+0x1a>
 8005556:	6a03      	ldr	r3, [r0, #32]
 8005558:	b90b      	cbnz	r3, 800555e <_fflush_r+0x1a>
 800555a:	f7ff f9ad 	bl	80048b8 <__sinit>
 800555e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0f3      	beq.n	800554e <_fflush_r+0xa>
 8005566:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005568:	07d0      	lsls	r0, r2, #31
 800556a:	d404      	bmi.n	8005576 <_fflush_r+0x32>
 800556c:	0599      	lsls	r1, r3, #22
 800556e:	d402      	bmi.n	8005576 <_fflush_r+0x32>
 8005570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005572:	f7ff fb98 	bl	8004ca6 <__retarget_lock_acquire_recursive>
 8005576:	4628      	mov	r0, r5
 8005578:	4621      	mov	r1, r4
 800557a:	f7ff ff5f 	bl	800543c <__sflush_r>
 800557e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005580:	07da      	lsls	r2, r3, #31
 8005582:	4605      	mov	r5, r0
 8005584:	d4e4      	bmi.n	8005550 <_fflush_r+0xc>
 8005586:	89a3      	ldrh	r3, [r4, #12]
 8005588:	059b      	lsls	r3, r3, #22
 800558a:	d4e1      	bmi.n	8005550 <_fflush_r+0xc>
 800558c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800558e:	f7ff fb8b 	bl	8004ca8 <__retarget_lock_release_recursive>
 8005592:	e7dd      	b.n	8005550 <_fflush_r+0xc>

08005594 <__swhatbuf_r>:
 8005594:	b570      	push	{r4, r5, r6, lr}
 8005596:	460c      	mov	r4, r1
 8005598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800559c:	2900      	cmp	r1, #0
 800559e:	b096      	sub	sp, #88	@ 0x58
 80055a0:	4615      	mov	r5, r2
 80055a2:	461e      	mov	r6, r3
 80055a4:	da0d      	bge.n	80055c2 <__swhatbuf_r+0x2e>
 80055a6:	89a3      	ldrh	r3, [r4, #12]
 80055a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055ac:	f04f 0100 	mov.w	r1, #0
 80055b0:	bf14      	ite	ne
 80055b2:	2340      	movne	r3, #64	@ 0x40
 80055b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80055b8:	2000      	movs	r0, #0
 80055ba:	6031      	str	r1, [r6, #0]
 80055bc:	602b      	str	r3, [r5, #0]
 80055be:	b016      	add	sp, #88	@ 0x58
 80055c0:	bd70      	pop	{r4, r5, r6, pc}
 80055c2:	466a      	mov	r2, sp
 80055c4:	f000 f848 	bl	8005658 <_fstat_r>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	dbec      	blt.n	80055a6 <__swhatbuf_r+0x12>
 80055cc:	9901      	ldr	r1, [sp, #4]
 80055ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80055d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80055d6:	4259      	negs	r1, r3
 80055d8:	4159      	adcs	r1, r3
 80055da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055de:	e7eb      	b.n	80055b8 <__swhatbuf_r+0x24>

080055e0 <__smakebuf_r>:
 80055e0:	898b      	ldrh	r3, [r1, #12]
 80055e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055e4:	079d      	lsls	r5, r3, #30
 80055e6:	4606      	mov	r6, r0
 80055e8:	460c      	mov	r4, r1
 80055ea:	d507      	bpl.n	80055fc <__smakebuf_r+0x1c>
 80055ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	6123      	str	r3, [r4, #16]
 80055f4:	2301      	movs	r3, #1
 80055f6:	6163      	str	r3, [r4, #20]
 80055f8:	b003      	add	sp, #12
 80055fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055fc:	ab01      	add	r3, sp, #4
 80055fe:	466a      	mov	r2, sp
 8005600:	f7ff ffc8 	bl	8005594 <__swhatbuf_r>
 8005604:	9f00      	ldr	r7, [sp, #0]
 8005606:	4605      	mov	r5, r0
 8005608:	4639      	mov	r1, r7
 800560a:	4630      	mov	r0, r6
 800560c:	f7ff fbba 	bl	8004d84 <_malloc_r>
 8005610:	b948      	cbnz	r0, 8005626 <__smakebuf_r+0x46>
 8005612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005616:	059a      	lsls	r2, r3, #22
 8005618:	d4ee      	bmi.n	80055f8 <__smakebuf_r+0x18>
 800561a:	f023 0303 	bic.w	r3, r3, #3
 800561e:	f043 0302 	orr.w	r3, r3, #2
 8005622:	81a3      	strh	r3, [r4, #12]
 8005624:	e7e2      	b.n	80055ec <__smakebuf_r+0xc>
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	6020      	str	r0, [r4, #0]
 800562a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800562e:	81a3      	strh	r3, [r4, #12]
 8005630:	9b01      	ldr	r3, [sp, #4]
 8005632:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005636:	b15b      	cbz	r3, 8005650 <__smakebuf_r+0x70>
 8005638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800563c:	4630      	mov	r0, r6
 800563e:	f000 f81d 	bl	800567c <_isatty_r>
 8005642:	b128      	cbz	r0, 8005650 <__smakebuf_r+0x70>
 8005644:	89a3      	ldrh	r3, [r4, #12]
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	f043 0301 	orr.w	r3, r3, #1
 800564e:	81a3      	strh	r3, [r4, #12]
 8005650:	89a3      	ldrh	r3, [r4, #12]
 8005652:	431d      	orrs	r5, r3
 8005654:	81a5      	strh	r5, [r4, #12]
 8005656:	e7cf      	b.n	80055f8 <__smakebuf_r+0x18>

08005658 <_fstat_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4d07      	ldr	r5, [pc, #28]	@ (8005678 <_fstat_r+0x20>)
 800565c:	2300      	movs	r3, #0
 800565e:	4604      	mov	r4, r0
 8005660:	4608      	mov	r0, r1
 8005662:	4611      	mov	r1, r2
 8005664:	602b      	str	r3, [r5, #0]
 8005666:	f7fb fa13 	bl	8000a90 <_fstat>
 800566a:	1c43      	adds	r3, r0, #1
 800566c:	d102      	bne.n	8005674 <_fstat_r+0x1c>
 800566e:	682b      	ldr	r3, [r5, #0]
 8005670:	b103      	cbz	r3, 8005674 <_fstat_r+0x1c>
 8005672:	6023      	str	r3, [r4, #0]
 8005674:	bd38      	pop	{r3, r4, r5, pc}
 8005676:	bf00      	nop
 8005678:	24000220 	.word	0x24000220

0800567c <_isatty_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	4d06      	ldr	r5, [pc, #24]	@ (8005698 <_isatty_r+0x1c>)
 8005680:	2300      	movs	r3, #0
 8005682:	4604      	mov	r4, r0
 8005684:	4608      	mov	r0, r1
 8005686:	602b      	str	r3, [r5, #0]
 8005688:	f7fb fa12 	bl	8000ab0 <_isatty>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d102      	bne.n	8005696 <_isatty_r+0x1a>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	b103      	cbz	r3, 8005696 <_isatty_r+0x1a>
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	bd38      	pop	{r3, r4, r5, pc}
 8005698:	24000220 	.word	0x24000220

0800569c <_sbrk_r>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	4d06      	ldr	r5, [pc, #24]	@ (80056b8 <_sbrk_r+0x1c>)
 80056a0:	2300      	movs	r3, #0
 80056a2:	4604      	mov	r4, r0
 80056a4:	4608      	mov	r0, r1
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	f7fb fa1a 	bl	8000ae0 <_sbrk>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d102      	bne.n	80056b6 <_sbrk_r+0x1a>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	b103      	cbz	r3, 80056b6 <_sbrk_r+0x1a>
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
 80056b8:	24000220 	.word	0x24000220

080056bc <_init>:
 80056bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056be:	bf00      	nop
 80056c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c2:	bc08      	pop	{r3}
 80056c4:	469e      	mov	lr, r3
 80056c6:	4770      	bx	lr

080056c8 <_fini>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	bf00      	nop
 80056cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ce:	bc08      	pop	{r3}
 80056d0:	469e      	mov	lr, r3
 80056d2:	4770      	bx	lr
