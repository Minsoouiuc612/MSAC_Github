
accelerometer_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f60  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08007200  08007200  00008200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007650  08007650  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007650  08007650  00008650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007658  08007658  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007658  08007658  00008658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800765c  0800765c  0000865c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  08007660  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  240001d8  08007838  000091d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400039c  08007838  0000939c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da55  00000000  00000000  00009206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fcd  00000000  00000000  00016c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00018c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f0  00000000  00000000  000197f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003984a  00000000  00000000  0001a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f94d  00000000  00000000  00053932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00176577  00000000  00000000  0006327f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d97f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e4c  00000000  00000000  001d983c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001dd688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080071e8 	.word	0x080071e8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	080071e8 	.word	0x080071e8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b3d      	ldr	r3, [pc, #244]	@ (800048c <SystemInit+0xfc>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800039a:	4a3c      	ldr	r2, [pc, #240]	@ (800048c <SystemInit+0xfc>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b39      	ldr	r3, [pc, #228]	@ (800048c <SystemInit+0xfc>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a38      	ldr	r2, [pc, #224]	@ (800048c <SystemInit+0xfc>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b37      	ldr	r3, [pc, #220]	@ (8000490 <SystemInit+0x100>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b34      	ldr	r3, [pc, #208]	@ (8000490 <SystemInit+0x100>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a32      	ldr	r2, [pc, #200]	@ (8000490 <SystemInit+0x100>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b31      	ldr	r3, [pc, #196]	@ (8000494 <SystemInit+0x104>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a30      	ldr	r2, [pc, #192]	@ (8000494 <SystemInit+0x104>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000494 <SystemInit+0x104>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b2d      	ldr	r3, [pc, #180]	@ (8000494 <SystemInit+0x104>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	492c      	ldr	r1, [pc, #176]	@ (8000494 <SystemInit+0x104>)
 80003e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000498 <SystemInit+0x108>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b29      	ldr	r3, [pc, #164]	@ (8000490 <SystemInit+0x100>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b26      	ldr	r3, [pc, #152]	@ (8000490 <SystemInit+0x100>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a24      	ldr	r2, [pc, #144]	@ (8000490 <SystemInit+0x100>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b23      	ldr	r3, [pc, #140]	@ (8000494 <SystemInit+0x104>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b21      	ldr	r3, [pc, #132]	@ (8000494 <SystemInit+0x104>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b20      	ldr	r3, [pc, #128]	@ (8000494 <SystemInit+0x104>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b1e      	ldr	r3, [pc, #120]	@ (8000494 <SystemInit+0x104>)
 800041a:	4a20      	ldr	r2, [pc, #128]	@ (800049c <SystemInit+0x10c>)
 800041c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b1d      	ldr	r3, [pc, #116]	@ (8000494 <SystemInit+0x104>)
 8000420:	4a1f      	ldr	r2, [pc, #124]	@ (80004a0 <SystemInit+0x110>)
 8000422:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b1b      	ldr	r3, [pc, #108]	@ (8000494 <SystemInit+0x104>)
 8000426:	4a1f      	ldr	r2, [pc, #124]	@ (80004a4 <SystemInit+0x114>)
 8000428:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b1a      	ldr	r3, [pc, #104]	@ (8000494 <SystemInit+0x104>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <SystemInit+0x104>)
 8000432:	4a1c      	ldr	r2, [pc, #112]	@ (80004a4 <SystemInit+0x114>)
 8000434:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b17      	ldr	r3, [pc, #92]	@ (8000494 <SystemInit+0x104>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <SystemInit+0x104>)
 800043e:	4a19      	ldr	r2, [pc, #100]	@ (80004a4 <SystemInit+0x114>)
 8000440:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b14      	ldr	r3, [pc, #80]	@ (8000494 <SystemInit+0x104>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <SystemInit+0x104>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a11      	ldr	r2, [pc, #68]	@ (8000494 <SystemInit+0x104>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <SystemInit+0x104>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <SystemInit+0x118>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800045e:	4a12      	ldr	r2, [pc, #72]	@ (80004a8 <SystemInit+0x118>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000464:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <SystemInit+0x11c>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <SystemInit+0x120>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <SystemInit+0x124>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <SystemInit+0x128>)
 800047c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000480:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	e000ed00 	.word	0xe000ed00
 8000490:	52002000 	.word	0x52002000
 8000494:	58024400 	.word	0x58024400
 8000498:	eaf6ed7f 	.word	0xeaf6ed7f
 800049c:	02020200 	.word	0x02020200
 80004a0:	01ff0000 	.word	0x01ff0000
 80004a4:	01010280 	.word	0x01010280
 80004a8:	580000c0 	.word	0x580000c0
 80004ac:	5c001000 	.word	0x5c001000
 80004b0:	ffff0000 	.word	0xffff0000
 80004b4:	51008108 	.word	0x51008108
 80004b8:	52004000 	.word	0x52004000

080004bc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004c8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80004cc:	f003 0301 	and.w	r3, r3, #1
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d013      	beq.n	80004fc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004d8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80004dc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d00b      	beq.n	80004fc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004e4:	e000      	b.n	80004e8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004e6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d0f9      	beq.n	80004e6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004f2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	b2d2      	uxtb	r2, r2
 80004fa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004fc:	687b      	ldr	r3, [r7, #4]
}
 80004fe:	4618      	mov	r0, r3
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08e      	sub	sp, #56	@ 0x38
 8000510:	af04      	add	r7, sp, #16
int main(void)
 8000512:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000516:	60fb      	str	r3, [r7, #12]
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000518:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800051c:	627b      	str	r3, [r7, #36]	@ 0x24
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800051e:	bf00      	nop
 8000520:	4ba0      	ldr	r3, [pc, #640]	@ (80007a4 <main+0x298>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000528:	2b00      	cmp	r3, #0
 800052a:	d004      	beq.n	8000536 <main+0x2a>
 800052c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800052e:	1e5a      	subs	r2, r3, #1
 8000530:	627a      	str	r2, [r7, #36]	@ 0x24
 8000532:	2b00      	cmp	r3, #0
 8000534:	dcf4      	bgt.n	8000520 <main+0x14>
	if ( timeout < 0 )
 8000536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000538:	2b00      	cmp	r3, #0
 800053a:	da01      	bge.n	8000540 <main+0x34>
	{
		Error_Handler();
 800053c:	f000 fa66 	bl	8000a0c <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000540:	f000 fbf0 	bl	8000d24 <HAL_Init>
	}

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000544:	f000 f942 	bl	80007cc <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000548:	4b96      	ldr	r3, [pc, #600]	@ (80007a4 <main+0x298>)
 800054a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800054e:	4a95      	ldr	r2, [pc, #596]	@ (80007a4 <main+0x298>)
 8000550:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000554:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000558:	4b92      	ldr	r3, [pc, #584]	@ (80007a4 <main+0x298>)
 800055a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800055e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000566:	2000      	movs	r0, #0
 8000568:	f000 ff4c 	bl	8001404 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800056c:	2100      	movs	r1, #0
 800056e:	2000      	movs	r0, #0
 8000570:	f000 ff62 	bl	8001438 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000574:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000578:	627b      	str	r3, [r7, #36]	@ 0x24
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800057a:	bf00      	nop
 800057c:	4b89      	ldr	r3, [pc, #548]	@ (80007a4 <main+0x298>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000584:	2b00      	cmp	r3, #0
 8000586:	d104      	bne.n	8000592 <main+0x86>
 8000588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800058a:	1e5a      	subs	r2, r3, #1
 800058c:	627a      	str	r2, [r7, #36]	@ 0x24
 800058e:	2b00      	cmp	r3, #0
 8000590:	dcf4      	bgt.n	800057c <main+0x70>
	if ( timeout < 0 )
 8000592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000594:	2b00      	cmp	r3, #0
 8000596:	da01      	bge.n	800059c <main+0x90>
	{
		Error_Handler();
 8000598:	f000 fa38 	bl	8000a0c <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800059c:	f000 f9c0 	bl	8000920 <MX_GPIO_Init>
	MX_I2C1_Init();
 80005a0:	f000 f97e 	bl	80008a0 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, (0b00011111 << 1) + 0, 1, 100);
 80005a4:	2364      	movs	r3, #100	@ 0x64
 80005a6:	2201      	movs	r2, #1
 80005a8:	213e      	movs	r1, #62	@ 0x3e
 80005aa:	487f      	ldr	r0, [pc, #508]	@ (80007a8 <main+0x29c>)
 80005ac:	f001 fa22 	bl	80019f4 <HAL_I2C_IsDeviceReady>
 80005b0:	4603      	mov	r3, r0
 80005b2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	if(ret == HAL_OK)
 80005b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d103      	bne.n	80005c6 <main+0xba>
		printf("Device is recognized \n");
 80005be:	487b      	ldr	r0, [pc, #492]	@ (80007ac <main+0x2a0>)
 80005c0:	f004 ff10 	bl	80053e4 <puts>
 80005c4:	e002      	b.n	80005cc <main+0xc0>
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, 1); // yellow
	else
		printf("Device is not recognized \n");
 80005c6:	487a      	ldr	r0, [pc, #488]	@ (80007b0 <main+0x2a4>)
 80005c8:	f004 ff0c 	bl	80053e4 <puts>
	//					 uint8_t *pData,
	//					 uint16_t Size,
	//					 uint32_t Timeout)

	// First, read what's in register already then print it
	uint8_t cntl1 = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Read(&hi2c1, (0b00011111 << 1) + 1, 0x1B, 1, &cntl1, 1, 100);
 80005d0:	2364      	movs	r3, #100	@ 0x64
 80005d2:	9302      	str	r3, [sp, #8]
 80005d4:	2301      	movs	r3, #1
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	f107 030b 	add.w	r3, r7, #11
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2301      	movs	r3, #1
 80005e0:	221b      	movs	r2, #27
 80005e2:	213f      	movs	r1, #63	@ 0x3f
 80005e4:	4870      	ldr	r0, [pc, #448]	@ (80007a8 <main+0x29c>)
 80005e6:	f001 f8eb 	bl	80017c0 <HAL_I2C_Mem_Read>
	printf("cntl1 initial: %d \n", cntl1);
 80005ea:	7afb      	ldrb	r3, [r7, #11]
 80005ec:	4619      	mov	r1, r3
 80005ee:	4871      	ldr	r0, [pc, #452]	@ (80007b4 <main+0x2a8>)
 80005f0:	f004 fe90 	bl	8005314 <iprintf>

	// Reset register
	cntl1 = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(&hi2c1, (0b00011111 << 1) + 0, 0x1B, 1, &cntl1, 1, 100);
 80005f8:	2364      	movs	r3, #100	@ 0x64
 80005fa:	9302      	str	r3, [sp, #8]
 80005fc:	2301      	movs	r3, #1
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	f107 030b 	add.w	r3, r7, #11
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	221b      	movs	r2, #27
 800060a:	213e      	movs	r1, #62	@ 0x3e
 800060c:	4866      	ldr	r0, [pc, #408]	@ (80007a8 <main+0x29c>)
 800060e:	f000 ffc3 	bl	8001598 <HAL_I2C_Mem_Write>

	// Read for debugging purposes
	HAL_I2C_Mem_Read(&hi2c1, (0b00011111 << 1) + 1, 0x1B, 1, &cntl1, 1, 100);
 8000612:	2364      	movs	r3, #100	@ 0x64
 8000614:	9302      	str	r3, [sp, #8]
 8000616:	2301      	movs	r3, #1
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	f107 030b 	add.w	r3, r7, #11
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2301      	movs	r3, #1
 8000622:	221b      	movs	r2, #27
 8000624:	213f      	movs	r1, #63	@ 0x3f
 8000626:	4860      	ldr	r0, [pc, #384]	@ (80007a8 <main+0x29c>)
 8000628:	f001 f8ca 	bl	80017c0 <HAL_I2C_Mem_Read>
	printf("cntl1 after reset: %d \n", cntl1);
 800062c:	7afb      	ldrb	r3, [r7, #11]
 800062e:	4619      	mov	r1, r3
 8000630:	4861      	ldr	r0, [pc, #388]	@ (80007b8 <main+0x2ac>)
 8000632:	f004 fe6f 	bl	8005314 <iprintf>

	// Then, set everything we want besides most significant bit
	//	uint8_t new_cntl1 = 0b01010000 | cntl1; // +- 32 g range
	uint8_t new_cntl1 = 0b01001000 | cntl1; // +- 16 g range
 8000636:	7afb      	ldrb	r3, [r7, #11]
 8000638:	f043 0348 	orr.w	r3, r3, #72	@ 0x48
 800063c:	b2db      	uxtb	r3, r3
 800063e:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Mem_Write(&hi2c1, (0b00011111 << 1) + 0, 0x1B, 1, &new_cntl1, 1, 100);
 8000640:	2364      	movs	r3, #100	@ 0x64
 8000642:	9302      	str	r3, [sp, #8]
 8000644:	2301      	movs	r3, #1
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	f107 030a 	add.w	r3, r7, #10
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2301      	movs	r3, #1
 8000650:	221b      	movs	r2, #27
 8000652:	213e      	movs	r1, #62	@ 0x3e
 8000654:	4854      	ldr	r0, [pc, #336]	@ (80007a8 <main+0x29c>)
 8000656:	f000 ff9f 	bl	8001598 <HAL_I2C_Mem_Write>

	// Read for debugging purposes
	HAL_I2C_Mem_Read(&hi2c1, (0b00011111 << 1) + 1, 0x1B, 1, &cntl1, 1, 100);
 800065a:	2364      	movs	r3, #100	@ 0x64
 800065c:	9302      	str	r3, [sp, #8]
 800065e:	2301      	movs	r3, #1
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	f107 030b 	add.w	r3, r7, #11
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2301      	movs	r3, #1
 800066a:	221b      	movs	r2, #27
 800066c:	213f      	movs	r1, #63	@ 0x3f
 800066e:	484e      	ldr	r0, [pc, #312]	@ (80007a8 <main+0x29c>)
 8000670:	f001 f8a6 	bl	80017c0 <HAL_I2C_Mem_Read>
	printf("cntl1 after settings before enable: %d \n", cntl1);
 8000674:	7afb      	ldrb	r3, [r7, #11]
 8000676:	4619      	mov	r1, r3
 8000678:	4850      	ldr	r0, [pc, #320]	@ (80007bc <main+0x2b0>)
 800067a:	f004 fe4b 	bl	8005314 <iprintf>

	// Set the most significant bit to 1 to enable accelerometer
	new_cntl1 = 0b10000000 | cntl1;
 800067e:	7afb      	ldrb	r3, [r7, #11]
 8000680:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000684:	b2db      	uxtb	r3, r3
 8000686:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Mem_Write(&hi2c1, (0b00011111 << 1) + 0, 0x1B, 1, &new_cntl1, 1, 100);
 8000688:	2364      	movs	r3, #100	@ 0x64
 800068a:	9302      	str	r3, [sp, #8]
 800068c:	2301      	movs	r3, #1
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	f107 030a 	add.w	r3, r7, #10
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	221b      	movs	r2, #27
 800069a:	213e      	movs	r1, #62	@ 0x3e
 800069c:	4842      	ldr	r0, [pc, #264]	@ (80007a8 <main+0x29c>)
 800069e:	f000 ff7b 	bl	8001598 <HAL_I2C_Mem_Write>

	// Read for debugging purposes
	HAL_I2C_Mem_Read(&hi2c1, (0b00011111 << 1) + 1, 0x1B, 1, &cntl1, 1, 100);
 80006a2:	2364      	movs	r3, #100	@ 0x64
 80006a4:	9302      	str	r3, [sp, #8]
 80006a6:	2301      	movs	r3, #1
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	f107 030b 	add.w	r3, r7, #11
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2301      	movs	r3, #1
 80006b2:	221b      	movs	r2, #27
 80006b4:	213f      	movs	r1, #63	@ 0x3f
 80006b6:	483c      	ldr	r0, [pc, #240]	@ (80007a8 <main+0x29c>)
 80006b8:	f001 f882 	bl	80017c0 <HAL_I2C_Mem_Read>
	printf("cntl1 after enable: %d \n", cntl1);
 80006bc:	7afb      	ldrb	r3, [r7, #11]
 80006be:	4619      	mov	r1, r3
 80006c0:	483f      	ldr	r0, [pc, #252]	@ (80007c0 <main+0x2b4>)
 80006c2:	f004 fe27 	bl	8005314 <iprintf>

	// vars for while loop
	uint8_t data[6];
	int16_t x_acc = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	83fb      	strh	r3, [r7, #30]
	int16_t y_acc = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	83bb      	strh	r3, [r7, #28]
	int16_t z_acc = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	847b      	strh	r3, [r7, #34]	@ 0x22
	float x_accel_converted = 0.0;
 80006d2:	f04f 0300 	mov.w	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
	float y_accel_converted = 0.0;
 80006d8:	f04f 0300 	mov.w	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
	float z_accel_converted = 0.0;
 80006de:	f04f 0300 	mov.w	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_I2C_Mem_Read(&hi2c1, (0b00011111 << 1) + 1, 0x08, 1, data, 6, 100);
 80006e4:	2364      	movs	r3, #100	@ 0x64
 80006e6:	9302      	str	r3, [sp, #8]
 80006e8:	2306      	movs	r3, #6
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	2208      	movs	r2, #8
 80006f4:	213f      	movs	r1, #63	@ 0x3f
 80006f6:	482c      	ldr	r0, [pc, #176]	@ (80007a8 <main+0x29c>)
 80006f8:	f001 f862 	bl	80017c0 <HAL_I2C_Mem_Read>

		x_acc = (data[1] << 8) + data[0];
 80006fc:	797b      	ldrb	r3, [r7, #5]
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	b29b      	uxth	r3, r3
 8000702:	793a      	ldrb	r2, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	b29b      	uxth	r3, r3
 8000708:	83fb      	strh	r3, [r7, #30]
		x_accel_converted = z_acc * ((float)(15.99951 / 32767.0));
 800070a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800070e:	ee07 3a90 	vmov	s15, r3
 8000712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000716:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80007c4 <main+0x2b8>
 800071a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800071e:	edc7 7a06 	vstr	s15, [r7, #24]

		y_acc = (data[3] << 8) + data[2];
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	b29b      	uxth	r3, r3
 8000728:	79ba      	ldrb	r2, [r7, #6]
 800072a:	4413      	add	r3, r2
 800072c:	b29b      	uxth	r3, r3
 800072e:	83bb      	strh	r3, [r7, #28]
		y_accel_converted = z_acc * ((float)(15.99951 / 32767.0));
 8000730:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000734:	ee07 3a90 	vmov	s15, r3
 8000738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800073c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80007c4 <main+0x2b8>
 8000740:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000744:	edc7 7a05 	vstr	s15, [r7, #20]

		z_acc = (data[5] << 8) + data[4];
 8000748:	7a7b      	ldrb	r3, [r7, #9]
 800074a:	021b      	lsls	r3, r3, #8
 800074c:	b29b      	uxth	r3, r3
 800074e:	7a3a      	ldrb	r2, [r7, #8]
 8000750:	4413      	add	r3, r2
 8000752:	b29b      	uxth	r3, r3
 8000754:	847b      	strh	r3, [r7, #34]	@ 0x22
//		z_accel_converted = z_acc * ((float)(31.99902 / 32767.0));
		z_accel_converted = z_acc * ((float)(15.99951 / 32767.0));
 8000756:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800075a:	ee07 3a90 	vmov	s15, r3
 800075e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000762:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80007c4 <main+0x2b8>
 8000766:	ee67 7a87 	vmul.f32	s15, s15, s14
 800076a:	edc7 7a04 	vstr	s15, [r7, #16]

		printf("X Accel: %f, Y Accel: %f, Z Accel: %f \n", x_accel_converted, y_accel_converted, z_accel_converted);
 800076e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000772:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000776:	edd7 7a05 	vldr	s15, [r7, #20]
 800077a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800077e:	edd7 6a04 	vldr	s13, [r7, #16]
 8000782:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000786:	ed8d 6b02 	vstr	d6, [sp, #8]
 800078a:	ed8d 7b00 	vstr	d7, [sp]
 800078e:	ec53 2b15 	vmov	r2, r3, d5
 8000792:	480d      	ldr	r0, [pc, #52]	@ (80007c8 <main+0x2bc>)
 8000794:	f004 fdbe 	bl	8005314 <iprintf>
//		printf("Z Accel float: %0.6f, Z Accel int: %d, MSB: %d, LSM: %d \n", z_accel_converted, z_acc, data[1], data[0]);
		HAL_Delay(500);
 8000798:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800079c:	f000 fb54 	bl	8000e48 <HAL_Delay>
		HAL_I2C_Mem_Read(&hi2c1, (0b00011111 << 1) + 1, 0x08, 1, data, 6, 100);
 80007a0:	bf00      	nop
 80007a2:	e79f      	b.n	80006e4 <main+0x1d8>
 80007a4:	58024400 	.word	0x58024400
 80007a8:	240001f4 	.word	0x240001f4
 80007ac:	08007200 	.word	0x08007200
 80007b0:	08007218 	.word	0x08007218
 80007b4:	08007234 	.word	0x08007234
 80007b8:	08007248 	.word	0x08007248
 80007bc:	08007260 	.word	0x08007260
 80007c0:	0800728c 	.word	0x0800728c
 80007c4:	39fffffe 	.word	0x39fffffe
 80007c8:	080072a8 	.word	0x080072a8

080007cc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09c      	sub	sp, #112	@ 0x70
 80007d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d6:	224c      	movs	r2, #76	@ 0x4c
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f004 fee2 	bl	80055a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2220      	movs	r2, #32
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 fedc 	bl	80055a4 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007ec:	2004      	movs	r0, #4
 80007ee:	f001 fd47 	bl	8002280 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b28      	ldr	r3, [pc, #160]	@ (8000898 <SystemClock_Config+0xcc>)
 80007f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007fa:	4a27      	ldr	r2, [pc, #156]	@ (8000898 <SystemClock_Config+0xcc>)
 80007fc:	f023 0301 	bic.w	r3, r3, #1
 8000800:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000802:	4b25      	ldr	r3, [pc, #148]	@ (8000898 <SystemClock_Config+0xcc>)
 8000804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	4b23      	ldr	r3, [pc, #140]	@ (800089c <SystemClock_Config+0xd0>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000814:	4a21      	ldr	r2, [pc, #132]	@ (800089c <SystemClock_Config+0xd0>)
 8000816:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b1f      	ldr	r3, [pc, #124]	@ (800089c <SystemClock_Config+0xd0>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000828:	bf00      	nop
 800082a:	4b1c      	ldr	r3, [pc, #112]	@ (800089c <SystemClock_Config+0xd0>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000836:	d1f8      	bne.n	800082a <SystemClock_Config+0x5e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000838:	2302      	movs	r3, #2
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800083c:	2301      	movs	r3, #1
 800083e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000840:	2340      	movs	r3, #64	@ 0x40
 8000842:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000844:	2300      	movs	r3, #0
 8000846:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fd71 	bl	8002334 <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x90>
	{
		Error_Handler();
 8000858:	f000 f8d8 	bl	8000a0c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	233f      	movs	r3, #63	@ 0x3f
 800085e:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000870:	2340      	movs	r3, #64	@ 0x40
 8000872:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2101      	movs	r1, #1
 8000880:	4618      	mov	r0, r3
 8000882:	f002 f9b1 	bl	8002be8 <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 800088c:	f000 f8be 	bl	8000a0c <Error_Handler>
	}
}
 8000890:	bf00      	nop
 8000892:	3770      	adds	r7, #112	@ 0x70
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	58000400 	.word	0x58000400
 800089c:	58024800 	.word	0x58024800

080008a0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000918 <MX_I2C1_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00707CBB;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008ac:	4a1b      	ldr	r2, [pc, #108]	@ (800091c <MX_I2C1_Init+0x7c>)
 80008ae:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80008b0:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b6:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008da:	480e      	ldr	r0, [pc, #56]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008dc:	f000 fdc0 	bl	8001460 <HAL_I2C_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80008e6:	f000 f891 	bl	8000a0c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4809      	ldr	r0, [pc, #36]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008ee:	f001 fc2f 	bl	8002150 <HAL_I2CEx_ConfigAnalogFilter>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 80008f8:	f000 f888 	bl	8000a0c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_I2C1_Init+0x74>)
 8000900:	f001 fc71 	bl	80021e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 800090a:	f000 f87f 	bl	8000a0c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	240001f4 	.word	0x240001f4
 8000918:	40005400 	.word	0x40005400
 800091c:	00707cbb 	.word	0x00707cbb

08000920 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b24      	ldr	r3, [pc, #144]	@ (80009c8 <MX_GPIO_Init+0xa8>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093c:	4a22      	ldr	r2, [pc, #136]	@ (80009c8 <MX_GPIO_Init+0xa8>)
 800093e:	f043 0302 	orr.w	r3, r3, #2
 8000942:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000946:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <MX_GPIO_Init+0xa8>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000954:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <MX_GPIO_Init+0xa8>)
 8000956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095a:	4a1b      	ldr	r2, [pc, #108]	@ (80009c8 <MX_GPIO_Init+0xa8>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <MX_GPIO_Init+0xa8>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096a:	f003 0310 	and.w	r3, r3, #16
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2101      	movs	r1, #1
 8000976:	4815      	ldr	r0, [pc, #84]	@ (80009cc <MX_GPIO_Init+0xac>)
 8000978:	f000 fd2a 	bl	80013d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2102      	movs	r1, #2
 8000980:	4813      	ldr	r0, [pc, #76]	@ (80009d0 <MX_GPIO_Init+0xb0>)
 8000982:	f000 fd25 	bl	80013d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000986:	2301      	movs	r3, #1
 8000988:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	4619      	mov	r1, r3
 800099c:	480b      	ldr	r0, [pc, #44]	@ (80009cc <MX_GPIO_Init+0xac>)
 800099e:	f000 fb67 	bl	8001070 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009a2:	2302      	movs	r3, #2
 80009a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <MX_GPIO_Init+0xb0>)
 80009ba:	f000 fb59 	bl	8001070 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80009be:	bf00      	nop
 80009c0:	3720      	adds	r7, #32
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	58024400 	.word	0x58024400
 80009cc:	58020400 	.word	0x58020400
 80009d0:	58021000 	.word	0x58021000

080009d4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	e009      	b.n	80009fa <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	1c5a      	adds	r2, r3, #1
 80009ea:	60ba      	str	r2, [r7, #8]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fd64 	bl	80004bc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	3301      	adds	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	dbf1      	blt.n	80009e6 <_write+0x12>
	}
	return len;
 8000a02:	687b      	ldr	r3, [r7, #4]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <Error_Handler+0x8>

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <HAL_MspInit+0x30>)
 8000a20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a24:	4a08      	ldr	r2, [pc, #32]	@ (8000a48 <HAL_MspInit+0x30>)
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_MspInit+0x30>)
 8000a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	58024400 	.word	0x58024400

08000a4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b0ba      	sub	sp, #232	@ 0xe8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	22c0      	movs	r2, #192	@ 0xc0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f004 fd99 	bl	80055a4 <memset>
  if(hi2c->Instance==I2C1)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a26      	ldr	r2, [pc, #152]	@ (8000b10 <HAL_I2C_MspInit+0xc4>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d145      	bne.n	8000b08 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a7c:	f04f 0208 	mov.w	r2, #8
 8000a80:	f04f 0300 	mov.w	r3, #0
 8000a84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 fbd8 	bl	8003248 <HAL_RCCEx_PeriphCLKConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000a9e:	f7ff ffb5 	bl	8000a0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <HAL_I2C_MspInit+0xc8>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8000b14 <HAL_I2C_MspInit+0xc8>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab2:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <HAL_I2C_MspInit+0xc8>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	f003 0302 	and.w	r3, r3, #2
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ac0:	23c0      	movs	r3, #192	@ 0xc0
 8000ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac6:	2312      	movs	r3, #18
 8000ac8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480c      	ldr	r0, [pc, #48]	@ (8000b18 <HAL_I2C_MspInit+0xcc>)
 8000ae6:	f000 fac3 	bl	8001070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <HAL_I2C_MspInit+0xc8>)
 8000aec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000af0:	4a08      	ldr	r2, [pc, #32]	@ (8000b14 <HAL_I2C_MspInit+0xc8>)
 8000af2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000af6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000afa:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <HAL_I2C_MspInit+0xc8>)
 8000afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b08:	bf00      	nop
 8000b0a:	37e8      	adds	r7, #232	@ 0xe8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40005400 	.word	0x40005400
 8000b14:	58024400 	.word	0x58024400
 8000b18:	58020400 	.word	0x58020400

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <NMI_Handler+0x4>

08000b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <MemManage_Handler+0x4>

08000b34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b72:	f000 f949 	bl	8000e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  return 1;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <_kill>:

int _kill(int pid, int sig)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b94:	f004 fd58 	bl	8005648 <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2216      	movs	r2, #22
 8000b9c:	601a      	str	r2, [r3, #0]
  return -1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_exit>:

void _exit (int status)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bb2:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffe7 	bl	8000b8a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <_exit+0x12>

08000bc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	e00a      	b.n	8000be8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bd2:	f3af 8000 	nop.w
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	b2ca      	uxtb	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbf0      	blt.n	8000bd2 <_read+0x12>
  }

  return len;
 8000bf0:	687b      	ldr	r3, [r7, #4]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c22:	605a      	str	r2, [r3, #4]
  return 0;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <_isatty>:

int _isatty(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	@ (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d207      	bcs.n	8000ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c94:	f004 fcd8 	bl	8005648 <__errno>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a05      	ldr	r2, [pc, #20]	@ (8000cc8 <_sbrk+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	24080000 	.word	0x24080000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	24000248 	.word	0x24000248
 8000ccc:	240003a0 	.word	0x240003a0

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cd4:	f7ff fb5c 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	@ (8000d10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f004 fca9 	bl	8005654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d02:	f7ff fc03 	bl	800050c <main>
  bx  lr
 8000d06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d08:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d0c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d10:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8000d14:	08007660 	.word	0x08007660
  ldr r2, =_sbss
 8000d18:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8000d1c:	2400039c 	.word	0x2400039c

08000d20 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC3_IRQHandler>
	...

08000d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	f000 f96e 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d30:	f002 f910 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8000d34:	4602      	mov	r2, r0
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <HAL_Init+0x68>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	0a1b      	lsrs	r3, r3, #8
 8000d3c:	f003 030f 	and.w	r3, r3, #15
 8000d40:	4913      	ldr	r1, [pc, #76]	@ (8000d90 <HAL_Init+0x6c>)
 8000d42:	5ccb      	ldrb	r3, [r1, r3]
 8000d44:	f003 031f 	and.w	r3, r3, #31
 8000d48:	fa22 f303 	lsr.w	r3, r2, r3
 8000d4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <HAL_Init+0x68>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	4a0e      	ldr	r2, [pc, #56]	@ (8000d90 <HAL_Init+0x6c>)
 8000d58:	5cd3      	ldrb	r3, [r2, r3]
 8000d5a:	f003 031f 	and.w	r3, r3, #31
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	fa22 f303 	lsr.w	r3, r2, r3
 8000d64:	4a0b      	ldr	r2, [pc, #44]	@ (8000d94 <HAL_Init+0x70>)
 8000d66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d68:	4a0b      	ldr	r2, [pc, #44]	@ (8000d98 <HAL_Init+0x74>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 f814 	bl	8000d9c <HAL_InitTick>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e002      	b.n	8000d84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7e:	f7ff fe4b 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	58024400 	.word	0x58024400
 8000d90:	080072d0 	.word	0x080072d0
 8000d94:	24000004 	.word	0x24000004
 8000d98:	24000000 	.word	0x24000000

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000da4:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <HAL_InitTick+0x60>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d101      	bne.n	8000db0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e021      	b.n	8000df4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000db0:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <HAL_InitTick+0x64>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <HAL_InitTick+0x60>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f945 	bl	8001056 <HAL_SYSTICK_Config>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00e      	b.n	8000df4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d80a      	bhi.n	8000df2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f000 f91d 	bl	8001022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de8:	4a06      	ldr	r2, [pc, #24]	@ (8000e04 <HAL_InitTick+0x68>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e000      	b.n	8000df4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	2400000c 	.word	0x2400000c
 8000e00:	24000000 	.word	0x24000000
 8000e04:	24000008 	.word	0x24000008

08000e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_IncTick+0x20>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <HAL_IncTick+0x24>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a04      	ldr	r2, [pc, #16]	@ (8000e2c <HAL_IncTick+0x24>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	2400000c 	.word	0x2400000c
 8000e2c:	2400024c 	.word	0x2400024c

08000e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b03      	ldr	r3, [pc, #12]	@ (8000e44 <HAL_GetTick+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	2400024c 	.word	0x2400024c

08000e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e50:	f7ff ffee 	bl	8000e30 <HAL_GetTick>
 8000e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e60:	d005      	beq.n	8000e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e62:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <HAL_Delay+0x44>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e6e:	bf00      	nop
 8000e70:	f7ff ffde 	bl	8000e30 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d8f7      	bhi.n	8000e70 <HAL_Delay+0x28>
  {
  }
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2400000c 	.word	0x2400000c

08000e90 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e94:	4b03      	ldr	r3, [pc, #12]	@ (8000ea4 <HAL_GetREVID+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	0c1b      	lsrs	r3, r3, #16
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	5c001000 	.word	0x5c001000

08000ea8 <__NVIC_SetPriorityGrouping>:
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <__NVIC_SetPriorityGrouping+0x40>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed6:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60d3      	str	r3, [r2, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00
 8000eec:	05fa0000 	.word	0x05fa0000

08000ef0 <__NVIC_GetPriorityGrouping>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_SetPriority>:
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	@ (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	@ (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	@ 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <SysTick_Config>:
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd8:	d301      	bcc.n	8000fde <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00f      	b.n	8000ffe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fde:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <SysTick_Config+0x40>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f7ff ff8e 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <SysTick_Config+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <SysTick_Config+0x40>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff47 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff5e 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff90 	bl	8000f60 <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5f 	bl	8000f0c <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffb2 	bl	8000fc8 <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	@ 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800107e:	4b89      	ldr	r3, [pc, #548]	@ (80012a4 <HAL_GPIO_Init+0x234>)
 8001080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001082:	e194      	b.n	80013ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	2101      	movs	r1, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 8186 	beq.w	80013a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d005      	beq.n	80010b4 <HAL_GPIO_Init+0x44>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d130      	bne.n	8001116 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ea:	2201      	movs	r2, #1
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	f003 0201 	and.w	r2, r3, #1
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	2b03      	cmp	r3, #3
 8001120:	d017      	beq.n	8001152 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d123      	bne.n	80011a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691a      	ldr	r2, [r3, #16]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	69b9      	ldr	r1, [r7, #24]
 80011a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0203 	and.w	r2, r3, #3
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 80e0 	beq.w	80013a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e8:	4b2f      	ldr	r3, [pc, #188]	@ (80012a8 <HAL_GPIO_Init+0x238>)
 80011ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011ee:	4a2e      	ldr	r2, [pc, #184]	@ (80012a8 <HAL_GPIO_Init+0x238>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011f8:	4b2b      	ldr	r3, [pc, #172]	@ (80012a8 <HAL_GPIO_Init+0x238>)
 80011fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001206:	4a29      	ldr	r2, [pc, #164]	@ (80012ac <HAL_GPIO_Init+0x23c>)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	220f      	movs	r2, #15
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a20      	ldr	r2, [pc, #128]	@ (80012b0 <HAL_GPIO_Init+0x240>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d052      	beq.n	80012d8 <HAL_GPIO_Init+0x268>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a1f      	ldr	r2, [pc, #124]	@ (80012b4 <HAL_GPIO_Init+0x244>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d031      	beq.n	800129e <HAL_GPIO_Init+0x22e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a1e      	ldr	r2, [pc, #120]	@ (80012b8 <HAL_GPIO_Init+0x248>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d02b      	beq.n	800129a <HAL_GPIO_Init+0x22a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a1d      	ldr	r2, [pc, #116]	@ (80012bc <HAL_GPIO_Init+0x24c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d025      	beq.n	8001296 <HAL_GPIO_Init+0x226>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a1c      	ldr	r2, [pc, #112]	@ (80012c0 <HAL_GPIO_Init+0x250>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d01f      	beq.n	8001292 <HAL_GPIO_Init+0x222>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a1b      	ldr	r2, [pc, #108]	@ (80012c4 <HAL_GPIO_Init+0x254>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x21e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a1a      	ldr	r2, [pc, #104]	@ (80012c8 <HAL_GPIO_Init+0x258>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x21a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a19      	ldr	r2, [pc, #100]	@ (80012cc <HAL_GPIO_Init+0x25c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x216>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a18      	ldr	r2, [pc, #96]	@ (80012d0 <HAL_GPIO_Init+0x260>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x212>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a17      	ldr	r2, [pc, #92]	@ (80012d4 <HAL_GPIO_Init+0x264>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x20e>
 800127a:	2309      	movs	r3, #9
 800127c:	e02d      	b.n	80012da <HAL_GPIO_Init+0x26a>
 800127e:	230a      	movs	r3, #10
 8001280:	e02b      	b.n	80012da <HAL_GPIO_Init+0x26a>
 8001282:	2308      	movs	r3, #8
 8001284:	e029      	b.n	80012da <HAL_GPIO_Init+0x26a>
 8001286:	2307      	movs	r3, #7
 8001288:	e027      	b.n	80012da <HAL_GPIO_Init+0x26a>
 800128a:	2306      	movs	r3, #6
 800128c:	e025      	b.n	80012da <HAL_GPIO_Init+0x26a>
 800128e:	2305      	movs	r3, #5
 8001290:	e023      	b.n	80012da <HAL_GPIO_Init+0x26a>
 8001292:	2304      	movs	r3, #4
 8001294:	e021      	b.n	80012da <HAL_GPIO_Init+0x26a>
 8001296:	2303      	movs	r3, #3
 8001298:	e01f      	b.n	80012da <HAL_GPIO_Init+0x26a>
 800129a:	2302      	movs	r3, #2
 800129c:	e01d      	b.n	80012da <HAL_GPIO_Init+0x26a>
 800129e:	2301      	movs	r3, #1
 80012a0:	e01b      	b.n	80012da <HAL_GPIO_Init+0x26a>
 80012a2:	bf00      	nop
 80012a4:	58000080 	.word	0x58000080
 80012a8:	58024400 	.word	0x58024400
 80012ac:	58000400 	.word	0x58000400
 80012b0:	58020000 	.word	0x58020000
 80012b4:	58020400 	.word	0x58020400
 80012b8:	58020800 	.word	0x58020800
 80012bc:	58020c00 	.word	0x58020c00
 80012c0:	58021000 	.word	0x58021000
 80012c4:	58021400 	.word	0x58021400
 80012c8:	58021800 	.word	0x58021800
 80012cc:	58021c00 	.word	0x58021c00
 80012d0:	58022000 	.word	0x58022000
 80012d4:	58022400 	.word	0x58022400
 80012d8:	2300      	movs	r3, #0
 80012da:	69fa      	ldr	r2, [r7, #28]
 80012dc:	f002 0203 	and.w	r2, r2, #3
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	4093      	lsls	r3, r2
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ea:	4938      	ldr	r1, [pc, #224]	@ (80013cc <HAL_GPIO_Init+0x35c>)
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800131e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001326:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800134c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	3301      	adds	r3, #1
 80013ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa22 f303 	lsr.w	r3, r2, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f47f ae63 	bne.w	8001084 <HAL_GPIO_Init+0x14>
  }
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3724      	adds	r7, #36	@ 0x24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	58000400 	.word	0x58000400

080013d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013e0:	787b      	ldrb	r3, [r7, #1]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80013ec:	e003      	b.n	80013f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	041a      	lsls	r2, r3, #16
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800140c:	4a08      	ldr	r2, [pc, #32]	@ (8001430 <HAL_HSEM_FastTake+0x2c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3320      	adds	r3, #32
 8001412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001416:	4a07      	ldr	r2, [pc, #28]	@ (8001434 <HAL_HSEM_FastTake+0x30>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d101      	bne.n	8001420 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	e000      	b.n	8001422 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	58026400 	.word	0x58026400
 8001434:	80000300 	.word	0x80000300

08001438 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001442:	4906      	ldr	r1, [pc, #24]	@ (800145c <HAL_HSEM_Release+0x24>)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	58026400 	.word	0x58026400

08001460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e08b      	b.n	800158a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fae0 	bl	8000a4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2224      	movs	r2, #36	@ 0x24
 8001490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0201 	bic.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d107      	bne.n	80014da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	e006      	b.n	80014e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80014e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d108      	bne.n	8001502 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	e007      	b.n	8001512 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001510:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <HAL_I2C_Init+0x134>)
 800151e:	430b      	orrs	r3, r1
 8001520:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001530:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691a      	ldr	r2, [r3, #16]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69d9      	ldr	r1, [r3, #28]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1a      	ldr	r2, [r3, #32]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2220      	movs	r2, #32
 8001576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	02008000 	.word	0x02008000

08001598 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af02      	add	r7, sp, #8
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	4608      	mov	r0, r1
 80015a2:	4611      	mov	r1, r2
 80015a4:	461a      	mov	r2, r3
 80015a6:	4603      	mov	r3, r0
 80015a8:	817b      	strh	r3, [r7, #10]
 80015aa:	460b      	mov	r3, r1
 80015ac:	813b      	strh	r3, [r7, #8]
 80015ae:	4613      	mov	r3, r2
 80015b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b20      	cmp	r3, #32
 80015bc:	f040 80f9 	bne.w	80017b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <HAL_I2C_Mem_Write+0x34>
 80015c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015d2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0ed      	b.n	80017b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d101      	bne.n	80015e6 <HAL_I2C_Mem_Write+0x4e>
 80015e2:	2302      	movs	r3, #2
 80015e4:	e0e6      	b.n	80017b4 <HAL_I2C_Mem_Write+0x21c>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015ee:	f7ff fc1f 	bl	8000e30 <HAL_GetTick>
 80015f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2319      	movs	r3, #25
 80015fa:	2201      	movs	r2, #1
 80015fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 fbaf 	bl	8001d64 <I2C_WaitOnFlagUntilTimeout>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0d1      	b.n	80017b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2221      	movs	r2, #33	@ 0x21
 8001614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2240      	movs	r2, #64	@ 0x40
 800161c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6a3a      	ldr	r2, [r7, #32]
 800162a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001630:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001638:	88f8      	ldrh	r0, [r7, #6]
 800163a:	893a      	ldrh	r2, [r7, #8]
 800163c:	8979      	ldrh	r1, [r7, #10]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	4603      	mov	r3, r0
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 fabf 	bl	8001bcc <I2C_RequestMemoryWrite>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0a9      	b.n	80017b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001664:	b29b      	uxth	r3, r3
 8001666:	2bff      	cmp	r3, #255	@ 0xff
 8001668:	d90e      	bls.n	8001688 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	22ff      	movs	r2, #255	@ 0xff
 800166e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001674:	b2da      	uxtb	r2, r3
 8001676:	8979      	ldrh	r1, [r7, #10]
 8001678:	2300      	movs	r3, #0
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f000 fd33 	bl	80020ec <I2C_TransferConfig>
 8001686:	e00f      	b.n	80016a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800168c:	b29a      	uxth	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001696:	b2da      	uxtb	r2, r3
 8001698:	8979      	ldrh	r1, [r7, #10]
 800169a:	2300      	movs	r3, #0
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 fd22 	bl	80020ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 fbb2 	bl	8001e16 <I2C_WaitOnTXISFlagUntilTimeout>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e07b      	b.n	80017b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c0:	781a      	ldrb	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016e4:	3b01      	subs	r3, #1
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d034      	beq.n	8001760 <HAL_I2C_Mem_Write+0x1c8>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d130      	bne.n	8001760 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	@ 0x80
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 fb2b 	bl	8001d64 <I2C_WaitOnFlagUntilTimeout>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e04d      	b.n	80017b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800171c:	b29b      	uxth	r3, r3
 800171e:	2bff      	cmp	r3, #255	@ 0xff
 8001720:	d90e      	bls.n	8001740 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	22ff      	movs	r2, #255	@ 0xff
 8001726:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800172c:	b2da      	uxtb	r2, r3
 800172e:	8979      	ldrh	r1, [r7, #10]
 8001730:	2300      	movs	r3, #0
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f000 fcd7 	bl	80020ec <I2C_TransferConfig>
 800173e:	e00f      	b.n	8001760 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001744:	b29a      	uxth	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800174e:	b2da      	uxtb	r2, r3
 8001750:	8979      	ldrh	r1, [r7, #10]
 8001752:	2300      	movs	r3, #0
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 fcc6 	bl	80020ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001764:	b29b      	uxth	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d19e      	bne.n	80016a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 fb98 	bl	8001ea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e01a      	b.n	80017b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2220      	movs	r2, #32
 8001784:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6859      	ldr	r1, [r3, #4]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <HAL_I2C_Mem_Write+0x224>)
 8001792:	400b      	ands	r3, r1
 8001794:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2220      	movs	r2, #32
 800179a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80017b2:	2302      	movs	r3, #2
  }
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	fe00e800 	.word	0xfe00e800

080017c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af02      	add	r7, sp, #8
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	4608      	mov	r0, r1
 80017ca:	4611      	mov	r1, r2
 80017cc:	461a      	mov	r2, r3
 80017ce:	4603      	mov	r3, r0
 80017d0:	817b      	strh	r3, [r7, #10]
 80017d2:	460b      	mov	r3, r1
 80017d4:	813b      	strh	r3, [r7, #8]
 80017d6:	4613      	mov	r3, r2
 80017d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	f040 80fd 	bne.w	80019e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <HAL_I2C_Mem_Read+0x34>
 80017ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d105      	bne.n	8001800 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0f1      	b.n	80019e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_I2C_Mem_Read+0x4e>
 800180a:	2302      	movs	r3, #2
 800180c:	e0ea      	b.n	80019e4 <HAL_I2C_Mem_Read+0x224>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001816:	f7ff fb0b 	bl	8000e30 <HAL_GetTick>
 800181a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2319      	movs	r3, #25
 8001822:	2201      	movs	r2, #1
 8001824:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 fa9b 	bl	8001d64 <I2C_WaitOnFlagUntilTimeout>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0d5      	b.n	80019e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2222      	movs	r2, #34	@ 0x22
 800183c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2240      	movs	r2, #64	@ 0x40
 8001844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a3a      	ldr	r2, [r7, #32]
 8001852:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001858:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001860:	88f8      	ldrh	r0, [r7, #6]
 8001862:	893a      	ldrh	r2, [r7, #8]
 8001864:	8979      	ldrh	r1, [r7, #10]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	4603      	mov	r3, r0
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f000 f9ff 	bl	8001c74 <I2C_RequestMemoryRead>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0ad      	b.n	80019e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800188c:	b29b      	uxth	r3, r3
 800188e:	2bff      	cmp	r3, #255	@ 0xff
 8001890:	d90e      	bls.n	80018b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	22ff      	movs	r2, #255	@ 0xff
 8001896:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800189c:	b2da      	uxtb	r2, r3
 800189e:	8979      	ldrh	r1, [r7, #10]
 80018a0:	4b52      	ldr	r3, [pc, #328]	@ (80019ec <HAL_I2C_Mem_Read+0x22c>)
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 fc1f 	bl	80020ec <I2C_TransferConfig>
 80018ae:	e00f      	b.n	80018d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	8979      	ldrh	r1, [r7, #10]
 80018c2:	4b4a      	ldr	r3, [pc, #296]	@ (80019ec <HAL_I2C_Mem_Read+0x22c>)
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f000 fc0e 	bl	80020ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d6:	2200      	movs	r2, #0
 80018d8:	2104      	movs	r1, #4
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 fa42 	bl	8001d64 <I2C_WaitOnFlagUntilTimeout>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e07c      	b.n	80019e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001906:	3b01      	subs	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001920:	b29b      	uxth	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d034      	beq.n	8001990 <HAL_I2C_Mem_Read+0x1d0>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800192a:	2b00      	cmp	r3, #0
 800192c:	d130      	bne.n	8001990 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001934:	2200      	movs	r2, #0
 8001936:	2180      	movs	r1, #128	@ 0x80
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 fa13 	bl	8001d64 <I2C_WaitOnFlagUntilTimeout>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e04d      	b.n	80019e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800194c:	b29b      	uxth	r3, r3
 800194e:	2bff      	cmp	r3, #255	@ 0xff
 8001950:	d90e      	bls.n	8001970 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	22ff      	movs	r2, #255	@ 0xff
 8001956:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800195c:	b2da      	uxtb	r2, r3
 800195e:	8979      	ldrh	r1, [r7, #10]
 8001960:	2300      	movs	r3, #0
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 fbbf 	bl	80020ec <I2C_TransferConfig>
 800196e:	e00f      	b.n	8001990 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001974:	b29a      	uxth	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800197e:	b2da      	uxtb	r2, r3
 8001980:	8979      	ldrh	r1, [r7, #10]
 8001982:	2300      	movs	r3, #0
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fbae 	bl	80020ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001994:	b29b      	uxth	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d19a      	bne.n	80018d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 fa80 	bl	8001ea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e01a      	b.n	80019e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2220      	movs	r2, #32
 80019b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6859      	ldr	r1, [r3, #4]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <HAL_I2C_Mem_Read+0x230>)
 80019c2:	400b      	ands	r3, r1
 80019c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2220      	movs	r2, #32
 80019ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e000      	b.n	80019e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80019e2:	2302      	movs	r3, #2
  }
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	80002400 	.word	0x80002400
 80019f0:	fe00e800 	.word	0xfe00e800

080019f4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	@ 0x28
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	460b      	mov	r3, r1
 8001a02:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b20      	cmp	r3, #32
 8001a12:	f040 80d2 	bne.w	8001bba <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a24:	d101      	bne.n	8001a2a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001a26:	2302      	movs	r3, #2
 8001a28:	e0c8      	b.n	8001bbc <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_I2C_IsDeviceReady+0x44>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e0c1      	b.n	8001bbc <HAL_I2C_IsDeviceReady+0x1c8>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2224      	movs	r2, #36	@ 0x24
 8001a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d105      	bne.n	8001a62 <HAL_I2C_IsDeviceReady+0x6e>
 8001a56:	897b      	ldrh	r3, [r7, #10]
 8001a58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a5c:	4b59      	ldr	r3, [pc, #356]	@ (8001bc4 <HAL_I2C_IsDeviceReady+0x1d0>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	e004      	b.n	8001a6c <HAL_I2C_IsDeviceReady+0x78>
 8001a62:	897b      	ldrh	r3, [r7, #10]
 8001a64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a68:	4b57      	ldr	r3, [pc, #348]	@ (8001bc8 <HAL_I2C_IsDeviceReady+0x1d4>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001a72:	f7ff f9dd 	bl	8000e30 <HAL_GetTick>
 8001a76:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f003 0320 	and.w	r3, r3, #32
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	bf0c      	ite	eq
 8001a86:	2301      	moveq	r3, #1
 8001a88:	2300      	movne	r3, #0
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b10      	cmp	r3, #16
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2301      	moveq	r3, #1
 8001a9e:	2300      	movne	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001aa4:	e034      	b.n	8001b10 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d01a      	beq.n	8001ae4 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001aae:	f7ff f9bf 	bl	8000e30 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d302      	bcc.n	8001ac4 <HAL_I2C_IsDeviceReady+0xd0>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10f      	bne.n	8001ae4 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad0:	f043 0220 	orr.w	r2, r3, #32
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e06b      	b.n	8001bbc <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	f003 0320 	and.w	r3, r3, #32
 8001aee:	2b20      	cmp	r3, #32
 8001af0:	bf0c      	ite	eq
 8001af2:	2301      	moveq	r3, #1
 8001af4:	2300      	movne	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	2b10      	cmp	r3, #16
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b10:	7ffb      	ldrb	r3, [r7, #31]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d102      	bne.n	8001b1c <HAL_I2C_IsDeviceReady+0x128>
 8001b16:	7fbb      	ldrb	r3, [r7, #30]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0c4      	beq.n	8001aa6 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	2b10      	cmp	r3, #16
 8001b28:	d01a      	beq.n	8001b60 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2200      	movs	r2, #0
 8001b32:	2120      	movs	r1, #32
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 f915 	bl	8001d64 <I2C_WaitOnFlagUntilTimeout>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e03b      	b.n	8001bbc <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e02d      	b.n	8001bbc <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	2200      	movs	r2, #0
 8001b68:	2120      	movs	r1, #32
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 f8fa 	bl	8001d64 <I2C_WaitOnFlagUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e020      	b.n	8001bbc <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2210      	movs	r2, #16
 8001b80:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2220      	movs	r2, #32
 8001b88:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	f63f af5a 	bhi.w	8001a4e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	f043 0220 	orr.w	r2, r3, #32
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8001bba:	2302      	movs	r3, #2
  }
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	02002000 	.word	0x02002000
 8001bc8:	02002800 	.word	0x02002800

08001bcc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	4608      	mov	r0, r1
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4603      	mov	r3, r0
 8001bdc:	817b      	strh	r3, [r7, #10]
 8001bde:	460b      	mov	r3, r1
 8001be0:	813b      	strh	r3, [r7, #8]
 8001be2:	4613      	mov	r3, r2
 8001be4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	8979      	ldrh	r1, [r7, #10]
 8001bec:	4b20      	ldr	r3, [pc, #128]	@ (8001c70 <I2C_RequestMemoryWrite+0xa4>)
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 fa79 	bl	80020ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bfa:	69fa      	ldr	r2, [r7, #28]
 8001bfc:	69b9      	ldr	r1, [r7, #24]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 f909 	bl	8001e16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e02c      	b.n	8001c68 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c14:	893b      	ldrh	r3, [r7, #8]
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c1e:	e015      	b.n	8001c4c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c20:	893b      	ldrh	r3, [r7, #8]
 8001c22:	0a1b      	lsrs	r3, r3, #8
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	69b9      	ldr	r1, [r7, #24]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f8ef 	bl	8001e16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e012      	b.n	8001c68 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c42:	893b      	ldrh	r3, [r7, #8]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2200      	movs	r2, #0
 8001c54:	2180      	movs	r1, #128	@ 0x80
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 f884 	bl	8001d64 <I2C_WaitOnFlagUntilTimeout>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	80002000 	.word	0x80002000

08001c74 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af02      	add	r7, sp, #8
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	4611      	mov	r1, r2
 8001c80:	461a      	mov	r2, r3
 8001c82:	4603      	mov	r3, r0
 8001c84:	817b      	strh	r3, [r7, #10]
 8001c86:	460b      	mov	r3, r1
 8001c88:	813b      	strh	r3, [r7, #8]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	8979      	ldrh	r1, [r7, #10]
 8001c94:	4b20      	ldr	r3, [pc, #128]	@ (8001d18 <I2C_RequestMemoryRead+0xa4>)
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 fa26 	bl	80020ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	69b9      	ldr	r1, [r7, #24]
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f8b6 	bl	8001e16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e02c      	b.n	8001d0e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d105      	bne.n	8001cc6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cba:	893b      	ldrh	r3, [r7, #8]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cc4:	e015      	b.n	8001cf2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cc6:	893b      	ldrh	r3, [r7, #8]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cd4:	69fa      	ldr	r2, [r7, #28]
 8001cd6:	69b9      	ldr	r1, [r7, #24]
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 f89c 	bl	8001e16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e012      	b.n	8001d0e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ce8:	893b      	ldrh	r3, [r7, #8]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2140      	movs	r1, #64	@ 0x40
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f000 f831 	bl	8001d64 <I2C_WaitOnFlagUntilTimeout>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	80002000 	.word	0x80002000

08001d1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d103      	bne.n	8001d3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2200      	movs	r2, #0
 8001d38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d007      	beq.n	8001d58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699a      	ldr	r2, [r3, #24]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	619a      	str	r2, [r3, #24]
  }
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	4613      	mov	r3, r2
 8001d72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d74:	e03b      	b.n	8001dee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	6839      	ldr	r1, [r7, #0]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f8d6 	bl	8001f2c <I2C_IsErrorOccurred>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e041      	b.n	8001e0e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d02d      	beq.n	8001dee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d92:	f7ff f84d 	bl	8000e30 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d302      	bcc.n	8001da8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d122      	bne.n	8001dee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699a      	ldr	r2, [r3, #24]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	4013      	ands	r3, r2
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	bf0c      	ite	eq
 8001db8:	2301      	moveq	r3, #1
 8001dba:	2300      	movne	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d113      	bne.n	8001dee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	f043 0220 	orr.w	r2, r3, #32
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699a      	ldr	r2, [r3, #24]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	4013      	ands	r3, r2
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	bf0c      	ite	eq
 8001dfe:	2301      	moveq	r3, #1
 8001e00:	2300      	movne	r3, #0
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d0b4      	beq.n	8001d76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e22:	e033      	b.n	8001e8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	68b9      	ldr	r1, [r7, #8]
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f000 f87f 	bl	8001f2c <I2C_IsErrorOccurred>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e031      	b.n	8001e9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3e:	d025      	beq.n	8001e8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e40:	f7fe fff6 	bl	8000e30 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d302      	bcc.n	8001e56 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d11a      	bne.n	8001e8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d013      	beq.n	8001e8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e68:	f043 0220 	orr.w	r2, r3, #32
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e007      	b.n	8001e9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d1c4      	bne.n	8001e24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eb0:	e02f      	b.n	8001f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f838 	bl	8001f2c <I2C_IsErrorOccurred>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e02d      	b.n	8001f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ec6:	f7fe ffb3 	bl	8000e30 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d302      	bcc.n	8001edc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d11a      	bne.n	8001f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f003 0320 	and.w	r3, r3, #32
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	d013      	beq.n	8001f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	f043 0220 	orr.w	r2, r3, #32
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e007      	b.n	8001f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d1c8      	bne.n	8001eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	@ 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d068      	beq.n	800202a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2210      	movs	r2, #16
 8001f5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f60:	e049      	b.n	8001ff6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d045      	beq.n	8001ff6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f6a:	f7fe ff61 	bl	8000e30 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d302      	bcc.n	8001f80 <I2C_IsErrorOccurred+0x54>
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d13a      	bne.n	8001ff6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fa2:	d121      	bne.n	8001fe8 <I2C_IsErrorOccurred+0xbc>
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001faa:	d01d      	beq.n	8001fe8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001fac:	7cfb      	ldrb	r3, [r7, #19]
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d01a      	beq.n	8001fe8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fc0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001fc2:	f7fe ff35 	bl	8000e30 <HAL_GetTick>
 8001fc6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fc8:	e00e      	b.n	8001fe8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001fca:	f7fe ff31 	bl	8000e30 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b19      	cmp	r3, #25
 8001fd6:	d907      	bls.n	8001fe8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	f043 0320 	orr.w	r3, r3, #32
 8001fde:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001fe6:	e006      	b.n	8001ff6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	d1e9      	bne.n	8001fca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0320 	and.w	r3, r3, #32
 8002000:	2b20      	cmp	r3, #32
 8002002:	d003      	beq.n	800200c <I2C_IsErrorOccurred+0xe0>
 8002004:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0aa      	beq.n	8001f62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800200c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002010:	2b00      	cmp	r3, #0
 8002012:	d103      	bne.n	800201c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2220      	movs	r2, #32
 800201a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00b      	beq.n	8002054 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800204c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	f043 0308 	orr.w	r3, r3, #8
 8002064:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800206e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00b      	beq.n	8002098 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	f043 0302 	orr.w	r3, r3, #2
 8002086:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002090:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01c      	beq.n	80020da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f7ff fe3b 	bl	8001d1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b0d      	ldr	r3, [pc, #52]	@ (80020e8 <I2C_IsErrorOccurred+0x1bc>)
 80020b2:	400b      	ands	r3, r1
 80020b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	431a      	orrs	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80020da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3728      	adds	r7, #40	@ 0x28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	fe00e800 	.word	0xfe00e800

080020ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	817b      	strh	r3, [r7, #10]
 80020fa:	4613      	mov	r3, r2
 80020fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020fe:	897b      	ldrh	r3, [r7, #10]
 8002100:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002104:	7a7b      	ldrb	r3, [r7, #9]
 8002106:	041b      	lsls	r3, r3, #16
 8002108:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800210c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	4313      	orrs	r3, r2
 8002116:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800211a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	0d5b      	lsrs	r3, r3, #21
 8002126:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800212a:	4b08      	ldr	r3, [pc, #32]	@ (800214c <I2C_TransferConfig+0x60>)
 800212c:	430b      	orrs	r3, r1
 800212e:	43db      	mvns	r3, r3
 8002130:	ea02 0103 	and.w	r1, r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	430a      	orrs	r2, r1
 800213c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800213e:	bf00      	nop
 8002140:	371c      	adds	r7, #28
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	03ff63ff 	.word	0x03ff63ff

08002150 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b20      	cmp	r3, #32
 8002164:	d138      	bne.n	80021d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002170:	2302      	movs	r3, #2
 8002172:	e032      	b.n	80021da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2224      	movs	r2, #36	@ 0x24
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80021a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6819      	ldr	r1, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	e000      	b.n	80021da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021d8:	2302      	movs	r3, #2
  }
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	d139      	bne.n	8002270 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002206:	2302      	movs	r3, #2
 8002208:	e033      	b.n	8002272 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2224      	movs	r2, #36	@ 0x24
 8002216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002238:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	021b      	lsls	r3, r3, #8
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4313      	orrs	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	e000      	b.n	8002272 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002270:	2302      	movs	r3, #2
  }
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002288:	4b29      	ldr	r3, [pc, #164]	@ (8002330 <HAL_PWREx_ConfigSupply+0xb0>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	2b06      	cmp	r3, #6
 8002292:	d00a      	beq.n	80022aa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002294:	4b26      	ldr	r3, [pc, #152]	@ (8002330 <HAL_PWREx_ConfigSupply+0xb0>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d001      	beq.n	80022a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e040      	b.n	8002328 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e03e      	b.n	8002328 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022aa:	4b21      	ldr	r3, [pc, #132]	@ (8002330 <HAL_PWREx_ConfigSupply+0xb0>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80022b2:	491f      	ldr	r1, [pc, #124]	@ (8002330 <HAL_PWREx_ConfigSupply+0xb0>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022ba:	f7fe fdb9 	bl	8000e30 <HAL_GetTick>
 80022be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022c0:	e009      	b.n	80022d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022c2:	f7fe fdb5 	bl	8000e30 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022d0:	d901      	bls.n	80022d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e028      	b.n	8002328 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022d6:	4b16      	ldr	r3, [pc, #88]	@ (8002330 <HAL_PWREx_ConfigSupply+0xb0>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022e2:	d1ee      	bne.n	80022c2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b1e      	cmp	r3, #30
 80022e8:	d008      	beq.n	80022fc <HAL_PWREx_ConfigSupply+0x7c>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80022ee:	d005      	beq.n	80022fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b1d      	cmp	r3, #29
 80022f4:	d002      	beq.n	80022fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b2d      	cmp	r3, #45	@ 0x2d
 80022fa:	d114      	bne.n	8002326 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80022fc:	f7fe fd98 	bl	8000e30 <HAL_GetTick>
 8002300:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002302:	e009      	b.n	8002318 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002304:	f7fe fd94 	bl	8000e30 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002312:	d901      	bls.n	8002318 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e007      	b.n	8002328 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002318:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <HAL_PWREx_ConfigSupply+0xb0>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002324:	d1ee      	bne.n	8002304 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	58024800 	.word	0x58024800

08002334 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08c      	sub	sp, #48	@ 0x30
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d102      	bne.n	8002348 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	f000 bc48 	b.w	8002bd8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8088 	beq.w	8002466 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002356:	4b99      	ldr	r3, [pc, #612]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800235e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002360:	4b96      	ldr	r3, [pc, #600]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 8002362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002364:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002368:	2b10      	cmp	r3, #16
 800236a:	d007      	beq.n	800237c <HAL_RCC_OscConfig+0x48>
 800236c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236e:	2b18      	cmp	r3, #24
 8002370:	d111      	bne.n	8002396 <HAL_RCC_OscConfig+0x62>
 8002372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d10c      	bne.n	8002396 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b8f      	ldr	r3, [pc, #572]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d06d      	beq.n	8002464 <HAL_RCC_OscConfig+0x130>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d169      	bne.n	8002464 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	f000 bc21 	b.w	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x7a>
 80023a0:	4b86      	ldr	r3, [pc, #536]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a85      	ldr	r2, [pc, #532]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 80023a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	e02e      	b.n	800240c <HAL_RCC_OscConfig+0xd8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x9c>
 80023b6:	4b81      	ldr	r3, [pc, #516]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a80      	ldr	r2, [pc, #512]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 80023bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b7e      	ldr	r3, [pc, #504]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a7d      	ldr	r2, [pc, #500]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 80023c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e01d      	b.n	800240c <HAL_RCC_OscConfig+0xd8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0xc0>
 80023da:	4b78      	ldr	r3, [pc, #480]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a77      	ldr	r2, [pc, #476]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 80023e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b75      	ldr	r3, [pc, #468]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a74      	ldr	r2, [pc, #464]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e00b      	b.n	800240c <HAL_RCC_OscConfig+0xd8>
 80023f4:	4b71      	ldr	r3, [pc, #452]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a70      	ldr	r2, [pc, #448]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 80023fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4b6e      	ldr	r3, [pc, #440]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a6d      	ldr	r2, [pc, #436]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 8002406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800240a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fd0c 	bl	8000e30 <HAL_GetTick>
 8002418:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7fe fd08 	bl	8000e30 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	@ 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e3d4      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800242e:	4b63      	ldr	r3, [pc, #396]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0xe8>
 800243a:	e014      	b.n	8002466 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fcf8 	bl	8000e30 <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002444:	f7fe fcf4 	bl	8000e30 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	@ 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e3c0      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002456:	4b59      	ldr	r3, [pc, #356]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x110>
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80ca 	beq.w	8002608 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002474:	4b51      	ldr	r3, [pc, #324]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800247c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800247e:	4b4f      	ldr	r3, [pc, #316]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 8002480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002482:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <HAL_RCC_OscConfig+0x166>
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	2b18      	cmp	r3, #24
 800248e:	d156      	bne.n	800253e <HAL_RCC_OscConfig+0x20a>
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d151      	bne.n	800253e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800249a:	4b48      	ldr	r3, [pc, #288]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_RCC_OscConfig+0x17e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e392      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024b2:	4b42      	ldr	r3, [pc, #264]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 0219 	bic.w	r2, r3, #25
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	493f      	ldr	r1, [pc, #252]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe fcb4 	bl	8000e30 <HAL_GetTick>
 80024c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024cc:	f7fe fcb0 	bl	8000e30 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e37c      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024de:	4b37      	ldr	r3, [pc, #220]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ea:	f7fe fcd1 	bl	8000e90 <HAL_GetREVID>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d817      	bhi.n	8002528 <HAL_RCC_OscConfig+0x1f4>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	2b40      	cmp	r3, #64	@ 0x40
 80024fe:	d108      	bne.n	8002512 <HAL_RCC_OscConfig+0x1de>
 8002500:	4b2e      	ldr	r3, [pc, #184]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002508:	4a2c      	ldr	r2, [pc, #176]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 800250a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800250e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002510:	e07a      	b.n	8002608 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002512:	4b2a      	ldr	r3, [pc, #168]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	031b      	lsls	r3, r3, #12
 8002520:	4926      	ldr	r1, [pc, #152]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002526:	e06f      	b.n	8002608 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002528:	4b24      	ldr	r3, [pc, #144]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	061b      	lsls	r3, r3, #24
 8002536:	4921      	ldr	r1, [pc, #132]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800253c:	e064      	b.n	8002608 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d047      	beq.n	80025d6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002546:	4b1d      	ldr	r3, [pc, #116]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 0219 	bic.w	r2, r3, #25
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	491a      	ldr	r1, [pc, #104]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7fe fc6a 	bl	8000e30 <HAL_GetTick>
 800255c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002560:	f7fe fc66 	bl	8000e30 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e332      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002572:	4b12      	ldr	r3, [pc, #72]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257e:	f7fe fc87 	bl	8000e90 <HAL_GetREVID>
 8002582:	4603      	mov	r3, r0
 8002584:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002588:	4293      	cmp	r3, r2
 800258a:	d819      	bhi.n	80025c0 <HAL_RCC_OscConfig+0x28c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	2b40      	cmp	r3, #64	@ 0x40
 8002592:	d108      	bne.n	80025a6 <HAL_RCC_OscConfig+0x272>
 8002594:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800259c:	4a07      	ldr	r2, [pc, #28]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 800259e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a2:	6053      	str	r3, [r2, #4]
 80025a4:	e030      	b.n	8002608 <HAL_RCC_OscConfig+0x2d4>
 80025a6:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	031b      	lsls	r3, r3, #12
 80025b4:	4901      	ldr	r1, [pc, #4]	@ (80025bc <HAL_RCC_OscConfig+0x288>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
 80025ba:	e025      	b.n	8002608 <HAL_RCC_OscConfig+0x2d4>
 80025bc:	58024400 	.word	0x58024400
 80025c0:	4b9a      	ldr	r3, [pc, #616]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	4997      	ldr	r1, [pc, #604]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
 80025d4:	e018      	b.n	8002608 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d6:	4b95      	ldr	r3, [pc, #596]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a94      	ldr	r2, [pc, #592]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 80025dc:	f023 0301 	bic.w	r3, r3, #1
 80025e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7fe fc25 	bl	8000e30 <HAL_GetTick>
 80025e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ea:	f7fe fc21 	bl	8000e30 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e2ed      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025fc:	4b8b      	ldr	r3, [pc, #556]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80a9 	beq.w	8002768 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002616:	4b85      	ldr	r3, [pc, #532]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800261e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002620:	4b82      	ldr	r3, [pc, #520]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002624:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d007      	beq.n	800263c <HAL_RCC_OscConfig+0x308>
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2b18      	cmp	r3, #24
 8002630:	d13a      	bne.n	80026a8 <HAL_RCC_OscConfig+0x374>
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d135      	bne.n	80026a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800263c:	4b7b      	ldr	r3, [pc, #492]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_OscConfig+0x320>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	2b80      	cmp	r3, #128	@ 0x80
 800264e:	d001      	beq.n	8002654 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e2c1      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002654:	f7fe fc1c 	bl	8000e90 <HAL_GetREVID>
 8002658:	4603      	mov	r3, r0
 800265a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800265e:	4293      	cmp	r3, r2
 8002660:	d817      	bhi.n	8002692 <HAL_RCC_OscConfig+0x35e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	2b20      	cmp	r3, #32
 8002668:	d108      	bne.n	800267c <HAL_RCC_OscConfig+0x348>
 800266a:	4b70      	ldr	r3, [pc, #448]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002672:	4a6e      	ldr	r2, [pc, #440]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002674:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002678:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800267a:	e075      	b.n	8002768 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800267c:	4b6b      	ldr	r3, [pc, #428]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	069b      	lsls	r3, r3, #26
 800268a:	4968      	ldr	r1, [pc, #416]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002690:	e06a      	b.n	8002768 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002692:	4b66      	ldr	r3, [pc, #408]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	061b      	lsls	r3, r3, #24
 80026a0:	4962      	ldr	r1, [pc, #392]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026a6:	e05f      	b.n	8002768 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d042      	beq.n	8002736 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026b0:	4b5e      	ldr	r3, [pc, #376]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a5d      	ldr	r2, [pc, #372]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 80026b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe fbb8 	bl	8000e30 <HAL_GetTick>
 80026c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026c4:	f7fe fbb4 	bl	8000e30 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e280      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026d6:	4b55      	ldr	r3, [pc, #340]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026e2:	f7fe fbd5 	bl	8000e90 <HAL_GetREVID>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d817      	bhi.n	8002720 <HAL_RCC_OscConfig+0x3ec>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	d108      	bne.n	800270a <HAL_RCC_OscConfig+0x3d6>
 80026f8:	4b4c      	ldr	r3, [pc, #304]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002700:	4a4a      	ldr	r2, [pc, #296]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002702:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002706:	6053      	str	r3, [r2, #4]
 8002708:	e02e      	b.n	8002768 <HAL_RCC_OscConfig+0x434>
 800270a:	4b48      	ldr	r3, [pc, #288]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	069b      	lsls	r3, r3, #26
 8002718:	4944      	ldr	r1, [pc, #272]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
 800271e:	e023      	b.n	8002768 <HAL_RCC_OscConfig+0x434>
 8002720:	4b42      	ldr	r3, [pc, #264]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	493f      	ldr	r1, [pc, #252]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002730:	4313      	orrs	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
 8002734:	e018      	b.n	8002768 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002736:	4b3d      	ldr	r3, [pc, #244]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a3c      	ldr	r2, [pc, #240]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 800273c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7fe fb75 	bl	8000e30 <HAL_GetTick>
 8002746:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800274a:	f7fe fb71 	bl	8000e30 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e23d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800275c:	4b33      	ldr	r3, [pc, #204]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d036      	beq.n	80027e2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d019      	beq.n	80027b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800277c:	4b2b      	ldr	r3, [pc, #172]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 800277e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002780:	4a2a      	ldr	r2, [pc, #168]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7fe fb52 	bl	8000e30 <HAL_GetTick>
 800278c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002790:	f7fe fb4e 	bl	8000e30 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e21a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027a2:	4b22      	ldr	r3, [pc, #136]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 80027a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x45c>
 80027ae:	e018      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b0:	4b1e      	ldr	r3, [pc, #120]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 80027b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b4:	4a1d      	ldr	r2, [pc, #116]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7fe fb38 	bl	8000e30 <HAL_GetTick>
 80027c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c4:	f7fe fb34 	bl	8000e30 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e200      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027d6:	4b15      	ldr	r3, [pc, #84]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 80027d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0320 	and.w	r3, r3, #32
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d039      	beq.n	8002862 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d01c      	beq.n	8002830 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027f6:	4b0d      	ldr	r3, [pc, #52]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a0c      	ldr	r2, [pc, #48]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 80027fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002800:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002802:	f7fe fb15 	bl	8000e30 <HAL_GetTick>
 8002806:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800280a:	f7fe fb11 	bl	8000e30 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e1dd      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800281c:	4b03      	ldr	r3, [pc, #12]	@ (800282c <HAL_RCC_OscConfig+0x4f8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x4d6>
 8002828:	e01b      	b.n	8002862 <HAL_RCC_OscConfig+0x52e>
 800282a:	bf00      	nop
 800282c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002830:	4b9b      	ldr	r3, [pc, #620]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a9a      	ldr	r2, [pc, #616]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002836:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800283a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800283c:	f7fe faf8 	bl	8000e30 <HAL_GetTick>
 8002840:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002844:	f7fe faf4 	bl	8000e30 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e1c0      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002856:	4b92      	ldr	r3, [pc, #584]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 8081 	beq.w	8002972 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002870:	4b8c      	ldr	r3, [pc, #560]	@ (8002aa4 <HAL_RCC_OscConfig+0x770>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a8b      	ldr	r2, [pc, #556]	@ (8002aa4 <HAL_RCC_OscConfig+0x770>)
 8002876:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800287a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800287c:	f7fe fad8 	bl	8000e30 <HAL_GetTick>
 8002880:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002884:	f7fe fad4 	bl	8000e30 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	@ 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e1a0      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002896:	4b83      	ldr	r3, [pc, #524]	@ (8002aa4 <HAL_RCC_OscConfig+0x770>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d106      	bne.n	80028b8 <HAL_RCC_OscConfig+0x584>
 80028aa:	4b7d      	ldr	r3, [pc, #500]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ae:	4a7c      	ldr	r2, [pc, #496]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b6:	e02d      	b.n	8002914 <HAL_RCC_OscConfig+0x5e0>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10c      	bne.n	80028da <HAL_RCC_OscConfig+0x5a6>
 80028c0:	4b77      	ldr	r3, [pc, #476]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c4:	4a76      	ldr	r2, [pc, #472]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80028cc:	4b74      	ldr	r3, [pc, #464]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d0:	4a73      	ldr	r2, [pc, #460]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028d2:	f023 0304 	bic.w	r3, r3, #4
 80028d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d8:	e01c      	b.n	8002914 <HAL_RCC_OscConfig+0x5e0>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b05      	cmp	r3, #5
 80028e0:	d10c      	bne.n	80028fc <HAL_RCC_OscConfig+0x5c8>
 80028e2:	4b6f      	ldr	r3, [pc, #444]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e6:	4a6e      	ldr	r2, [pc, #440]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ee:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f2:	4a6b      	ldr	r2, [pc, #428]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028fa:	e00b      	b.n	8002914 <HAL_RCC_OscConfig+0x5e0>
 80028fc:	4b68      	ldr	r3, [pc, #416]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002900:	4a67      	ldr	r2, [pc, #412]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002902:	f023 0301 	bic.w	r3, r3, #1
 8002906:	6713      	str	r3, [r2, #112]	@ 0x70
 8002908:	4b65      	ldr	r3, [pc, #404]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290c:	4a64      	ldr	r2, [pc, #400]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 800290e:	f023 0304 	bic.w	r3, r3, #4
 8002912:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d015      	beq.n	8002948 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7fe fa88 	bl	8000e30 <HAL_GetTick>
 8002920:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7fe fa84 	bl	8000e30 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e14e      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800293a:	4b59      	ldr	r3, [pc, #356]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0ee      	beq.n	8002924 <HAL_RCC_OscConfig+0x5f0>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe fa72 	bl	8000e30 <HAL_GetTick>
 800294c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7fe fa6e 	bl	8000e30 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e138      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002966:	4b4e      	ldr	r3, [pc, #312]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1ee      	bne.n	8002950 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 812d 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800297c:	4b48      	ldr	r3, [pc, #288]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002984:	2b18      	cmp	r3, #24
 8002986:	f000 80bd 	beq.w	8002b04 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	2b02      	cmp	r3, #2
 8002990:	f040 809e 	bne.w	8002ad0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002994:	4b42      	ldr	r3, [pc, #264]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a41      	ldr	r2, [pc, #260]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 800299a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800299e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7fe fa46 	bl	8000e30 <HAL_GetTick>
 80029a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a8:	f7fe fa42 	bl	8000e30 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e10e      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ba:	4b39      	ldr	r3, [pc, #228]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c6:	4b36      	ldr	r3, [pc, #216]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80029c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029ca:	4b37      	ldr	r3, [pc, #220]	@ (8002aa8 <HAL_RCC_OscConfig+0x774>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029d6:	0112      	lsls	r2, r2, #4
 80029d8:	430a      	orrs	r2, r1
 80029da:	4931      	ldr	r1, [pc, #196]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	628b      	str	r3, [r1, #40]	@ 0x28
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e4:	3b01      	subs	r3, #1
 80029e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ee:	3b01      	subs	r3, #1
 80029f0:	025b      	lsls	r3, r3, #9
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029fa:	3b01      	subs	r3, #1
 80029fc:	041b      	lsls	r3, r3, #16
 80029fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	061b      	lsls	r3, r3, #24
 8002a0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a10:	4923      	ldr	r1, [pc, #140]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a16:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1a:	4a21      	ldr	r2, [pc, #132]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a22:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a26:	4b21      	ldr	r3, [pc, #132]	@ (8002aac <HAL_RCC_OscConfig+0x778>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a2e:	00d2      	lsls	r2, r2, #3
 8002a30:	491b      	ldr	r1, [pc, #108]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a36:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3a:	f023 020c 	bic.w	r2, r3, #12
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	4917      	ldr	r1, [pc, #92]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a48:	4b15      	ldr	r3, [pc, #84]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4c:	f023 0202 	bic.w	r2, r3, #2
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a54:	4912      	ldr	r1, [pc, #72]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a5a:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5e:	4a10      	ldr	r2, [pc, #64]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a66:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6a:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a72:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a76:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a7e:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a82:	4a07      	ldr	r2, [pc, #28]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a8a:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a04      	ldr	r2, [pc, #16]	@ (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fe f9cb 	bl	8000e30 <HAL_GetTick>
 8002a9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a9c:	e011      	b.n	8002ac2 <HAL_RCC_OscConfig+0x78e>
 8002a9e:	bf00      	nop
 8002aa0:	58024400 	.word	0x58024400
 8002aa4:	58024800 	.word	0x58024800
 8002aa8:	fffffc0c 	.word	0xfffffc0c
 8002aac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe f9be 	bl	8000e30 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e08a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ac2:	4b47      	ldr	r3, [pc, #284]	@ (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x77c>
 8002ace:	e082      	b.n	8002bd6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad0:	4b43      	ldr	r3, [pc, #268]	@ (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a42      	ldr	r2, [pc, #264]	@ (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002ad6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe f9a8 	bl	8000e30 <HAL_GetTick>
 8002ae0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe f9a4 	bl	8000e30 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e070      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002af6:	4b3a      	ldr	r3, [pc, #232]	@ (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x7b0>
 8002b02:	e068      	b.n	8002bd6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b04:	4b36      	ldr	r3, [pc, #216]	@ (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b0a:	4b35      	ldr	r3, [pc, #212]	@ (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d031      	beq.n	8002b7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f003 0203 	and.w	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d12a      	bne.n	8002b7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d122      	bne.n	8002b7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b40:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d11a      	bne.n	8002b7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	0a5b      	lsrs	r3, r3, #9
 8002b4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b52:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d111      	bne.n	8002b7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	0c1b      	lsrs	r3, r3, #16
 8002b5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b64:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d108      	bne.n	8002b7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	0e1b      	lsrs	r3, r3, #24
 8002b6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b76:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e02b      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b80:	4b17      	ldr	r3, [pc, #92]	@ (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b84:	08db      	lsrs	r3, r3, #3
 8002b86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b8a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d01f      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b96:	4b12      	ldr	r3, [pc, #72]	@ (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9a:	4a11      	ldr	r2, [pc, #68]	@ (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002b9c:	f023 0301 	bic.w	r3, r3, #1
 8002ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ba2:	f7fe f945 	bl	8000e30 <HAL_GetTick>
 8002ba6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ba8:	bf00      	nop
 8002baa:	f7fe f941 	bl	8000e30 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d0f9      	beq.n	8002baa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002bb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bba:	4b0a      	ldr	r3, [pc, #40]	@ (8002be4 <HAL_RCC_OscConfig+0x8b0>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bc2:	00d2      	lsls	r2, r2, #3
 8002bc4:	4906      	ldr	r1, [pc, #24]	@ (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bca:	4b05      	ldr	r3, [pc, #20]	@ (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bce:	4a04      	ldr	r2, [pc, #16]	@ (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3730      	adds	r7, #48	@ 0x30
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	58024400 	.word	0x58024400
 8002be4:	ffff0007 	.word	0xffff0007

08002be8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e19c      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b8a      	ldr	r3, [pc, #552]	@ (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d910      	bls.n	8002c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b87      	ldr	r3, [pc, #540]	@ (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 020f 	bic.w	r2, r3, #15
 8002c12:	4985      	ldr	r1, [pc, #532]	@ (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	4b83      	ldr	r3, [pc, #524]	@ (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e184      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d010      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	4b7b      	ldr	r3, [pc, #492]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d908      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c48:	4b78      	ldr	r3, [pc, #480]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	4975      	ldr	r1, [pc, #468]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d010      	beq.n	8002c88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	4b70      	ldr	r3, [pc, #448]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d908      	bls.n	8002c88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c76:	4b6d      	ldr	r3, [pc, #436]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	496a      	ldr	r1, [pc, #424]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d010      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699a      	ldr	r2, [r3, #24]
 8002c98:	4b64      	ldr	r3, [pc, #400]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d908      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ca4:	4b61      	ldr	r3, [pc, #388]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	495e      	ldr	r1, [pc, #376]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69da      	ldr	r2, [r3, #28]
 8002cc6:	4b59      	ldr	r3, [pc, #356]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d908      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cd2:	4b56      	ldr	r3, [pc, #344]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	4953      	ldr	r1, [pc, #332]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d010      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	4b4d      	ldr	r3, [pc, #308]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d908      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b4a      	ldr	r3, [pc, #296]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f023 020f 	bic.w	r2, r3, #15
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4947      	ldr	r1, [pc, #284]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d055      	beq.n	8002dca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d1e:	4b43      	ldr	r3, [pc, #268]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	4940      	ldr	r1, [pc, #256]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d107      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d38:	4b3c      	ldr	r3, [pc, #240]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d121      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0f6      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d50:	4b36      	ldr	r3, [pc, #216]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d115      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0ea      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d107      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d68:	4b30      	ldr	r3, [pc, #192]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d109      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0de      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d78:	4b2c      	ldr	r3, [pc, #176]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0d6      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d88:	4b28      	ldr	r3, [pc, #160]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f023 0207 	bic.w	r2, r3, #7
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4925      	ldr	r1, [pc, #148]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d9a:	f7fe f849 	bl	8000e30 <HAL_GetTick>
 8002d9e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da2:	f7fe f845 	bl	8000e30 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0be      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db8:	4b1c      	ldr	r3, [pc, #112]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d1eb      	bne.n	8002da2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d010      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	4b14      	ldr	r3, [pc, #80]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d208      	bcs.n	8002df8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de6:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	f023 020f 	bic.w	r2, r3, #15
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	490e      	ldr	r1, [pc, #56]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d214      	bcs.n	8002e30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b08      	ldr	r3, [pc, #32]	@ (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 020f 	bic.w	r2, r3, #15
 8002e0e:	4906      	ldr	r1, [pc, #24]	@ (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	4b04      	ldr	r3, [pc, #16]	@ (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e086      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
 8002e28:	52002000 	.word	0x52002000
 8002e2c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d010      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	4b3f      	ldr	r3, [pc, #252]	@ (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d208      	bcs.n	8002e5e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e4c:	4b3c      	ldr	r3, [pc, #240]	@ (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	4939      	ldr	r1, [pc, #228]	@ (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d010      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	4b34      	ldr	r3, [pc, #208]	@ (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d208      	bcs.n	8002e8c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e7a:	4b31      	ldr	r3, [pc, #196]	@ (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	492e      	ldr	r1, [pc, #184]	@ (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d010      	beq.n	8002eba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	4b28      	ldr	r3, [pc, #160]	@ (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d208      	bcs.n	8002eba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ea8:	4b25      	ldr	r3, [pc, #148]	@ (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	4922      	ldr	r1, [pc, #136]	@ (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d010      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	4b1d      	ldr	r3, [pc, #116]	@ (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d208      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	4917      	ldr	r1, [pc, #92]	@ (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ee8:	f000 f834 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b14      	ldr	r3, [pc, #80]	@ (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	4912      	ldr	r1, [pc, #72]	@ (8002f44 <HAL_RCC_ClockConfig+0x35c>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
 8002f04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f06:	4b0e      	ldr	r3, [pc, #56]	@ (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	4a0d      	ldr	r2, [pc, #52]	@ (8002f44 <HAL_RCC_ClockConfig+0x35c>)
 8002f10:	5cd3      	ldrb	r3, [r2, r3]
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f48 <HAL_RCC_ClockConfig+0x360>)
 8002f1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f20:	4a0a      	ldr	r2, [pc, #40]	@ (8002f4c <HAL_RCC_ClockConfig+0x364>)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f26:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <HAL_RCC_ClockConfig+0x368>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd ff36 	bl	8000d9c <HAL_InitTick>
 8002f30:	4603      	mov	r3, r0
 8002f32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	58024400 	.word	0x58024400
 8002f44:	080072d0 	.word	0x080072d0
 8002f48:	24000004 	.word	0x24000004
 8002f4c:	24000000 	.word	0x24000000
 8002f50:	24000008 	.word	0x24000008

08002f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	@ 0x24
 8002f58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f5a:	4bb3      	ldr	r3, [pc, #716]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f62:	2b18      	cmp	r3, #24
 8002f64:	f200 8155 	bhi.w	8003212 <HAL_RCC_GetSysClockFreq+0x2be>
 8002f68:	a201      	add	r2, pc, #4	@ (adr r2, 8002f70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002fd5 	.word	0x08002fd5
 8002f74:	08003213 	.word	0x08003213
 8002f78:	08003213 	.word	0x08003213
 8002f7c:	08003213 	.word	0x08003213
 8002f80:	08003213 	.word	0x08003213
 8002f84:	08003213 	.word	0x08003213
 8002f88:	08003213 	.word	0x08003213
 8002f8c:	08003213 	.word	0x08003213
 8002f90:	08002ffb 	.word	0x08002ffb
 8002f94:	08003213 	.word	0x08003213
 8002f98:	08003213 	.word	0x08003213
 8002f9c:	08003213 	.word	0x08003213
 8002fa0:	08003213 	.word	0x08003213
 8002fa4:	08003213 	.word	0x08003213
 8002fa8:	08003213 	.word	0x08003213
 8002fac:	08003213 	.word	0x08003213
 8002fb0:	08003001 	.word	0x08003001
 8002fb4:	08003213 	.word	0x08003213
 8002fb8:	08003213 	.word	0x08003213
 8002fbc:	08003213 	.word	0x08003213
 8002fc0:	08003213 	.word	0x08003213
 8002fc4:	08003213 	.word	0x08003213
 8002fc8:	08003213 	.word	0x08003213
 8002fcc:	08003213 	.word	0x08003213
 8002fd0:	08003007 	.word	0x08003007
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fd4:	4b94      	ldr	r3, [pc, #592]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d009      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fe0:	4b91      	ldr	r3, [pc, #580]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	08db      	lsrs	r3, r3, #3
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	4a90      	ldr	r2, [pc, #576]	@ (800322c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002ff2:	e111      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ff4:	4b8d      	ldr	r3, [pc, #564]	@ (800322c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ff6:	61bb      	str	r3, [r7, #24]
      break;
 8002ff8:	e10e      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002ffa:	4b8d      	ldr	r3, [pc, #564]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ffc:	61bb      	str	r3, [r7, #24]
      break;
 8002ffe:	e10b      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003000:	4b8c      	ldr	r3, [pc, #560]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003002:	61bb      	str	r3, [r7, #24]
      break;
 8003004:	e108      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003006:	4b88      	ldr	r3, [pc, #544]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003010:	4b85      	ldr	r3, [pc, #532]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800301a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800301c:	4b82      	ldr	r3, [pc, #520]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003026:	4b80      	ldr	r3, [pc, #512]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800302a:	08db      	lsrs	r3, r3, #3
 800302c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800303e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80e1 	beq.w	800320c <HAL_RCC_GetSysClockFreq+0x2b8>
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b02      	cmp	r3, #2
 800304e:	f000 8083 	beq.w	8003158 <HAL_RCC_GetSysClockFreq+0x204>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b02      	cmp	r3, #2
 8003056:	f200 80a1 	bhi.w	800319c <HAL_RCC_GetSysClockFreq+0x248>
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x114>
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d056      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003066:	e099      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003068:	4b6f      	ldr	r3, [pc, #444]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d02d      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003074:	4b6c      	ldr	r3, [pc, #432]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	08db      	lsrs	r3, r3, #3
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	4a6b      	ldr	r2, [pc, #428]	@ (800322c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
 8003084:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800309e:	4b62      	ldr	r3, [pc, #392]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80030b2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030ce:	e087      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030da:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800323c <HAL_RCC_GetSysClockFreq+0x2e8>
 80030de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030e2:	4b51      	ldr	r3, [pc, #324]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030f6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800310a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003112:	e065      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	ee07 3a90 	vmov	s15, r3
 800311a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003240 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003126:	4b40      	ldr	r3, [pc, #256]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312e:	ee07 3a90 	vmov	s15, r3
 8003132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003136:	ed97 6a02 	vldr	s12, [r7, #8]
 800313a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003238 <HAL_RCC_GetSysClockFreq+0x2e4>
 800313e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800314a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800314e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003156:	e043      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003162:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003244 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800316a:	4b2f      	ldr	r3, [pc, #188]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800317a:	ed97 6a02 	vldr	s12, [r7, #8]
 800317e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003238 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800318a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800318e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003196:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800319a:	e021      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003240 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031be:	ed97 6a02 	vldr	s12, [r7, #8]
 80031c2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031e0:	4b11      	ldr	r3, [pc, #68]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e4:	0a5b      	lsrs	r3, r3, #9
 80031e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031ea:	3301      	adds	r3, #1
 80031ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	ee07 3a90 	vmov	s15, r3
 80031f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80031fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003204:	ee17 3a90 	vmov	r3, s15
 8003208:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800320a:	e005      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	61bb      	str	r3, [r7, #24]
      break;
 8003210:	e002      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003212:	4b07      	ldr	r3, [pc, #28]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003214:	61bb      	str	r3, [r7, #24]
      break;
 8003216:	bf00      	nop
  }

  return sysclockfreq;
 8003218:	69bb      	ldr	r3, [r7, #24]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3724      	adds	r7, #36	@ 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	58024400 	.word	0x58024400
 800322c:	03d09000 	.word	0x03d09000
 8003230:	003d0900 	.word	0x003d0900
 8003234:	017d7840 	.word	0x017d7840
 8003238:	46000000 	.word	0x46000000
 800323c:	4c742400 	.word	0x4c742400
 8003240:	4a742400 	.word	0x4a742400
 8003244:	4bbebc20 	.word	0x4bbebc20

08003248 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800324c:	b0ca      	sub	sp, #296	@ 0x128
 800324e:	af00      	add	r7, sp, #0
 8003250:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003254:	2300      	movs	r3, #0
 8003256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800325a:	2300      	movs	r3, #0
 800325c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003268:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800326c:	2500      	movs	r5, #0
 800326e:	ea54 0305 	orrs.w	r3, r4, r5
 8003272:	d049      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003278:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800327a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800327e:	d02f      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003280:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003284:	d828      	bhi.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003286:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800328a:	d01a      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800328c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003290:	d822      	bhi.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800329a:	d007      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800329c:	e01c      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800329e:	4bb8      	ldr	r3, [pc, #736]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a2:	4ab7      	ldr	r2, [pc, #732]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032aa:	e01a      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b0:	3308      	adds	r3, #8
 80032b2:	2102      	movs	r1, #2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f001 f9d1 	bl	800465c <RCCEx_PLL2_Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032c0:	e00f      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c6:	3328      	adds	r3, #40	@ 0x28
 80032c8:	2102      	movs	r1, #2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f001 fa78 	bl	80047c0 <RCCEx_PLL3_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032d6:	e004      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032de:	e000      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80032e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80032ea:	4ba5      	ldr	r3, [pc, #660]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80032f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032f8:	4aa1      	ldr	r2, [pc, #644]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032fa:	430b      	orrs	r3, r1
 80032fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80032fe:	e003      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003304:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003314:	f04f 0900 	mov.w	r9, #0
 8003318:	ea58 0309 	orrs.w	r3, r8, r9
 800331c:	d047      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800331e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003324:	2b04      	cmp	r3, #4
 8003326:	d82a      	bhi.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003328:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003345 	.word	0x08003345
 8003334:	08003353 	.word	0x08003353
 8003338:	08003369 	.word	0x08003369
 800333c:	08003387 	.word	0x08003387
 8003340:	08003387 	.word	0x08003387
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003344:	4b8e      	ldr	r3, [pc, #568]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003348:	4a8d      	ldr	r2, [pc, #564]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800334a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800334e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003350:	e01a      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003356:	3308      	adds	r3, #8
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f001 f97e 	bl	800465c <RCCEx_PLL2_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003366:	e00f      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336c:	3328      	adds	r3, #40	@ 0x28
 800336e:	2100      	movs	r1, #0
 8003370:	4618      	mov	r0, r3
 8003372:	f001 fa25 	bl	80047c0 <RCCEx_PLL3_Config>
 8003376:	4603      	mov	r3, r0
 8003378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800337c:	e004      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003384:	e000      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10a      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003390:	4b7b      	ldr	r3, [pc, #492]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003394:	f023 0107 	bic.w	r1, r3, #7
 8003398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339e:	4a78      	ldr	r2, [pc, #480]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80033a4:	e003      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80033ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80033ba:	f04f 0b00 	mov.w	fp, #0
 80033be:	ea5a 030b 	orrs.w	r3, sl, fp
 80033c2:	d04c      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80033c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ce:	d030      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80033d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d4:	d829      	bhi.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80033d8:	d02d      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80033da:	2bc0      	cmp	r3, #192	@ 0xc0
 80033dc:	d825      	bhi.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033de:	2b80      	cmp	r3, #128	@ 0x80
 80033e0:	d018      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80033e2:	2b80      	cmp	r3, #128	@ 0x80
 80033e4:	d821      	bhi.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80033ea:	2b40      	cmp	r3, #64	@ 0x40
 80033ec:	d007      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80033ee:	e01c      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f0:	4b63      	ldr	r3, [pc, #396]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	4a62      	ldr	r2, [pc, #392]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033fc:	e01c      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003402:	3308      	adds	r3, #8
 8003404:	2100      	movs	r1, #0
 8003406:	4618      	mov	r0, r3
 8003408:	f001 f928 	bl	800465c <RCCEx_PLL2_Config>
 800340c:	4603      	mov	r3, r0
 800340e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003412:	e011      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003418:	3328      	adds	r3, #40	@ 0x28
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f001 f9cf 	bl	80047c0 <RCCEx_PLL3_Config>
 8003422:	4603      	mov	r3, r0
 8003424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003428:	e006      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003430:	e002      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003432:	bf00      	nop
 8003434:	e000      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003438:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10a      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003440:	4b4f      	ldr	r3, [pc, #316]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003444:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344e:	4a4c      	ldr	r2, [pc, #304]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003450:	430b      	orrs	r3, r1
 8003452:	6513      	str	r3, [r2, #80]	@ 0x50
 8003454:	e003      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800345a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800345e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800346a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800346e:	2300      	movs	r3, #0
 8003470:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003474:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003478:	460b      	mov	r3, r1
 800347a:	4313      	orrs	r3, r2
 800347c:	d053      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800347e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003482:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003486:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800348a:	d035      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800348c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003490:	d82e      	bhi.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003492:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003496:	d031      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003498:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800349c:	d828      	bhi.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800349e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034a2:	d01a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x292>
 80034a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034a8:	d822      	bhi.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80034ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034b2:	d007      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80034b4:	e01c      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b6:	4b32      	ldr	r3, [pc, #200]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ba:	4a31      	ldr	r2, [pc, #196]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034c2:	e01c      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c8:	3308      	adds	r3, #8
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f001 f8c5 	bl	800465c <RCCEx_PLL2_Config>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80034d8:	e011      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034de:	3328      	adds	r3, #40	@ 0x28
 80034e0:	2100      	movs	r1, #0
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 f96c 	bl	80047c0 <RCCEx_PLL3_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034ee:	e006      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034f6:	e002      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034f8:	bf00      	nop
 80034fa:	e000      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10b      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003506:	4b1e      	ldr	r3, [pc, #120]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800350e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003512:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003516:	4a1a      	ldr	r2, [pc, #104]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003518:	430b      	orrs	r3, r1
 800351a:	6593      	str	r3, [r2, #88]	@ 0x58
 800351c:	e003      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003522:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003532:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003536:	2300      	movs	r3, #0
 8003538:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800353c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003540:	460b      	mov	r3, r1
 8003542:	4313      	orrs	r3, r2
 8003544:	d056      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800354e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003552:	d038      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003554:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003558:	d831      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800355a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800355e:	d034      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003560:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003564:	d82b      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003566:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800356a:	d01d      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800356c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003570:	d825      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003572:	2b00      	cmp	r3, #0
 8003574:	d006      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003576:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800357c:	e01f      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800357e:	bf00      	nop
 8003580:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003584:	4ba2      	ldr	r3, [pc, #648]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003588:	4aa1      	ldr	r2, [pc, #644]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800358a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800358e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003590:	e01c      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003596:	3308      	adds	r3, #8
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f001 f85e 	bl	800465c <RCCEx_PLL2_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035a6:	e011      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ac:	3328      	adds	r3, #40	@ 0x28
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f001 f905 	bl	80047c0 <RCCEx_PLL3_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035bc:	e006      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035c4:	e002      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80035c6:	bf00      	nop
 80035c8:	e000      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80035ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80035d4:	4b8e      	ldr	r3, [pc, #568]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80035dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035e4:	4a8a      	ldr	r2, [pc, #552]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035e6:	430b      	orrs	r3, r1
 80035e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ea:	e003      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003600:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003604:	2300      	movs	r3, #0
 8003606:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800360a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800360e:	460b      	mov	r3, r1
 8003610:	4313      	orrs	r3, r2
 8003612:	d03a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361a:	2b30      	cmp	r3, #48	@ 0x30
 800361c:	d01f      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800361e:	2b30      	cmp	r3, #48	@ 0x30
 8003620:	d819      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003622:	2b20      	cmp	r3, #32
 8003624:	d00c      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003626:	2b20      	cmp	r3, #32
 8003628:	d815      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d019      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800362e:	2b10      	cmp	r3, #16
 8003630:	d111      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003632:	4b77      	ldr	r3, [pc, #476]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003636:	4a76      	ldr	r2, [pc, #472]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800363c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800363e:	e011      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003644:	3308      	adds	r3, #8
 8003646:	2102      	movs	r1, #2
 8003648:	4618      	mov	r0, r3
 800364a:	f001 f807 	bl	800465c <RCCEx_PLL2_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003654:	e006      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800365c:	e002      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800365e:	bf00      	nop
 8003660:	e000      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10a      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800366c:	4b68      	ldr	r3, [pc, #416]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800366e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003670:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367a:	4a65      	ldr	r2, [pc, #404]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800367c:	430b      	orrs	r3, r1
 800367e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003680:	e003      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003686:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800368a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003692:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003696:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800369a:	2300      	movs	r3, #0
 800369c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80036a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4313      	orrs	r3, r2
 80036a8:	d051      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036b4:	d035      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80036b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036ba:	d82e      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036c0:	d031      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80036c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036c6:	d828      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036cc:	d01a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80036ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036d2:	d822      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80036d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036dc:	d007      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80036de:	e01c      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036ec:	e01c      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f2:	3308      	adds	r3, #8
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 ffb0 	bl	800465c <RCCEx_PLL2_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003702:	e011      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003708:	3328      	adds	r3, #40	@ 0x28
 800370a:	2100      	movs	r1, #0
 800370c:	4618      	mov	r0, r3
 800370e:	f001 f857 	bl	80047c0 <RCCEx_PLL3_Config>
 8003712:	4603      	mov	r3, r0
 8003714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003718:	e006      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003720:	e002      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003722:	bf00      	nop
 8003724:	e000      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10a      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003730:	4b37      	ldr	r3, [pc, #220]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003734:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373e:	4a34      	ldr	r2, [pc, #208]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003740:	430b      	orrs	r3, r1
 8003742:	6513      	str	r3, [r2, #80]	@ 0x50
 8003744:	e003      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800374a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800374e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003756:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800375a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800375e:	2300      	movs	r3, #0
 8003760:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003764:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003768:	460b      	mov	r3, r1
 800376a:	4313      	orrs	r3, r2
 800376c:	d056      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003778:	d033      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800377a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800377e:	d82c      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003780:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003784:	d02f      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003786:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800378a:	d826      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x592>
 800378c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003790:	d02b      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003792:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003796:	d820      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003798:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800379c:	d012      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800379e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037a2:	d81a      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d022      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80037a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ac:	d115      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b2:	3308      	adds	r3, #8
 80037b4:	2101      	movs	r1, #1
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 ff50 	bl	800465c <RCCEx_PLL2_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037c2:	e015      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c8:	3328      	adds	r3, #40	@ 0x28
 80037ca:	2101      	movs	r1, #1
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fff7 	bl	80047c0 <RCCEx_PLL3_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037d8:	e00a      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037e0:	e006      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037e2:	bf00      	nop
 80037e4:	e004      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037e6:	bf00      	nop
 80037e8:	e002      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037ea:	bf00      	nop
 80037ec:	e000      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037f8:	4b05      	ldr	r3, [pc, #20]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003804:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003806:	4a02      	ldr	r2, [pc, #8]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003808:	430b      	orrs	r3, r1
 800380a:	6513      	str	r3, [r2, #80]	@ 0x50
 800380c:	e006      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800380e:	bf00      	nop
 8003810:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003818:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003828:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800382c:	2300      	movs	r3, #0
 800382e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003832:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003836:	460b      	mov	r3, r1
 8003838:	4313      	orrs	r3, r2
 800383a:	d055      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800383c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003840:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003844:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003848:	d033      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800384a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800384e:	d82c      	bhi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003854:	d02f      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800385a:	d826      	bhi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800385c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003860:	d02b      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003862:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003866:	d820      	bhi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800386c:	d012      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800386e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003872:	d81a      	bhi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d022      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003878:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800387c:	d115      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800387e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003882:	3308      	adds	r3, #8
 8003884:	2101      	movs	r1, #1
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fee8 	bl	800465c <RCCEx_PLL2_Config>
 800388c:	4603      	mov	r3, r0
 800388e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003892:	e015      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003898:	3328      	adds	r3, #40	@ 0x28
 800389a:	2101      	movs	r1, #1
 800389c:	4618      	mov	r0, r3
 800389e:	f000 ff8f 	bl	80047c0 <RCCEx_PLL3_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038a8:	e00a      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038b0:	e006      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038b2:	bf00      	nop
 80038b4:	e004      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038b6:	bf00      	nop
 80038b8:	e002      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038ba:	bf00      	nop
 80038bc:	e000      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10b      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038c8:	4ba3      	ldr	r3, [pc, #652]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038cc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80038d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038d8:	4a9f      	ldr	r2, [pc, #636]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038da:	430b      	orrs	r3, r1
 80038dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80038de:	e003      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80038f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038f8:	2300      	movs	r3, #0
 80038fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003902:	460b      	mov	r3, r1
 8003904:	4313      	orrs	r3, r2
 8003906:	d037      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003912:	d00e      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003918:	d816      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d018      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800391e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003922:	d111      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003924:	4b8c      	ldr	r3, [pc, #560]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	4a8b      	ldr	r2, [pc, #556]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800392a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800392e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003930:	e00f      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003936:	3308      	adds	r3, #8
 8003938:	2101      	movs	r1, #1
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fe8e 	bl	800465c <RCCEx_PLL2_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003946:	e004      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800394e:	e000      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10a      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800395a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800395c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800395e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003968:	4a7b      	ldr	r2, [pc, #492]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800396a:	430b      	orrs	r3, r1
 800396c:	6513      	str	r3, [r2, #80]	@ 0x50
 800396e:	e003      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003970:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003974:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800398e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003992:	460b      	mov	r3, r1
 8003994:	4313      	orrs	r3, r2
 8003996:	d039      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d81c      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80039a2:	a201      	add	r2, pc, #4	@ (adr r2, 80039a8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80039a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a8:	080039e5 	.word	0x080039e5
 80039ac:	080039b9 	.word	0x080039b9
 80039b0:	080039c7 	.word	0x080039c7
 80039b4:	080039e5 	.word	0x080039e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b8:	4b67      	ldr	r3, [pc, #412]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039bc:	4a66      	ldr	r2, [pc, #408]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039c4:	e00f      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ca:	3308      	adds	r3, #8
 80039cc:	2102      	movs	r1, #2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fe44 	bl	800465c <RCCEx_PLL2_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039da:	e004      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039e2:	e000      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80039e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10a      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039ee:	4b5a      	ldr	r3, [pc, #360]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f2:	f023 0103 	bic.w	r1, r3, #3
 80039f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fc:	4a56      	ldr	r2, [pc, #344]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039fe:	430b      	orrs	r3, r1
 8003a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a02:	e003      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a26:	460b      	mov	r3, r1
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f000 809f 	beq.w	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a2e:	4b4b      	ldr	r3, [pc, #300]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a4a      	ldr	r2, [pc, #296]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a3a:	f7fd f9f9 	bl	8000e30 <HAL_GetTick>
 8003a3e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a42:	e00b      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a44:	f7fd f9f4 	bl	8000e30 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b64      	cmp	r3, #100	@ 0x64
 8003a52:	d903      	bls.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a5a:	e005      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0ed      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003a68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d179      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a70:	4b39      	ldr	r3, [pc, #228]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a7c:	4053      	eors	r3, r2
 8003a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d015      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a86:	4b34      	ldr	r3, [pc, #208]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a92:	4b31      	ldr	r3, [pc, #196]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a96:	4a30      	ldr	r2, [pc, #192]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a9c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa2:	4a2d      	ldr	r2, [pc, #180]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003aaa:	4a2b      	ldr	r2, [pc, #172]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ab0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003abe:	d118      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fd f9b6 	bl	8000e30 <HAL_GetTick>
 8003ac4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ac8:	e00d      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7fd f9b1 	bl	8000e30 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ad4:	1ad2      	subs	r2, r2, r3
 8003ad6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d903      	bls.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003ae4:	e005      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0eb      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d129      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b0a:	d10e      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003b0c:	4b12      	ldr	r3, [pc, #72]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b1c:	091a      	lsrs	r2, r3, #4
 8003b1e:	4b10      	ldr	r3, [pc, #64]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	4a0d      	ldr	r2, [pc, #52]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b24:	430b      	orrs	r3, r1
 8003b26:	6113      	str	r3, [r2, #16]
 8003b28:	e005      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b34:	6113      	str	r3, [r2, #16]
 8003b36:	4b08      	ldr	r3, [pc, #32]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b38:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b46:	4a04      	ldr	r2, [pc, #16]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b4c:	e00e      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003b56:	e009      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003b58:	58024400 	.word	0x58024400
 8003b5c:	58024800 	.word	0x58024800
 8003b60:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f002 0301 	and.w	r3, r2, #1
 8003b78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f000 8089 	beq.w	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b94:	2b28      	cmp	r3, #40	@ 0x28
 8003b96:	d86b      	bhi.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003b98:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9e:	bf00      	nop
 8003ba0:	08003c79 	.word	0x08003c79
 8003ba4:	08003c71 	.word	0x08003c71
 8003ba8:	08003c71 	.word	0x08003c71
 8003bac:	08003c71 	.word	0x08003c71
 8003bb0:	08003c71 	.word	0x08003c71
 8003bb4:	08003c71 	.word	0x08003c71
 8003bb8:	08003c71 	.word	0x08003c71
 8003bbc:	08003c71 	.word	0x08003c71
 8003bc0:	08003c45 	.word	0x08003c45
 8003bc4:	08003c71 	.word	0x08003c71
 8003bc8:	08003c71 	.word	0x08003c71
 8003bcc:	08003c71 	.word	0x08003c71
 8003bd0:	08003c71 	.word	0x08003c71
 8003bd4:	08003c71 	.word	0x08003c71
 8003bd8:	08003c71 	.word	0x08003c71
 8003bdc:	08003c71 	.word	0x08003c71
 8003be0:	08003c5b 	.word	0x08003c5b
 8003be4:	08003c71 	.word	0x08003c71
 8003be8:	08003c71 	.word	0x08003c71
 8003bec:	08003c71 	.word	0x08003c71
 8003bf0:	08003c71 	.word	0x08003c71
 8003bf4:	08003c71 	.word	0x08003c71
 8003bf8:	08003c71 	.word	0x08003c71
 8003bfc:	08003c71 	.word	0x08003c71
 8003c00:	08003c79 	.word	0x08003c79
 8003c04:	08003c71 	.word	0x08003c71
 8003c08:	08003c71 	.word	0x08003c71
 8003c0c:	08003c71 	.word	0x08003c71
 8003c10:	08003c71 	.word	0x08003c71
 8003c14:	08003c71 	.word	0x08003c71
 8003c18:	08003c71 	.word	0x08003c71
 8003c1c:	08003c71 	.word	0x08003c71
 8003c20:	08003c79 	.word	0x08003c79
 8003c24:	08003c71 	.word	0x08003c71
 8003c28:	08003c71 	.word	0x08003c71
 8003c2c:	08003c71 	.word	0x08003c71
 8003c30:	08003c71 	.word	0x08003c71
 8003c34:	08003c71 	.word	0x08003c71
 8003c38:	08003c71 	.word	0x08003c71
 8003c3c:	08003c71 	.word	0x08003c71
 8003c40:	08003c79 	.word	0x08003c79
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c48:	3308      	adds	r3, #8
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fd05 	bl	800465c <RCCEx_PLL2_Config>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c58:	e00f      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5e:	3328      	adds	r3, #40	@ 0x28
 8003c60:	2101      	movs	r1, #1
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fdac 	bl	80047c0 <RCCEx_PLL3_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c6e:	e004      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c76:	e000      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c82:	4bbf      	ldr	r3, [pc, #764]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c86:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c90:	4abb      	ldr	r2, [pc, #748]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c92:	430b      	orrs	r3, r1
 8003c94:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c96:	e003      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca8:	f002 0302 	and.w	r3, r2, #2
 8003cac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003cb6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	d041      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cc6:	2b05      	cmp	r3, #5
 8003cc8:	d824      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003cca:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd0:	08003d1d 	.word	0x08003d1d
 8003cd4:	08003ce9 	.word	0x08003ce9
 8003cd8:	08003cff 	.word	0x08003cff
 8003cdc:	08003d1d 	.word	0x08003d1d
 8003ce0:	08003d1d 	.word	0x08003d1d
 8003ce4:	08003d1d 	.word	0x08003d1d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cec:	3308      	adds	r3, #8
 8003cee:	2101      	movs	r1, #1
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fcb3 	bl	800465c <RCCEx_PLL2_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cfc:	e00f      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d02:	3328      	adds	r3, #40	@ 0x28
 8003d04:	2101      	movs	r1, #1
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fd5a 	bl	80047c0 <RCCEx_PLL3_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d12:	e004      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d1a:	e000      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d26:	4b96      	ldr	r3, [pc, #600]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2a:	f023 0107 	bic.w	r1, r3, #7
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d34:	4a92      	ldr	r2, [pc, #584]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d36:	430b      	orrs	r3, r1
 8003d38:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d3a:	e003      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f002 0304 	and.w	r3, r2, #4
 8003d50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d5a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4313      	orrs	r3, r2
 8003d62:	d044      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d6c:	2b05      	cmp	r3, #5
 8003d6e:	d825      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003d70:	a201      	add	r2, pc, #4	@ (adr r2, 8003d78 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003dc5 	.word	0x08003dc5
 8003d7c:	08003d91 	.word	0x08003d91
 8003d80:	08003da7 	.word	0x08003da7
 8003d84:	08003dc5 	.word	0x08003dc5
 8003d88:	08003dc5 	.word	0x08003dc5
 8003d8c:	08003dc5 	.word	0x08003dc5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d94:	3308      	adds	r3, #8
 8003d96:	2101      	movs	r1, #1
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fc5f 	bl	800465c <RCCEx_PLL2_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003da4:	e00f      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003daa:	3328      	adds	r3, #40	@ 0x28
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fd06 	bl	80047c0 <RCCEx_PLL3_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003dba:	e004      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dc2:	e000      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10b      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dce:	4b6c      	ldr	r3, [pc, #432]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd2:	f023 0107 	bic.w	r1, r3, #7
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dde:	4a68      	ldr	r2, [pc, #416]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003de0:	430b      	orrs	r3, r1
 8003de2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003de4:	e003      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	f002 0320 	and.w	r3, r2, #32
 8003dfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	d055      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e1a:	d033      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e20:	d82c      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e26:	d02f      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e2c:	d826      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e32:	d02b      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003e34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e38:	d820      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e3e:	d012      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e44:	d81a      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d022      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003e4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e4e:	d115      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e54:	3308      	adds	r3, #8
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fbff 	bl	800465c <RCCEx_PLL2_Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e64:	e015      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6a:	3328      	adds	r3, #40	@ 0x28
 8003e6c:	2102      	movs	r1, #2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fca6 	bl	80047c0 <RCCEx_PLL3_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e82:	e006      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e84:	bf00      	nop
 8003e86:	e004      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e88:	bf00      	nop
 8003e8a:	e002      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e8c:	bf00      	nop
 8003e8e:	e000      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10b      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e9a:	4b39      	ldr	r3, [pc, #228]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eaa:	4a35      	ldr	r2, [pc, #212]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6553      	str	r3, [r2, #84]	@ 0x54
 8003eb0:	e003      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ed0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	d058      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ee2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ee6:	d033      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003ee8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003eec:	d82c      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef2:	d02f      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef8:	d826      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003efa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003efe:	d02b      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003f00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f04:	d820      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f0a:	d012      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003f0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f10:	d81a      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d022      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f1a:	d115      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f20:	3308      	adds	r3, #8
 8003f22:	2100      	movs	r1, #0
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fb99 	bl	800465c <RCCEx_PLL2_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f30:	e015      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f36:	3328      	adds	r3, #40	@ 0x28
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fc40 	bl	80047c0 <RCCEx_PLL3_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f46:	e00a      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f4e:	e006      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f50:	bf00      	nop
 8003f52:	e004      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f54:	bf00      	nop
 8003f56:	e002      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f58:	bf00      	nop
 8003f5a:	e000      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10e      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f66:	4b06      	ldr	r3, [pc, #24]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f76:	4a02      	ldr	r2, [pc, #8]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f7c:	e006      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003f7e:	bf00      	nop
 8003f80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f94:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fa2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	d055      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fb4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003fb8:	d033      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003fba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003fbe:	d82c      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fc4:	d02f      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003fc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fca:	d826      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fcc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fd0:	d02b      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003fd2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fd6:	d820      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fdc:	d012      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003fde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fe2:	d81a      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d022      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fec:	d115      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fb30 	bl	800465c <RCCEx_PLL2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004002:	e015      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004008:	3328      	adds	r3, #40	@ 0x28
 800400a:	2102      	movs	r1, #2
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fbd7 	bl	80047c0 <RCCEx_PLL3_Config>
 8004012:	4603      	mov	r3, r0
 8004014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004018:	e00a      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004020:	e006      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004022:	bf00      	nop
 8004024:	e004      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004026:	bf00      	nop
 8004028:	e002      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800402a:	bf00      	nop
 800402c:	e000      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800402e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10b      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004038:	4ba1      	ldr	r3, [pc, #644]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800403a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004044:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004048:	4a9d      	ldr	r2, [pc, #628]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800404a:	430b      	orrs	r3, r1
 800404c:	6593      	str	r3, [r2, #88]	@ 0x58
 800404e:	e003      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f002 0308 	and.w	r3, r2, #8
 8004064:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004068:	2300      	movs	r3, #0
 800406a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800406e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004072:	460b      	mov	r3, r1
 8004074:	4313      	orrs	r3, r2
 8004076:	d01e      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004084:	d10c      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408a:	3328      	adds	r3, #40	@ 0x28
 800408c:	2102      	movs	r1, #2
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fb96 	bl	80047c0 <RCCEx_PLL3_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80040a0:	4b87      	ldr	r3, [pc, #540]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040b0:	4a83      	ldr	r2, [pc, #524]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040b2:	430b      	orrs	r3, r1
 80040b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040be:	f002 0310 	and.w	r3, r2, #16
 80040c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040c6:	2300      	movs	r3, #0
 80040c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80040d0:	460b      	mov	r3, r1
 80040d2:	4313      	orrs	r3, r2
 80040d4:	d01e      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80040d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e2:	d10c      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e8:	3328      	adds	r3, #40	@ 0x28
 80040ea:	2102      	movs	r1, #2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fb67 	bl	80047c0 <RCCEx_PLL3_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040fe:	4b70      	ldr	r3, [pc, #448]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004102:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800410e:	4a6c      	ldr	r2, [pc, #432]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004110:	430b      	orrs	r3, r1
 8004112:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004120:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004124:	2300      	movs	r3, #0
 8004126:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800412a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800412e:	460b      	mov	r3, r1
 8004130:	4313      	orrs	r3, r2
 8004132:	d03e      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004138:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800413c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004140:	d022      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004142:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004146:	d81b      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004150:	d00b      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004152:	e015      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004158:	3308      	adds	r3, #8
 800415a:	2100      	movs	r1, #0
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fa7d 	bl	800465c <RCCEx_PLL2_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004168:	e00f      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416e:	3328      	adds	r3, #40	@ 0x28
 8004170:	2102      	movs	r1, #2
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fb24 	bl	80047c0 <RCCEx_PLL3_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800417e:	e004      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004186:	e000      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004192:	4b4b      	ldr	r3, [pc, #300]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004196:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800419a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041a2:	4a47      	ldr	r2, [pc, #284]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041a8:	e003      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80041be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041c0:	2300      	movs	r3, #0
 80041c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80041c8:	460b      	mov	r3, r1
 80041ca:	4313      	orrs	r3, r2
 80041cc:	d03b      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80041ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041da:	d01f      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80041dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041e0:	d818      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80041e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041e6:	d003      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80041e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041ec:	d007      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80041ee:	e011      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f0:	4b33      	ldr	r3, [pc, #204]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f4:	4a32      	ldr	r2, [pc, #200]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80041fc:	e00f      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004202:	3328      	adds	r3, #40	@ 0x28
 8004204:	2101      	movs	r1, #1
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fada 	bl	80047c0 <RCCEx_PLL3_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004212:	e004      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800421a:	e000      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800421c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800421e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004226:	4b26      	ldr	r3, [pc, #152]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004236:	4a22      	ldr	r2, [pc, #136]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004238:	430b      	orrs	r3, r1
 800423a:	6553      	str	r3, [r2, #84]	@ 0x54
 800423c:	e003      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004242:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004252:	673b      	str	r3, [r7, #112]	@ 0x70
 8004254:	2300      	movs	r3, #0
 8004256:	677b      	str	r3, [r7, #116]	@ 0x74
 8004258:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800425c:	460b      	mov	r3, r1
 800425e:	4313      	orrs	r3, r2
 8004260:	d034      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004270:	d007      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004272:	e011      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004274:	4b12      	ldr	r3, [pc, #72]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004278:	4a11      	ldr	r2, [pc, #68]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800427a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800427e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004280:	e00e      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004286:	3308      	adds	r3, #8
 8004288:	2102      	movs	r1, #2
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f9e6 	bl	800465c <RCCEx_PLL2_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004296:	e003      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800429e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10d      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042a8:	4b05      	ldr	r3, [pc, #20]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b6:	4a02      	ldr	r2, [pc, #8]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042b8:	430b      	orrs	r3, r1
 80042ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042bc:	e006      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80042be:	bf00      	nop
 80042c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80042d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042da:	2300      	movs	r3, #0
 80042dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80042e2:	460b      	mov	r3, r1
 80042e4:	4313      	orrs	r3, r2
 80042e6:	d00c      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ec:	3328      	adds	r3, #40	@ 0x28
 80042ee:	2102      	movs	r1, #2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fa65 	bl	80047c0 <RCCEx_PLL3_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800430e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004310:	2300      	movs	r3, #0
 8004312:	667b      	str	r3, [r7, #100]	@ 0x64
 8004314:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004318:	460b      	mov	r3, r1
 800431a:	4313      	orrs	r3, r2
 800431c:	d038      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004326:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800432a:	d018      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800432c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004330:	d811      	bhi.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004336:	d014      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800433c:	d80b      	bhi.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d011      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004346:	d106      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004348:	4bc3      	ldr	r3, [pc, #780]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800434a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434c:	4ac2      	ldr	r2, [pc, #776]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800434e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004352:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004354:	e008      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800435c:	e004      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800435e:	bf00      	nop
 8004360:	e002      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004362:	bf00      	nop
 8004364:	e000      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004370:	4bb9      	ldr	r3, [pc, #740]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004374:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004380:	4ab5      	ldr	r2, [pc, #724]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004382:	430b      	orrs	r3, r1
 8004384:	6553      	str	r3, [r2, #84]	@ 0x54
 8004386:	e003      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800438c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800439c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800439e:	2300      	movs	r3, #0
 80043a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80043a6:	460b      	mov	r3, r1
 80043a8:	4313      	orrs	r3, r2
 80043aa:	d009      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043ac:	4baa      	ldr	r3, [pc, #680]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80043b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ba:	4aa7      	ldr	r2, [pc, #668]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043bc:	430b      	orrs	r3, r1
 80043be:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80043c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80043cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80043ce:	2300      	movs	r3, #0
 80043d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80043d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80043d6:	460b      	mov	r3, r1
 80043d8:	4313      	orrs	r3, r2
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043dc:	4b9e      	ldr	r3, [pc, #632]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80043ec:	4a9a      	ldr	r2, [pc, #616]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ee:	430b      	orrs	r3, r1
 80043f0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80043fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004400:	2300      	movs	r3, #0
 8004402:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004404:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004408:	460b      	mov	r3, r1
 800440a:	4313      	orrs	r3, r2
 800440c:	d009      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800440e:	4b92      	ldr	r3, [pc, #584]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004412:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800441c:	4a8e      	ldr	r2, [pc, #568]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800441e:	430b      	orrs	r3, r1
 8004420:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800442e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004430:	2300      	movs	r3, #0
 8004432:	647b      	str	r3, [r7, #68]	@ 0x44
 8004434:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004438:	460b      	mov	r3, r1
 800443a:	4313      	orrs	r3, r2
 800443c:	d00e      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800443e:	4b86      	ldr	r3, [pc, #536]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	4a85      	ldr	r2, [pc, #532]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004444:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004448:	6113      	str	r3, [r2, #16]
 800444a:	4b83      	ldr	r3, [pc, #524]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800444c:	6919      	ldr	r1, [r3, #16]
 800444e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004452:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004456:	4a80      	ldr	r2, [pc, #512]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004458:	430b      	orrs	r3, r1
 800445a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800445c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004468:	63bb      	str	r3, [r7, #56]	@ 0x38
 800446a:	2300      	movs	r3, #0
 800446c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800446e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004472:	460b      	mov	r3, r1
 8004474:	4313      	orrs	r3, r2
 8004476:	d009      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004478:	4b77      	ldr	r3, [pc, #476]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800447a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004486:	4a74      	ldr	r2, [pc, #464]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004488:	430b      	orrs	r3, r1
 800448a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004498:	633b      	str	r3, [r7, #48]	@ 0x30
 800449a:	2300      	movs	r3, #0
 800449c:	637b      	str	r3, [r7, #52]	@ 0x34
 800449e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80044a2:	460b      	mov	r3, r1
 80044a4:	4313      	orrs	r3, r2
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044a8:	4b6b      	ldr	r3, [pc, #428]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80044b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044b8:	4a67      	ldr	r2, [pc, #412]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ba:	430b      	orrs	r3, r1
 80044bc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80044be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c6:	2100      	movs	r1, #0
 80044c8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80044d4:	460b      	mov	r3, r1
 80044d6:	4313      	orrs	r3, r2
 80044d8:	d011      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044de:	3308      	adds	r3, #8
 80044e0:	2100      	movs	r1, #0
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 f8ba 	bl	800465c <RCCEx_PLL2_Config>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004506:	2100      	movs	r1, #0
 8004508:	6239      	str	r1, [r7, #32]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004510:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004514:	460b      	mov	r3, r1
 8004516:	4313      	orrs	r3, r2
 8004518:	d011      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800451a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451e:	3308      	adds	r3, #8
 8004520:	2101      	movs	r1, #1
 8004522:	4618      	mov	r0, r3
 8004524:	f000 f89a 	bl	800465c <RCCEx_PLL2_Config>
 8004528:	4603      	mov	r3, r0
 800452a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800452e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800453a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004546:	2100      	movs	r1, #0
 8004548:	61b9      	str	r1, [r7, #24]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004554:	460b      	mov	r3, r1
 8004556:	4313      	orrs	r3, r2
 8004558:	d011      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	3308      	adds	r3, #8
 8004560:	2102      	movs	r1, #2
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f87a 	bl	800465c <RCCEx_PLL2_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800456e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800457a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	2100      	movs	r1, #0
 8004588:	6139      	str	r1, [r7, #16]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004594:	460b      	mov	r3, r1
 8004596:	4313      	orrs	r3, r2
 8004598:	d011      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459e:	3328      	adds	r3, #40	@ 0x28
 80045a0:	2100      	movs	r1, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f90c 	bl	80047c0 <RCCEx_PLL3_Config>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80045ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	2100      	movs	r1, #0
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80045d4:	460b      	mov	r3, r1
 80045d6:	4313      	orrs	r3, r2
 80045d8:	d011      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045de:	3328      	adds	r3, #40	@ 0x28
 80045e0:	2101      	movs	r1, #1
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 f8ec 	bl	80047c0 <RCCEx_PLL3_Config>
 80045e8:	4603      	mov	r3, r0
 80045ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	2100      	movs	r1, #0
 8004608:	6039      	str	r1, [r7, #0]
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	607b      	str	r3, [r7, #4]
 8004610:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004614:	460b      	mov	r3, r1
 8004616:	4313      	orrs	r3, r2
 8004618:	d011      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461e:	3328      	adds	r3, #40	@ 0x28
 8004620:	2102      	movs	r1, #2
 8004622:	4618      	mov	r0, r3
 8004624:	f000 f8cc 	bl	80047c0 <RCCEx_PLL3_Config>
 8004628:	4603      	mov	r3, r0
 800462a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800462e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800463a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800463e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	e000      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
}
 800464c:	4618      	mov	r0, r3
 800464e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004652:	46bd      	mov	sp, r7
 8004654:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004658:	58024400 	.word	0x58024400

0800465c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800466a:	4b53      	ldr	r3, [pc, #332]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 800466c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b03      	cmp	r3, #3
 8004674:	d101      	bne.n	800467a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e099      	b.n	80047ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800467a:	4b4f      	ldr	r3, [pc, #316]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a4e      	ldr	r2, [pc, #312]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 8004680:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004686:	f7fc fbd3 	bl	8000e30 <HAL_GetTick>
 800468a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800468c:	e008      	b.n	80046a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800468e:	f7fc fbcf 	bl	8000e30 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e086      	b.n	80047ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80046a0:	4b45      	ldr	r3, [pc, #276]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f0      	bne.n	800468e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80046ac:	4b42      	ldr	r3, [pc, #264]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 80046ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	031b      	lsls	r3, r3, #12
 80046ba:	493f      	ldr	r1, [pc, #252]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	628b      	str	r3, [r1, #40]	@ 0x28
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	025b      	lsls	r3, r3, #9
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	3b01      	subs	r3, #1
 80046dc:	041b      	lsls	r3, r3, #16
 80046de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	061b      	lsls	r3, r3, #24
 80046ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80046f0:	4931      	ldr	r1, [pc, #196]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80046f6:	4b30      	ldr	r3, [pc, #192]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 80046f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	492d      	ldr	r1, [pc, #180]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 8004704:	4313      	orrs	r3, r2
 8004706:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004708:	4b2b      	ldr	r3, [pc, #172]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 800470a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470c:	f023 0220 	bic.w	r2, r3, #32
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	4928      	ldr	r1, [pc, #160]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 8004716:	4313      	orrs	r3, r2
 8004718:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800471a:	4b27      	ldr	r3, [pc, #156]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 800471c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471e:	4a26      	ldr	r2, [pc, #152]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 8004720:	f023 0310 	bic.w	r3, r3, #16
 8004724:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004726:	4b24      	ldr	r3, [pc, #144]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 8004728:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800472a:	4b24      	ldr	r3, [pc, #144]	@ (80047bc <RCCEx_PLL2_Config+0x160>)
 800472c:	4013      	ands	r3, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	69d2      	ldr	r2, [r2, #28]
 8004732:	00d2      	lsls	r2, r2, #3
 8004734:	4920      	ldr	r1, [pc, #128]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 8004736:	4313      	orrs	r3, r2
 8004738:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800473a:	4b1f      	ldr	r3, [pc, #124]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 800473c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473e:	4a1e      	ldr	r2, [pc, #120]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 8004740:	f043 0310 	orr.w	r3, r3, #16
 8004744:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d106      	bne.n	800475a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800474c:	4b1a      	ldr	r3, [pc, #104]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 800474e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004750:	4a19      	ldr	r2, [pc, #100]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 8004752:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004756:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004758:	e00f      	b.n	800477a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d106      	bne.n	800476e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004760:	4b15      	ldr	r3, [pc, #84]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	4a14      	ldr	r2, [pc, #80]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 8004766:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800476a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800476c:	e005      	b.n	800477a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800476e:	4b12      	ldr	r3, [pc, #72]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 8004770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004772:	4a11      	ldr	r2, [pc, #68]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 8004774:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004778:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800477a:	4b0f      	ldr	r3, [pc, #60]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a0e      	ldr	r2, [pc, #56]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 8004780:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004786:	f7fc fb53 	bl	8000e30 <HAL_GetTick>
 800478a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800478c:	e008      	b.n	80047a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800478e:	f7fc fb4f 	bl	8000e30 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e006      	b.n	80047ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80047a0:	4b05      	ldr	r3, [pc, #20]	@ (80047b8 <RCCEx_PLL2_Config+0x15c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	58024400 	.word	0x58024400
 80047bc:	ffff0007 	.word	0xffff0007

080047c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047ce:	4b53      	ldr	r3, [pc, #332]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 80047d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d101      	bne.n	80047de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e099      	b.n	8004912 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80047de:	4b4f      	ldr	r3, [pc, #316]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a4e      	ldr	r2, [pc, #312]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 80047e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ea:	f7fc fb21 	bl	8000e30 <HAL_GetTick>
 80047ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047f0:	e008      	b.n	8004804 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047f2:	f7fc fb1d 	bl	8000e30 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e086      	b.n	8004912 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004804:	4b45      	ldr	r3, [pc, #276]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f0      	bne.n	80047f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004810:	4b42      	ldr	r3, [pc, #264]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 8004812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004814:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	051b      	lsls	r3, r3, #20
 800481e:	493f      	ldr	r1, [pc, #252]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 8004820:	4313      	orrs	r3, r2
 8004822:	628b      	str	r3, [r1, #40]	@ 0x28
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	3b01      	subs	r3, #1
 800482a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	3b01      	subs	r3, #1
 8004834:	025b      	lsls	r3, r3, #9
 8004836:	b29b      	uxth	r3, r3
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	3b01      	subs	r3, #1
 8004840:	041b      	lsls	r3, r3, #16
 8004842:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	3b01      	subs	r3, #1
 800484e:	061b      	lsls	r3, r3, #24
 8004850:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004854:	4931      	ldr	r1, [pc, #196]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 8004856:	4313      	orrs	r3, r2
 8004858:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800485a:	4b30      	ldr	r3, [pc, #192]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 800485c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	492d      	ldr	r1, [pc, #180]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 8004868:	4313      	orrs	r3, r2
 800486a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800486c:	4b2b      	ldr	r3, [pc, #172]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 800486e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004870:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	4928      	ldr	r1, [pc, #160]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 800487a:	4313      	orrs	r3, r2
 800487c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800487e:	4b27      	ldr	r3, [pc, #156]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 8004880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004882:	4a26      	ldr	r2, [pc, #152]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 8004884:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004888:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800488a:	4b24      	ldr	r3, [pc, #144]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 800488c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800488e:	4b24      	ldr	r3, [pc, #144]	@ (8004920 <RCCEx_PLL3_Config+0x160>)
 8004890:	4013      	ands	r3, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	69d2      	ldr	r2, [r2, #28]
 8004896:	00d2      	lsls	r2, r2, #3
 8004898:	4920      	ldr	r1, [pc, #128]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 800489a:	4313      	orrs	r3, r2
 800489c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800489e:	4b1f      	ldr	r3, [pc, #124]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 80048a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a2:	4a1e      	ldr	r2, [pc, #120]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 80048a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d106      	bne.n	80048be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80048b0:	4b1a      	ldr	r3, [pc, #104]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 80048b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b4:	4a19      	ldr	r2, [pc, #100]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 80048b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80048bc:	e00f      	b.n	80048de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d106      	bne.n	80048d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80048c4:	4b15      	ldr	r3, [pc, #84]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 80048c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c8:	4a14      	ldr	r2, [pc, #80]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 80048ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80048d0:	e005      	b.n	80048de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80048d2:	4b12      	ldr	r3, [pc, #72]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 80048d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d6:	4a11      	ldr	r2, [pc, #68]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 80048d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80048de:	4b0f      	ldr	r3, [pc, #60]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a0e      	ldr	r2, [pc, #56]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 80048e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ea:	f7fc faa1 	bl	8000e30 <HAL_GetTick>
 80048ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048f0:	e008      	b.n	8004904 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80048f2:	f7fc fa9d 	bl	8000e30 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e006      	b.n	8004912 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004904:	4b05      	ldr	r3, [pc, #20]	@ (800491c <RCCEx_PLL3_Config+0x15c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004910:	7bfb      	ldrb	r3, [r7, #15]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	58024400 	.word	0x58024400
 8004920:	ffff0007 	.word	0xffff0007

08004924 <__cvt>:
 8004924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004926:	ed2d 8b02 	vpush	{d8}
 800492a:	eeb0 8b40 	vmov.f64	d8, d0
 800492e:	b085      	sub	sp, #20
 8004930:	4617      	mov	r7, r2
 8004932:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8004934:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004936:	ee18 2a90 	vmov	r2, s17
 800493a:	f025 0520 	bic.w	r5, r5, #32
 800493e:	2a00      	cmp	r2, #0
 8004940:	bfb6      	itet	lt
 8004942:	222d      	movlt	r2, #45	@ 0x2d
 8004944:	2200      	movge	r2, #0
 8004946:	eeb1 8b40 	vneglt.f64	d8, d0
 800494a:	2d46      	cmp	r5, #70	@ 0x46
 800494c:	460c      	mov	r4, r1
 800494e:	701a      	strb	r2, [r3, #0]
 8004950:	d004      	beq.n	800495c <__cvt+0x38>
 8004952:	2d45      	cmp	r5, #69	@ 0x45
 8004954:	d100      	bne.n	8004958 <__cvt+0x34>
 8004956:	3401      	adds	r4, #1
 8004958:	2102      	movs	r1, #2
 800495a:	e000      	b.n	800495e <__cvt+0x3a>
 800495c:	2103      	movs	r1, #3
 800495e:	ab03      	add	r3, sp, #12
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	ab02      	add	r3, sp, #8
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	4622      	mov	r2, r4
 8004968:	4633      	mov	r3, r6
 800496a:	eeb0 0b48 	vmov.f64	d0, d8
 800496e:	f000 ff23 	bl	80057b8 <_dtoa_r>
 8004972:	2d47      	cmp	r5, #71	@ 0x47
 8004974:	d114      	bne.n	80049a0 <__cvt+0x7c>
 8004976:	07fb      	lsls	r3, r7, #31
 8004978:	d50a      	bpl.n	8004990 <__cvt+0x6c>
 800497a:	1902      	adds	r2, r0, r4
 800497c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004984:	bf08      	it	eq
 8004986:	9203      	streq	r2, [sp, #12]
 8004988:	2130      	movs	r1, #48	@ 0x30
 800498a:	9b03      	ldr	r3, [sp, #12]
 800498c:	4293      	cmp	r3, r2
 800498e:	d319      	bcc.n	80049c4 <__cvt+0xa0>
 8004990:	9b03      	ldr	r3, [sp, #12]
 8004992:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004994:	1a1b      	subs	r3, r3, r0
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	b005      	add	sp, #20
 800499a:	ecbd 8b02 	vpop	{d8}
 800499e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049a0:	2d46      	cmp	r5, #70	@ 0x46
 80049a2:	eb00 0204 	add.w	r2, r0, r4
 80049a6:	d1e9      	bne.n	800497c <__cvt+0x58>
 80049a8:	7803      	ldrb	r3, [r0, #0]
 80049aa:	2b30      	cmp	r3, #48	@ 0x30
 80049ac:	d107      	bne.n	80049be <__cvt+0x9a>
 80049ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80049b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b6:	bf1c      	itt	ne
 80049b8:	f1c4 0401 	rsbne	r4, r4, #1
 80049bc:	6034      	strne	r4, [r6, #0]
 80049be:	6833      	ldr	r3, [r6, #0]
 80049c0:	441a      	add	r2, r3
 80049c2:	e7db      	b.n	800497c <__cvt+0x58>
 80049c4:	1c5c      	adds	r4, r3, #1
 80049c6:	9403      	str	r4, [sp, #12]
 80049c8:	7019      	strb	r1, [r3, #0]
 80049ca:	e7de      	b.n	800498a <__cvt+0x66>

080049cc <__exponent>:
 80049cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ce:	2900      	cmp	r1, #0
 80049d0:	bfba      	itte	lt
 80049d2:	4249      	neglt	r1, r1
 80049d4:	232d      	movlt	r3, #45	@ 0x2d
 80049d6:	232b      	movge	r3, #43	@ 0x2b
 80049d8:	2909      	cmp	r1, #9
 80049da:	7002      	strb	r2, [r0, #0]
 80049dc:	7043      	strb	r3, [r0, #1]
 80049de:	dd29      	ble.n	8004a34 <__exponent+0x68>
 80049e0:	f10d 0307 	add.w	r3, sp, #7
 80049e4:	461d      	mov	r5, r3
 80049e6:	270a      	movs	r7, #10
 80049e8:	461a      	mov	r2, r3
 80049ea:	fbb1 f6f7 	udiv	r6, r1, r7
 80049ee:	fb07 1416 	mls	r4, r7, r6, r1
 80049f2:	3430      	adds	r4, #48	@ 0x30
 80049f4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80049f8:	460c      	mov	r4, r1
 80049fa:	2c63      	cmp	r4, #99	@ 0x63
 80049fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a00:	4631      	mov	r1, r6
 8004a02:	dcf1      	bgt.n	80049e8 <__exponent+0x1c>
 8004a04:	3130      	adds	r1, #48	@ 0x30
 8004a06:	1e94      	subs	r4, r2, #2
 8004a08:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a0c:	1c41      	adds	r1, r0, #1
 8004a0e:	4623      	mov	r3, r4
 8004a10:	42ab      	cmp	r3, r5
 8004a12:	d30a      	bcc.n	8004a2a <__exponent+0x5e>
 8004a14:	f10d 0309 	add.w	r3, sp, #9
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	42ac      	cmp	r4, r5
 8004a1c:	bf88      	it	hi
 8004a1e:	2300      	movhi	r3, #0
 8004a20:	3302      	adds	r3, #2
 8004a22:	4403      	add	r3, r0
 8004a24:	1a18      	subs	r0, r3, r0
 8004a26:	b003      	add	sp, #12
 8004a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a2a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a2e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a32:	e7ed      	b.n	8004a10 <__exponent+0x44>
 8004a34:	2330      	movs	r3, #48	@ 0x30
 8004a36:	3130      	adds	r1, #48	@ 0x30
 8004a38:	7083      	strb	r3, [r0, #2]
 8004a3a:	70c1      	strb	r1, [r0, #3]
 8004a3c:	1d03      	adds	r3, r0, #4
 8004a3e:	e7f1      	b.n	8004a24 <__exponent+0x58>

08004a40 <_printf_float>:
 8004a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a44:	b08d      	sub	sp, #52	@ 0x34
 8004a46:	460c      	mov	r4, r1
 8004a48:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004a4c:	4616      	mov	r6, r2
 8004a4e:	461f      	mov	r7, r3
 8004a50:	4605      	mov	r5, r0
 8004a52:	f000 fdaf 	bl	80055b4 <_localeconv_r>
 8004a56:	f8d0 b000 	ldr.w	fp, [r0]
 8004a5a:	4658      	mov	r0, fp
 8004a5c:	f7fb fc90 	bl	8000380 <strlen>
 8004a60:	2300      	movs	r3, #0
 8004a62:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a64:	f8d8 3000 	ldr.w	r3, [r8]
 8004a68:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a6c:	6822      	ldr	r2, [r4, #0]
 8004a6e:	9005      	str	r0, [sp, #20]
 8004a70:	3307      	adds	r3, #7
 8004a72:	f023 0307 	bic.w	r3, r3, #7
 8004a76:	f103 0108 	add.w	r1, r3, #8
 8004a7a:	f8c8 1000 	str.w	r1, [r8]
 8004a7e:	ed93 0b00 	vldr	d0, [r3]
 8004a82:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8004ce0 <_printf_float+0x2a0>
 8004a86:	eeb0 7bc0 	vabs.f64	d7, d0
 8004a8a:	eeb4 7b46 	vcmp.f64	d7, d6
 8004a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a92:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8004a96:	dd24      	ble.n	8004ae2 <_printf_float+0xa2>
 8004a98:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa0:	d502      	bpl.n	8004aa8 <_printf_float+0x68>
 8004aa2:	232d      	movs	r3, #45	@ 0x2d
 8004aa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004aa8:	498f      	ldr	r1, [pc, #572]	@ (8004ce8 <_printf_float+0x2a8>)
 8004aaa:	4b90      	ldr	r3, [pc, #576]	@ (8004cec <_printf_float+0x2ac>)
 8004aac:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8004ab0:	bf94      	ite	ls
 8004ab2:	4688      	movls	r8, r1
 8004ab4:	4698      	movhi	r8, r3
 8004ab6:	f022 0204 	bic.w	r2, r2, #4
 8004aba:	2303      	movs	r3, #3
 8004abc:	6123      	str	r3, [r4, #16]
 8004abe:	6022      	str	r2, [r4, #0]
 8004ac0:	f04f 0a00 	mov.w	sl, #0
 8004ac4:	9700      	str	r7, [sp, #0]
 8004ac6:	4633      	mov	r3, r6
 8004ac8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004aca:	4621      	mov	r1, r4
 8004acc:	4628      	mov	r0, r5
 8004ace:	f000 f9d1 	bl	8004e74 <_printf_common>
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	f040 8089 	bne.w	8004bea <_printf_float+0x1aa>
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	b00d      	add	sp, #52	@ 0x34
 8004ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae2:	eeb4 0b40 	vcmp.f64	d0, d0
 8004ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aea:	d709      	bvc.n	8004b00 <_printf_float+0xc0>
 8004aec:	ee10 3a90 	vmov	r3, s1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	bfbc      	itt	lt
 8004af4:	232d      	movlt	r3, #45	@ 0x2d
 8004af6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004afa:	497d      	ldr	r1, [pc, #500]	@ (8004cf0 <_printf_float+0x2b0>)
 8004afc:	4b7d      	ldr	r3, [pc, #500]	@ (8004cf4 <_printf_float+0x2b4>)
 8004afe:	e7d5      	b.n	8004aac <_printf_float+0x6c>
 8004b00:	6863      	ldr	r3, [r4, #4]
 8004b02:	1c59      	adds	r1, r3, #1
 8004b04:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8004b08:	d139      	bne.n	8004b7e <_printf_float+0x13e>
 8004b0a:	2306      	movs	r3, #6
 8004b0c:	6063      	str	r3, [r4, #4]
 8004b0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b12:	2300      	movs	r3, #0
 8004b14:	6022      	str	r2, [r4, #0]
 8004b16:	9303      	str	r3, [sp, #12]
 8004b18:	ab0a      	add	r3, sp, #40	@ 0x28
 8004b1a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004b1e:	ab09      	add	r3, sp, #36	@ 0x24
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	6861      	ldr	r1, [r4, #4]
 8004b24:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f7ff fefb 	bl	8004924 <__cvt>
 8004b2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004b34:	4680      	mov	r8, r0
 8004b36:	d129      	bne.n	8004b8c <_printf_float+0x14c>
 8004b38:	1cc8      	adds	r0, r1, #3
 8004b3a:	db02      	blt.n	8004b42 <_printf_float+0x102>
 8004b3c:	6863      	ldr	r3, [r4, #4]
 8004b3e:	4299      	cmp	r1, r3
 8004b40:	dd41      	ble.n	8004bc6 <_printf_float+0x186>
 8004b42:	f1a9 0902 	sub.w	r9, r9, #2
 8004b46:	fa5f f989 	uxtb.w	r9, r9
 8004b4a:	3901      	subs	r1, #1
 8004b4c:	464a      	mov	r2, r9
 8004b4e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004b52:	9109      	str	r1, [sp, #36]	@ 0x24
 8004b54:	f7ff ff3a 	bl	80049cc <__exponent>
 8004b58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b5a:	1813      	adds	r3, r2, r0
 8004b5c:	2a01      	cmp	r2, #1
 8004b5e:	4682      	mov	sl, r0
 8004b60:	6123      	str	r3, [r4, #16]
 8004b62:	dc02      	bgt.n	8004b6a <_printf_float+0x12a>
 8004b64:	6822      	ldr	r2, [r4, #0]
 8004b66:	07d2      	lsls	r2, r2, #31
 8004b68:	d501      	bpl.n	8004b6e <_printf_float+0x12e>
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	6123      	str	r3, [r4, #16]
 8004b6e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0a6      	beq.n	8004ac4 <_printf_float+0x84>
 8004b76:	232d      	movs	r3, #45	@ 0x2d
 8004b78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b7c:	e7a2      	b.n	8004ac4 <_printf_float+0x84>
 8004b7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b82:	d1c4      	bne.n	8004b0e <_printf_float+0xce>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1c2      	bne.n	8004b0e <_printf_float+0xce>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e7bf      	b.n	8004b0c <_printf_float+0xcc>
 8004b8c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004b90:	d9db      	bls.n	8004b4a <_printf_float+0x10a>
 8004b92:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8004b96:	d118      	bne.n	8004bca <_printf_float+0x18a>
 8004b98:	2900      	cmp	r1, #0
 8004b9a:	6863      	ldr	r3, [r4, #4]
 8004b9c:	dd0b      	ble.n	8004bb6 <_printf_float+0x176>
 8004b9e:	6121      	str	r1, [r4, #16]
 8004ba0:	b913      	cbnz	r3, 8004ba8 <_printf_float+0x168>
 8004ba2:	6822      	ldr	r2, [r4, #0]
 8004ba4:	07d0      	lsls	r0, r2, #31
 8004ba6:	d502      	bpl.n	8004bae <_printf_float+0x16e>
 8004ba8:	3301      	adds	r3, #1
 8004baa:	440b      	add	r3, r1
 8004bac:	6123      	str	r3, [r4, #16]
 8004bae:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004bb0:	f04f 0a00 	mov.w	sl, #0
 8004bb4:	e7db      	b.n	8004b6e <_printf_float+0x12e>
 8004bb6:	b913      	cbnz	r3, 8004bbe <_printf_float+0x17e>
 8004bb8:	6822      	ldr	r2, [r4, #0]
 8004bba:	07d2      	lsls	r2, r2, #31
 8004bbc:	d501      	bpl.n	8004bc2 <_printf_float+0x182>
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	e7f4      	b.n	8004bac <_printf_float+0x16c>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e7f2      	b.n	8004bac <_printf_float+0x16c>
 8004bc6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8004bca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bcc:	4299      	cmp	r1, r3
 8004bce:	db05      	blt.n	8004bdc <_printf_float+0x19c>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	6121      	str	r1, [r4, #16]
 8004bd4:	07d8      	lsls	r0, r3, #31
 8004bd6:	d5ea      	bpl.n	8004bae <_printf_float+0x16e>
 8004bd8:	1c4b      	adds	r3, r1, #1
 8004bda:	e7e7      	b.n	8004bac <_printf_float+0x16c>
 8004bdc:	2900      	cmp	r1, #0
 8004bde:	bfd4      	ite	le
 8004be0:	f1c1 0202 	rsble	r2, r1, #2
 8004be4:	2201      	movgt	r2, #1
 8004be6:	4413      	add	r3, r2
 8004be8:	e7e0      	b.n	8004bac <_printf_float+0x16c>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	055a      	lsls	r2, r3, #21
 8004bee:	d407      	bmi.n	8004c00 <_printf_float+0x1c0>
 8004bf0:	6923      	ldr	r3, [r4, #16]
 8004bf2:	4642      	mov	r2, r8
 8004bf4:	4631      	mov	r1, r6
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	47b8      	blx	r7
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	d12a      	bne.n	8004c54 <_printf_float+0x214>
 8004bfe:	e76b      	b.n	8004ad8 <_printf_float+0x98>
 8004c00:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004c04:	f240 80e0 	bls.w	8004dc8 <_printf_float+0x388>
 8004c08:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004c0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c14:	d133      	bne.n	8004c7e <_printf_float+0x23e>
 8004c16:	4a38      	ldr	r2, [pc, #224]	@ (8004cf8 <_printf_float+0x2b8>)
 8004c18:	2301      	movs	r3, #1
 8004c1a:	4631      	mov	r1, r6
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	47b8      	blx	r7
 8004c20:	3001      	adds	r0, #1
 8004c22:	f43f af59 	beq.w	8004ad8 <_printf_float+0x98>
 8004c26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004c2a:	4543      	cmp	r3, r8
 8004c2c:	db02      	blt.n	8004c34 <_printf_float+0x1f4>
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	07d8      	lsls	r0, r3, #31
 8004c32:	d50f      	bpl.n	8004c54 <_printf_float+0x214>
 8004c34:	9b05      	ldr	r3, [sp, #20]
 8004c36:	465a      	mov	r2, fp
 8004c38:	4631      	mov	r1, r6
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	47b8      	blx	r7
 8004c3e:	3001      	adds	r0, #1
 8004c40:	f43f af4a 	beq.w	8004ad8 <_printf_float+0x98>
 8004c44:	f04f 0900 	mov.w	r9, #0
 8004c48:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c4c:	f104 0a1a 	add.w	sl, r4, #26
 8004c50:	45c8      	cmp	r8, r9
 8004c52:	dc09      	bgt.n	8004c68 <_printf_float+0x228>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	079b      	lsls	r3, r3, #30
 8004c58:	f100 8107 	bmi.w	8004e6a <_printf_float+0x42a>
 8004c5c:	68e0      	ldr	r0, [r4, #12]
 8004c5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c60:	4298      	cmp	r0, r3
 8004c62:	bfb8      	it	lt
 8004c64:	4618      	movlt	r0, r3
 8004c66:	e739      	b.n	8004adc <_printf_float+0x9c>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	4652      	mov	r2, sl
 8004c6c:	4631      	mov	r1, r6
 8004c6e:	4628      	mov	r0, r5
 8004c70:	47b8      	blx	r7
 8004c72:	3001      	adds	r0, #1
 8004c74:	f43f af30 	beq.w	8004ad8 <_printf_float+0x98>
 8004c78:	f109 0901 	add.w	r9, r9, #1
 8004c7c:	e7e8      	b.n	8004c50 <_printf_float+0x210>
 8004c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	dc3b      	bgt.n	8004cfc <_printf_float+0x2bc>
 8004c84:	4a1c      	ldr	r2, [pc, #112]	@ (8004cf8 <_printf_float+0x2b8>)
 8004c86:	2301      	movs	r3, #1
 8004c88:	4631      	mov	r1, r6
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	47b8      	blx	r7
 8004c8e:	3001      	adds	r0, #1
 8004c90:	f43f af22 	beq.w	8004ad8 <_printf_float+0x98>
 8004c94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004c98:	ea59 0303 	orrs.w	r3, r9, r3
 8004c9c:	d102      	bne.n	8004ca4 <_printf_float+0x264>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	07d9      	lsls	r1, r3, #31
 8004ca2:	d5d7      	bpl.n	8004c54 <_printf_float+0x214>
 8004ca4:	9b05      	ldr	r3, [sp, #20]
 8004ca6:	465a      	mov	r2, fp
 8004ca8:	4631      	mov	r1, r6
 8004caa:	4628      	mov	r0, r5
 8004cac:	47b8      	blx	r7
 8004cae:	3001      	adds	r0, #1
 8004cb0:	f43f af12 	beq.w	8004ad8 <_printf_float+0x98>
 8004cb4:	f04f 0a00 	mov.w	sl, #0
 8004cb8:	f104 0b1a 	add.w	fp, r4, #26
 8004cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cbe:	425b      	negs	r3, r3
 8004cc0:	4553      	cmp	r3, sl
 8004cc2:	dc01      	bgt.n	8004cc8 <_printf_float+0x288>
 8004cc4:	464b      	mov	r3, r9
 8004cc6:	e794      	b.n	8004bf2 <_printf_float+0x1b2>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	465a      	mov	r2, fp
 8004ccc:	4631      	mov	r1, r6
 8004cce:	4628      	mov	r0, r5
 8004cd0:	47b8      	blx	r7
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	f43f af00 	beq.w	8004ad8 <_printf_float+0x98>
 8004cd8:	f10a 0a01 	add.w	sl, sl, #1
 8004cdc:	e7ee      	b.n	8004cbc <_printf_float+0x27c>
 8004cde:	bf00      	nop
 8004ce0:	ffffffff 	.word	0xffffffff
 8004ce4:	7fefffff 	.word	0x7fefffff
 8004ce8:	080072e0 	.word	0x080072e0
 8004cec:	080072e4 	.word	0x080072e4
 8004cf0:	080072e8 	.word	0x080072e8
 8004cf4:	080072ec 	.word	0x080072ec
 8004cf8:	080072f0 	.word	0x080072f0
 8004cfc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004cfe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004d02:	4553      	cmp	r3, sl
 8004d04:	bfa8      	it	ge
 8004d06:	4653      	movge	r3, sl
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	4699      	mov	r9, r3
 8004d0c:	dc37      	bgt.n	8004d7e <_printf_float+0x33e>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	9307      	str	r3, [sp, #28]
 8004d12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d16:	f104 021a 	add.w	r2, r4, #26
 8004d1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d1c:	9907      	ldr	r1, [sp, #28]
 8004d1e:	9306      	str	r3, [sp, #24]
 8004d20:	eba3 0309 	sub.w	r3, r3, r9
 8004d24:	428b      	cmp	r3, r1
 8004d26:	dc31      	bgt.n	8004d8c <_printf_float+0x34c>
 8004d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d2a:	459a      	cmp	sl, r3
 8004d2c:	dc3b      	bgt.n	8004da6 <_printf_float+0x366>
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	07da      	lsls	r2, r3, #31
 8004d32:	d438      	bmi.n	8004da6 <_printf_float+0x366>
 8004d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d36:	ebaa 0903 	sub.w	r9, sl, r3
 8004d3a:	9b06      	ldr	r3, [sp, #24]
 8004d3c:	ebaa 0303 	sub.w	r3, sl, r3
 8004d40:	4599      	cmp	r9, r3
 8004d42:	bfa8      	it	ge
 8004d44:	4699      	movge	r9, r3
 8004d46:	f1b9 0f00 	cmp.w	r9, #0
 8004d4a:	dc34      	bgt.n	8004db6 <_printf_float+0x376>
 8004d4c:	f04f 0800 	mov.w	r8, #0
 8004d50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d54:	f104 0b1a 	add.w	fp, r4, #26
 8004d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d5a:	ebaa 0303 	sub.w	r3, sl, r3
 8004d5e:	eba3 0309 	sub.w	r3, r3, r9
 8004d62:	4543      	cmp	r3, r8
 8004d64:	f77f af76 	ble.w	8004c54 <_printf_float+0x214>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	465a      	mov	r2, fp
 8004d6c:	4631      	mov	r1, r6
 8004d6e:	4628      	mov	r0, r5
 8004d70:	47b8      	blx	r7
 8004d72:	3001      	adds	r0, #1
 8004d74:	f43f aeb0 	beq.w	8004ad8 <_printf_float+0x98>
 8004d78:	f108 0801 	add.w	r8, r8, #1
 8004d7c:	e7ec      	b.n	8004d58 <_printf_float+0x318>
 8004d7e:	4642      	mov	r2, r8
 8004d80:	4631      	mov	r1, r6
 8004d82:	4628      	mov	r0, r5
 8004d84:	47b8      	blx	r7
 8004d86:	3001      	adds	r0, #1
 8004d88:	d1c1      	bne.n	8004d0e <_printf_float+0x2ce>
 8004d8a:	e6a5      	b.n	8004ad8 <_printf_float+0x98>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	4631      	mov	r1, r6
 8004d90:	4628      	mov	r0, r5
 8004d92:	9206      	str	r2, [sp, #24]
 8004d94:	47b8      	blx	r7
 8004d96:	3001      	adds	r0, #1
 8004d98:	f43f ae9e 	beq.w	8004ad8 <_printf_float+0x98>
 8004d9c:	9b07      	ldr	r3, [sp, #28]
 8004d9e:	9a06      	ldr	r2, [sp, #24]
 8004da0:	3301      	adds	r3, #1
 8004da2:	9307      	str	r3, [sp, #28]
 8004da4:	e7b9      	b.n	8004d1a <_printf_float+0x2da>
 8004da6:	9b05      	ldr	r3, [sp, #20]
 8004da8:	465a      	mov	r2, fp
 8004daa:	4631      	mov	r1, r6
 8004dac:	4628      	mov	r0, r5
 8004dae:	47b8      	blx	r7
 8004db0:	3001      	adds	r0, #1
 8004db2:	d1bf      	bne.n	8004d34 <_printf_float+0x2f4>
 8004db4:	e690      	b.n	8004ad8 <_printf_float+0x98>
 8004db6:	9a06      	ldr	r2, [sp, #24]
 8004db8:	464b      	mov	r3, r9
 8004dba:	4442      	add	r2, r8
 8004dbc:	4631      	mov	r1, r6
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	47b8      	blx	r7
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	d1c2      	bne.n	8004d4c <_printf_float+0x30c>
 8004dc6:	e687      	b.n	8004ad8 <_printf_float+0x98>
 8004dc8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8004dcc:	f1b9 0f01 	cmp.w	r9, #1
 8004dd0:	dc01      	bgt.n	8004dd6 <_printf_float+0x396>
 8004dd2:	07db      	lsls	r3, r3, #31
 8004dd4:	d536      	bpl.n	8004e44 <_printf_float+0x404>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	4642      	mov	r2, r8
 8004dda:	4631      	mov	r1, r6
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b8      	blx	r7
 8004de0:	3001      	adds	r0, #1
 8004de2:	f43f ae79 	beq.w	8004ad8 <_printf_float+0x98>
 8004de6:	9b05      	ldr	r3, [sp, #20]
 8004de8:	465a      	mov	r2, fp
 8004dea:	4631      	mov	r1, r6
 8004dec:	4628      	mov	r0, r5
 8004dee:	47b8      	blx	r7
 8004df0:	3001      	adds	r0, #1
 8004df2:	f43f ae71 	beq.w	8004ad8 <_printf_float+0x98>
 8004df6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004dfa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e02:	f109 39ff 	add.w	r9, r9, #4294967295
 8004e06:	d018      	beq.n	8004e3a <_printf_float+0x3fa>
 8004e08:	464b      	mov	r3, r9
 8004e0a:	f108 0201 	add.w	r2, r8, #1
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4628      	mov	r0, r5
 8004e12:	47b8      	blx	r7
 8004e14:	3001      	adds	r0, #1
 8004e16:	d10c      	bne.n	8004e32 <_printf_float+0x3f2>
 8004e18:	e65e      	b.n	8004ad8 <_printf_float+0x98>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	465a      	mov	r2, fp
 8004e1e:	4631      	mov	r1, r6
 8004e20:	4628      	mov	r0, r5
 8004e22:	47b8      	blx	r7
 8004e24:	3001      	adds	r0, #1
 8004e26:	f43f ae57 	beq.w	8004ad8 <_printf_float+0x98>
 8004e2a:	f108 0801 	add.w	r8, r8, #1
 8004e2e:	45c8      	cmp	r8, r9
 8004e30:	dbf3      	blt.n	8004e1a <_printf_float+0x3da>
 8004e32:	4653      	mov	r3, sl
 8004e34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e38:	e6dc      	b.n	8004bf4 <_printf_float+0x1b4>
 8004e3a:	f04f 0800 	mov.w	r8, #0
 8004e3e:	f104 0b1a 	add.w	fp, r4, #26
 8004e42:	e7f4      	b.n	8004e2e <_printf_float+0x3ee>
 8004e44:	2301      	movs	r3, #1
 8004e46:	4642      	mov	r2, r8
 8004e48:	e7e1      	b.n	8004e0e <_printf_float+0x3ce>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	464a      	mov	r2, r9
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4628      	mov	r0, r5
 8004e52:	47b8      	blx	r7
 8004e54:	3001      	adds	r0, #1
 8004e56:	f43f ae3f 	beq.w	8004ad8 <_printf_float+0x98>
 8004e5a:	f108 0801 	add.w	r8, r8, #1
 8004e5e:	68e3      	ldr	r3, [r4, #12]
 8004e60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e62:	1a5b      	subs	r3, r3, r1
 8004e64:	4543      	cmp	r3, r8
 8004e66:	dcf0      	bgt.n	8004e4a <_printf_float+0x40a>
 8004e68:	e6f8      	b.n	8004c5c <_printf_float+0x21c>
 8004e6a:	f04f 0800 	mov.w	r8, #0
 8004e6e:	f104 0919 	add.w	r9, r4, #25
 8004e72:	e7f4      	b.n	8004e5e <_printf_float+0x41e>

08004e74 <_printf_common>:
 8004e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e78:	4616      	mov	r6, r2
 8004e7a:	4698      	mov	r8, r3
 8004e7c:	688a      	ldr	r2, [r1, #8]
 8004e7e:	690b      	ldr	r3, [r1, #16]
 8004e80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e84:	4293      	cmp	r3, r2
 8004e86:	bfb8      	it	lt
 8004e88:	4613      	movlt	r3, r2
 8004e8a:	6033      	str	r3, [r6, #0]
 8004e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e90:	4607      	mov	r7, r0
 8004e92:	460c      	mov	r4, r1
 8004e94:	b10a      	cbz	r2, 8004e9a <_printf_common+0x26>
 8004e96:	3301      	adds	r3, #1
 8004e98:	6033      	str	r3, [r6, #0]
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	0699      	lsls	r1, r3, #26
 8004e9e:	bf42      	ittt	mi
 8004ea0:	6833      	ldrmi	r3, [r6, #0]
 8004ea2:	3302      	addmi	r3, #2
 8004ea4:	6033      	strmi	r3, [r6, #0]
 8004ea6:	6825      	ldr	r5, [r4, #0]
 8004ea8:	f015 0506 	ands.w	r5, r5, #6
 8004eac:	d106      	bne.n	8004ebc <_printf_common+0x48>
 8004eae:	f104 0a19 	add.w	sl, r4, #25
 8004eb2:	68e3      	ldr	r3, [r4, #12]
 8004eb4:	6832      	ldr	r2, [r6, #0]
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	42ab      	cmp	r3, r5
 8004eba:	dc26      	bgt.n	8004f0a <_printf_common+0x96>
 8004ebc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ec0:	6822      	ldr	r2, [r4, #0]
 8004ec2:	3b00      	subs	r3, #0
 8004ec4:	bf18      	it	ne
 8004ec6:	2301      	movne	r3, #1
 8004ec8:	0692      	lsls	r2, r2, #26
 8004eca:	d42b      	bmi.n	8004f24 <_printf_common+0xb0>
 8004ecc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ed0:	4641      	mov	r1, r8
 8004ed2:	4638      	mov	r0, r7
 8004ed4:	47c8      	blx	r9
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	d01e      	beq.n	8004f18 <_printf_common+0xa4>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	6922      	ldr	r2, [r4, #16]
 8004ede:	f003 0306 	and.w	r3, r3, #6
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	bf02      	ittt	eq
 8004ee6:	68e5      	ldreq	r5, [r4, #12]
 8004ee8:	6833      	ldreq	r3, [r6, #0]
 8004eea:	1aed      	subeq	r5, r5, r3
 8004eec:	68a3      	ldr	r3, [r4, #8]
 8004eee:	bf0c      	ite	eq
 8004ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ef4:	2500      	movne	r5, #0
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	bfc4      	itt	gt
 8004efa:	1a9b      	subgt	r3, r3, r2
 8004efc:	18ed      	addgt	r5, r5, r3
 8004efe:	2600      	movs	r6, #0
 8004f00:	341a      	adds	r4, #26
 8004f02:	42b5      	cmp	r5, r6
 8004f04:	d11a      	bne.n	8004f3c <_printf_common+0xc8>
 8004f06:	2000      	movs	r0, #0
 8004f08:	e008      	b.n	8004f1c <_printf_common+0xa8>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	4652      	mov	r2, sl
 8004f0e:	4641      	mov	r1, r8
 8004f10:	4638      	mov	r0, r7
 8004f12:	47c8      	blx	r9
 8004f14:	3001      	adds	r0, #1
 8004f16:	d103      	bne.n	8004f20 <_printf_common+0xac>
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f20:	3501      	adds	r5, #1
 8004f22:	e7c6      	b.n	8004eb2 <_printf_common+0x3e>
 8004f24:	18e1      	adds	r1, r4, r3
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	2030      	movs	r0, #48	@ 0x30
 8004f2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f2e:	4422      	add	r2, r4
 8004f30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f38:	3302      	adds	r3, #2
 8004f3a:	e7c7      	b.n	8004ecc <_printf_common+0x58>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	4622      	mov	r2, r4
 8004f40:	4641      	mov	r1, r8
 8004f42:	4638      	mov	r0, r7
 8004f44:	47c8      	blx	r9
 8004f46:	3001      	adds	r0, #1
 8004f48:	d0e6      	beq.n	8004f18 <_printf_common+0xa4>
 8004f4a:	3601      	adds	r6, #1
 8004f4c:	e7d9      	b.n	8004f02 <_printf_common+0x8e>
	...

08004f50 <_printf_i>:
 8004f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f54:	7e0f      	ldrb	r7, [r1, #24]
 8004f56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f58:	2f78      	cmp	r7, #120	@ 0x78
 8004f5a:	4691      	mov	r9, r2
 8004f5c:	4680      	mov	r8, r0
 8004f5e:	460c      	mov	r4, r1
 8004f60:	469a      	mov	sl, r3
 8004f62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f66:	d807      	bhi.n	8004f78 <_printf_i+0x28>
 8004f68:	2f62      	cmp	r7, #98	@ 0x62
 8004f6a:	d80a      	bhi.n	8004f82 <_printf_i+0x32>
 8004f6c:	2f00      	cmp	r7, #0
 8004f6e:	f000 80d2 	beq.w	8005116 <_printf_i+0x1c6>
 8004f72:	2f58      	cmp	r7, #88	@ 0x58
 8004f74:	f000 80b9 	beq.w	80050ea <_printf_i+0x19a>
 8004f78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f80:	e03a      	b.n	8004ff8 <_printf_i+0xa8>
 8004f82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f86:	2b15      	cmp	r3, #21
 8004f88:	d8f6      	bhi.n	8004f78 <_printf_i+0x28>
 8004f8a:	a101      	add	r1, pc, #4	@ (adr r1, 8004f90 <_printf_i+0x40>)
 8004f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f90:	08004fe9 	.word	0x08004fe9
 8004f94:	08004ffd 	.word	0x08004ffd
 8004f98:	08004f79 	.word	0x08004f79
 8004f9c:	08004f79 	.word	0x08004f79
 8004fa0:	08004f79 	.word	0x08004f79
 8004fa4:	08004f79 	.word	0x08004f79
 8004fa8:	08004ffd 	.word	0x08004ffd
 8004fac:	08004f79 	.word	0x08004f79
 8004fb0:	08004f79 	.word	0x08004f79
 8004fb4:	08004f79 	.word	0x08004f79
 8004fb8:	08004f79 	.word	0x08004f79
 8004fbc:	080050fd 	.word	0x080050fd
 8004fc0:	08005027 	.word	0x08005027
 8004fc4:	080050b7 	.word	0x080050b7
 8004fc8:	08004f79 	.word	0x08004f79
 8004fcc:	08004f79 	.word	0x08004f79
 8004fd0:	0800511f 	.word	0x0800511f
 8004fd4:	08004f79 	.word	0x08004f79
 8004fd8:	08005027 	.word	0x08005027
 8004fdc:	08004f79 	.word	0x08004f79
 8004fe0:	08004f79 	.word	0x08004f79
 8004fe4:	080050bf 	.word	0x080050bf
 8004fe8:	6833      	ldr	r3, [r6, #0]
 8004fea:	1d1a      	adds	r2, r3, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6032      	str	r2, [r6, #0]
 8004ff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ff4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e09d      	b.n	8005138 <_printf_i+0x1e8>
 8004ffc:	6833      	ldr	r3, [r6, #0]
 8004ffe:	6820      	ldr	r0, [r4, #0]
 8005000:	1d19      	adds	r1, r3, #4
 8005002:	6031      	str	r1, [r6, #0]
 8005004:	0606      	lsls	r6, r0, #24
 8005006:	d501      	bpl.n	800500c <_printf_i+0xbc>
 8005008:	681d      	ldr	r5, [r3, #0]
 800500a:	e003      	b.n	8005014 <_printf_i+0xc4>
 800500c:	0645      	lsls	r5, r0, #25
 800500e:	d5fb      	bpl.n	8005008 <_printf_i+0xb8>
 8005010:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005014:	2d00      	cmp	r5, #0
 8005016:	da03      	bge.n	8005020 <_printf_i+0xd0>
 8005018:	232d      	movs	r3, #45	@ 0x2d
 800501a:	426d      	negs	r5, r5
 800501c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005020:	4859      	ldr	r0, [pc, #356]	@ (8005188 <_printf_i+0x238>)
 8005022:	230a      	movs	r3, #10
 8005024:	e011      	b.n	800504a <_printf_i+0xfa>
 8005026:	6821      	ldr	r1, [r4, #0]
 8005028:	6833      	ldr	r3, [r6, #0]
 800502a:	0608      	lsls	r0, r1, #24
 800502c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005030:	d402      	bmi.n	8005038 <_printf_i+0xe8>
 8005032:	0649      	lsls	r1, r1, #25
 8005034:	bf48      	it	mi
 8005036:	b2ad      	uxthmi	r5, r5
 8005038:	2f6f      	cmp	r7, #111	@ 0x6f
 800503a:	4853      	ldr	r0, [pc, #332]	@ (8005188 <_printf_i+0x238>)
 800503c:	6033      	str	r3, [r6, #0]
 800503e:	bf14      	ite	ne
 8005040:	230a      	movne	r3, #10
 8005042:	2308      	moveq	r3, #8
 8005044:	2100      	movs	r1, #0
 8005046:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800504a:	6866      	ldr	r6, [r4, #4]
 800504c:	60a6      	str	r6, [r4, #8]
 800504e:	2e00      	cmp	r6, #0
 8005050:	bfa2      	ittt	ge
 8005052:	6821      	ldrge	r1, [r4, #0]
 8005054:	f021 0104 	bicge.w	r1, r1, #4
 8005058:	6021      	strge	r1, [r4, #0]
 800505a:	b90d      	cbnz	r5, 8005060 <_printf_i+0x110>
 800505c:	2e00      	cmp	r6, #0
 800505e:	d04b      	beq.n	80050f8 <_printf_i+0x1a8>
 8005060:	4616      	mov	r6, r2
 8005062:	fbb5 f1f3 	udiv	r1, r5, r3
 8005066:	fb03 5711 	mls	r7, r3, r1, r5
 800506a:	5dc7      	ldrb	r7, [r0, r7]
 800506c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005070:	462f      	mov	r7, r5
 8005072:	42bb      	cmp	r3, r7
 8005074:	460d      	mov	r5, r1
 8005076:	d9f4      	bls.n	8005062 <_printf_i+0x112>
 8005078:	2b08      	cmp	r3, #8
 800507a:	d10b      	bne.n	8005094 <_printf_i+0x144>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	07df      	lsls	r7, r3, #31
 8005080:	d508      	bpl.n	8005094 <_printf_i+0x144>
 8005082:	6923      	ldr	r3, [r4, #16]
 8005084:	6861      	ldr	r1, [r4, #4]
 8005086:	4299      	cmp	r1, r3
 8005088:	bfde      	ittt	le
 800508a:	2330      	movle	r3, #48	@ 0x30
 800508c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005090:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005094:	1b92      	subs	r2, r2, r6
 8005096:	6122      	str	r2, [r4, #16]
 8005098:	f8cd a000 	str.w	sl, [sp]
 800509c:	464b      	mov	r3, r9
 800509e:	aa03      	add	r2, sp, #12
 80050a0:	4621      	mov	r1, r4
 80050a2:	4640      	mov	r0, r8
 80050a4:	f7ff fee6 	bl	8004e74 <_printf_common>
 80050a8:	3001      	adds	r0, #1
 80050aa:	d14a      	bne.n	8005142 <_printf_i+0x1f2>
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295
 80050b0:	b004      	add	sp, #16
 80050b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	f043 0320 	orr.w	r3, r3, #32
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	4833      	ldr	r0, [pc, #204]	@ (800518c <_printf_i+0x23c>)
 80050c0:	2778      	movs	r7, #120	@ 0x78
 80050c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	6831      	ldr	r1, [r6, #0]
 80050ca:	061f      	lsls	r7, r3, #24
 80050cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80050d0:	d402      	bmi.n	80050d8 <_printf_i+0x188>
 80050d2:	065f      	lsls	r7, r3, #25
 80050d4:	bf48      	it	mi
 80050d6:	b2ad      	uxthmi	r5, r5
 80050d8:	6031      	str	r1, [r6, #0]
 80050da:	07d9      	lsls	r1, r3, #31
 80050dc:	bf44      	itt	mi
 80050de:	f043 0320 	orrmi.w	r3, r3, #32
 80050e2:	6023      	strmi	r3, [r4, #0]
 80050e4:	b11d      	cbz	r5, 80050ee <_printf_i+0x19e>
 80050e6:	2310      	movs	r3, #16
 80050e8:	e7ac      	b.n	8005044 <_printf_i+0xf4>
 80050ea:	4827      	ldr	r0, [pc, #156]	@ (8005188 <_printf_i+0x238>)
 80050ec:	e7e9      	b.n	80050c2 <_printf_i+0x172>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	f023 0320 	bic.w	r3, r3, #32
 80050f4:	6023      	str	r3, [r4, #0]
 80050f6:	e7f6      	b.n	80050e6 <_printf_i+0x196>
 80050f8:	4616      	mov	r6, r2
 80050fa:	e7bd      	b.n	8005078 <_printf_i+0x128>
 80050fc:	6833      	ldr	r3, [r6, #0]
 80050fe:	6825      	ldr	r5, [r4, #0]
 8005100:	6961      	ldr	r1, [r4, #20]
 8005102:	1d18      	adds	r0, r3, #4
 8005104:	6030      	str	r0, [r6, #0]
 8005106:	062e      	lsls	r6, r5, #24
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	d501      	bpl.n	8005110 <_printf_i+0x1c0>
 800510c:	6019      	str	r1, [r3, #0]
 800510e:	e002      	b.n	8005116 <_printf_i+0x1c6>
 8005110:	0668      	lsls	r0, r5, #25
 8005112:	d5fb      	bpl.n	800510c <_printf_i+0x1bc>
 8005114:	8019      	strh	r1, [r3, #0]
 8005116:	2300      	movs	r3, #0
 8005118:	6123      	str	r3, [r4, #16]
 800511a:	4616      	mov	r6, r2
 800511c:	e7bc      	b.n	8005098 <_printf_i+0x148>
 800511e:	6833      	ldr	r3, [r6, #0]
 8005120:	1d1a      	adds	r2, r3, #4
 8005122:	6032      	str	r2, [r6, #0]
 8005124:	681e      	ldr	r6, [r3, #0]
 8005126:	6862      	ldr	r2, [r4, #4]
 8005128:	2100      	movs	r1, #0
 800512a:	4630      	mov	r0, r6
 800512c:	f7fb f8d8 	bl	80002e0 <memchr>
 8005130:	b108      	cbz	r0, 8005136 <_printf_i+0x1e6>
 8005132:	1b80      	subs	r0, r0, r6
 8005134:	6060      	str	r0, [r4, #4]
 8005136:	6863      	ldr	r3, [r4, #4]
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	2300      	movs	r3, #0
 800513c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005140:	e7aa      	b.n	8005098 <_printf_i+0x148>
 8005142:	6923      	ldr	r3, [r4, #16]
 8005144:	4632      	mov	r2, r6
 8005146:	4649      	mov	r1, r9
 8005148:	4640      	mov	r0, r8
 800514a:	47d0      	blx	sl
 800514c:	3001      	adds	r0, #1
 800514e:	d0ad      	beq.n	80050ac <_printf_i+0x15c>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	079b      	lsls	r3, r3, #30
 8005154:	d413      	bmi.n	800517e <_printf_i+0x22e>
 8005156:	68e0      	ldr	r0, [r4, #12]
 8005158:	9b03      	ldr	r3, [sp, #12]
 800515a:	4298      	cmp	r0, r3
 800515c:	bfb8      	it	lt
 800515e:	4618      	movlt	r0, r3
 8005160:	e7a6      	b.n	80050b0 <_printf_i+0x160>
 8005162:	2301      	movs	r3, #1
 8005164:	4632      	mov	r2, r6
 8005166:	4649      	mov	r1, r9
 8005168:	4640      	mov	r0, r8
 800516a:	47d0      	blx	sl
 800516c:	3001      	adds	r0, #1
 800516e:	d09d      	beq.n	80050ac <_printf_i+0x15c>
 8005170:	3501      	adds	r5, #1
 8005172:	68e3      	ldr	r3, [r4, #12]
 8005174:	9903      	ldr	r1, [sp, #12]
 8005176:	1a5b      	subs	r3, r3, r1
 8005178:	42ab      	cmp	r3, r5
 800517a:	dcf2      	bgt.n	8005162 <_printf_i+0x212>
 800517c:	e7eb      	b.n	8005156 <_printf_i+0x206>
 800517e:	2500      	movs	r5, #0
 8005180:	f104 0619 	add.w	r6, r4, #25
 8005184:	e7f5      	b.n	8005172 <_printf_i+0x222>
 8005186:	bf00      	nop
 8005188:	080072f2 	.word	0x080072f2
 800518c:	08007303 	.word	0x08007303

08005190 <std>:
 8005190:	2300      	movs	r3, #0
 8005192:	b510      	push	{r4, lr}
 8005194:	4604      	mov	r4, r0
 8005196:	e9c0 3300 	strd	r3, r3, [r0]
 800519a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800519e:	6083      	str	r3, [r0, #8]
 80051a0:	8181      	strh	r1, [r0, #12]
 80051a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80051a4:	81c2      	strh	r2, [r0, #14]
 80051a6:	6183      	str	r3, [r0, #24]
 80051a8:	4619      	mov	r1, r3
 80051aa:	2208      	movs	r2, #8
 80051ac:	305c      	adds	r0, #92	@ 0x5c
 80051ae:	f000 f9f9 	bl	80055a4 <memset>
 80051b2:	4b0d      	ldr	r3, [pc, #52]	@ (80051e8 <std+0x58>)
 80051b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80051b6:	4b0d      	ldr	r3, [pc, #52]	@ (80051ec <std+0x5c>)
 80051b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051ba:	4b0d      	ldr	r3, [pc, #52]	@ (80051f0 <std+0x60>)
 80051bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051be:	4b0d      	ldr	r3, [pc, #52]	@ (80051f4 <std+0x64>)
 80051c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80051c2:	4b0d      	ldr	r3, [pc, #52]	@ (80051f8 <std+0x68>)
 80051c4:	6224      	str	r4, [r4, #32]
 80051c6:	429c      	cmp	r4, r3
 80051c8:	d006      	beq.n	80051d8 <std+0x48>
 80051ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051ce:	4294      	cmp	r4, r2
 80051d0:	d002      	beq.n	80051d8 <std+0x48>
 80051d2:	33d0      	adds	r3, #208	@ 0xd0
 80051d4:	429c      	cmp	r4, r3
 80051d6:	d105      	bne.n	80051e4 <std+0x54>
 80051d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051e0:	f000 ba5c 	b.w	800569c <__retarget_lock_init_recursive>
 80051e4:	bd10      	pop	{r4, pc}
 80051e6:	bf00      	nop
 80051e8:	080053f5 	.word	0x080053f5
 80051ec:	08005417 	.word	0x08005417
 80051f0:	0800544f 	.word	0x0800544f
 80051f4:	08005473 	.word	0x08005473
 80051f8:	24000250 	.word	0x24000250

080051fc <stdio_exit_handler>:
 80051fc:	4a02      	ldr	r2, [pc, #8]	@ (8005208 <stdio_exit_handler+0xc>)
 80051fe:	4903      	ldr	r1, [pc, #12]	@ (800520c <stdio_exit_handler+0x10>)
 8005200:	4803      	ldr	r0, [pc, #12]	@ (8005210 <stdio_exit_handler+0x14>)
 8005202:	f000 b869 	b.w	80052d8 <_fwalk_sglue>
 8005206:	bf00      	nop
 8005208:	24000010 	.word	0x24000010
 800520c:	08006ef5 	.word	0x08006ef5
 8005210:	24000020 	.word	0x24000020

08005214 <cleanup_stdio>:
 8005214:	6841      	ldr	r1, [r0, #4]
 8005216:	4b0c      	ldr	r3, [pc, #48]	@ (8005248 <cleanup_stdio+0x34>)
 8005218:	4299      	cmp	r1, r3
 800521a:	b510      	push	{r4, lr}
 800521c:	4604      	mov	r4, r0
 800521e:	d001      	beq.n	8005224 <cleanup_stdio+0x10>
 8005220:	f001 fe68 	bl	8006ef4 <_fflush_r>
 8005224:	68a1      	ldr	r1, [r4, #8]
 8005226:	4b09      	ldr	r3, [pc, #36]	@ (800524c <cleanup_stdio+0x38>)
 8005228:	4299      	cmp	r1, r3
 800522a:	d002      	beq.n	8005232 <cleanup_stdio+0x1e>
 800522c:	4620      	mov	r0, r4
 800522e:	f001 fe61 	bl	8006ef4 <_fflush_r>
 8005232:	68e1      	ldr	r1, [r4, #12]
 8005234:	4b06      	ldr	r3, [pc, #24]	@ (8005250 <cleanup_stdio+0x3c>)
 8005236:	4299      	cmp	r1, r3
 8005238:	d004      	beq.n	8005244 <cleanup_stdio+0x30>
 800523a:	4620      	mov	r0, r4
 800523c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005240:	f001 be58 	b.w	8006ef4 <_fflush_r>
 8005244:	bd10      	pop	{r4, pc}
 8005246:	bf00      	nop
 8005248:	24000250 	.word	0x24000250
 800524c:	240002b8 	.word	0x240002b8
 8005250:	24000320 	.word	0x24000320

08005254 <global_stdio_init.part.0>:
 8005254:	b510      	push	{r4, lr}
 8005256:	4b0b      	ldr	r3, [pc, #44]	@ (8005284 <global_stdio_init.part.0+0x30>)
 8005258:	4c0b      	ldr	r4, [pc, #44]	@ (8005288 <global_stdio_init.part.0+0x34>)
 800525a:	4a0c      	ldr	r2, [pc, #48]	@ (800528c <global_stdio_init.part.0+0x38>)
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	4620      	mov	r0, r4
 8005260:	2200      	movs	r2, #0
 8005262:	2104      	movs	r1, #4
 8005264:	f7ff ff94 	bl	8005190 <std>
 8005268:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800526c:	2201      	movs	r2, #1
 800526e:	2109      	movs	r1, #9
 8005270:	f7ff ff8e 	bl	8005190 <std>
 8005274:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005278:	2202      	movs	r2, #2
 800527a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800527e:	2112      	movs	r1, #18
 8005280:	f7ff bf86 	b.w	8005190 <std>
 8005284:	24000388 	.word	0x24000388
 8005288:	24000250 	.word	0x24000250
 800528c:	080051fd 	.word	0x080051fd

08005290 <__sfp_lock_acquire>:
 8005290:	4801      	ldr	r0, [pc, #4]	@ (8005298 <__sfp_lock_acquire+0x8>)
 8005292:	f000 ba04 	b.w	800569e <__retarget_lock_acquire_recursive>
 8005296:	bf00      	nop
 8005298:	24000391 	.word	0x24000391

0800529c <__sfp_lock_release>:
 800529c:	4801      	ldr	r0, [pc, #4]	@ (80052a4 <__sfp_lock_release+0x8>)
 800529e:	f000 b9ff 	b.w	80056a0 <__retarget_lock_release_recursive>
 80052a2:	bf00      	nop
 80052a4:	24000391 	.word	0x24000391

080052a8 <__sinit>:
 80052a8:	b510      	push	{r4, lr}
 80052aa:	4604      	mov	r4, r0
 80052ac:	f7ff fff0 	bl	8005290 <__sfp_lock_acquire>
 80052b0:	6a23      	ldr	r3, [r4, #32]
 80052b2:	b11b      	cbz	r3, 80052bc <__sinit+0x14>
 80052b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b8:	f7ff bff0 	b.w	800529c <__sfp_lock_release>
 80052bc:	4b04      	ldr	r3, [pc, #16]	@ (80052d0 <__sinit+0x28>)
 80052be:	6223      	str	r3, [r4, #32]
 80052c0:	4b04      	ldr	r3, [pc, #16]	@ (80052d4 <__sinit+0x2c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1f5      	bne.n	80052b4 <__sinit+0xc>
 80052c8:	f7ff ffc4 	bl	8005254 <global_stdio_init.part.0>
 80052cc:	e7f2      	b.n	80052b4 <__sinit+0xc>
 80052ce:	bf00      	nop
 80052d0:	08005215 	.word	0x08005215
 80052d4:	24000388 	.word	0x24000388

080052d8 <_fwalk_sglue>:
 80052d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052dc:	4607      	mov	r7, r0
 80052de:	4688      	mov	r8, r1
 80052e0:	4614      	mov	r4, r2
 80052e2:	2600      	movs	r6, #0
 80052e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052e8:	f1b9 0901 	subs.w	r9, r9, #1
 80052ec:	d505      	bpl.n	80052fa <_fwalk_sglue+0x22>
 80052ee:	6824      	ldr	r4, [r4, #0]
 80052f0:	2c00      	cmp	r4, #0
 80052f2:	d1f7      	bne.n	80052e4 <_fwalk_sglue+0xc>
 80052f4:	4630      	mov	r0, r6
 80052f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052fa:	89ab      	ldrh	r3, [r5, #12]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d907      	bls.n	8005310 <_fwalk_sglue+0x38>
 8005300:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005304:	3301      	adds	r3, #1
 8005306:	d003      	beq.n	8005310 <_fwalk_sglue+0x38>
 8005308:	4629      	mov	r1, r5
 800530a:	4638      	mov	r0, r7
 800530c:	47c0      	blx	r8
 800530e:	4306      	orrs	r6, r0
 8005310:	3568      	adds	r5, #104	@ 0x68
 8005312:	e7e9      	b.n	80052e8 <_fwalk_sglue+0x10>

08005314 <iprintf>:
 8005314:	b40f      	push	{r0, r1, r2, r3}
 8005316:	b507      	push	{r0, r1, r2, lr}
 8005318:	4906      	ldr	r1, [pc, #24]	@ (8005334 <iprintf+0x20>)
 800531a:	ab04      	add	r3, sp, #16
 800531c:	6808      	ldr	r0, [r1, #0]
 800531e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005322:	6881      	ldr	r1, [r0, #8]
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	f001 fc49 	bl	8006bbc <_vfiprintf_r>
 800532a:	b003      	add	sp, #12
 800532c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005330:	b004      	add	sp, #16
 8005332:	4770      	bx	lr
 8005334:	2400001c 	.word	0x2400001c

08005338 <_puts_r>:
 8005338:	6a03      	ldr	r3, [r0, #32]
 800533a:	b570      	push	{r4, r5, r6, lr}
 800533c:	6884      	ldr	r4, [r0, #8]
 800533e:	4605      	mov	r5, r0
 8005340:	460e      	mov	r6, r1
 8005342:	b90b      	cbnz	r3, 8005348 <_puts_r+0x10>
 8005344:	f7ff ffb0 	bl	80052a8 <__sinit>
 8005348:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800534a:	07db      	lsls	r3, r3, #31
 800534c:	d405      	bmi.n	800535a <_puts_r+0x22>
 800534e:	89a3      	ldrh	r3, [r4, #12]
 8005350:	0598      	lsls	r0, r3, #22
 8005352:	d402      	bmi.n	800535a <_puts_r+0x22>
 8005354:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005356:	f000 f9a2 	bl	800569e <__retarget_lock_acquire_recursive>
 800535a:	89a3      	ldrh	r3, [r4, #12]
 800535c:	0719      	lsls	r1, r3, #28
 800535e:	d502      	bpl.n	8005366 <_puts_r+0x2e>
 8005360:	6923      	ldr	r3, [r4, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d135      	bne.n	80053d2 <_puts_r+0x9a>
 8005366:	4621      	mov	r1, r4
 8005368:	4628      	mov	r0, r5
 800536a:	f000 f8c5 	bl	80054f8 <__swsetup_r>
 800536e:	b380      	cbz	r0, 80053d2 <_puts_r+0x9a>
 8005370:	f04f 35ff 	mov.w	r5, #4294967295
 8005374:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005376:	07da      	lsls	r2, r3, #31
 8005378:	d405      	bmi.n	8005386 <_puts_r+0x4e>
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	059b      	lsls	r3, r3, #22
 800537e:	d402      	bmi.n	8005386 <_puts_r+0x4e>
 8005380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005382:	f000 f98d 	bl	80056a0 <__retarget_lock_release_recursive>
 8005386:	4628      	mov	r0, r5
 8005388:	bd70      	pop	{r4, r5, r6, pc}
 800538a:	2b00      	cmp	r3, #0
 800538c:	da04      	bge.n	8005398 <_puts_r+0x60>
 800538e:	69a2      	ldr	r2, [r4, #24]
 8005390:	429a      	cmp	r2, r3
 8005392:	dc17      	bgt.n	80053c4 <_puts_r+0x8c>
 8005394:	290a      	cmp	r1, #10
 8005396:	d015      	beq.n	80053c4 <_puts_r+0x8c>
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	6022      	str	r2, [r4, #0]
 800539e:	7019      	strb	r1, [r3, #0]
 80053a0:	68a3      	ldr	r3, [r4, #8]
 80053a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053a6:	3b01      	subs	r3, #1
 80053a8:	60a3      	str	r3, [r4, #8]
 80053aa:	2900      	cmp	r1, #0
 80053ac:	d1ed      	bne.n	800538a <_puts_r+0x52>
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	da11      	bge.n	80053d6 <_puts_r+0x9e>
 80053b2:	4622      	mov	r2, r4
 80053b4:	210a      	movs	r1, #10
 80053b6:	4628      	mov	r0, r5
 80053b8:	f000 f85f 	bl	800547a <__swbuf_r>
 80053bc:	3001      	adds	r0, #1
 80053be:	d0d7      	beq.n	8005370 <_puts_r+0x38>
 80053c0:	250a      	movs	r5, #10
 80053c2:	e7d7      	b.n	8005374 <_puts_r+0x3c>
 80053c4:	4622      	mov	r2, r4
 80053c6:	4628      	mov	r0, r5
 80053c8:	f000 f857 	bl	800547a <__swbuf_r>
 80053cc:	3001      	adds	r0, #1
 80053ce:	d1e7      	bne.n	80053a0 <_puts_r+0x68>
 80053d0:	e7ce      	b.n	8005370 <_puts_r+0x38>
 80053d2:	3e01      	subs	r6, #1
 80053d4:	e7e4      	b.n	80053a0 <_puts_r+0x68>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	6022      	str	r2, [r4, #0]
 80053dc:	220a      	movs	r2, #10
 80053de:	701a      	strb	r2, [r3, #0]
 80053e0:	e7ee      	b.n	80053c0 <_puts_r+0x88>
	...

080053e4 <puts>:
 80053e4:	4b02      	ldr	r3, [pc, #8]	@ (80053f0 <puts+0xc>)
 80053e6:	4601      	mov	r1, r0
 80053e8:	6818      	ldr	r0, [r3, #0]
 80053ea:	f7ff bfa5 	b.w	8005338 <_puts_r>
 80053ee:	bf00      	nop
 80053f0:	2400001c 	.word	0x2400001c

080053f4 <__sread>:
 80053f4:	b510      	push	{r4, lr}
 80053f6:	460c      	mov	r4, r1
 80053f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053fc:	f000 f900 	bl	8005600 <_read_r>
 8005400:	2800      	cmp	r0, #0
 8005402:	bfab      	itete	ge
 8005404:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005406:	89a3      	ldrhlt	r3, [r4, #12]
 8005408:	181b      	addge	r3, r3, r0
 800540a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800540e:	bfac      	ite	ge
 8005410:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005412:	81a3      	strhlt	r3, [r4, #12]
 8005414:	bd10      	pop	{r4, pc}

08005416 <__swrite>:
 8005416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800541a:	461f      	mov	r7, r3
 800541c:	898b      	ldrh	r3, [r1, #12]
 800541e:	05db      	lsls	r3, r3, #23
 8005420:	4605      	mov	r5, r0
 8005422:	460c      	mov	r4, r1
 8005424:	4616      	mov	r6, r2
 8005426:	d505      	bpl.n	8005434 <__swrite+0x1e>
 8005428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800542c:	2302      	movs	r3, #2
 800542e:	2200      	movs	r2, #0
 8005430:	f000 f8d4 	bl	80055dc <_lseek_r>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800543a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800543e:	81a3      	strh	r3, [r4, #12]
 8005440:	4632      	mov	r2, r6
 8005442:	463b      	mov	r3, r7
 8005444:	4628      	mov	r0, r5
 8005446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800544a:	f000 b8eb 	b.w	8005624 <_write_r>

0800544e <__sseek>:
 800544e:	b510      	push	{r4, lr}
 8005450:	460c      	mov	r4, r1
 8005452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005456:	f000 f8c1 	bl	80055dc <_lseek_r>
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	bf15      	itete	ne
 8005460:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005462:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005466:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800546a:	81a3      	strheq	r3, [r4, #12]
 800546c:	bf18      	it	ne
 800546e:	81a3      	strhne	r3, [r4, #12]
 8005470:	bd10      	pop	{r4, pc}

08005472 <__sclose>:
 8005472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005476:	f000 b8a1 	b.w	80055bc <_close_r>

0800547a <__swbuf_r>:
 800547a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547c:	460e      	mov	r6, r1
 800547e:	4614      	mov	r4, r2
 8005480:	4605      	mov	r5, r0
 8005482:	b118      	cbz	r0, 800548c <__swbuf_r+0x12>
 8005484:	6a03      	ldr	r3, [r0, #32]
 8005486:	b90b      	cbnz	r3, 800548c <__swbuf_r+0x12>
 8005488:	f7ff ff0e 	bl	80052a8 <__sinit>
 800548c:	69a3      	ldr	r3, [r4, #24]
 800548e:	60a3      	str	r3, [r4, #8]
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	071a      	lsls	r2, r3, #28
 8005494:	d501      	bpl.n	800549a <__swbuf_r+0x20>
 8005496:	6923      	ldr	r3, [r4, #16]
 8005498:	b943      	cbnz	r3, 80054ac <__swbuf_r+0x32>
 800549a:	4621      	mov	r1, r4
 800549c:	4628      	mov	r0, r5
 800549e:	f000 f82b 	bl	80054f8 <__swsetup_r>
 80054a2:	b118      	cbz	r0, 80054ac <__swbuf_r+0x32>
 80054a4:	f04f 37ff 	mov.w	r7, #4294967295
 80054a8:	4638      	mov	r0, r7
 80054aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	6922      	ldr	r2, [r4, #16]
 80054b0:	1a98      	subs	r0, r3, r2
 80054b2:	6963      	ldr	r3, [r4, #20]
 80054b4:	b2f6      	uxtb	r6, r6
 80054b6:	4283      	cmp	r3, r0
 80054b8:	4637      	mov	r7, r6
 80054ba:	dc05      	bgt.n	80054c8 <__swbuf_r+0x4e>
 80054bc:	4621      	mov	r1, r4
 80054be:	4628      	mov	r0, r5
 80054c0:	f001 fd18 	bl	8006ef4 <_fflush_r>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d1ed      	bne.n	80054a4 <__swbuf_r+0x2a>
 80054c8:	68a3      	ldr	r3, [r4, #8]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	60a3      	str	r3, [r4, #8]
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	6022      	str	r2, [r4, #0]
 80054d4:	701e      	strb	r6, [r3, #0]
 80054d6:	6962      	ldr	r2, [r4, #20]
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	429a      	cmp	r2, r3
 80054dc:	d004      	beq.n	80054e8 <__swbuf_r+0x6e>
 80054de:	89a3      	ldrh	r3, [r4, #12]
 80054e0:	07db      	lsls	r3, r3, #31
 80054e2:	d5e1      	bpl.n	80054a8 <__swbuf_r+0x2e>
 80054e4:	2e0a      	cmp	r6, #10
 80054e6:	d1df      	bne.n	80054a8 <__swbuf_r+0x2e>
 80054e8:	4621      	mov	r1, r4
 80054ea:	4628      	mov	r0, r5
 80054ec:	f001 fd02 	bl	8006ef4 <_fflush_r>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d0d9      	beq.n	80054a8 <__swbuf_r+0x2e>
 80054f4:	e7d6      	b.n	80054a4 <__swbuf_r+0x2a>
	...

080054f8 <__swsetup_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4b29      	ldr	r3, [pc, #164]	@ (80055a0 <__swsetup_r+0xa8>)
 80054fc:	4605      	mov	r5, r0
 80054fe:	6818      	ldr	r0, [r3, #0]
 8005500:	460c      	mov	r4, r1
 8005502:	b118      	cbz	r0, 800550c <__swsetup_r+0x14>
 8005504:	6a03      	ldr	r3, [r0, #32]
 8005506:	b90b      	cbnz	r3, 800550c <__swsetup_r+0x14>
 8005508:	f7ff fece 	bl	80052a8 <__sinit>
 800550c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005510:	0719      	lsls	r1, r3, #28
 8005512:	d422      	bmi.n	800555a <__swsetup_r+0x62>
 8005514:	06da      	lsls	r2, r3, #27
 8005516:	d407      	bmi.n	8005528 <__swsetup_r+0x30>
 8005518:	2209      	movs	r2, #9
 800551a:	602a      	str	r2, [r5, #0]
 800551c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005520:	81a3      	strh	r3, [r4, #12]
 8005522:	f04f 30ff 	mov.w	r0, #4294967295
 8005526:	e033      	b.n	8005590 <__swsetup_r+0x98>
 8005528:	0758      	lsls	r0, r3, #29
 800552a:	d512      	bpl.n	8005552 <__swsetup_r+0x5a>
 800552c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800552e:	b141      	cbz	r1, 8005542 <__swsetup_r+0x4a>
 8005530:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005534:	4299      	cmp	r1, r3
 8005536:	d002      	beq.n	800553e <__swsetup_r+0x46>
 8005538:	4628      	mov	r0, r5
 800553a:	f000 fe93 	bl	8006264 <_free_r>
 800553e:	2300      	movs	r3, #0
 8005540:	6363      	str	r3, [r4, #52]	@ 0x34
 8005542:	89a3      	ldrh	r3, [r4, #12]
 8005544:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005548:	81a3      	strh	r3, [r4, #12]
 800554a:	2300      	movs	r3, #0
 800554c:	6063      	str	r3, [r4, #4]
 800554e:	6923      	ldr	r3, [r4, #16]
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	89a3      	ldrh	r3, [r4, #12]
 8005554:	f043 0308 	orr.w	r3, r3, #8
 8005558:	81a3      	strh	r3, [r4, #12]
 800555a:	6923      	ldr	r3, [r4, #16]
 800555c:	b94b      	cbnz	r3, 8005572 <__swsetup_r+0x7a>
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005568:	d003      	beq.n	8005572 <__swsetup_r+0x7a>
 800556a:	4621      	mov	r1, r4
 800556c:	4628      	mov	r0, r5
 800556e:	f001 fd0f 	bl	8006f90 <__smakebuf_r>
 8005572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005576:	f013 0201 	ands.w	r2, r3, #1
 800557a:	d00a      	beq.n	8005592 <__swsetup_r+0x9a>
 800557c:	2200      	movs	r2, #0
 800557e:	60a2      	str	r2, [r4, #8]
 8005580:	6962      	ldr	r2, [r4, #20]
 8005582:	4252      	negs	r2, r2
 8005584:	61a2      	str	r2, [r4, #24]
 8005586:	6922      	ldr	r2, [r4, #16]
 8005588:	b942      	cbnz	r2, 800559c <__swsetup_r+0xa4>
 800558a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800558e:	d1c5      	bne.n	800551c <__swsetup_r+0x24>
 8005590:	bd38      	pop	{r3, r4, r5, pc}
 8005592:	0799      	lsls	r1, r3, #30
 8005594:	bf58      	it	pl
 8005596:	6962      	ldrpl	r2, [r4, #20]
 8005598:	60a2      	str	r2, [r4, #8]
 800559a:	e7f4      	b.n	8005586 <__swsetup_r+0x8e>
 800559c:	2000      	movs	r0, #0
 800559e:	e7f7      	b.n	8005590 <__swsetup_r+0x98>
 80055a0:	2400001c 	.word	0x2400001c

080055a4 <memset>:
 80055a4:	4402      	add	r2, r0
 80055a6:	4603      	mov	r3, r0
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d100      	bne.n	80055ae <memset+0xa>
 80055ac:	4770      	bx	lr
 80055ae:	f803 1b01 	strb.w	r1, [r3], #1
 80055b2:	e7f9      	b.n	80055a8 <memset+0x4>

080055b4 <_localeconv_r>:
 80055b4:	4800      	ldr	r0, [pc, #0]	@ (80055b8 <_localeconv_r+0x4>)
 80055b6:	4770      	bx	lr
 80055b8:	2400015c 	.word	0x2400015c

080055bc <_close_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	4d06      	ldr	r5, [pc, #24]	@ (80055d8 <_close_r+0x1c>)
 80055c0:	2300      	movs	r3, #0
 80055c2:	4604      	mov	r4, r0
 80055c4:	4608      	mov	r0, r1
 80055c6:	602b      	str	r3, [r5, #0]
 80055c8:	f7fb fb17 	bl	8000bfa <_close>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d102      	bne.n	80055d6 <_close_r+0x1a>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	b103      	cbz	r3, 80055d6 <_close_r+0x1a>
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	2400038c 	.word	0x2400038c

080055dc <_lseek_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4d07      	ldr	r5, [pc, #28]	@ (80055fc <_lseek_r+0x20>)
 80055e0:	4604      	mov	r4, r0
 80055e2:	4608      	mov	r0, r1
 80055e4:	4611      	mov	r1, r2
 80055e6:	2200      	movs	r2, #0
 80055e8:	602a      	str	r2, [r5, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	f7fb fb2c 	bl	8000c48 <_lseek>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d102      	bne.n	80055fa <_lseek_r+0x1e>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	b103      	cbz	r3, 80055fa <_lseek_r+0x1e>
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	2400038c 	.word	0x2400038c

08005600 <_read_r>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	4d07      	ldr	r5, [pc, #28]	@ (8005620 <_read_r+0x20>)
 8005604:	4604      	mov	r4, r0
 8005606:	4608      	mov	r0, r1
 8005608:	4611      	mov	r1, r2
 800560a:	2200      	movs	r2, #0
 800560c:	602a      	str	r2, [r5, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	f7fb fad6 	bl	8000bc0 <_read>
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	d102      	bne.n	800561e <_read_r+0x1e>
 8005618:	682b      	ldr	r3, [r5, #0]
 800561a:	b103      	cbz	r3, 800561e <_read_r+0x1e>
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	bd38      	pop	{r3, r4, r5, pc}
 8005620:	2400038c 	.word	0x2400038c

08005624 <_write_r>:
 8005624:	b538      	push	{r3, r4, r5, lr}
 8005626:	4d07      	ldr	r5, [pc, #28]	@ (8005644 <_write_r+0x20>)
 8005628:	4604      	mov	r4, r0
 800562a:	4608      	mov	r0, r1
 800562c:	4611      	mov	r1, r2
 800562e:	2200      	movs	r2, #0
 8005630:	602a      	str	r2, [r5, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	f7fb f9ce 	bl	80009d4 <_write>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d102      	bne.n	8005642 <_write_r+0x1e>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	b103      	cbz	r3, 8005642 <_write_r+0x1e>
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	bd38      	pop	{r3, r4, r5, pc}
 8005644:	2400038c 	.word	0x2400038c

08005648 <__errno>:
 8005648:	4b01      	ldr	r3, [pc, #4]	@ (8005650 <__errno+0x8>)
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	2400001c 	.word	0x2400001c

08005654 <__libc_init_array>:
 8005654:	b570      	push	{r4, r5, r6, lr}
 8005656:	4d0d      	ldr	r5, [pc, #52]	@ (800568c <__libc_init_array+0x38>)
 8005658:	4c0d      	ldr	r4, [pc, #52]	@ (8005690 <__libc_init_array+0x3c>)
 800565a:	1b64      	subs	r4, r4, r5
 800565c:	10a4      	asrs	r4, r4, #2
 800565e:	2600      	movs	r6, #0
 8005660:	42a6      	cmp	r6, r4
 8005662:	d109      	bne.n	8005678 <__libc_init_array+0x24>
 8005664:	4d0b      	ldr	r5, [pc, #44]	@ (8005694 <__libc_init_array+0x40>)
 8005666:	4c0c      	ldr	r4, [pc, #48]	@ (8005698 <__libc_init_array+0x44>)
 8005668:	f001 fdbe 	bl	80071e8 <_init>
 800566c:	1b64      	subs	r4, r4, r5
 800566e:	10a4      	asrs	r4, r4, #2
 8005670:	2600      	movs	r6, #0
 8005672:	42a6      	cmp	r6, r4
 8005674:	d105      	bne.n	8005682 <__libc_init_array+0x2e>
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	f855 3b04 	ldr.w	r3, [r5], #4
 800567c:	4798      	blx	r3
 800567e:	3601      	adds	r6, #1
 8005680:	e7ee      	b.n	8005660 <__libc_init_array+0xc>
 8005682:	f855 3b04 	ldr.w	r3, [r5], #4
 8005686:	4798      	blx	r3
 8005688:	3601      	adds	r6, #1
 800568a:	e7f2      	b.n	8005672 <__libc_init_array+0x1e>
 800568c:	08007658 	.word	0x08007658
 8005690:	08007658 	.word	0x08007658
 8005694:	08007658 	.word	0x08007658
 8005698:	0800765c 	.word	0x0800765c

0800569c <__retarget_lock_init_recursive>:
 800569c:	4770      	bx	lr

0800569e <__retarget_lock_acquire_recursive>:
 800569e:	4770      	bx	lr

080056a0 <__retarget_lock_release_recursive>:
 80056a0:	4770      	bx	lr

080056a2 <quorem>:
 80056a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a6:	6903      	ldr	r3, [r0, #16]
 80056a8:	690c      	ldr	r4, [r1, #16]
 80056aa:	42a3      	cmp	r3, r4
 80056ac:	4607      	mov	r7, r0
 80056ae:	db7e      	blt.n	80057ae <quorem+0x10c>
 80056b0:	3c01      	subs	r4, #1
 80056b2:	f101 0814 	add.w	r8, r1, #20
 80056b6:	00a3      	lsls	r3, r4, #2
 80056b8:	f100 0514 	add.w	r5, r0, #20
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056cc:	3301      	adds	r3, #1
 80056ce:	429a      	cmp	r2, r3
 80056d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80056d8:	d32e      	bcc.n	8005738 <quorem+0x96>
 80056da:	f04f 0a00 	mov.w	sl, #0
 80056de:	46c4      	mov	ip, r8
 80056e0:	46ae      	mov	lr, r5
 80056e2:	46d3      	mov	fp, sl
 80056e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80056e8:	b298      	uxth	r0, r3
 80056ea:	fb06 a000 	mla	r0, r6, r0, sl
 80056ee:	0c02      	lsrs	r2, r0, #16
 80056f0:	0c1b      	lsrs	r3, r3, #16
 80056f2:	fb06 2303 	mla	r3, r6, r3, r2
 80056f6:	f8de 2000 	ldr.w	r2, [lr]
 80056fa:	b280      	uxth	r0, r0
 80056fc:	b292      	uxth	r2, r2
 80056fe:	1a12      	subs	r2, r2, r0
 8005700:	445a      	add	r2, fp
 8005702:	f8de 0000 	ldr.w	r0, [lr]
 8005706:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800570a:	b29b      	uxth	r3, r3
 800570c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005710:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005714:	b292      	uxth	r2, r2
 8005716:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800571a:	45e1      	cmp	r9, ip
 800571c:	f84e 2b04 	str.w	r2, [lr], #4
 8005720:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005724:	d2de      	bcs.n	80056e4 <quorem+0x42>
 8005726:	9b00      	ldr	r3, [sp, #0]
 8005728:	58eb      	ldr	r3, [r5, r3]
 800572a:	b92b      	cbnz	r3, 8005738 <quorem+0x96>
 800572c:	9b01      	ldr	r3, [sp, #4]
 800572e:	3b04      	subs	r3, #4
 8005730:	429d      	cmp	r5, r3
 8005732:	461a      	mov	r2, r3
 8005734:	d32f      	bcc.n	8005796 <quorem+0xf4>
 8005736:	613c      	str	r4, [r7, #16]
 8005738:	4638      	mov	r0, r7
 800573a:	f001 f90d 	bl	8006958 <__mcmp>
 800573e:	2800      	cmp	r0, #0
 8005740:	db25      	blt.n	800578e <quorem+0xec>
 8005742:	4629      	mov	r1, r5
 8005744:	2000      	movs	r0, #0
 8005746:	f858 2b04 	ldr.w	r2, [r8], #4
 800574a:	f8d1 c000 	ldr.w	ip, [r1]
 800574e:	fa1f fe82 	uxth.w	lr, r2
 8005752:	fa1f f38c 	uxth.w	r3, ip
 8005756:	eba3 030e 	sub.w	r3, r3, lr
 800575a:	4403      	add	r3, r0
 800575c:	0c12      	lsrs	r2, r2, #16
 800575e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005762:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005766:	b29b      	uxth	r3, r3
 8005768:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800576c:	45c1      	cmp	r9, r8
 800576e:	f841 3b04 	str.w	r3, [r1], #4
 8005772:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005776:	d2e6      	bcs.n	8005746 <quorem+0xa4>
 8005778:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800577c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005780:	b922      	cbnz	r2, 800578c <quorem+0xea>
 8005782:	3b04      	subs	r3, #4
 8005784:	429d      	cmp	r5, r3
 8005786:	461a      	mov	r2, r3
 8005788:	d30b      	bcc.n	80057a2 <quorem+0x100>
 800578a:	613c      	str	r4, [r7, #16]
 800578c:	3601      	adds	r6, #1
 800578e:	4630      	mov	r0, r6
 8005790:	b003      	add	sp, #12
 8005792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005796:	6812      	ldr	r2, [r2, #0]
 8005798:	3b04      	subs	r3, #4
 800579a:	2a00      	cmp	r2, #0
 800579c:	d1cb      	bne.n	8005736 <quorem+0x94>
 800579e:	3c01      	subs	r4, #1
 80057a0:	e7c6      	b.n	8005730 <quorem+0x8e>
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	3b04      	subs	r3, #4
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	d1ef      	bne.n	800578a <quorem+0xe8>
 80057aa:	3c01      	subs	r4, #1
 80057ac:	e7ea      	b.n	8005784 <quorem+0xe2>
 80057ae:	2000      	movs	r0, #0
 80057b0:	e7ee      	b.n	8005790 <quorem+0xee>
 80057b2:	0000      	movs	r0, r0
 80057b4:	0000      	movs	r0, r0
	...

080057b8 <_dtoa_r>:
 80057b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057bc:	ed2d 8b02 	vpush	{d8}
 80057c0:	69c7      	ldr	r7, [r0, #28]
 80057c2:	b091      	sub	sp, #68	@ 0x44
 80057c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80057c8:	ec55 4b10 	vmov	r4, r5, d0
 80057cc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80057ce:	9107      	str	r1, [sp, #28]
 80057d0:	4681      	mov	r9, r0
 80057d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80057d4:	930d      	str	r3, [sp, #52]	@ 0x34
 80057d6:	b97f      	cbnz	r7, 80057f8 <_dtoa_r+0x40>
 80057d8:	2010      	movs	r0, #16
 80057da:	f000 fd8d 	bl	80062f8 <malloc>
 80057de:	4602      	mov	r2, r0
 80057e0:	f8c9 001c 	str.w	r0, [r9, #28]
 80057e4:	b920      	cbnz	r0, 80057f0 <_dtoa_r+0x38>
 80057e6:	4ba0      	ldr	r3, [pc, #640]	@ (8005a68 <_dtoa_r+0x2b0>)
 80057e8:	21ef      	movs	r1, #239	@ 0xef
 80057ea:	48a0      	ldr	r0, [pc, #640]	@ (8005a6c <_dtoa_r+0x2b4>)
 80057ec:	f001 fc4c 	bl	8007088 <__assert_func>
 80057f0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80057f4:	6007      	str	r7, [r0, #0]
 80057f6:	60c7      	str	r7, [r0, #12]
 80057f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80057fc:	6819      	ldr	r1, [r3, #0]
 80057fe:	b159      	cbz	r1, 8005818 <_dtoa_r+0x60>
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	604a      	str	r2, [r1, #4]
 8005804:	2301      	movs	r3, #1
 8005806:	4093      	lsls	r3, r2
 8005808:	608b      	str	r3, [r1, #8]
 800580a:	4648      	mov	r0, r9
 800580c:	f000 fe6a 	bl	80064e4 <_Bfree>
 8005810:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	1e2b      	subs	r3, r5, #0
 800581a:	bfbb      	ittet	lt
 800581c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005820:	9303      	strlt	r3, [sp, #12]
 8005822:	2300      	movge	r3, #0
 8005824:	2201      	movlt	r2, #1
 8005826:	bfac      	ite	ge
 8005828:	6033      	strge	r3, [r6, #0]
 800582a:	6032      	strlt	r2, [r6, #0]
 800582c:	4b90      	ldr	r3, [pc, #576]	@ (8005a70 <_dtoa_r+0x2b8>)
 800582e:	9e03      	ldr	r6, [sp, #12]
 8005830:	43b3      	bics	r3, r6
 8005832:	d110      	bne.n	8005856 <_dtoa_r+0x9e>
 8005834:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005836:	f242 730f 	movw	r3, #9999	@ 0x270f
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8005840:	4323      	orrs	r3, r4
 8005842:	f000 84de 	beq.w	8006202 <_dtoa_r+0xa4a>
 8005846:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005848:	4f8a      	ldr	r7, [pc, #552]	@ (8005a74 <_dtoa_r+0x2bc>)
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 84e0 	beq.w	8006210 <_dtoa_r+0xa58>
 8005850:	1cfb      	adds	r3, r7, #3
 8005852:	f000 bcdb 	b.w	800620c <_dtoa_r+0xa54>
 8005856:	ed9d 8b02 	vldr	d8, [sp, #8]
 800585a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800585e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005862:	d10a      	bne.n	800587a <_dtoa_r+0xc2>
 8005864:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005866:	2301      	movs	r3, #1
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800586c:	b113      	cbz	r3, 8005874 <_dtoa_r+0xbc>
 800586e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005870:	4b81      	ldr	r3, [pc, #516]	@ (8005a78 <_dtoa_r+0x2c0>)
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	4f81      	ldr	r7, [pc, #516]	@ (8005a7c <_dtoa_r+0x2c4>)
 8005876:	f000 bccb 	b.w	8006210 <_dtoa_r+0xa58>
 800587a:	aa0e      	add	r2, sp, #56	@ 0x38
 800587c:	a90f      	add	r1, sp, #60	@ 0x3c
 800587e:	4648      	mov	r0, r9
 8005880:	eeb0 0b48 	vmov.f64	d0, d8
 8005884:	f001 f918 	bl	8006ab8 <__d2b>
 8005888:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800588c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800588e:	9001      	str	r0, [sp, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d045      	beq.n	8005920 <_dtoa_r+0x168>
 8005894:	eeb0 7b48 	vmov.f64	d7, d8
 8005898:	ee18 1a90 	vmov	r1, s17
 800589c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80058a0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80058a4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80058a8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80058ac:	2500      	movs	r5, #0
 80058ae:	ee07 1a90 	vmov	s15, r1
 80058b2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80058b6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005a50 <_dtoa_r+0x298>
 80058ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 80058be:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8005a58 <_dtoa_r+0x2a0>
 80058c2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80058c6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005a60 <_dtoa_r+0x2a8>
 80058ca:	ee07 3a90 	vmov	s15, r3
 80058ce:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80058d2:	eeb0 7b46 	vmov.f64	d7, d6
 80058d6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80058da:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80058de:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80058e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e6:	ee16 8a90 	vmov	r8, s13
 80058ea:	d508      	bpl.n	80058fe <_dtoa_r+0x146>
 80058ec:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80058f0:	eeb4 6b47 	vcmp.f64	d6, d7
 80058f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f8:	bf18      	it	ne
 80058fa:	f108 38ff 	addne.w	r8, r8, #4294967295
 80058fe:	f1b8 0f16 	cmp.w	r8, #22
 8005902:	d82b      	bhi.n	800595c <_dtoa_r+0x1a4>
 8005904:	495e      	ldr	r1, [pc, #376]	@ (8005a80 <_dtoa_r+0x2c8>)
 8005906:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800590a:	ed91 7b00 	vldr	d7, [r1]
 800590e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005916:	d501      	bpl.n	800591c <_dtoa_r+0x164>
 8005918:	f108 38ff 	add.w	r8, r8, #4294967295
 800591c:	2100      	movs	r1, #0
 800591e:	e01e      	b.n	800595e <_dtoa_r+0x1a6>
 8005920:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005922:	4413      	add	r3, r2
 8005924:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8005928:	2920      	cmp	r1, #32
 800592a:	bfc1      	itttt	gt
 800592c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8005930:	408e      	lslgt	r6, r1
 8005932:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8005936:	fa24 f101 	lsrgt.w	r1, r4, r1
 800593a:	bfd6      	itet	le
 800593c:	f1c1 0120 	rsble	r1, r1, #32
 8005940:	4331      	orrgt	r1, r6
 8005942:	fa04 f101 	lslle.w	r1, r4, r1
 8005946:	ee07 1a90 	vmov	s15, r1
 800594a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800594e:	3b01      	subs	r3, #1
 8005950:	ee17 1a90 	vmov	r1, s15
 8005954:	2501      	movs	r5, #1
 8005956:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800595a:	e7a8      	b.n	80058ae <_dtoa_r+0xf6>
 800595c:	2101      	movs	r1, #1
 800595e:	1ad2      	subs	r2, r2, r3
 8005960:	1e53      	subs	r3, r2, #1
 8005962:	9306      	str	r3, [sp, #24]
 8005964:	bf45      	ittet	mi
 8005966:	f1c2 0301 	rsbmi	r3, r2, #1
 800596a:	9305      	strmi	r3, [sp, #20]
 800596c:	2300      	movpl	r3, #0
 800596e:	2300      	movmi	r3, #0
 8005970:	bf4c      	ite	mi
 8005972:	9306      	strmi	r3, [sp, #24]
 8005974:	9305      	strpl	r3, [sp, #20]
 8005976:	f1b8 0f00 	cmp.w	r8, #0
 800597a:	910c      	str	r1, [sp, #48]	@ 0x30
 800597c:	db18      	blt.n	80059b0 <_dtoa_r+0x1f8>
 800597e:	9b06      	ldr	r3, [sp, #24]
 8005980:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005984:	4443      	add	r3, r8
 8005986:	9306      	str	r3, [sp, #24]
 8005988:	2300      	movs	r3, #0
 800598a:	9a07      	ldr	r2, [sp, #28]
 800598c:	2a09      	cmp	r2, #9
 800598e:	d849      	bhi.n	8005a24 <_dtoa_r+0x26c>
 8005990:	2a05      	cmp	r2, #5
 8005992:	bfc4      	itt	gt
 8005994:	3a04      	subgt	r2, #4
 8005996:	9207      	strgt	r2, [sp, #28]
 8005998:	9a07      	ldr	r2, [sp, #28]
 800599a:	f1a2 0202 	sub.w	r2, r2, #2
 800599e:	bfcc      	ite	gt
 80059a0:	2400      	movgt	r4, #0
 80059a2:	2401      	movle	r4, #1
 80059a4:	2a03      	cmp	r2, #3
 80059a6:	d848      	bhi.n	8005a3a <_dtoa_r+0x282>
 80059a8:	e8df f002 	tbb	[pc, r2]
 80059ac:	3a2c2e0b 	.word	0x3a2c2e0b
 80059b0:	9b05      	ldr	r3, [sp, #20]
 80059b2:	2200      	movs	r2, #0
 80059b4:	eba3 0308 	sub.w	r3, r3, r8
 80059b8:	9305      	str	r3, [sp, #20]
 80059ba:	920a      	str	r2, [sp, #40]	@ 0x28
 80059bc:	f1c8 0300 	rsb	r3, r8, #0
 80059c0:	e7e3      	b.n	800598a <_dtoa_r+0x1d2>
 80059c2:	2200      	movs	r2, #0
 80059c4:	9208      	str	r2, [sp, #32]
 80059c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059c8:	2a00      	cmp	r2, #0
 80059ca:	dc39      	bgt.n	8005a40 <_dtoa_r+0x288>
 80059cc:	f04f 0b01 	mov.w	fp, #1
 80059d0:	46da      	mov	sl, fp
 80059d2:	465a      	mov	r2, fp
 80059d4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80059d8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80059dc:	2100      	movs	r1, #0
 80059de:	2004      	movs	r0, #4
 80059e0:	f100 0614 	add.w	r6, r0, #20
 80059e4:	4296      	cmp	r6, r2
 80059e6:	d930      	bls.n	8005a4a <_dtoa_r+0x292>
 80059e8:	6079      	str	r1, [r7, #4]
 80059ea:	4648      	mov	r0, r9
 80059ec:	9304      	str	r3, [sp, #16]
 80059ee:	f000 fd39 	bl	8006464 <_Balloc>
 80059f2:	9b04      	ldr	r3, [sp, #16]
 80059f4:	4607      	mov	r7, r0
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d146      	bne.n	8005a88 <_dtoa_r+0x2d0>
 80059fa:	4b22      	ldr	r3, [pc, #136]	@ (8005a84 <_dtoa_r+0x2cc>)
 80059fc:	4602      	mov	r2, r0
 80059fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8005a02:	e6f2      	b.n	80057ea <_dtoa_r+0x32>
 8005a04:	2201      	movs	r2, #1
 8005a06:	e7dd      	b.n	80059c4 <_dtoa_r+0x20c>
 8005a08:	2200      	movs	r2, #0
 8005a0a:	9208      	str	r2, [sp, #32]
 8005a0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a0e:	eb08 0b02 	add.w	fp, r8, r2
 8005a12:	f10b 0a01 	add.w	sl, fp, #1
 8005a16:	4652      	mov	r2, sl
 8005a18:	2a01      	cmp	r2, #1
 8005a1a:	bfb8      	it	lt
 8005a1c:	2201      	movlt	r2, #1
 8005a1e:	e7db      	b.n	80059d8 <_dtoa_r+0x220>
 8005a20:	2201      	movs	r2, #1
 8005a22:	e7f2      	b.n	8005a0a <_dtoa_r+0x252>
 8005a24:	2401      	movs	r4, #1
 8005a26:	2200      	movs	r2, #0
 8005a28:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8005a2c:	f04f 3bff 	mov.w	fp, #4294967295
 8005a30:	2100      	movs	r1, #0
 8005a32:	46da      	mov	sl, fp
 8005a34:	2212      	movs	r2, #18
 8005a36:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a38:	e7ce      	b.n	80059d8 <_dtoa_r+0x220>
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	9208      	str	r2, [sp, #32]
 8005a3e:	e7f5      	b.n	8005a2c <_dtoa_r+0x274>
 8005a40:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8005a44:	46da      	mov	sl, fp
 8005a46:	465a      	mov	r2, fp
 8005a48:	e7c6      	b.n	80059d8 <_dtoa_r+0x220>
 8005a4a:	3101      	adds	r1, #1
 8005a4c:	0040      	lsls	r0, r0, #1
 8005a4e:	e7c7      	b.n	80059e0 <_dtoa_r+0x228>
 8005a50:	636f4361 	.word	0x636f4361
 8005a54:	3fd287a7 	.word	0x3fd287a7
 8005a58:	8b60c8b3 	.word	0x8b60c8b3
 8005a5c:	3fc68a28 	.word	0x3fc68a28
 8005a60:	509f79fb 	.word	0x509f79fb
 8005a64:	3fd34413 	.word	0x3fd34413
 8005a68:	08007321 	.word	0x08007321
 8005a6c:	08007338 	.word	0x08007338
 8005a70:	7ff00000 	.word	0x7ff00000
 8005a74:	0800731d 	.word	0x0800731d
 8005a78:	080072f1 	.word	0x080072f1
 8005a7c:	080072f0 	.word	0x080072f0
 8005a80:	08007430 	.word	0x08007430
 8005a84:	08007390 	.word	0x08007390
 8005a88:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8005a8c:	f1ba 0f0e 	cmp.w	sl, #14
 8005a90:	6010      	str	r0, [r2, #0]
 8005a92:	d86f      	bhi.n	8005b74 <_dtoa_r+0x3bc>
 8005a94:	2c00      	cmp	r4, #0
 8005a96:	d06d      	beq.n	8005b74 <_dtoa_r+0x3bc>
 8005a98:	f1b8 0f00 	cmp.w	r8, #0
 8005a9c:	f340 80c2 	ble.w	8005c24 <_dtoa_r+0x46c>
 8005aa0:	4aca      	ldr	r2, [pc, #808]	@ (8005dcc <_dtoa_r+0x614>)
 8005aa2:	f008 010f 	and.w	r1, r8, #15
 8005aa6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005aaa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8005aae:	ed92 7b00 	vldr	d7, [r2]
 8005ab2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8005ab6:	f000 80a9 	beq.w	8005c0c <_dtoa_r+0x454>
 8005aba:	4ac5      	ldr	r2, [pc, #788]	@ (8005dd0 <_dtoa_r+0x618>)
 8005abc:	ed92 6b08 	vldr	d6, [r2, #32]
 8005ac0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005ac4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005ac8:	f001 010f 	and.w	r1, r1, #15
 8005acc:	2203      	movs	r2, #3
 8005ace:	48c0      	ldr	r0, [pc, #768]	@ (8005dd0 <_dtoa_r+0x618>)
 8005ad0:	2900      	cmp	r1, #0
 8005ad2:	f040 809d 	bne.w	8005c10 <_dtoa_r+0x458>
 8005ad6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005ada:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005ade:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ae2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005ae4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ae8:	2900      	cmp	r1, #0
 8005aea:	f000 80c1 	beq.w	8005c70 <_dtoa_r+0x4b8>
 8005aee:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005af2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005afa:	f140 80b9 	bpl.w	8005c70 <_dtoa_r+0x4b8>
 8005afe:	f1ba 0f00 	cmp.w	sl, #0
 8005b02:	f000 80b5 	beq.w	8005c70 <_dtoa_r+0x4b8>
 8005b06:	f1bb 0f00 	cmp.w	fp, #0
 8005b0a:	dd31      	ble.n	8005b70 <_dtoa_r+0x3b8>
 8005b0c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8005b10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005b14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b18:	f108 31ff 	add.w	r1, r8, #4294967295
 8005b1c:	9104      	str	r1, [sp, #16]
 8005b1e:	3201      	adds	r2, #1
 8005b20:	465c      	mov	r4, fp
 8005b22:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005b26:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8005b2a:	ee07 2a90 	vmov	s15, r2
 8005b2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005b32:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005b36:	ee15 2a90 	vmov	r2, s11
 8005b3a:	ec51 0b15 	vmov	r0, r1, d5
 8005b3e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8005b42:	2c00      	cmp	r4, #0
 8005b44:	f040 8098 	bne.w	8005c78 <_dtoa_r+0x4c0>
 8005b48:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005b4c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005b50:	ec41 0b17 	vmov	d7, r0, r1
 8005b54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b5c:	f300 8261 	bgt.w	8006022 <_dtoa_r+0x86a>
 8005b60:	eeb1 7b47 	vneg.f64	d7, d7
 8005b64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b6c:	f100 80f5 	bmi.w	8005d5a <_dtoa_r+0x5a2>
 8005b70:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005b74:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005b76:	2a00      	cmp	r2, #0
 8005b78:	f2c0 812c 	blt.w	8005dd4 <_dtoa_r+0x61c>
 8005b7c:	f1b8 0f0e 	cmp.w	r8, #14
 8005b80:	f300 8128 	bgt.w	8005dd4 <_dtoa_r+0x61c>
 8005b84:	4b91      	ldr	r3, [pc, #580]	@ (8005dcc <_dtoa_r+0x614>)
 8005b86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005b8a:	ed93 6b00 	vldr	d6, [r3]
 8005b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	da03      	bge.n	8005b9c <_dtoa_r+0x3e4>
 8005b94:	f1ba 0f00 	cmp.w	sl, #0
 8005b98:	f340 80d2 	ble.w	8005d40 <_dtoa_r+0x588>
 8005b9c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8005ba0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ba4:	463e      	mov	r6, r7
 8005ba6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005baa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005bae:	ee15 3a10 	vmov	r3, s10
 8005bb2:	3330      	adds	r3, #48	@ 0x30
 8005bb4:	f806 3b01 	strb.w	r3, [r6], #1
 8005bb8:	1bf3      	subs	r3, r6, r7
 8005bba:	459a      	cmp	sl, r3
 8005bbc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005bc0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005bc4:	f040 80f8 	bne.w	8005db8 <_dtoa_r+0x600>
 8005bc8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005bcc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd4:	f300 80dd 	bgt.w	8005d92 <_dtoa_r+0x5da>
 8005bd8:	eeb4 7b46 	vcmp.f64	d7, d6
 8005bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be0:	d104      	bne.n	8005bec <_dtoa_r+0x434>
 8005be2:	ee15 3a10 	vmov	r3, s10
 8005be6:	07db      	lsls	r3, r3, #31
 8005be8:	f100 80d3 	bmi.w	8005d92 <_dtoa_r+0x5da>
 8005bec:	9901      	ldr	r1, [sp, #4]
 8005bee:	4648      	mov	r0, r9
 8005bf0:	f000 fc78 	bl	80064e4 <_Bfree>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005bf8:	7033      	strb	r3, [r6, #0]
 8005bfa:	f108 0301 	add.w	r3, r8, #1
 8005bfe:	6013      	str	r3, [r2, #0]
 8005c00:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 8304 	beq.w	8006210 <_dtoa_r+0xa58>
 8005c08:	601e      	str	r6, [r3, #0]
 8005c0a:	e301      	b.n	8006210 <_dtoa_r+0xa58>
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	e75e      	b.n	8005ace <_dtoa_r+0x316>
 8005c10:	07cc      	lsls	r4, r1, #31
 8005c12:	d504      	bpl.n	8005c1e <_dtoa_r+0x466>
 8005c14:	ed90 6b00 	vldr	d6, [r0]
 8005c18:	3201      	adds	r2, #1
 8005c1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c1e:	1049      	asrs	r1, r1, #1
 8005c20:	3008      	adds	r0, #8
 8005c22:	e755      	b.n	8005ad0 <_dtoa_r+0x318>
 8005c24:	d022      	beq.n	8005c6c <_dtoa_r+0x4b4>
 8005c26:	f1c8 0100 	rsb	r1, r8, #0
 8005c2a:	4a68      	ldr	r2, [pc, #416]	@ (8005dcc <_dtoa_r+0x614>)
 8005c2c:	f001 000f 	and.w	r0, r1, #15
 8005c30:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005c34:	ed92 7b00 	vldr	d7, [r2]
 8005c38:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005c3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c40:	4863      	ldr	r0, [pc, #396]	@ (8005dd0 <_dtoa_r+0x618>)
 8005c42:	1109      	asrs	r1, r1, #4
 8005c44:	2400      	movs	r4, #0
 8005c46:	2202      	movs	r2, #2
 8005c48:	b929      	cbnz	r1, 8005c56 <_dtoa_r+0x49e>
 8005c4a:	2c00      	cmp	r4, #0
 8005c4c:	f43f af49 	beq.w	8005ae2 <_dtoa_r+0x32a>
 8005c50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c54:	e745      	b.n	8005ae2 <_dtoa_r+0x32a>
 8005c56:	07ce      	lsls	r6, r1, #31
 8005c58:	d505      	bpl.n	8005c66 <_dtoa_r+0x4ae>
 8005c5a:	ed90 6b00 	vldr	d6, [r0]
 8005c5e:	3201      	adds	r2, #1
 8005c60:	2401      	movs	r4, #1
 8005c62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c66:	1049      	asrs	r1, r1, #1
 8005c68:	3008      	adds	r0, #8
 8005c6a:	e7ed      	b.n	8005c48 <_dtoa_r+0x490>
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	e738      	b.n	8005ae2 <_dtoa_r+0x32a>
 8005c70:	f8cd 8010 	str.w	r8, [sp, #16]
 8005c74:	4654      	mov	r4, sl
 8005c76:	e754      	b.n	8005b22 <_dtoa_r+0x36a>
 8005c78:	4a54      	ldr	r2, [pc, #336]	@ (8005dcc <_dtoa_r+0x614>)
 8005c7a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005c7e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005c82:	9a08      	ldr	r2, [sp, #32]
 8005c84:	ec41 0b17 	vmov	d7, r0, r1
 8005c88:	443c      	add	r4, r7
 8005c8a:	b34a      	cbz	r2, 8005ce0 <_dtoa_r+0x528>
 8005c8c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8005c90:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8005c94:	463e      	mov	r6, r7
 8005c96:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005c9a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005c9e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005ca2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005ca6:	ee14 2a90 	vmov	r2, s9
 8005caa:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005cae:	3230      	adds	r2, #48	@ 0x30
 8005cb0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005cb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cbc:	f806 2b01 	strb.w	r2, [r6], #1
 8005cc0:	d438      	bmi.n	8005d34 <_dtoa_r+0x57c>
 8005cc2:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005cc6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cce:	d462      	bmi.n	8005d96 <_dtoa_r+0x5de>
 8005cd0:	42a6      	cmp	r6, r4
 8005cd2:	f43f af4d 	beq.w	8005b70 <_dtoa_r+0x3b8>
 8005cd6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005cda:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005cde:	e7e0      	b.n	8005ca2 <_dtoa_r+0x4ea>
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	463e      	mov	r6, r7
 8005ce4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005ce8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005cec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005cf0:	ee14 2a90 	vmov	r2, s9
 8005cf4:	3230      	adds	r2, #48	@ 0x30
 8005cf6:	f806 2b01 	strb.w	r2, [r6], #1
 8005cfa:	42a6      	cmp	r6, r4
 8005cfc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005d00:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005d04:	d119      	bne.n	8005d3a <_dtoa_r+0x582>
 8005d06:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8005d0a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005d0e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d16:	dc3e      	bgt.n	8005d96 <_dtoa_r+0x5de>
 8005d18:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005d1c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d24:	f57f af24 	bpl.w	8005b70 <_dtoa_r+0x3b8>
 8005d28:	460e      	mov	r6, r1
 8005d2a:	3901      	subs	r1, #1
 8005d2c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d30:	2b30      	cmp	r3, #48	@ 0x30
 8005d32:	d0f9      	beq.n	8005d28 <_dtoa_r+0x570>
 8005d34:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005d38:	e758      	b.n	8005bec <_dtoa_r+0x434>
 8005d3a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005d3e:	e7d5      	b.n	8005cec <_dtoa_r+0x534>
 8005d40:	d10b      	bne.n	8005d5a <_dtoa_r+0x5a2>
 8005d42:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005d46:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005d4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d56:	f2c0 8161 	blt.w	800601c <_dtoa_r+0x864>
 8005d5a:	2400      	movs	r4, #0
 8005d5c:	4625      	mov	r5, r4
 8005d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d60:	43db      	mvns	r3, r3
 8005d62:	9304      	str	r3, [sp, #16]
 8005d64:	463e      	mov	r6, r7
 8005d66:	f04f 0800 	mov.w	r8, #0
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	4648      	mov	r0, r9
 8005d6e:	f000 fbb9 	bl	80064e4 <_Bfree>
 8005d72:	2d00      	cmp	r5, #0
 8005d74:	d0de      	beq.n	8005d34 <_dtoa_r+0x57c>
 8005d76:	f1b8 0f00 	cmp.w	r8, #0
 8005d7a:	d005      	beq.n	8005d88 <_dtoa_r+0x5d0>
 8005d7c:	45a8      	cmp	r8, r5
 8005d7e:	d003      	beq.n	8005d88 <_dtoa_r+0x5d0>
 8005d80:	4641      	mov	r1, r8
 8005d82:	4648      	mov	r0, r9
 8005d84:	f000 fbae 	bl	80064e4 <_Bfree>
 8005d88:	4629      	mov	r1, r5
 8005d8a:	4648      	mov	r0, r9
 8005d8c:	f000 fbaa 	bl	80064e4 <_Bfree>
 8005d90:	e7d0      	b.n	8005d34 <_dtoa_r+0x57c>
 8005d92:	f8cd 8010 	str.w	r8, [sp, #16]
 8005d96:	4633      	mov	r3, r6
 8005d98:	461e      	mov	r6, r3
 8005d9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d9e:	2a39      	cmp	r2, #57	@ 0x39
 8005da0:	d106      	bne.n	8005db0 <_dtoa_r+0x5f8>
 8005da2:	429f      	cmp	r7, r3
 8005da4:	d1f8      	bne.n	8005d98 <_dtoa_r+0x5e0>
 8005da6:	9a04      	ldr	r2, [sp, #16]
 8005da8:	3201      	adds	r2, #1
 8005daa:	9204      	str	r2, [sp, #16]
 8005dac:	2230      	movs	r2, #48	@ 0x30
 8005dae:	703a      	strb	r2, [r7, #0]
 8005db0:	781a      	ldrb	r2, [r3, #0]
 8005db2:	3201      	adds	r2, #1
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	e7bd      	b.n	8005d34 <_dtoa_r+0x57c>
 8005db8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005dbc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc4:	f47f aeef 	bne.w	8005ba6 <_dtoa_r+0x3ee>
 8005dc8:	e710      	b.n	8005bec <_dtoa_r+0x434>
 8005dca:	bf00      	nop
 8005dcc:	08007430 	.word	0x08007430
 8005dd0:	08007408 	.word	0x08007408
 8005dd4:	9908      	ldr	r1, [sp, #32]
 8005dd6:	2900      	cmp	r1, #0
 8005dd8:	f000 80e3 	beq.w	8005fa2 <_dtoa_r+0x7ea>
 8005ddc:	9907      	ldr	r1, [sp, #28]
 8005dde:	2901      	cmp	r1, #1
 8005de0:	f300 80c8 	bgt.w	8005f74 <_dtoa_r+0x7bc>
 8005de4:	2d00      	cmp	r5, #0
 8005de6:	f000 80c1 	beq.w	8005f6c <_dtoa_r+0x7b4>
 8005dea:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005dee:	9e05      	ldr	r6, [sp, #20]
 8005df0:	461c      	mov	r4, r3
 8005df2:	9304      	str	r3, [sp, #16]
 8005df4:	9b05      	ldr	r3, [sp, #20]
 8005df6:	4413      	add	r3, r2
 8005df8:	9305      	str	r3, [sp, #20]
 8005dfa:	9b06      	ldr	r3, [sp, #24]
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	4413      	add	r3, r2
 8005e00:	4648      	mov	r0, r9
 8005e02:	9306      	str	r3, [sp, #24]
 8005e04:	f000 fc22 	bl	800664c <__i2b>
 8005e08:	9b04      	ldr	r3, [sp, #16]
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	b166      	cbz	r6, 8005e28 <_dtoa_r+0x670>
 8005e0e:	9a06      	ldr	r2, [sp, #24]
 8005e10:	2a00      	cmp	r2, #0
 8005e12:	dd09      	ble.n	8005e28 <_dtoa_r+0x670>
 8005e14:	42b2      	cmp	r2, r6
 8005e16:	9905      	ldr	r1, [sp, #20]
 8005e18:	bfa8      	it	ge
 8005e1a:	4632      	movge	r2, r6
 8005e1c:	1a89      	subs	r1, r1, r2
 8005e1e:	9105      	str	r1, [sp, #20]
 8005e20:	9906      	ldr	r1, [sp, #24]
 8005e22:	1ab6      	subs	r6, r6, r2
 8005e24:	1a8a      	subs	r2, r1, r2
 8005e26:	9206      	str	r2, [sp, #24]
 8005e28:	b1fb      	cbz	r3, 8005e6a <_dtoa_r+0x6b2>
 8005e2a:	9a08      	ldr	r2, [sp, #32]
 8005e2c:	2a00      	cmp	r2, #0
 8005e2e:	f000 80bc 	beq.w	8005faa <_dtoa_r+0x7f2>
 8005e32:	b19c      	cbz	r4, 8005e5c <_dtoa_r+0x6a4>
 8005e34:	4629      	mov	r1, r5
 8005e36:	4622      	mov	r2, r4
 8005e38:	4648      	mov	r0, r9
 8005e3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e3c:	f000 fcc6 	bl	80067cc <__pow5mult>
 8005e40:	9a01      	ldr	r2, [sp, #4]
 8005e42:	4601      	mov	r1, r0
 8005e44:	4605      	mov	r5, r0
 8005e46:	4648      	mov	r0, r9
 8005e48:	f000 fc16 	bl	8006678 <__multiply>
 8005e4c:	9901      	ldr	r1, [sp, #4]
 8005e4e:	9004      	str	r0, [sp, #16]
 8005e50:	4648      	mov	r0, r9
 8005e52:	f000 fb47 	bl	80064e4 <_Bfree>
 8005e56:	9a04      	ldr	r2, [sp, #16]
 8005e58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e5a:	9201      	str	r2, [sp, #4]
 8005e5c:	1b1a      	subs	r2, r3, r4
 8005e5e:	d004      	beq.n	8005e6a <_dtoa_r+0x6b2>
 8005e60:	9901      	ldr	r1, [sp, #4]
 8005e62:	4648      	mov	r0, r9
 8005e64:	f000 fcb2 	bl	80067cc <__pow5mult>
 8005e68:	9001      	str	r0, [sp, #4]
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	4648      	mov	r0, r9
 8005e6e:	f000 fbed 	bl	800664c <__i2b>
 8005e72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e74:	4604      	mov	r4, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 81d0 	beq.w	800621c <_dtoa_r+0xa64>
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	4601      	mov	r1, r0
 8005e80:	4648      	mov	r0, r9
 8005e82:	f000 fca3 	bl	80067cc <__pow5mult>
 8005e86:	9b07      	ldr	r3, [sp, #28]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	f300 8095 	bgt.w	8005fba <_dtoa_r+0x802>
 8005e90:	9b02      	ldr	r3, [sp, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f040 808b 	bne.w	8005fae <_dtoa_r+0x7f6>
 8005e98:	9b03      	ldr	r3, [sp, #12]
 8005e9a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005e9e:	2a00      	cmp	r2, #0
 8005ea0:	f040 8087 	bne.w	8005fb2 <_dtoa_r+0x7fa>
 8005ea4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005ea8:	0d12      	lsrs	r2, r2, #20
 8005eaa:	0512      	lsls	r2, r2, #20
 8005eac:	2a00      	cmp	r2, #0
 8005eae:	f000 8082 	beq.w	8005fb6 <_dtoa_r+0x7fe>
 8005eb2:	9b05      	ldr	r3, [sp, #20]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	9305      	str	r3, [sp, #20]
 8005eb8:	9b06      	ldr	r3, [sp, #24]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	9306      	str	r3, [sp, #24]
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 81af 	beq.w	8006228 <_dtoa_r+0xa70>
 8005eca:	6922      	ldr	r2, [r4, #16]
 8005ecc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005ed0:	6910      	ldr	r0, [r2, #16]
 8005ed2:	f000 fb6f 	bl	80065b4 <__hi0bits>
 8005ed6:	f1c0 0020 	rsb	r0, r0, #32
 8005eda:	9b06      	ldr	r3, [sp, #24]
 8005edc:	4418      	add	r0, r3
 8005ede:	f010 001f 	ands.w	r0, r0, #31
 8005ee2:	d076      	beq.n	8005fd2 <_dtoa_r+0x81a>
 8005ee4:	f1c0 0220 	rsb	r2, r0, #32
 8005ee8:	2a04      	cmp	r2, #4
 8005eea:	dd69      	ble.n	8005fc0 <_dtoa_r+0x808>
 8005eec:	9b05      	ldr	r3, [sp, #20]
 8005eee:	f1c0 001c 	rsb	r0, r0, #28
 8005ef2:	4403      	add	r3, r0
 8005ef4:	9305      	str	r3, [sp, #20]
 8005ef6:	9b06      	ldr	r3, [sp, #24]
 8005ef8:	4406      	add	r6, r0
 8005efa:	4403      	add	r3, r0
 8005efc:	9306      	str	r3, [sp, #24]
 8005efe:	9b05      	ldr	r3, [sp, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	dd05      	ble.n	8005f10 <_dtoa_r+0x758>
 8005f04:	9901      	ldr	r1, [sp, #4]
 8005f06:	461a      	mov	r2, r3
 8005f08:	4648      	mov	r0, r9
 8005f0a:	f000 fcb9 	bl	8006880 <__lshift>
 8005f0e:	9001      	str	r0, [sp, #4]
 8005f10:	9b06      	ldr	r3, [sp, #24]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	dd05      	ble.n	8005f22 <_dtoa_r+0x76a>
 8005f16:	4621      	mov	r1, r4
 8005f18:	461a      	mov	r2, r3
 8005f1a:	4648      	mov	r0, r9
 8005f1c:	f000 fcb0 	bl	8006880 <__lshift>
 8005f20:	4604      	mov	r4, r0
 8005f22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d056      	beq.n	8005fd6 <_dtoa_r+0x81e>
 8005f28:	9801      	ldr	r0, [sp, #4]
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	f000 fd14 	bl	8006958 <__mcmp>
 8005f30:	2800      	cmp	r0, #0
 8005f32:	da50      	bge.n	8005fd6 <_dtoa_r+0x81e>
 8005f34:	f108 33ff 	add.w	r3, r8, #4294967295
 8005f38:	9304      	str	r3, [sp, #16]
 8005f3a:	9901      	ldr	r1, [sp, #4]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	220a      	movs	r2, #10
 8005f40:	4648      	mov	r0, r9
 8005f42:	f000 faf1 	bl	8006528 <__multadd>
 8005f46:	9b08      	ldr	r3, [sp, #32]
 8005f48:	9001      	str	r0, [sp, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 816e 	beq.w	800622c <_dtoa_r+0xa74>
 8005f50:	4629      	mov	r1, r5
 8005f52:	2300      	movs	r3, #0
 8005f54:	220a      	movs	r2, #10
 8005f56:	4648      	mov	r0, r9
 8005f58:	f000 fae6 	bl	8006528 <__multadd>
 8005f5c:	f1bb 0f00 	cmp.w	fp, #0
 8005f60:	4605      	mov	r5, r0
 8005f62:	dc64      	bgt.n	800602e <_dtoa_r+0x876>
 8005f64:	9b07      	ldr	r3, [sp, #28]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	dc3e      	bgt.n	8005fe8 <_dtoa_r+0x830>
 8005f6a:	e060      	b.n	800602e <_dtoa_r+0x876>
 8005f6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f6e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005f72:	e73c      	b.n	8005dee <_dtoa_r+0x636>
 8005f74:	f10a 34ff 	add.w	r4, sl, #4294967295
 8005f78:	42a3      	cmp	r3, r4
 8005f7a:	bfbf      	itttt	lt
 8005f7c:	1ae2      	sublt	r2, r4, r3
 8005f7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005f80:	189b      	addlt	r3, r3, r2
 8005f82:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8005f84:	bfae      	itee	ge
 8005f86:	1b1c      	subge	r4, r3, r4
 8005f88:	4623      	movlt	r3, r4
 8005f8a:	2400      	movlt	r4, #0
 8005f8c:	f1ba 0f00 	cmp.w	sl, #0
 8005f90:	bfb5      	itete	lt
 8005f92:	9a05      	ldrlt	r2, [sp, #20]
 8005f94:	9e05      	ldrge	r6, [sp, #20]
 8005f96:	eba2 060a 	sublt.w	r6, r2, sl
 8005f9a:	4652      	movge	r2, sl
 8005f9c:	bfb8      	it	lt
 8005f9e:	2200      	movlt	r2, #0
 8005fa0:	e727      	b.n	8005df2 <_dtoa_r+0x63a>
 8005fa2:	9e05      	ldr	r6, [sp, #20]
 8005fa4:	9d08      	ldr	r5, [sp, #32]
 8005fa6:	461c      	mov	r4, r3
 8005fa8:	e730      	b.n	8005e0c <_dtoa_r+0x654>
 8005faa:	461a      	mov	r2, r3
 8005fac:	e758      	b.n	8005e60 <_dtoa_r+0x6a8>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	e786      	b.n	8005ec0 <_dtoa_r+0x708>
 8005fb2:	9b02      	ldr	r3, [sp, #8]
 8005fb4:	e784      	b.n	8005ec0 <_dtoa_r+0x708>
 8005fb6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005fb8:	e783      	b.n	8005ec2 <_dtoa_r+0x70a>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fbe:	e784      	b.n	8005eca <_dtoa_r+0x712>
 8005fc0:	d09d      	beq.n	8005efe <_dtoa_r+0x746>
 8005fc2:	9b05      	ldr	r3, [sp, #20]
 8005fc4:	321c      	adds	r2, #28
 8005fc6:	4413      	add	r3, r2
 8005fc8:	9305      	str	r3, [sp, #20]
 8005fca:	9b06      	ldr	r3, [sp, #24]
 8005fcc:	4416      	add	r6, r2
 8005fce:	4413      	add	r3, r2
 8005fd0:	e794      	b.n	8005efc <_dtoa_r+0x744>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	e7f5      	b.n	8005fc2 <_dtoa_r+0x80a>
 8005fd6:	f1ba 0f00 	cmp.w	sl, #0
 8005fda:	f8cd 8010 	str.w	r8, [sp, #16]
 8005fde:	46d3      	mov	fp, sl
 8005fe0:	dc21      	bgt.n	8006026 <_dtoa_r+0x86e>
 8005fe2:	9b07      	ldr	r3, [sp, #28]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	dd1e      	ble.n	8006026 <_dtoa_r+0x86e>
 8005fe8:	f1bb 0f00 	cmp.w	fp, #0
 8005fec:	f47f aeb7 	bne.w	8005d5e <_dtoa_r+0x5a6>
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	465b      	mov	r3, fp
 8005ff4:	2205      	movs	r2, #5
 8005ff6:	4648      	mov	r0, r9
 8005ff8:	f000 fa96 	bl	8006528 <__multadd>
 8005ffc:	4601      	mov	r1, r0
 8005ffe:	4604      	mov	r4, r0
 8006000:	9801      	ldr	r0, [sp, #4]
 8006002:	f000 fca9 	bl	8006958 <__mcmp>
 8006006:	2800      	cmp	r0, #0
 8006008:	f77f aea9 	ble.w	8005d5e <_dtoa_r+0x5a6>
 800600c:	463e      	mov	r6, r7
 800600e:	2331      	movs	r3, #49	@ 0x31
 8006010:	f806 3b01 	strb.w	r3, [r6], #1
 8006014:	9b04      	ldr	r3, [sp, #16]
 8006016:	3301      	adds	r3, #1
 8006018:	9304      	str	r3, [sp, #16]
 800601a:	e6a4      	b.n	8005d66 <_dtoa_r+0x5ae>
 800601c:	f8cd 8010 	str.w	r8, [sp, #16]
 8006020:	4654      	mov	r4, sl
 8006022:	4625      	mov	r5, r4
 8006024:	e7f2      	b.n	800600c <_dtoa_r+0x854>
 8006026:	9b08      	ldr	r3, [sp, #32]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8103 	beq.w	8006234 <_dtoa_r+0xa7c>
 800602e:	2e00      	cmp	r6, #0
 8006030:	dd05      	ble.n	800603e <_dtoa_r+0x886>
 8006032:	4629      	mov	r1, r5
 8006034:	4632      	mov	r2, r6
 8006036:	4648      	mov	r0, r9
 8006038:	f000 fc22 	bl	8006880 <__lshift>
 800603c:	4605      	mov	r5, r0
 800603e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006040:	2b00      	cmp	r3, #0
 8006042:	d058      	beq.n	80060f6 <_dtoa_r+0x93e>
 8006044:	6869      	ldr	r1, [r5, #4]
 8006046:	4648      	mov	r0, r9
 8006048:	f000 fa0c 	bl	8006464 <_Balloc>
 800604c:	4606      	mov	r6, r0
 800604e:	b928      	cbnz	r0, 800605c <_dtoa_r+0x8a4>
 8006050:	4b82      	ldr	r3, [pc, #520]	@ (800625c <_dtoa_r+0xaa4>)
 8006052:	4602      	mov	r2, r0
 8006054:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006058:	f7ff bbc7 	b.w	80057ea <_dtoa_r+0x32>
 800605c:	692a      	ldr	r2, [r5, #16]
 800605e:	3202      	adds	r2, #2
 8006060:	0092      	lsls	r2, r2, #2
 8006062:	f105 010c 	add.w	r1, r5, #12
 8006066:	300c      	adds	r0, #12
 8006068:	f001 f800 	bl	800706c <memcpy>
 800606c:	2201      	movs	r2, #1
 800606e:	4631      	mov	r1, r6
 8006070:	4648      	mov	r0, r9
 8006072:	f000 fc05 	bl	8006880 <__lshift>
 8006076:	1c7b      	adds	r3, r7, #1
 8006078:	9305      	str	r3, [sp, #20]
 800607a:	eb07 030b 	add.w	r3, r7, fp
 800607e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006080:	9b02      	ldr	r3, [sp, #8]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	46a8      	mov	r8, r5
 8006088:	9308      	str	r3, [sp, #32]
 800608a:	4605      	mov	r5, r0
 800608c:	9b05      	ldr	r3, [sp, #20]
 800608e:	9801      	ldr	r0, [sp, #4]
 8006090:	4621      	mov	r1, r4
 8006092:	f103 3bff 	add.w	fp, r3, #4294967295
 8006096:	f7ff fb04 	bl	80056a2 <quorem>
 800609a:	4641      	mov	r1, r8
 800609c:	9002      	str	r0, [sp, #8]
 800609e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80060a2:	9801      	ldr	r0, [sp, #4]
 80060a4:	f000 fc58 	bl	8006958 <__mcmp>
 80060a8:	462a      	mov	r2, r5
 80060aa:	9006      	str	r0, [sp, #24]
 80060ac:	4621      	mov	r1, r4
 80060ae:	4648      	mov	r0, r9
 80060b0:	f000 fc6e 	bl	8006990 <__mdiff>
 80060b4:	68c2      	ldr	r2, [r0, #12]
 80060b6:	4606      	mov	r6, r0
 80060b8:	b9fa      	cbnz	r2, 80060fa <_dtoa_r+0x942>
 80060ba:	4601      	mov	r1, r0
 80060bc:	9801      	ldr	r0, [sp, #4]
 80060be:	f000 fc4b 	bl	8006958 <__mcmp>
 80060c2:	4602      	mov	r2, r0
 80060c4:	4631      	mov	r1, r6
 80060c6:	4648      	mov	r0, r9
 80060c8:	920a      	str	r2, [sp, #40]	@ 0x28
 80060ca:	f000 fa0b 	bl	80064e4 <_Bfree>
 80060ce:	9b07      	ldr	r3, [sp, #28]
 80060d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060d2:	9e05      	ldr	r6, [sp, #20]
 80060d4:	ea43 0102 	orr.w	r1, r3, r2
 80060d8:	9b08      	ldr	r3, [sp, #32]
 80060da:	4319      	orrs	r1, r3
 80060dc:	d10f      	bne.n	80060fe <_dtoa_r+0x946>
 80060de:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80060e2:	d028      	beq.n	8006136 <_dtoa_r+0x97e>
 80060e4:	9b06      	ldr	r3, [sp, #24]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	dd02      	ble.n	80060f0 <_dtoa_r+0x938>
 80060ea:	9b02      	ldr	r3, [sp, #8]
 80060ec:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80060f0:	f88b a000 	strb.w	sl, [fp]
 80060f4:	e639      	b.n	8005d6a <_dtoa_r+0x5b2>
 80060f6:	4628      	mov	r0, r5
 80060f8:	e7bd      	b.n	8006076 <_dtoa_r+0x8be>
 80060fa:	2201      	movs	r2, #1
 80060fc:	e7e2      	b.n	80060c4 <_dtoa_r+0x90c>
 80060fe:	9b06      	ldr	r3, [sp, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	db04      	blt.n	800610e <_dtoa_r+0x956>
 8006104:	9907      	ldr	r1, [sp, #28]
 8006106:	430b      	orrs	r3, r1
 8006108:	9908      	ldr	r1, [sp, #32]
 800610a:	430b      	orrs	r3, r1
 800610c:	d120      	bne.n	8006150 <_dtoa_r+0x998>
 800610e:	2a00      	cmp	r2, #0
 8006110:	ddee      	ble.n	80060f0 <_dtoa_r+0x938>
 8006112:	9901      	ldr	r1, [sp, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	4648      	mov	r0, r9
 8006118:	f000 fbb2 	bl	8006880 <__lshift>
 800611c:	4621      	mov	r1, r4
 800611e:	9001      	str	r0, [sp, #4]
 8006120:	f000 fc1a 	bl	8006958 <__mcmp>
 8006124:	2800      	cmp	r0, #0
 8006126:	dc03      	bgt.n	8006130 <_dtoa_r+0x978>
 8006128:	d1e2      	bne.n	80060f0 <_dtoa_r+0x938>
 800612a:	f01a 0f01 	tst.w	sl, #1
 800612e:	d0df      	beq.n	80060f0 <_dtoa_r+0x938>
 8006130:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006134:	d1d9      	bne.n	80060ea <_dtoa_r+0x932>
 8006136:	2339      	movs	r3, #57	@ 0x39
 8006138:	f88b 3000 	strb.w	r3, [fp]
 800613c:	4633      	mov	r3, r6
 800613e:	461e      	mov	r6, r3
 8006140:	3b01      	subs	r3, #1
 8006142:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006146:	2a39      	cmp	r2, #57	@ 0x39
 8006148:	d053      	beq.n	80061f2 <_dtoa_r+0xa3a>
 800614a:	3201      	adds	r2, #1
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	e60c      	b.n	8005d6a <_dtoa_r+0x5b2>
 8006150:	2a00      	cmp	r2, #0
 8006152:	dd07      	ble.n	8006164 <_dtoa_r+0x9ac>
 8006154:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006158:	d0ed      	beq.n	8006136 <_dtoa_r+0x97e>
 800615a:	f10a 0301 	add.w	r3, sl, #1
 800615e:	f88b 3000 	strb.w	r3, [fp]
 8006162:	e602      	b.n	8005d6a <_dtoa_r+0x5b2>
 8006164:	9b05      	ldr	r3, [sp, #20]
 8006166:	9a05      	ldr	r2, [sp, #20]
 8006168:	f803 ac01 	strb.w	sl, [r3, #-1]
 800616c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800616e:	4293      	cmp	r3, r2
 8006170:	d029      	beq.n	80061c6 <_dtoa_r+0xa0e>
 8006172:	9901      	ldr	r1, [sp, #4]
 8006174:	2300      	movs	r3, #0
 8006176:	220a      	movs	r2, #10
 8006178:	4648      	mov	r0, r9
 800617a:	f000 f9d5 	bl	8006528 <__multadd>
 800617e:	45a8      	cmp	r8, r5
 8006180:	9001      	str	r0, [sp, #4]
 8006182:	f04f 0300 	mov.w	r3, #0
 8006186:	f04f 020a 	mov.w	r2, #10
 800618a:	4641      	mov	r1, r8
 800618c:	4648      	mov	r0, r9
 800618e:	d107      	bne.n	80061a0 <_dtoa_r+0x9e8>
 8006190:	f000 f9ca 	bl	8006528 <__multadd>
 8006194:	4680      	mov	r8, r0
 8006196:	4605      	mov	r5, r0
 8006198:	9b05      	ldr	r3, [sp, #20]
 800619a:	3301      	adds	r3, #1
 800619c:	9305      	str	r3, [sp, #20]
 800619e:	e775      	b.n	800608c <_dtoa_r+0x8d4>
 80061a0:	f000 f9c2 	bl	8006528 <__multadd>
 80061a4:	4629      	mov	r1, r5
 80061a6:	4680      	mov	r8, r0
 80061a8:	2300      	movs	r3, #0
 80061aa:	220a      	movs	r2, #10
 80061ac:	4648      	mov	r0, r9
 80061ae:	f000 f9bb 	bl	8006528 <__multadd>
 80061b2:	4605      	mov	r5, r0
 80061b4:	e7f0      	b.n	8006198 <_dtoa_r+0x9e0>
 80061b6:	f1bb 0f00 	cmp.w	fp, #0
 80061ba:	bfcc      	ite	gt
 80061bc:	465e      	movgt	r6, fp
 80061be:	2601      	movle	r6, #1
 80061c0:	443e      	add	r6, r7
 80061c2:	f04f 0800 	mov.w	r8, #0
 80061c6:	9901      	ldr	r1, [sp, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	4648      	mov	r0, r9
 80061cc:	f000 fb58 	bl	8006880 <__lshift>
 80061d0:	4621      	mov	r1, r4
 80061d2:	9001      	str	r0, [sp, #4]
 80061d4:	f000 fbc0 	bl	8006958 <__mcmp>
 80061d8:	2800      	cmp	r0, #0
 80061da:	dcaf      	bgt.n	800613c <_dtoa_r+0x984>
 80061dc:	d102      	bne.n	80061e4 <_dtoa_r+0xa2c>
 80061de:	f01a 0f01 	tst.w	sl, #1
 80061e2:	d1ab      	bne.n	800613c <_dtoa_r+0x984>
 80061e4:	4633      	mov	r3, r6
 80061e6:	461e      	mov	r6, r3
 80061e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061ec:	2a30      	cmp	r2, #48	@ 0x30
 80061ee:	d0fa      	beq.n	80061e6 <_dtoa_r+0xa2e>
 80061f0:	e5bb      	b.n	8005d6a <_dtoa_r+0x5b2>
 80061f2:	429f      	cmp	r7, r3
 80061f4:	d1a3      	bne.n	800613e <_dtoa_r+0x986>
 80061f6:	9b04      	ldr	r3, [sp, #16]
 80061f8:	3301      	adds	r3, #1
 80061fa:	9304      	str	r3, [sp, #16]
 80061fc:	2331      	movs	r3, #49	@ 0x31
 80061fe:	703b      	strb	r3, [r7, #0]
 8006200:	e5b3      	b.n	8005d6a <_dtoa_r+0x5b2>
 8006202:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006204:	4f16      	ldr	r7, [pc, #88]	@ (8006260 <_dtoa_r+0xaa8>)
 8006206:	b11b      	cbz	r3, 8006210 <_dtoa_r+0xa58>
 8006208:	f107 0308 	add.w	r3, r7, #8
 800620c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	4638      	mov	r0, r7
 8006212:	b011      	add	sp, #68	@ 0x44
 8006214:	ecbd 8b02 	vpop	{d8}
 8006218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621c:	9b07      	ldr	r3, [sp, #28]
 800621e:	2b01      	cmp	r3, #1
 8006220:	f77f ae36 	ble.w	8005e90 <_dtoa_r+0x6d8>
 8006224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006226:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006228:	2001      	movs	r0, #1
 800622a:	e656      	b.n	8005eda <_dtoa_r+0x722>
 800622c:	f1bb 0f00 	cmp.w	fp, #0
 8006230:	f77f aed7 	ble.w	8005fe2 <_dtoa_r+0x82a>
 8006234:	463e      	mov	r6, r7
 8006236:	9801      	ldr	r0, [sp, #4]
 8006238:	4621      	mov	r1, r4
 800623a:	f7ff fa32 	bl	80056a2 <quorem>
 800623e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006242:	f806 ab01 	strb.w	sl, [r6], #1
 8006246:	1bf2      	subs	r2, r6, r7
 8006248:	4593      	cmp	fp, r2
 800624a:	ddb4      	ble.n	80061b6 <_dtoa_r+0x9fe>
 800624c:	9901      	ldr	r1, [sp, #4]
 800624e:	2300      	movs	r3, #0
 8006250:	220a      	movs	r2, #10
 8006252:	4648      	mov	r0, r9
 8006254:	f000 f968 	bl	8006528 <__multadd>
 8006258:	9001      	str	r0, [sp, #4]
 800625a:	e7ec      	b.n	8006236 <_dtoa_r+0xa7e>
 800625c:	08007390 	.word	0x08007390
 8006260:	08007314 	.word	0x08007314

08006264 <_free_r>:
 8006264:	b538      	push	{r3, r4, r5, lr}
 8006266:	4605      	mov	r5, r0
 8006268:	2900      	cmp	r1, #0
 800626a:	d041      	beq.n	80062f0 <_free_r+0x8c>
 800626c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006270:	1f0c      	subs	r4, r1, #4
 8006272:	2b00      	cmp	r3, #0
 8006274:	bfb8      	it	lt
 8006276:	18e4      	addlt	r4, r4, r3
 8006278:	f000 f8e8 	bl	800644c <__malloc_lock>
 800627c:	4a1d      	ldr	r2, [pc, #116]	@ (80062f4 <_free_r+0x90>)
 800627e:	6813      	ldr	r3, [r2, #0]
 8006280:	b933      	cbnz	r3, 8006290 <_free_r+0x2c>
 8006282:	6063      	str	r3, [r4, #4]
 8006284:	6014      	str	r4, [r2, #0]
 8006286:	4628      	mov	r0, r5
 8006288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800628c:	f000 b8e4 	b.w	8006458 <__malloc_unlock>
 8006290:	42a3      	cmp	r3, r4
 8006292:	d908      	bls.n	80062a6 <_free_r+0x42>
 8006294:	6820      	ldr	r0, [r4, #0]
 8006296:	1821      	adds	r1, r4, r0
 8006298:	428b      	cmp	r3, r1
 800629a:	bf01      	itttt	eq
 800629c:	6819      	ldreq	r1, [r3, #0]
 800629e:	685b      	ldreq	r3, [r3, #4]
 80062a0:	1809      	addeq	r1, r1, r0
 80062a2:	6021      	streq	r1, [r4, #0]
 80062a4:	e7ed      	b.n	8006282 <_free_r+0x1e>
 80062a6:	461a      	mov	r2, r3
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	b10b      	cbz	r3, 80062b0 <_free_r+0x4c>
 80062ac:	42a3      	cmp	r3, r4
 80062ae:	d9fa      	bls.n	80062a6 <_free_r+0x42>
 80062b0:	6811      	ldr	r1, [r2, #0]
 80062b2:	1850      	adds	r0, r2, r1
 80062b4:	42a0      	cmp	r0, r4
 80062b6:	d10b      	bne.n	80062d0 <_free_r+0x6c>
 80062b8:	6820      	ldr	r0, [r4, #0]
 80062ba:	4401      	add	r1, r0
 80062bc:	1850      	adds	r0, r2, r1
 80062be:	4283      	cmp	r3, r0
 80062c0:	6011      	str	r1, [r2, #0]
 80062c2:	d1e0      	bne.n	8006286 <_free_r+0x22>
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	6053      	str	r3, [r2, #4]
 80062ca:	4408      	add	r0, r1
 80062cc:	6010      	str	r0, [r2, #0]
 80062ce:	e7da      	b.n	8006286 <_free_r+0x22>
 80062d0:	d902      	bls.n	80062d8 <_free_r+0x74>
 80062d2:	230c      	movs	r3, #12
 80062d4:	602b      	str	r3, [r5, #0]
 80062d6:	e7d6      	b.n	8006286 <_free_r+0x22>
 80062d8:	6820      	ldr	r0, [r4, #0]
 80062da:	1821      	adds	r1, r4, r0
 80062dc:	428b      	cmp	r3, r1
 80062de:	bf04      	itt	eq
 80062e0:	6819      	ldreq	r1, [r3, #0]
 80062e2:	685b      	ldreq	r3, [r3, #4]
 80062e4:	6063      	str	r3, [r4, #4]
 80062e6:	bf04      	itt	eq
 80062e8:	1809      	addeq	r1, r1, r0
 80062ea:	6021      	streq	r1, [r4, #0]
 80062ec:	6054      	str	r4, [r2, #4]
 80062ee:	e7ca      	b.n	8006286 <_free_r+0x22>
 80062f0:	bd38      	pop	{r3, r4, r5, pc}
 80062f2:	bf00      	nop
 80062f4:	24000398 	.word	0x24000398

080062f8 <malloc>:
 80062f8:	4b02      	ldr	r3, [pc, #8]	@ (8006304 <malloc+0xc>)
 80062fa:	4601      	mov	r1, r0
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	f000 b825 	b.w	800634c <_malloc_r>
 8006302:	bf00      	nop
 8006304:	2400001c 	.word	0x2400001c

08006308 <sbrk_aligned>:
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	4e0f      	ldr	r6, [pc, #60]	@ (8006348 <sbrk_aligned+0x40>)
 800630c:	460c      	mov	r4, r1
 800630e:	6831      	ldr	r1, [r6, #0]
 8006310:	4605      	mov	r5, r0
 8006312:	b911      	cbnz	r1, 800631a <sbrk_aligned+0x12>
 8006314:	f000 fe9a 	bl	800704c <_sbrk_r>
 8006318:	6030      	str	r0, [r6, #0]
 800631a:	4621      	mov	r1, r4
 800631c:	4628      	mov	r0, r5
 800631e:	f000 fe95 	bl	800704c <_sbrk_r>
 8006322:	1c43      	adds	r3, r0, #1
 8006324:	d103      	bne.n	800632e <sbrk_aligned+0x26>
 8006326:	f04f 34ff 	mov.w	r4, #4294967295
 800632a:	4620      	mov	r0, r4
 800632c:	bd70      	pop	{r4, r5, r6, pc}
 800632e:	1cc4      	adds	r4, r0, #3
 8006330:	f024 0403 	bic.w	r4, r4, #3
 8006334:	42a0      	cmp	r0, r4
 8006336:	d0f8      	beq.n	800632a <sbrk_aligned+0x22>
 8006338:	1a21      	subs	r1, r4, r0
 800633a:	4628      	mov	r0, r5
 800633c:	f000 fe86 	bl	800704c <_sbrk_r>
 8006340:	3001      	adds	r0, #1
 8006342:	d1f2      	bne.n	800632a <sbrk_aligned+0x22>
 8006344:	e7ef      	b.n	8006326 <sbrk_aligned+0x1e>
 8006346:	bf00      	nop
 8006348:	24000394 	.word	0x24000394

0800634c <_malloc_r>:
 800634c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006350:	1ccd      	adds	r5, r1, #3
 8006352:	f025 0503 	bic.w	r5, r5, #3
 8006356:	3508      	adds	r5, #8
 8006358:	2d0c      	cmp	r5, #12
 800635a:	bf38      	it	cc
 800635c:	250c      	movcc	r5, #12
 800635e:	2d00      	cmp	r5, #0
 8006360:	4606      	mov	r6, r0
 8006362:	db01      	blt.n	8006368 <_malloc_r+0x1c>
 8006364:	42a9      	cmp	r1, r5
 8006366:	d904      	bls.n	8006372 <_malloc_r+0x26>
 8006368:	230c      	movs	r3, #12
 800636a:	6033      	str	r3, [r6, #0]
 800636c:	2000      	movs	r0, #0
 800636e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006372:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006448 <_malloc_r+0xfc>
 8006376:	f000 f869 	bl	800644c <__malloc_lock>
 800637a:	f8d8 3000 	ldr.w	r3, [r8]
 800637e:	461c      	mov	r4, r3
 8006380:	bb44      	cbnz	r4, 80063d4 <_malloc_r+0x88>
 8006382:	4629      	mov	r1, r5
 8006384:	4630      	mov	r0, r6
 8006386:	f7ff ffbf 	bl	8006308 <sbrk_aligned>
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	4604      	mov	r4, r0
 800638e:	d158      	bne.n	8006442 <_malloc_r+0xf6>
 8006390:	f8d8 4000 	ldr.w	r4, [r8]
 8006394:	4627      	mov	r7, r4
 8006396:	2f00      	cmp	r7, #0
 8006398:	d143      	bne.n	8006422 <_malloc_r+0xd6>
 800639a:	2c00      	cmp	r4, #0
 800639c:	d04b      	beq.n	8006436 <_malloc_r+0xea>
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	4639      	mov	r1, r7
 80063a2:	4630      	mov	r0, r6
 80063a4:	eb04 0903 	add.w	r9, r4, r3
 80063a8:	f000 fe50 	bl	800704c <_sbrk_r>
 80063ac:	4581      	cmp	r9, r0
 80063ae:	d142      	bne.n	8006436 <_malloc_r+0xea>
 80063b0:	6821      	ldr	r1, [r4, #0]
 80063b2:	1a6d      	subs	r5, r5, r1
 80063b4:	4629      	mov	r1, r5
 80063b6:	4630      	mov	r0, r6
 80063b8:	f7ff ffa6 	bl	8006308 <sbrk_aligned>
 80063bc:	3001      	adds	r0, #1
 80063be:	d03a      	beq.n	8006436 <_malloc_r+0xea>
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	442b      	add	r3, r5
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	f8d8 3000 	ldr.w	r3, [r8]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	bb62      	cbnz	r2, 8006428 <_malloc_r+0xdc>
 80063ce:	f8c8 7000 	str.w	r7, [r8]
 80063d2:	e00f      	b.n	80063f4 <_malloc_r+0xa8>
 80063d4:	6822      	ldr	r2, [r4, #0]
 80063d6:	1b52      	subs	r2, r2, r5
 80063d8:	d420      	bmi.n	800641c <_malloc_r+0xd0>
 80063da:	2a0b      	cmp	r2, #11
 80063dc:	d917      	bls.n	800640e <_malloc_r+0xc2>
 80063de:	1961      	adds	r1, r4, r5
 80063e0:	42a3      	cmp	r3, r4
 80063e2:	6025      	str	r5, [r4, #0]
 80063e4:	bf18      	it	ne
 80063e6:	6059      	strne	r1, [r3, #4]
 80063e8:	6863      	ldr	r3, [r4, #4]
 80063ea:	bf08      	it	eq
 80063ec:	f8c8 1000 	streq.w	r1, [r8]
 80063f0:	5162      	str	r2, [r4, r5]
 80063f2:	604b      	str	r3, [r1, #4]
 80063f4:	4630      	mov	r0, r6
 80063f6:	f000 f82f 	bl	8006458 <__malloc_unlock>
 80063fa:	f104 000b 	add.w	r0, r4, #11
 80063fe:	1d23      	adds	r3, r4, #4
 8006400:	f020 0007 	bic.w	r0, r0, #7
 8006404:	1ac2      	subs	r2, r0, r3
 8006406:	bf1c      	itt	ne
 8006408:	1a1b      	subne	r3, r3, r0
 800640a:	50a3      	strne	r3, [r4, r2]
 800640c:	e7af      	b.n	800636e <_malloc_r+0x22>
 800640e:	6862      	ldr	r2, [r4, #4]
 8006410:	42a3      	cmp	r3, r4
 8006412:	bf0c      	ite	eq
 8006414:	f8c8 2000 	streq.w	r2, [r8]
 8006418:	605a      	strne	r2, [r3, #4]
 800641a:	e7eb      	b.n	80063f4 <_malloc_r+0xa8>
 800641c:	4623      	mov	r3, r4
 800641e:	6864      	ldr	r4, [r4, #4]
 8006420:	e7ae      	b.n	8006380 <_malloc_r+0x34>
 8006422:	463c      	mov	r4, r7
 8006424:	687f      	ldr	r7, [r7, #4]
 8006426:	e7b6      	b.n	8006396 <_malloc_r+0x4a>
 8006428:	461a      	mov	r2, r3
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	42a3      	cmp	r3, r4
 800642e:	d1fb      	bne.n	8006428 <_malloc_r+0xdc>
 8006430:	2300      	movs	r3, #0
 8006432:	6053      	str	r3, [r2, #4]
 8006434:	e7de      	b.n	80063f4 <_malloc_r+0xa8>
 8006436:	230c      	movs	r3, #12
 8006438:	6033      	str	r3, [r6, #0]
 800643a:	4630      	mov	r0, r6
 800643c:	f000 f80c 	bl	8006458 <__malloc_unlock>
 8006440:	e794      	b.n	800636c <_malloc_r+0x20>
 8006442:	6005      	str	r5, [r0, #0]
 8006444:	e7d6      	b.n	80063f4 <_malloc_r+0xa8>
 8006446:	bf00      	nop
 8006448:	24000398 	.word	0x24000398

0800644c <__malloc_lock>:
 800644c:	4801      	ldr	r0, [pc, #4]	@ (8006454 <__malloc_lock+0x8>)
 800644e:	f7ff b926 	b.w	800569e <__retarget_lock_acquire_recursive>
 8006452:	bf00      	nop
 8006454:	24000390 	.word	0x24000390

08006458 <__malloc_unlock>:
 8006458:	4801      	ldr	r0, [pc, #4]	@ (8006460 <__malloc_unlock+0x8>)
 800645a:	f7ff b921 	b.w	80056a0 <__retarget_lock_release_recursive>
 800645e:	bf00      	nop
 8006460:	24000390 	.word	0x24000390

08006464 <_Balloc>:
 8006464:	b570      	push	{r4, r5, r6, lr}
 8006466:	69c6      	ldr	r6, [r0, #28]
 8006468:	4604      	mov	r4, r0
 800646a:	460d      	mov	r5, r1
 800646c:	b976      	cbnz	r6, 800648c <_Balloc+0x28>
 800646e:	2010      	movs	r0, #16
 8006470:	f7ff ff42 	bl	80062f8 <malloc>
 8006474:	4602      	mov	r2, r0
 8006476:	61e0      	str	r0, [r4, #28]
 8006478:	b920      	cbnz	r0, 8006484 <_Balloc+0x20>
 800647a:	4b18      	ldr	r3, [pc, #96]	@ (80064dc <_Balloc+0x78>)
 800647c:	4818      	ldr	r0, [pc, #96]	@ (80064e0 <_Balloc+0x7c>)
 800647e:	216b      	movs	r1, #107	@ 0x6b
 8006480:	f000 fe02 	bl	8007088 <__assert_func>
 8006484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006488:	6006      	str	r6, [r0, #0]
 800648a:	60c6      	str	r6, [r0, #12]
 800648c:	69e6      	ldr	r6, [r4, #28]
 800648e:	68f3      	ldr	r3, [r6, #12]
 8006490:	b183      	cbz	r3, 80064b4 <_Balloc+0x50>
 8006492:	69e3      	ldr	r3, [r4, #28]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800649a:	b9b8      	cbnz	r0, 80064cc <_Balloc+0x68>
 800649c:	2101      	movs	r1, #1
 800649e:	fa01 f605 	lsl.w	r6, r1, r5
 80064a2:	1d72      	adds	r2, r6, #5
 80064a4:	0092      	lsls	r2, r2, #2
 80064a6:	4620      	mov	r0, r4
 80064a8:	f000 fe0c 	bl	80070c4 <_calloc_r>
 80064ac:	b160      	cbz	r0, 80064c8 <_Balloc+0x64>
 80064ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064b2:	e00e      	b.n	80064d2 <_Balloc+0x6e>
 80064b4:	2221      	movs	r2, #33	@ 0x21
 80064b6:	2104      	movs	r1, #4
 80064b8:	4620      	mov	r0, r4
 80064ba:	f000 fe03 	bl	80070c4 <_calloc_r>
 80064be:	69e3      	ldr	r3, [r4, #28]
 80064c0:	60f0      	str	r0, [r6, #12]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e4      	bne.n	8006492 <_Balloc+0x2e>
 80064c8:	2000      	movs	r0, #0
 80064ca:	bd70      	pop	{r4, r5, r6, pc}
 80064cc:	6802      	ldr	r2, [r0, #0]
 80064ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064d2:	2300      	movs	r3, #0
 80064d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064d8:	e7f7      	b.n	80064ca <_Balloc+0x66>
 80064da:	bf00      	nop
 80064dc:	08007321 	.word	0x08007321
 80064e0:	080073a1 	.word	0x080073a1

080064e4 <_Bfree>:
 80064e4:	b570      	push	{r4, r5, r6, lr}
 80064e6:	69c6      	ldr	r6, [r0, #28]
 80064e8:	4605      	mov	r5, r0
 80064ea:	460c      	mov	r4, r1
 80064ec:	b976      	cbnz	r6, 800650c <_Bfree+0x28>
 80064ee:	2010      	movs	r0, #16
 80064f0:	f7ff ff02 	bl	80062f8 <malloc>
 80064f4:	4602      	mov	r2, r0
 80064f6:	61e8      	str	r0, [r5, #28]
 80064f8:	b920      	cbnz	r0, 8006504 <_Bfree+0x20>
 80064fa:	4b09      	ldr	r3, [pc, #36]	@ (8006520 <_Bfree+0x3c>)
 80064fc:	4809      	ldr	r0, [pc, #36]	@ (8006524 <_Bfree+0x40>)
 80064fe:	218f      	movs	r1, #143	@ 0x8f
 8006500:	f000 fdc2 	bl	8007088 <__assert_func>
 8006504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006508:	6006      	str	r6, [r0, #0]
 800650a:	60c6      	str	r6, [r0, #12]
 800650c:	b13c      	cbz	r4, 800651e <_Bfree+0x3a>
 800650e:	69eb      	ldr	r3, [r5, #28]
 8006510:	6862      	ldr	r2, [r4, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006518:	6021      	str	r1, [r4, #0]
 800651a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800651e:	bd70      	pop	{r4, r5, r6, pc}
 8006520:	08007321 	.word	0x08007321
 8006524:	080073a1 	.word	0x080073a1

08006528 <__multadd>:
 8006528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800652c:	690d      	ldr	r5, [r1, #16]
 800652e:	4607      	mov	r7, r0
 8006530:	460c      	mov	r4, r1
 8006532:	461e      	mov	r6, r3
 8006534:	f101 0c14 	add.w	ip, r1, #20
 8006538:	2000      	movs	r0, #0
 800653a:	f8dc 3000 	ldr.w	r3, [ip]
 800653e:	b299      	uxth	r1, r3
 8006540:	fb02 6101 	mla	r1, r2, r1, r6
 8006544:	0c1e      	lsrs	r6, r3, #16
 8006546:	0c0b      	lsrs	r3, r1, #16
 8006548:	fb02 3306 	mla	r3, r2, r6, r3
 800654c:	b289      	uxth	r1, r1
 800654e:	3001      	adds	r0, #1
 8006550:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006554:	4285      	cmp	r5, r0
 8006556:	f84c 1b04 	str.w	r1, [ip], #4
 800655a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800655e:	dcec      	bgt.n	800653a <__multadd+0x12>
 8006560:	b30e      	cbz	r6, 80065a6 <__multadd+0x7e>
 8006562:	68a3      	ldr	r3, [r4, #8]
 8006564:	42ab      	cmp	r3, r5
 8006566:	dc19      	bgt.n	800659c <__multadd+0x74>
 8006568:	6861      	ldr	r1, [r4, #4]
 800656a:	4638      	mov	r0, r7
 800656c:	3101      	adds	r1, #1
 800656e:	f7ff ff79 	bl	8006464 <_Balloc>
 8006572:	4680      	mov	r8, r0
 8006574:	b928      	cbnz	r0, 8006582 <__multadd+0x5a>
 8006576:	4602      	mov	r2, r0
 8006578:	4b0c      	ldr	r3, [pc, #48]	@ (80065ac <__multadd+0x84>)
 800657a:	480d      	ldr	r0, [pc, #52]	@ (80065b0 <__multadd+0x88>)
 800657c:	21ba      	movs	r1, #186	@ 0xba
 800657e:	f000 fd83 	bl	8007088 <__assert_func>
 8006582:	6922      	ldr	r2, [r4, #16]
 8006584:	3202      	adds	r2, #2
 8006586:	f104 010c 	add.w	r1, r4, #12
 800658a:	0092      	lsls	r2, r2, #2
 800658c:	300c      	adds	r0, #12
 800658e:	f000 fd6d 	bl	800706c <memcpy>
 8006592:	4621      	mov	r1, r4
 8006594:	4638      	mov	r0, r7
 8006596:	f7ff ffa5 	bl	80064e4 <_Bfree>
 800659a:	4644      	mov	r4, r8
 800659c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065a0:	3501      	adds	r5, #1
 80065a2:	615e      	str	r6, [r3, #20]
 80065a4:	6125      	str	r5, [r4, #16]
 80065a6:	4620      	mov	r0, r4
 80065a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ac:	08007390 	.word	0x08007390
 80065b0:	080073a1 	.word	0x080073a1

080065b4 <__hi0bits>:
 80065b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80065b8:	4603      	mov	r3, r0
 80065ba:	bf36      	itet	cc
 80065bc:	0403      	lslcc	r3, r0, #16
 80065be:	2000      	movcs	r0, #0
 80065c0:	2010      	movcc	r0, #16
 80065c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065c6:	bf3c      	itt	cc
 80065c8:	021b      	lslcc	r3, r3, #8
 80065ca:	3008      	addcc	r0, #8
 80065cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065d0:	bf3c      	itt	cc
 80065d2:	011b      	lslcc	r3, r3, #4
 80065d4:	3004      	addcc	r0, #4
 80065d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065da:	bf3c      	itt	cc
 80065dc:	009b      	lslcc	r3, r3, #2
 80065de:	3002      	addcc	r0, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	db05      	blt.n	80065f0 <__hi0bits+0x3c>
 80065e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80065e8:	f100 0001 	add.w	r0, r0, #1
 80065ec:	bf08      	it	eq
 80065ee:	2020      	moveq	r0, #32
 80065f0:	4770      	bx	lr

080065f2 <__lo0bits>:
 80065f2:	6803      	ldr	r3, [r0, #0]
 80065f4:	4602      	mov	r2, r0
 80065f6:	f013 0007 	ands.w	r0, r3, #7
 80065fa:	d00b      	beq.n	8006614 <__lo0bits+0x22>
 80065fc:	07d9      	lsls	r1, r3, #31
 80065fe:	d421      	bmi.n	8006644 <__lo0bits+0x52>
 8006600:	0798      	lsls	r0, r3, #30
 8006602:	bf49      	itett	mi
 8006604:	085b      	lsrmi	r3, r3, #1
 8006606:	089b      	lsrpl	r3, r3, #2
 8006608:	2001      	movmi	r0, #1
 800660a:	6013      	strmi	r3, [r2, #0]
 800660c:	bf5c      	itt	pl
 800660e:	6013      	strpl	r3, [r2, #0]
 8006610:	2002      	movpl	r0, #2
 8006612:	4770      	bx	lr
 8006614:	b299      	uxth	r1, r3
 8006616:	b909      	cbnz	r1, 800661c <__lo0bits+0x2a>
 8006618:	0c1b      	lsrs	r3, r3, #16
 800661a:	2010      	movs	r0, #16
 800661c:	b2d9      	uxtb	r1, r3
 800661e:	b909      	cbnz	r1, 8006624 <__lo0bits+0x32>
 8006620:	3008      	adds	r0, #8
 8006622:	0a1b      	lsrs	r3, r3, #8
 8006624:	0719      	lsls	r1, r3, #28
 8006626:	bf04      	itt	eq
 8006628:	091b      	lsreq	r3, r3, #4
 800662a:	3004      	addeq	r0, #4
 800662c:	0799      	lsls	r1, r3, #30
 800662e:	bf04      	itt	eq
 8006630:	089b      	lsreq	r3, r3, #2
 8006632:	3002      	addeq	r0, #2
 8006634:	07d9      	lsls	r1, r3, #31
 8006636:	d403      	bmi.n	8006640 <__lo0bits+0x4e>
 8006638:	085b      	lsrs	r3, r3, #1
 800663a:	f100 0001 	add.w	r0, r0, #1
 800663e:	d003      	beq.n	8006648 <__lo0bits+0x56>
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	4770      	bx	lr
 8006644:	2000      	movs	r0, #0
 8006646:	4770      	bx	lr
 8006648:	2020      	movs	r0, #32
 800664a:	4770      	bx	lr

0800664c <__i2b>:
 800664c:	b510      	push	{r4, lr}
 800664e:	460c      	mov	r4, r1
 8006650:	2101      	movs	r1, #1
 8006652:	f7ff ff07 	bl	8006464 <_Balloc>
 8006656:	4602      	mov	r2, r0
 8006658:	b928      	cbnz	r0, 8006666 <__i2b+0x1a>
 800665a:	4b05      	ldr	r3, [pc, #20]	@ (8006670 <__i2b+0x24>)
 800665c:	4805      	ldr	r0, [pc, #20]	@ (8006674 <__i2b+0x28>)
 800665e:	f240 1145 	movw	r1, #325	@ 0x145
 8006662:	f000 fd11 	bl	8007088 <__assert_func>
 8006666:	2301      	movs	r3, #1
 8006668:	6144      	str	r4, [r0, #20]
 800666a:	6103      	str	r3, [r0, #16]
 800666c:	bd10      	pop	{r4, pc}
 800666e:	bf00      	nop
 8006670:	08007390 	.word	0x08007390
 8006674:	080073a1 	.word	0x080073a1

08006678 <__multiply>:
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	4614      	mov	r4, r2
 800667e:	690a      	ldr	r2, [r1, #16]
 8006680:	6923      	ldr	r3, [r4, #16]
 8006682:	429a      	cmp	r2, r3
 8006684:	bfa8      	it	ge
 8006686:	4623      	movge	r3, r4
 8006688:	460f      	mov	r7, r1
 800668a:	bfa4      	itt	ge
 800668c:	460c      	movge	r4, r1
 800668e:	461f      	movge	r7, r3
 8006690:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006694:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006698:	68a3      	ldr	r3, [r4, #8]
 800669a:	6861      	ldr	r1, [r4, #4]
 800669c:	eb0a 0609 	add.w	r6, sl, r9
 80066a0:	42b3      	cmp	r3, r6
 80066a2:	b085      	sub	sp, #20
 80066a4:	bfb8      	it	lt
 80066a6:	3101      	addlt	r1, #1
 80066a8:	f7ff fedc 	bl	8006464 <_Balloc>
 80066ac:	b930      	cbnz	r0, 80066bc <__multiply+0x44>
 80066ae:	4602      	mov	r2, r0
 80066b0:	4b44      	ldr	r3, [pc, #272]	@ (80067c4 <__multiply+0x14c>)
 80066b2:	4845      	ldr	r0, [pc, #276]	@ (80067c8 <__multiply+0x150>)
 80066b4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80066b8:	f000 fce6 	bl	8007088 <__assert_func>
 80066bc:	f100 0514 	add.w	r5, r0, #20
 80066c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066c4:	462b      	mov	r3, r5
 80066c6:	2200      	movs	r2, #0
 80066c8:	4543      	cmp	r3, r8
 80066ca:	d321      	bcc.n	8006710 <__multiply+0x98>
 80066cc:	f107 0114 	add.w	r1, r7, #20
 80066d0:	f104 0214 	add.w	r2, r4, #20
 80066d4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80066d8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80066dc:	9302      	str	r3, [sp, #8]
 80066de:	1b13      	subs	r3, r2, r4
 80066e0:	3b15      	subs	r3, #21
 80066e2:	f023 0303 	bic.w	r3, r3, #3
 80066e6:	3304      	adds	r3, #4
 80066e8:	f104 0715 	add.w	r7, r4, #21
 80066ec:	42ba      	cmp	r2, r7
 80066ee:	bf38      	it	cc
 80066f0:	2304      	movcc	r3, #4
 80066f2:	9301      	str	r3, [sp, #4]
 80066f4:	9b02      	ldr	r3, [sp, #8]
 80066f6:	9103      	str	r1, [sp, #12]
 80066f8:	428b      	cmp	r3, r1
 80066fa:	d80c      	bhi.n	8006716 <__multiply+0x9e>
 80066fc:	2e00      	cmp	r6, #0
 80066fe:	dd03      	ble.n	8006708 <__multiply+0x90>
 8006700:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006704:	2b00      	cmp	r3, #0
 8006706:	d05b      	beq.n	80067c0 <__multiply+0x148>
 8006708:	6106      	str	r6, [r0, #16]
 800670a:	b005      	add	sp, #20
 800670c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006710:	f843 2b04 	str.w	r2, [r3], #4
 8006714:	e7d8      	b.n	80066c8 <__multiply+0x50>
 8006716:	f8b1 a000 	ldrh.w	sl, [r1]
 800671a:	f1ba 0f00 	cmp.w	sl, #0
 800671e:	d024      	beq.n	800676a <__multiply+0xf2>
 8006720:	f104 0e14 	add.w	lr, r4, #20
 8006724:	46a9      	mov	r9, r5
 8006726:	f04f 0c00 	mov.w	ip, #0
 800672a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800672e:	f8d9 3000 	ldr.w	r3, [r9]
 8006732:	fa1f fb87 	uxth.w	fp, r7
 8006736:	b29b      	uxth	r3, r3
 8006738:	fb0a 330b 	mla	r3, sl, fp, r3
 800673c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006740:	f8d9 7000 	ldr.w	r7, [r9]
 8006744:	4463      	add	r3, ip
 8006746:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800674a:	fb0a c70b 	mla	r7, sl, fp, ip
 800674e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006752:	b29b      	uxth	r3, r3
 8006754:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006758:	4572      	cmp	r2, lr
 800675a:	f849 3b04 	str.w	r3, [r9], #4
 800675e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006762:	d8e2      	bhi.n	800672a <__multiply+0xb2>
 8006764:	9b01      	ldr	r3, [sp, #4]
 8006766:	f845 c003 	str.w	ip, [r5, r3]
 800676a:	9b03      	ldr	r3, [sp, #12]
 800676c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006770:	3104      	adds	r1, #4
 8006772:	f1b9 0f00 	cmp.w	r9, #0
 8006776:	d021      	beq.n	80067bc <__multiply+0x144>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	f104 0c14 	add.w	ip, r4, #20
 800677e:	46ae      	mov	lr, r5
 8006780:	f04f 0a00 	mov.w	sl, #0
 8006784:	f8bc b000 	ldrh.w	fp, [ip]
 8006788:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800678c:	fb09 770b 	mla	r7, r9, fp, r7
 8006790:	4457      	add	r7, sl
 8006792:	b29b      	uxth	r3, r3
 8006794:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006798:	f84e 3b04 	str.w	r3, [lr], #4
 800679c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80067a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067a4:	f8be 3000 	ldrh.w	r3, [lr]
 80067a8:	fb09 330a 	mla	r3, r9, sl, r3
 80067ac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80067b0:	4562      	cmp	r2, ip
 80067b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067b6:	d8e5      	bhi.n	8006784 <__multiply+0x10c>
 80067b8:	9f01      	ldr	r7, [sp, #4]
 80067ba:	51eb      	str	r3, [r5, r7]
 80067bc:	3504      	adds	r5, #4
 80067be:	e799      	b.n	80066f4 <__multiply+0x7c>
 80067c0:	3e01      	subs	r6, #1
 80067c2:	e79b      	b.n	80066fc <__multiply+0x84>
 80067c4:	08007390 	.word	0x08007390
 80067c8:	080073a1 	.word	0x080073a1

080067cc <__pow5mult>:
 80067cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067d0:	4615      	mov	r5, r2
 80067d2:	f012 0203 	ands.w	r2, r2, #3
 80067d6:	4607      	mov	r7, r0
 80067d8:	460e      	mov	r6, r1
 80067da:	d007      	beq.n	80067ec <__pow5mult+0x20>
 80067dc:	4c25      	ldr	r4, [pc, #148]	@ (8006874 <__pow5mult+0xa8>)
 80067de:	3a01      	subs	r2, #1
 80067e0:	2300      	movs	r3, #0
 80067e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067e6:	f7ff fe9f 	bl	8006528 <__multadd>
 80067ea:	4606      	mov	r6, r0
 80067ec:	10ad      	asrs	r5, r5, #2
 80067ee:	d03d      	beq.n	800686c <__pow5mult+0xa0>
 80067f0:	69fc      	ldr	r4, [r7, #28]
 80067f2:	b97c      	cbnz	r4, 8006814 <__pow5mult+0x48>
 80067f4:	2010      	movs	r0, #16
 80067f6:	f7ff fd7f 	bl	80062f8 <malloc>
 80067fa:	4602      	mov	r2, r0
 80067fc:	61f8      	str	r0, [r7, #28]
 80067fe:	b928      	cbnz	r0, 800680c <__pow5mult+0x40>
 8006800:	4b1d      	ldr	r3, [pc, #116]	@ (8006878 <__pow5mult+0xac>)
 8006802:	481e      	ldr	r0, [pc, #120]	@ (800687c <__pow5mult+0xb0>)
 8006804:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006808:	f000 fc3e 	bl	8007088 <__assert_func>
 800680c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006810:	6004      	str	r4, [r0, #0]
 8006812:	60c4      	str	r4, [r0, #12]
 8006814:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006818:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800681c:	b94c      	cbnz	r4, 8006832 <__pow5mult+0x66>
 800681e:	f240 2171 	movw	r1, #625	@ 0x271
 8006822:	4638      	mov	r0, r7
 8006824:	f7ff ff12 	bl	800664c <__i2b>
 8006828:	2300      	movs	r3, #0
 800682a:	f8c8 0008 	str.w	r0, [r8, #8]
 800682e:	4604      	mov	r4, r0
 8006830:	6003      	str	r3, [r0, #0]
 8006832:	f04f 0900 	mov.w	r9, #0
 8006836:	07eb      	lsls	r3, r5, #31
 8006838:	d50a      	bpl.n	8006850 <__pow5mult+0x84>
 800683a:	4631      	mov	r1, r6
 800683c:	4622      	mov	r2, r4
 800683e:	4638      	mov	r0, r7
 8006840:	f7ff ff1a 	bl	8006678 <__multiply>
 8006844:	4631      	mov	r1, r6
 8006846:	4680      	mov	r8, r0
 8006848:	4638      	mov	r0, r7
 800684a:	f7ff fe4b 	bl	80064e4 <_Bfree>
 800684e:	4646      	mov	r6, r8
 8006850:	106d      	asrs	r5, r5, #1
 8006852:	d00b      	beq.n	800686c <__pow5mult+0xa0>
 8006854:	6820      	ldr	r0, [r4, #0]
 8006856:	b938      	cbnz	r0, 8006868 <__pow5mult+0x9c>
 8006858:	4622      	mov	r2, r4
 800685a:	4621      	mov	r1, r4
 800685c:	4638      	mov	r0, r7
 800685e:	f7ff ff0b 	bl	8006678 <__multiply>
 8006862:	6020      	str	r0, [r4, #0]
 8006864:	f8c0 9000 	str.w	r9, [r0]
 8006868:	4604      	mov	r4, r0
 800686a:	e7e4      	b.n	8006836 <__pow5mult+0x6a>
 800686c:	4630      	mov	r0, r6
 800686e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006872:	bf00      	nop
 8006874:	080073fc 	.word	0x080073fc
 8006878:	08007321 	.word	0x08007321
 800687c:	080073a1 	.word	0x080073a1

08006880 <__lshift>:
 8006880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006884:	460c      	mov	r4, r1
 8006886:	6849      	ldr	r1, [r1, #4]
 8006888:	6923      	ldr	r3, [r4, #16]
 800688a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800688e:	68a3      	ldr	r3, [r4, #8]
 8006890:	4607      	mov	r7, r0
 8006892:	4691      	mov	r9, r2
 8006894:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006898:	f108 0601 	add.w	r6, r8, #1
 800689c:	42b3      	cmp	r3, r6
 800689e:	db0b      	blt.n	80068b8 <__lshift+0x38>
 80068a0:	4638      	mov	r0, r7
 80068a2:	f7ff fddf 	bl	8006464 <_Balloc>
 80068a6:	4605      	mov	r5, r0
 80068a8:	b948      	cbnz	r0, 80068be <__lshift+0x3e>
 80068aa:	4602      	mov	r2, r0
 80068ac:	4b28      	ldr	r3, [pc, #160]	@ (8006950 <__lshift+0xd0>)
 80068ae:	4829      	ldr	r0, [pc, #164]	@ (8006954 <__lshift+0xd4>)
 80068b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80068b4:	f000 fbe8 	bl	8007088 <__assert_func>
 80068b8:	3101      	adds	r1, #1
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	e7ee      	b.n	800689c <__lshift+0x1c>
 80068be:	2300      	movs	r3, #0
 80068c0:	f100 0114 	add.w	r1, r0, #20
 80068c4:	f100 0210 	add.w	r2, r0, #16
 80068c8:	4618      	mov	r0, r3
 80068ca:	4553      	cmp	r3, sl
 80068cc:	db33      	blt.n	8006936 <__lshift+0xb6>
 80068ce:	6920      	ldr	r0, [r4, #16]
 80068d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068d4:	f104 0314 	add.w	r3, r4, #20
 80068d8:	f019 091f 	ands.w	r9, r9, #31
 80068dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068e4:	d02b      	beq.n	800693e <__lshift+0xbe>
 80068e6:	f1c9 0e20 	rsb	lr, r9, #32
 80068ea:	468a      	mov	sl, r1
 80068ec:	2200      	movs	r2, #0
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	fa00 f009 	lsl.w	r0, r0, r9
 80068f4:	4310      	orrs	r0, r2
 80068f6:	f84a 0b04 	str.w	r0, [sl], #4
 80068fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80068fe:	459c      	cmp	ip, r3
 8006900:	fa22 f20e 	lsr.w	r2, r2, lr
 8006904:	d8f3      	bhi.n	80068ee <__lshift+0x6e>
 8006906:	ebac 0304 	sub.w	r3, ip, r4
 800690a:	3b15      	subs	r3, #21
 800690c:	f023 0303 	bic.w	r3, r3, #3
 8006910:	3304      	adds	r3, #4
 8006912:	f104 0015 	add.w	r0, r4, #21
 8006916:	4584      	cmp	ip, r0
 8006918:	bf38      	it	cc
 800691a:	2304      	movcc	r3, #4
 800691c:	50ca      	str	r2, [r1, r3]
 800691e:	b10a      	cbz	r2, 8006924 <__lshift+0xa4>
 8006920:	f108 0602 	add.w	r6, r8, #2
 8006924:	3e01      	subs	r6, #1
 8006926:	4638      	mov	r0, r7
 8006928:	612e      	str	r6, [r5, #16]
 800692a:	4621      	mov	r1, r4
 800692c:	f7ff fdda 	bl	80064e4 <_Bfree>
 8006930:	4628      	mov	r0, r5
 8006932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006936:	f842 0f04 	str.w	r0, [r2, #4]!
 800693a:	3301      	adds	r3, #1
 800693c:	e7c5      	b.n	80068ca <__lshift+0x4a>
 800693e:	3904      	subs	r1, #4
 8006940:	f853 2b04 	ldr.w	r2, [r3], #4
 8006944:	f841 2f04 	str.w	r2, [r1, #4]!
 8006948:	459c      	cmp	ip, r3
 800694a:	d8f9      	bhi.n	8006940 <__lshift+0xc0>
 800694c:	e7ea      	b.n	8006924 <__lshift+0xa4>
 800694e:	bf00      	nop
 8006950:	08007390 	.word	0x08007390
 8006954:	080073a1 	.word	0x080073a1

08006958 <__mcmp>:
 8006958:	690a      	ldr	r2, [r1, #16]
 800695a:	4603      	mov	r3, r0
 800695c:	6900      	ldr	r0, [r0, #16]
 800695e:	1a80      	subs	r0, r0, r2
 8006960:	b530      	push	{r4, r5, lr}
 8006962:	d10e      	bne.n	8006982 <__mcmp+0x2a>
 8006964:	3314      	adds	r3, #20
 8006966:	3114      	adds	r1, #20
 8006968:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800696c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006970:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006974:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006978:	4295      	cmp	r5, r2
 800697a:	d003      	beq.n	8006984 <__mcmp+0x2c>
 800697c:	d205      	bcs.n	800698a <__mcmp+0x32>
 800697e:	f04f 30ff 	mov.w	r0, #4294967295
 8006982:	bd30      	pop	{r4, r5, pc}
 8006984:	42a3      	cmp	r3, r4
 8006986:	d3f3      	bcc.n	8006970 <__mcmp+0x18>
 8006988:	e7fb      	b.n	8006982 <__mcmp+0x2a>
 800698a:	2001      	movs	r0, #1
 800698c:	e7f9      	b.n	8006982 <__mcmp+0x2a>
	...

08006990 <__mdiff>:
 8006990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006994:	4689      	mov	r9, r1
 8006996:	4606      	mov	r6, r0
 8006998:	4611      	mov	r1, r2
 800699a:	4648      	mov	r0, r9
 800699c:	4614      	mov	r4, r2
 800699e:	f7ff ffdb 	bl	8006958 <__mcmp>
 80069a2:	1e05      	subs	r5, r0, #0
 80069a4:	d112      	bne.n	80069cc <__mdiff+0x3c>
 80069a6:	4629      	mov	r1, r5
 80069a8:	4630      	mov	r0, r6
 80069aa:	f7ff fd5b 	bl	8006464 <_Balloc>
 80069ae:	4602      	mov	r2, r0
 80069b0:	b928      	cbnz	r0, 80069be <__mdiff+0x2e>
 80069b2:	4b3f      	ldr	r3, [pc, #252]	@ (8006ab0 <__mdiff+0x120>)
 80069b4:	f240 2137 	movw	r1, #567	@ 0x237
 80069b8:	483e      	ldr	r0, [pc, #248]	@ (8006ab4 <__mdiff+0x124>)
 80069ba:	f000 fb65 	bl	8007088 <__assert_func>
 80069be:	2301      	movs	r3, #1
 80069c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069c4:	4610      	mov	r0, r2
 80069c6:	b003      	add	sp, #12
 80069c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069cc:	bfbc      	itt	lt
 80069ce:	464b      	movlt	r3, r9
 80069d0:	46a1      	movlt	r9, r4
 80069d2:	4630      	mov	r0, r6
 80069d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80069d8:	bfba      	itte	lt
 80069da:	461c      	movlt	r4, r3
 80069dc:	2501      	movlt	r5, #1
 80069de:	2500      	movge	r5, #0
 80069e0:	f7ff fd40 	bl	8006464 <_Balloc>
 80069e4:	4602      	mov	r2, r0
 80069e6:	b918      	cbnz	r0, 80069f0 <__mdiff+0x60>
 80069e8:	4b31      	ldr	r3, [pc, #196]	@ (8006ab0 <__mdiff+0x120>)
 80069ea:	f240 2145 	movw	r1, #581	@ 0x245
 80069ee:	e7e3      	b.n	80069b8 <__mdiff+0x28>
 80069f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80069f4:	6926      	ldr	r6, [r4, #16]
 80069f6:	60c5      	str	r5, [r0, #12]
 80069f8:	f109 0310 	add.w	r3, r9, #16
 80069fc:	f109 0514 	add.w	r5, r9, #20
 8006a00:	f104 0e14 	add.w	lr, r4, #20
 8006a04:	f100 0b14 	add.w	fp, r0, #20
 8006a08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a10:	9301      	str	r3, [sp, #4]
 8006a12:	46d9      	mov	r9, fp
 8006a14:	f04f 0c00 	mov.w	ip, #0
 8006a18:	9b01      	ldr	r3, [sp, #4]
 8006a1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a22:	9301      	str	r3, [sp, #4]
 8006a24:	fa1f f38a 	uxth.w	r3, sl
 8006a28:	4619      	mov	r1, r3
 8006a2a:	b283      	uxth	r3, r0
 8006a2c:	1acb      	subs	r3, r1, r3
 8006a2e:	0c00      	lsrs	r0, r0, #16
 8006a30:	4463      	add	r3, ip
 8006a32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a40:	4576      	cmp	r6, lr
 8006a42:	f849 3b04 	str.w	r3, [r9], #4
 8006a46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a4a:	d8e5      	bhi.n	8006a18 <__mdiff+0x88>
 8006a4c:	1b33      	subs	r3, r6, r4
 8006a4e:	3b15      	subs	r3, #21
 8006a50:	f023 0303 	bic.w	r3, r3, #3
 8006a54:	3415      	adds	r4, #21
 8006a56:	3304      	adds	r3, #4
 8006a58:	42a6      	cmp	r6, r4
 8006a5a:	bf38      	it	cc
 8006a5c:	2304      	movcc	r3, #4
 8006a5e:	441d      	add	r5, r3
 8006a60:	445b      	add	r3, fp
 8006a62:	461e      	mov	r6, r3
 8006a64:	462c      	mov	r4, r5
 8006a66:	4544      	cmp	r4, r8
 8006a68:	d30e      	bcc.n	8006a88 <__mdiff+0xf8>
 8006a6a:	f108 0103 	add.w	r1, r8, #3
 8006a6e:	1b49      	subs	r1, r1, r5
 8006a70:	f021 0103 	bic.w	r1, r1, #3
 8006a74:	3d03      	subs	r5, #3
 8006a76:	45a8      	cmp	r8, r5
 8006a78:	bf38      	it	cc
 8006a7a:	2100      	movcc	r1, #0
 8006a7c:	440b      	add	r3, r1
 8006a7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a82:	b191      	cbz	r1, 8006aaa <__mdiff+0x11a>
 8006a84:	6117      	str	r7, [r2, #16]
 8006a86:	e79d      	b.n	80069c4 <__mdiff+0x34>
 8006a88:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a8c:	46e6      	mov	lr, ip
 8006a8e:	0c08      	lsrs	r0, r1, #16
 8006a90:	fa1c fc81 	uxtah	ip, ip, r1
 8006a94:	4471      	add	r1, lr
 8006a96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a9a:	b289      	uxth	r1, r1
 8006a9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006aa0:	f846 1b04 	str.w	r1, [r6], #4
 8006aa4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006aa8:	e7dd      	b.n	8006a66 <__mdiff+0xd6>
 8006aaa:	3f01      	subs	r7, #1
 8006aac:	e7e7      	b.n	8006a7e <__mdiff+0xee>
 8006aae:	bf00      	nop
 8006ab0:	08007390 	.word	0x08007390
 8006ab4:	080073a1 	.word	0x080073a1

08006ab8 <__d2b>:
 8006ab8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006abc:	460f      	mov	r7, r1
 8006abe:	2101      	movs	r1, #1
 8006ac0:	ec59 8b10 	vmov	r8, r9, d0
 8006ac4:	4616      	mov	r6, r2
 8006ac6:	f7ff fccd 	bl	8006464 <_Balloc>
 8006aca:	4604      	mov	r4, r0
 8006acc:	b930      	cbnz	r0, 8006adc <__d2b+0x24>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	4b23      	ldr	r3, [pc, #140]	@ (8006b60 <__d2b+0xa8>)
 8006ad2:	4824      	ldr	r0, [pc, #144]	@ (8006b64 <__d2b+0xac>)
 8006ad4:	f240 310f 	movw	r1, #783	@ 0x30f
 8006ad8:	f000 fad6 	bl	8007088 <__assert_func>
 8006adc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ae0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ae4:	b10d      	cbz	r5, 8006aea <__d2b+0x32>
 8006ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	f1b8 0300 	subs.w	r3, r8, #0
 8006af0:	d023      	beq.n	8006b3a <__d2b+0x82>
 8006af2:	4668      	mov	r0, sp
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	f7ff fd7c 	bl	80065f2 <__lo0bits>
 8006afa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006afe:	b1d0      	cbz	r0, 8006b36 <__d2b+0x7e>
 8006b00:	f1c0 0320 	rsb	r3, r0, #32
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	40c2      	lsrs	r2, r0
 8006b0c:	6163      	str	r3, [r4, #20]
 8006b0e:	9201      	str	r2, [sp, #4]
 8006b10:	9b01      	ldr	r3, [sp, #4]
 8006b12:	61a3      	str	r3, [r4, #24]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	bf0c      	ite	eq
 8006b18:	2201      	moveq	r2, #1
 8006b1a:	2202      	movne	r2, #2
 8006b1c:	6122      	str	r2, [r4, #16]
 8006b1e:	b1a5      	cbz	r5, 8006b4a <__d2b+0x92>
 8006b20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006b24:	4405      	add	r5, r0
 8006b26:	603d      	str	r5, [r7, #0]
 8006b28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006b2c:	6030      	str	r0, [r6, #0]
 8006b2e:	4620      	mov	r0, r4
 8006b30:	b003      	add	sp, #12
 8006b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b36:	6161      	str	r1, [r4, #20]
 8006b38:	e7ea      	b.n	8006b10 <__d2b+0x58>
 8006b3a:	a801      	add	r0, sp, #4
 8006b3c:	f7ff fd59 	bl	80065f2 <__lo0bits>
 8006b40:	9b01      	ldr	r3, [sp, #4]
 8006b42:	6163      	str	r3, [r4, #20]
 8006b44:	3020      	adds	r0, #32
 8006b46:	2201      	movs	r2, #1
 8006b48:	e7e8      	b.n	8006b1c <__d2b+0x64>
 8006b4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b52:	6038      	str	r0, [r7, #0]
 8006b54:	6918      	ldr	r0, [r3, #16]
 8006b56:	f7ff fd2d 	bl	80065b4 <__hi0bits>
 8006b5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b5e:	e7e5      	b.n	8006b2c <__d2b+0x74>
 8006b60:	08007390 	.word	0x08007390
 8006b64:	080073a1 	.word	0x080073a1

08006b68 <__sfputc_r>:
 8006b68:	6893      	ldr	r3, [r2, #8]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	b410      	push	{r4}
 8006b70:	6093      	str	r3, [r2, #8]
 8006b72:	da08      	bge.n	8006b86 <__sfputc_r+0x1e>
 8006b74:	6994      	ldr	r4, [r2, #24]
 8006b76:	42a3      	cmp	r3, r4
 8006b78:	db01      	blt.n	8006b7e <__sfputc_r+0x16>
 8006b7a:	290a      	cmp	r1, #10
 8006b7c:	d103      	bne.n	8006b86 <__sfputc_r+0x1e>
 8006b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b82:	f7fe bc7a 	b.w	800547a <__swbuf_r>
 8006b86:	6813      	ldr	r3, [r2, #0]
 8006b88:	1c58      	adds	r0, r3, #1
 8006b8a:	6010      	str	r0, [r2, #0]
 8006b8c:	7019      	strb	r1, [r3, #0]
 8006b8e:	4608      	mov	r0, r1
 8006b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <__sfputs_r>:
 8006b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b98:	4606      	mov	r6, r0
 8006b9a:	460f      	mov	r7, r1
 8006b9c:	4614      	mov	r4, r2
 8006b9e:	18d5      	adds	r5, r2, r3
 8006ba0:	42ac      	cmp	r4, r5
 8006ba2:	d101      	bne.n	8006ba8 <__sfputs_r+0x12>
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	e007      	b.n	8006bb8 <__sfputs_r+0x22>
 8006ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bac:	463a      	mov	r2, r7
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f7ff ffda 	bl	8006b68 <__sfputc_r>
 8006bb4:	1c43      	adds	r3, r0, #1
 8006bb6:	d1f3      	bne.n	8006ba0 <__sfputs_r+0xa>
 8006bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bbc <_vfiprintf_r>:
 8006bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc0:	460d      	mov	r5, r1
 8006bc2:	b09d      	sub	sp, #116	@ 0x74
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	4698      	mov	r8, r3
 8006bc8:	4606      	mov	r6, r0
 8006bca:	b118      	cbz	r0, 8006bd4 <_vfiprintf_r+0x18>
 8006bcc:	6a03      	ldr	r3, [r0, #32]
 8006bce:	b90b      	cbnz	r3, 8006bd4 <_vfiprintf_r+0x18>
 8006bd0:	f7fe fb6a 	bl	80052a8 <__sinit>
 8006bd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bd6:	07d9      	lsls	r1, r3, #31
 8006bd8:	d405      	bmi.n	8006be6 <_vfiprintf_r+0x2a>
 8006bda:	89ab      	ldrh	r3, [r5, #12]
 8006bdc:	059a      	lsls	r2, r3, #22
 8006bde:	d402      	bmi.n	8006be6 <_vfiprintf_r+0x2a>
 8006be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006be2:	f7fe fd5c 	bl	800569e <__retarget_lock_acquire_recursive>
 8006be6:	89ab      	ldrh	r3, [r5, #12]
 8006be8:	071b      	lsls	r3, r3, #28
 8006bea:	d501      	bpl.n	8006bf0 <_vfiprintf_r+0x34>
 8006bec:	692b      	ldr	r3, [r5, #16]
 8006bee:	b99b      	cbnz	r3, 8006c18 <_vfiprintf_r+0x5c>
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f7fe fc80 	bl	80054f8 <__swsetup_r>
 8006bf8:	b170      	cbz	r0, 8006c18 <_vfiprintf_r+0x5c>
 8006bfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bfc:	07dc      	lsls	r4, r3, #31
 8006bfe:	d504      	bpl.n	8006c0a <_vfiprintf_r+0x4e>
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295
 8006c04:	b01d      	add	sp, #116	@ 0x74
 8006c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c0a:	89ab      	ldrh	r3, [r5, #12]
 8006c0c:	0598      	lsls	r0, r3, #22
 8006c0e:	d4f7      	bmi.n	8006c00 <_vfiprintf_r+0x44>
 8006c10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c12:	f7fe fd45 	bl	80056a0 <__retarget_lock_release_recursive>
 8006c16:	e7f3      	b.n	8006c00 <_vfiprintf_r+0x44>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c1c:	2320      	movs	r3, #32
 8006c1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c26:	2330      	movs	r3, #48	@ 0x30
 8006c28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006dd8 <_vfiprintf_r+0x21c>
 8006c2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c30:	f04f 0901 	mov.w	r9, #1
 8006c34:	4623      	mov	r3, r4
 8006c36:	469a      	mov	sl, r3
 8006c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c3c:	b10a      	cbz	r2, 8006c42 <_vfiprintf_r+0x86>
 8006c3e:	2a25      	cmp	r2, #37	@ 0x25
 8006c40:	d1f9      	bne.n	8006c36 <_vfiprintf_r+0x7a>
 8006c42:	ebba 0b04 	subs.w	fp, sl, r4
 8006c46:	d00b      	beq.n	8006c60 <_vfiprintf_r+0xa4>
 8006c48:	465b      	mov	r3, fp
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	4630      	mov	r0, r6
 8006c50:	f7ff ffa1 	bl	8006b96 <__sfputs_r>
 8006c54:	3001      	adds	r0, #1
 8006c56:	f000 80a7 	beq.w	8006da8 <_vfiprintf_r+0x1ec>
 8006c5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c5c:	445a      	add	r2, fp
 8006c5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c60:	f89a 3000 	ldrb.w	r3, [sl]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 809f 	beq.w	8006da8 <_vfiprintf_r+0x1ec>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c74:	f10a 0a01 	add.w	sl, sl, #1
 8006c78:	9304      	str	r3, [sp, #16]
 8006c7a:	9307      	str	r3, [sp, #28]
 8006c7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c80:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c82:	4654      	mov	r4, sl
 8006c84:	2205      	movs	r2, #5
 8006c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c8a:	4853      	ldr	r0, [pc, #332]	@ (8006dd8 <_vfiprintf_r+0x21c>)
 8006c8c:	f7f9 fb28 	bl	80002e0 <memchr>
 8006c90:	9a04      	ldr	r2, [sp, #16]
 8006c92:	b9d8      	cbnz	r0, 8006ccc <_vfiprintf_r+0x110>
 8006c94:	06d1      	lsls	r1, r2, #27
 8006c96:	bf44      	itt	mi
 8006c98:	2320      	movmi	r3, #32
 8006c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c9e:	0713      	lsls	r3, r2, #28
 8006ca0:	bf44      	itt	mi
 8006ca2:	232b      	movmi	r3, #43	@ 0x2b
 8006ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cac:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cae:	d015      	beq.n	8006cdc <_vfiprintf_r+0x120>
 8006cb0:	9a07      	ldr	r2, [sp, #28]
 8006cb2:	4654      	mov	r4, sl
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	f04f 0c0a 	mov.w	ip, #10
 8006cba:	4621      	mov	r1, r4
 8006cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cc0:	3b30      	subs	r3, #48	@ 0x30
 8006cc2:	2b09      	cmp	r3, #9
 8006cc4:	d94b      	bls.n	8006d5e <_vfiprintf_r+0x1a2>
 8006cc6:	b1b0      	cbz	r0, 8006cf6 <_vfiprintf_r+0x13a>
 8006cc8:	9207      	str	r2, [sp, #28]
 8006cca:	e014      	b.n	8006cf6 <_vfiprintf_r+0x13a>
 8006ccc:	eba0 0308 	sub.w	r3, r0, r8
 8006cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	9304      	str	r3, [sp, #16]
 8006cd8:	46a2      	mov	sl, r4
 8006cda:	e7d2      	b.n	8006c82 <_vfiprintf_r+0xc6>
 8006cdc:	9b03      	ldr	r3, [sp, #12]
 8006cde:	1d19      	adds	r1, r3, #4
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	9103      	str	r1, [sp, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	bfbb      	ittet	lt
 8006ce8:	425b      	neglt	r3, r3
 8006cea:	f042 0202 	orrlt.w	r2, r2, #2
 8006cee:	9307      	strge	r3, [sp, #28]
 8006cf0:	9307      	strlt	r3, [sp, #28]
 8006cf2:	bfb8      	it	lt
 8006cf4:	9204      	strlt	r2, [sp, #16]
 8006cf6:	7823      	ldrb	r3, [r4, #0]
 8006cf8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cfa:	d10a      	bne.n	8006d12 <_vfiprintf_r+0x156>
 8006cfc:	7863      	ldrb	r3, [r4, #1]
 8006cfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d00:	d132      	bne.n	8006d68 <_vfiprintf_r+0x1ac>
 8006d02:	9b03      	ldr	r3, [sp, #12]
 8006d04:	1d1a      	adds	r2, r3, #4
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	9203      	str	r2, [sp, #12]
 8006d0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d0e:	3402      	adds	r4, #2
 8006d10:	9305      	str	r3, [sp, #20]
 8006d12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006de8 <_vfiprintf_r+0x22c>
 8006d16:	7821      	ldrb	r1, [r4, #0]
 8006d18:	2203      	movs	r2, #3
 8006d1a:	4650      	mov	r0, sl
 8006d1c:	f7f9 fae0 	bl	80002e0 <memchr>
 8006d20:	b138      	cbz	r0, 8006d32 <_vfiprintf_r+0x176>
 8006d22:	9b04      	ldr	r3, [sp, #16]
 8006d24:	eba0 000a 	sub.w	r0, r0, sl
 8006d28:	2240      	movs	r2, #64	@ 0x40
 8006d2a:	4082      	lsls	r2, r0
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	3401      	adds	r4, #1
 8006d30:	9304      	str	r3, [sp, #16]
 8006d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d36:	4829      	ldr	r0, [pc, #164]	@ (8006ddc <_vfiprintf_r+0x220>)
 8006d38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d3c:	2206      	movs	r2, #6
 8006d3e:	f7f9 facf 	bl	80002e0 <memchr>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d03f      	beq.n	8006dc6 <_vfiprintf_r+0x20a>
 8006d46:	4b26      	ldr	r3, [pc, #152]	@ (8006de0 <_vfiprintf_r+0x224>)
 8006d48:	bb1b      	cbnz	r3, 8006d92 <_vfiprintf_r+0x1d6>
 8006d4a:	9b03      	ldr	r3, [sp, #12]
 8006d4c:	3307      	adds	r3, #7
 8006d4e:	f023 0307 	bic.w	r3, r3, #7
 8006d52:	3308      	adds	r3, #8
 8006d54:	9303      	str	r3, [sp, #12]
 8006d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d58:	443b      	add	r3, r7
 8006d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d5c:	e76a      	b.n	8006c34 <_vfiprintf_r+0x78>
 8006d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d62:	460c      	mov	r4, r1
 8006d64:	2001      	movs	r0, #1
 8006d66:	e7a8      	b.n	8006cba <_vfiprintf_r+0xfe>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	3401      	adds	r4, #1
 8006d6c:	9305      	str	r3, [sp, #20]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	f04f 0c0a 	mov.w	ip, #10
 8006d74:	4620      	mov	r0, r4
 8006d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d7a:	3a30      	subs	r2, #48	@ 0x30
 8006d7c:	2a09      	cmp	r2, #9
 8006d7e:	d903      	bls.n	8006d88 <_vfiprintf_r+0x1cc>
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0c6      	beq.n	8006d12 <_vfiprintf_r+0x156>
 8006d84:	9105      	str	r1, [sp, #20]
 8006d86:	e7c4      	b.n	8006d12 <_vfiprintf_r+0x156>
 8006d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d8c:	4604      	mov	r4, r0
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e7f0      	b.n	8006d74 <_vfiprintf_r+0x1b8>
 8006d92:	ab03      	add	r3, sp, #12
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	462a      	mov	r2, r5
 8006d98:	4b12      	ldr	r3, [pc, #72]	@ (8006de4 <_vfiprintf_r+0x228>)
 8006d9a:	a904      	add	r1, sp, #16
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f7fd fe4f 	bl	8004a40 <_printf_float>
 8006da2:	4607      	mov	r7, r0
 8006da4:	1c78      	adds	r0, r7, #1
 8006da6:	d1d6      	bne.n	8006d56 <_vfiprintf_r+0x19a>
 8006da8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006daa:	07d9      	lsls	r1, r3, #31
 8006dac:	d405      	bmi.n	8006dba <_vfiprintf_r+0x1fe>
 8006dae:	89ab      	ldrh	r3, [r5, #12]
 8006db0:	059a      	lsls	r2, r3, #22
 8006db2:	d402      	bmi.n	8006dba <_vfiprintf_r+0x1fe>
 8006db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006db6:	f7fe fc73 	bl	80056a0 <__retarget_lock_release_recursive>
 8006dba:	89ab      	ldrh	r3, [r5, #12]
 8006dbc:	065b      	lsls	r3, r3, #25
 8006dbe:	f53f af1f 	bmi.w	8006c00 <_vfiprintf_r+0x44>
 8006dc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006dc4:	e71e      	b.n	8006c04 <_vfiprintf_r+0x48>
 8006dc6:	ab03      	add	r3, sp, #12
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	462a      	mov	r2, r5
 8006dcc:	4b05      	ldr	r3, [pc, #20]	@ (8006de4 <_vfiprintf_r+0x228>)
 8006dce:	a904      	add	r1, sp, #16
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	f7fe f8bd 	bl	8004f50 <_printf_i>
 8006dd6:	e7e4      	b.n	8006da2 <_vfiprintf_r+0x1e6>
 8006dd8:	080074f8 	.word	0x080074f8
 8006ddc:	08007502 	.word	0x08007502
 8006de0:	08004a41 	.word	0x08004a41
 8006de4:	08006b97 	.word	0x08006b97
 8006de8:	080074fe 	.word	0x080074fe

08006dec <__sflush_r>:
 8006dec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df4:	0716      	lsls	r6, r2, #28
 8006df6:	4605      	mov	r5, r0
 8006df8:	460c      	mov	r4, r1
 8006dfa:	d454      	bmi.n	8006ea6 <__sflush_r+0xba>
 8006dfc:	684b      	ldr	r3, [r1, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	dc02      	bgt.n	8006e08 <__sflush_r+0x1c>
 8006e02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	dd48      	ble.n	8006e9a <__sflush_r+0xae>
 8006e08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e0a:	2e00      	cmp	r6, #0
 8006e0c:	d045      	beq.n	8006e9a <__sflush_r+0xae>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e14:	682f      	ldr	r7, [r5, #0]
 8006e16:	6a21      	ldr	r1, [r4, #32]
 8006e18:	602b      	str	r3, [r5, #0]
 8006e1a:	d030      	beq.n	8006e7e <__sflush_r+0x92>
 8006e1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e1e:	89a3      	ldrh	r3, [r4, #12]
 8006e20:	0759      	lsls	r1, r3, #29
 8006e22:	d505      	bpl.n	8006e30 <__sflush_r+0x44>
 8006e24:	6863      	ldr	r3, [r4, #4]
 8006e26:	1ad2      	subs	r2, r2, r3
 8006e28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e2a:	b10b      	cbz	r3, 8006e30 <__sflush_r+0x44>
 8006e2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e2e:	1ad2      	subs	r2, r2, r3
 8006e30:	2300      	movs	r3, #0
 8006e32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e34:	6a21      	ldr	r1, [r4, #32]
 8006e36:	4628      	mov	r0, r5
 8006e38:	47b0      	blx	r6
 8006e3a:	1c43      	adds	r3, r0, #1
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	d106      	bne.n	8006e4e <__sflush_r+0x62>
 8006e40:	6829      	ldr	r1, [r5, #0]
 8006e42:	291d      	cmp	r1, #29
 8006e44:	d82b      	bhi.n	8006e9e <__sflush_r+0xb2>
 8006e46:	4a2a      	ldr	r2, [pc, #168]	@ (8006ef0 <__sflush_r+0x104>)
 8006e48:	410a      	asrs	r2, r1
 8006e4a:	07d6      	lsls	r6, r2, #31
 8006e4c:	d427      	bmi.n	8006e9e <__sflush_r+0xb2>
 8006e4e:	2200      	movs	r2, #0
 8006e50:	6062      	str	r2, [r4, #4]
 8006e52:	04d9      	lsls	r1, r3, #19
 8006e54:	6922      	ldr	r2, [r4, #16]
 8006e56:	6022      	str	r2, [r4, #0]
 8006e58:	d504      	bpl.n	8006e64 <__sflush_r+0x78>
 8006e5a:	1c42      	adds	r2, r0, #1
 8006e5c:	d101      	bne.n	8006e62 <__sflush_r+0x76>
 8006e5e:	682b      	ldr	r3, [r5, #0]
 8006e60:	b903      	cbnz	r3, 8006e64 <__sflush_r+0x78>
 8006e62:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e66:	602f      	str	r7, [r5, #0]
 8006e68:	b1b9      	cbz	r1, 8006e9a <__sflush_r+0xae>
 8006e6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e6e:	4299      	cmp	r1, r3
 8006e70:	d002      	beq.n	8006e78 <__sflush_r+0x8c>
 8006e72:	4628      	mov	r0, r5
 8006e74:	f7ff f9f6 	bl	8006264 <_free_r>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e7c:	e00d      	b.n	8006e9a <__sflush_r+0xae>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	4628      	mov	r0, r5
 8006e82:	47b0      	blx	r6
 8006e84:	4602      	mov	r2, r0
 8006e86:	1c50      	adds	r0, r2, #1
 8006e88:	d1c9      	bne.n	8006e1e <__sflush_r+0x32>
 8006e8a:	682b      	ldr	r3, [r5, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d0c6      	beq.n	8006e1e <__sflush_r+0x32>
 8006e90:	2b1d      	cmp	r3, #29
 8006e92:	d001      	beq.n	8006e98 <__sflush_r+0xac>
 8006e94:	2b16      	cmp	r3, #22
 8006e96:	d11e      	bne.n	8006ed6 <__sflush_r+0xea>
 8006e98:	602f      	str	r7, [r5, #0]
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	e022      	b.n	8006ee4 <__sflush_r+0xf8>
 8006e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ea2:	b21b      	sxth	r3, r3
 8006ea4:	e01b      	b.n	8006ede <__sflush_r+0xf2>
 8006ea6:	690f      	ldr	r7, [r1, #16]
 8006ea8:	2f00      	cmp	r7, #0
 8006eaa:	d0f6      	beq.n	8006e9a <__sflush_r+0xae>
 8006eac:	0793      	lsls	r3, r2, #30
 8006eae:	680e      	ldr	r6, [r1, #0]
 8006eb0:	bf08      	it	eq
 8006eb2:	694b      	ldreq	r3, [r1, #20]
 8006eb4:	600f      	str	r7, [r1, #0]
 8006eb6:	bf18      	it	ne
 8006eb8:	2300      	movne	r3, #0
 8006eba:	eba6 0807 	sub.w	r8, r6, r7
 8006ebe:	608b      	str	r3, [r1, #8]
 8006ec0:	f1b8 0f00 	cmp.w	r8, #0
 8006ec4:	dde9      	ble.n	8006e9a <__sflush_r+0xae>
 8006ec6:	6a21      	ldr	r1, [r4, #32]
 8006ec8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006eca:	4643      	mov	r3, r8
 8006ecc:	463a      	mov	r2, r7
 8006ece:	4628      	mov	r0, r5
 8006ed0:	47b0      	blx	r6
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	dc08      	bgt.n	8006ee8 <__sflush_r+0xfc>
 8006ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ede:	81a3      	strh	r3, [r4, #12]
 8006ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ee8:	4407      	add	r7, r0
 8006eea:	eba8 0800 	sub.w	r8, r8, r0
 8006eee:	e7e7      	b.n	8006ec0 <__sflush_r+0xd4>
 8006ef0:	dfbffffe 	.word	0xdfbffffe

08006ef4 <_fflush_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	690b      	ldr	r3, [r1, #16]
 8006ef8:	4605      	mov	r5, r0
 8006efa:	460c      	mov	r4, r1
 8006efc:	b913      	cbnz	r3, 8006f04 <_fflush_r+0x10>
 8006efe:	2500      	movs	r5, #0
 8006f00:	4628      	mov	r0, r5
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	b118      	cbz	r0, 8006f0e <_fflush_r+0x1a>
 8006f06:	6a03      	ldr	r3, [r0, #32]
 8006f08:	b90b      	cbnz	r3, 8006f0e <_fflush_r+0x1a>
 8006f0a:	f7fe f9cd 	bl	80052a8 <__sinit>
 8006f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0f3      	beq.n	8006efe <_fflush_r+0xa>
 8006f16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f18:	07d0      	lsls	r0, r2, #31
 8006f1a:	d404      	bmi.n	8006f26 <_fflush_r+0x32>
 8006f1c:	0599      	lsls	r1, r3, #22
 8006f1e:	d402      	bmi.n	8006f26 <_fflush_r+0x32>
 8006f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f22:	f7fe fbbc 	bl	800569e <__retarget_lock_acquire_recursive>
 8006f26:	4628      	mov	r0, r5
 8006f28:	4621      	mov	r1, r4
 8006f2a:	f7ff ff5f 	bl	8006dec <__sflush_r>
 8006f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f30:	07da      	lsls	r2, r3, #31
 8006f32:	4605      	mov	r5, r0
 8006f34:	d4e4      	bmi.n	8006f00 <_fflush_r+0xc>
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	059b      	lsls	r3, r3, #22
 8006f3a:	d4e1      	bmi.n	8006f00 <_fflush_r+0xc>
 8006f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f3e:	f7fe fbaf 	bl	80056a0 <__retarget_lock_release_recursive>
 8006f42:	e7dd      	b.n	8006f00 <_fflush_r+0xc>

08006f44 <__swhatbuf_r>:
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	460c      	mov	r4, r1
 8006f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f4c:	2900      	cmp	r1, #0
 8006f4e:	b096      	sub	sp, #88	@ 0x58
 8006f50:	4615      	mov	r5, r2
 8006f52:	461e      	mov	r6, r3
 8006f54:	da0d      	bge.n	8006f72 <__swhatbuf_r+0x2e>
 8006f56:	89a3      	ldrh	r3, [r4, #12]
 8006f58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f5c:	f04f 0100 	mov.w	r1, #0
 8006f60:	bf14      	ite	ne
 8006f62:	2340      	movne	r3, #64	@ 0x40
 8006f64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f68:	2000      	movs	r0, #0
 8006f6a:	6031      	str	r1, [r6, #0]
 8006f6c:	602b      	str	r3, [r5, #0]
 8006f6e:	b016      	add	sp, #88	@ 0x58
 8006f70:	bd70      	pop	{r4, r5, r6, pc}
 8006f72:	466a      	mov	r2, sp
 8006f74:	f000 f848 	bl	8007008 <_fstat_r>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	dbec      	blt.n	8006f56 <__swhatbuf_r+0x12>
 8006f7c:	9901      	ldr	r1, [sp, #4]
 8006f7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f86:	4259      	negs	r1, r3
 8006f88:	4159      	adcs	r1, r3
 8006f8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f8e:	e7eb      	b.n	8006f68 <__swhatbuf_r+0x24>

08006f90 <__smakebuf_r>:
 8006f90:	898b      	ldrh	r3, [r1, #12]
 8006f92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f94:	079d      	lsls	r5, r3, #30
 8006f96:	4606      	mov	r6, r0
 8006f98:	460c      	mov	r4, r1
 8006f9a:	d507      	bpl.n	8006fac <__smakebuf_r+0x1c>
 8006f9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	6123      	str	r3, [r4, #16]
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	6163      	str	r3, [r4, #20]
 8006fa8:	b003      	add	sp, #12
 8006faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fac:	ab01      	add	r3, sp, #4
 8006fae:	466a      	mov	r2, sp
 8006fb0:	f7ff ffc8 	bl	8006f44 <__swhatbuf_r>
 8006fb4:	9f00      	ldr	r7, [sp, #0]
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	4639      	mov	r1, r7
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f7ff f9c6 	bl	800634c <_malloc_r>
 8006fc0:	b948      	cbnz	r0, 8006fd6 <__smakebuf_r+0x46>
 8006fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fc6:	059a      	lsls	r2, r3, #22
 8006fc8:	d4ee      	bmi.n	8006fa8 <__smakebuf_r+0x18>
 8006fca:	f023 0303 	bic.w	r3, r3, #3
 8006fce:	f043 0302 	orr.w	r3, r3, #2
 8006fd2:	81a3      	strh	r3, [r4, #12]
 8006fd4:	e7e2      	b.n	8006f9c <__smakebuf_r+0xc>
 8006fd6:	89a3      	ldrh	r3, [r4, #12]
 8006fd8:	6020      	str	r0, [r4, #0]
 8006fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fde:	81a3      	strh	r3, [r4, #12]
 8006fe0:	9b01      	ldr	r3, [sp, #4]
 8006fe2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006fe6:	b15b      	cbz	r3, 8007000 <__smakebuf_r+0x70>
 8006fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fec:	4630      	mov	r0, r6
 8006fee:	f000 f81d 	bl	800702c <_isatty_r>
 8006ff2:	b128      	cbz	r0, 8007000 <__smakebuf_r+0x70>
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	f023 0303 	bic.w	r3, r3, #3
 8006ffa:	f043 0301 	orr.w	r3, r3, #1
 8006ffe:	81a3      	strh	r3, [r4, #12]
 8007000:	89a3      	ldrh	r3, [r4, #12]
 8007002:	431d      	orrs	r5, r3
 8007004:	81a5      	strh	r5, [r4, #12]
 8007006:	e7cf      	b.n	8006fa8 <__smakebuf_r+0x18>

08007008 <_fstat_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4d07      	ldr	r5, [pc, #28]	@ (8007028 <_fstat_r+0x20>)
 800700c:	2300      	movs	r3, #0
 800700e:	4604      	mov	r4, r0
 8007010:	4608      	mov	r0, r1
 8007012:	4611      	mov	r1, r2
 8007014:	602b      	str	r3, [r5, #0]
 8007016:	f7f9 fdfc 	bl	8000c12 <_fstat>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	d102      	bne.n	8007024 <_fstat_r+0x1c>
 800701e:	682b      	ldr	r3, [r5, #0]
 8007020:	b103      	cbz	r3, 8007024 <_fstat_r+0x1c>
 8007022:	6023      	str	r3, [r4, #0]
 8007024:	bd38      	pop	{r3, r4, r5, pc}
 8007026:	bf00      	nop
 8007028:	2400038c 	.word	0x2400038c

0800702c <_isatty_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4d06      	ldr	r5, [pc, #24]	@ (8007048 <_isatty_r+0x1c>)
 8007030:	2300      	movs	r3, #0
 8007032:	4604      	mov	r4, r0
 8007034:	4608      	mov	r0, r1
 8007036:	602b      	str	r3, [r5, #0]
 8007038:	f7f9 fdfb 	bl	8000c32 <_isatty>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d102      	bne.n	8007046 <_isatty_r+0x1a>
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	b103      	cbz	r3, 8007046 <_isatty_r+0x1a>
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	bd38      	pop	{r3, r4, r5, pc}
 8007048:	2400038c 	.word	0x2400038c

0800704c <_sbrk_r>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	4d06      	ldr	r5, [pc, #24]	@ (8007068 <_sbrk_r+0x1c>)
 8007050:	2300      	movs	r3, #0
 8007052:	4604      	mov	r4, r0
 8007054:	4608      	mov	r0, r1
 8007056:	602b      	str	r3, [r5, #0]
 8007058:	f7f9 fe04 	bl	8000c64 <_sbrk>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d102      	bne.n	8007066 <_sbrk_r+0x1a>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	b103      	cbz	r3, 8007066 <_sbrk_r+0x1a>
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	2400038c 	.word	0x2400038c

0800706c <memcpy>:
 800706c:	440a      	add	r2, r1
 800706e:	4291      	cmp	r1, r2
 8007070:	f100 33ff 	add.w	r3, r0, #4294967295
 8007074:	d100      	bne.n	8007078 <memcpy+0xc>
 8007076:	4770      	bx	lr
 8007078:	b510      	push	{r4, lr}
 800707a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800707e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007082:	4291      	cmp	r1, r2
 8007084:	d1f9      	bne.n	800707a <memcpy+0xe>
 8007086:	bd10      	pop	{r4, pc}

08007088 <__assert_func>:
 8007088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800708a:	4614      	mov	r4, r2
 800708c:	461a      	mov	r2, r3
 800708e:	4b09      	ldr	r3, [pc, #36]	@ (80070b4 <__assert_func+0x2c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4605      	mov	r5, r0
 8007094:	68d8      	ldr	r0, [r3, #12]
 8007096:	b954      	cbnz	r4, 80070ae <__assert_func+0x26>
 8007098:	4b07      	ldr	r3, [pc, #28]	@ (80070b8 <__assert_func+0x30>)
 800709a:	461c      	mov	r4, r3
 800709c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070a0:	9100      	str	r1, [sp, #0]
 80070a2:	462b      	mov	r3, r5
 80070a4:	4905      	ldr	r1, [pc, #20]	@ (80070bc <__assert_func+0x34>)
 80070a6:	f000 f841 	bl	800712c <fiprintf>
 80070aa:	f000 f851 	bl	8007150 <abort>
 80070ae:	4b04      	ldr	r3, [pc, #16]	@ (80070c0 <__assert_func+0x38>)
 80070b0:	e7f4      	b.n	800709c <__assert_func+0x14>
 80070b2:	bf00      	nop
 80070b4:	2400001c 	.word	0x2400001c
 80070b8:	0800754e 	.word	0x0800754e
 80070bc:	08007520 	.word	0x08007520
 80070c0:	08007513 	.word	0x08007513

080070c4 <_calloc_r>:
 80070c4:	b570      	push	{r4, r5, r6, lr}
 80070c6:	fba1 5402 	umull	r5, r4, r1, r2
 80070ca:	b93c      	cbnz	r4, 80070dc <_calloc_r+0x18>
 80070cc:	4629      	mov	r1, r5
 80070ce:	f7ff f93d 	bl	800634c <_malloc_r>
 80070d2:	4606      	mov	r6, r0
 80070d4:	b928      	cbnz	r0, 80070e2 <_calloc_r+0x1e>
 80070d6:	2600      	movs	r6, #0
 80070d8:	4630      	mov	r0, r6
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	220c      	movs	r2, #12
 80070de:	6002      	str	r2, [r0, #0]
 80070e0:	e7f9      	b.n	80070d6 <_calloc_r+0x12>
 80070e2:	462a      	mov	r2, r5
 80070e4:	4621      	mov	r1, r4
 80070e6:	f7fe fa5d 	bl	80055a4 <memset>
 80070ea:	e7f5      	b.n	80070d8 <_calloc_r+0x14>

080070ec <__ascii_mbtowc>:
 80070ec:	b082      	sub	sp, #8
 80070ee:	b901      	cbnz	r1, 80070f2 <__ascii_mbtowc+0x6>
 80070f0:	a901      	add	r1, sp, #4
 80070f2:	b142      	cbz	r2, 8007106 <__ascii_mbtowc+0x1a>
 80070f4:	b14b      	cbz	r3, 800710a <__ascii_mbtowc+0x1e>
 80070f6:	7813      	ldrb	r3, [r2, #0]
 80070f8:	600b      	str	r3, [r1, #0]
 80070fa:	7812      	ldrb	r2, [r2, #0]
 80070fc:	1e10      	subs	r0, r2, #0
 80070fe:	bf18      	it	ne
 8007100:	2001      	movne	r0, #1
 8007102:	b002      	add	sp, #8
 8007104:	4770      	bx	lr
 8007106:	4610      	mov	r0, r2
 8007108:	e7fb      	b.n	8007102 <__ascii_mbtowc+0x16>
 800710a:	f06f 0001 	mvn.w	r0, #1
 800710e:	e7f8      	b.n	8007102 <__ascii_mbtowc+0x16>

08007110 <__ascii_wctomb>:
 8007110:	4603      	mov	r3, r0
 8007112:	4608      	mov	r0, r1
 8007114:	b141      	cbz	r1, 8007128 <__ascii_wctomb+0x18>
 8007116:	2aff      	cmp	r2, #255	@ 0xff
 8007118:	d904      	bls.n	8007124 <__ascii_wctomb+0x14>
 800711a:	228a      	movs	r2, #138	@ 0x8a
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	f04f 30ff 	mov.w	r0, #4294967295
 8007122:	4770      	bx	lr
 8007124:	700a      	strb	r2, [r1, #0]
 8007126:	2001      	movs	r0, #1
 8007128:	4770      	bx	lr
	...

0800712c <fiprintf>:
 800712c:	b40e      	push	{r1, r2, r3}
 800712e:	b503      	push	{r0, r1, lr}
 8007130:	4601      	mov	r1, r0
 8007132:	ab03      	add	r3, sp, #12
 8007134:	4805      	ldr	r0, [pc, #20]	@ (800714c <fiprintf+0x20>)
 8007136:	f853 2b04 	ldr.w	r2, [r3], #4
 800713a:	6800      	ldr	r0, [r0, #0]
 800713c:	9301      	str	r3, [sp, #4]
 800713e:	f7ff fd3d 	bl	8006bbc <_vfiprintf_r>
 8007142:	b002      	add	sp, #8
 8007144:	f85d eb04 	ldr.w	lr, [sp], #4
 8007148:	b003      	add	sp, #12
 800714a:	4770      	bx	lr
 800714c:	2400001c 	.word	0x2400001c

08007150 <abort>:
 8007150:	b508      	push	{r3, lr}
 8007152:	2006      	movs	r0, #6
 8007154:	f000 f82c 	bl	80071b0 <raise>
 8007158:	2001      	movs	r0, #1
 800715a:	f7f9 fd26 	bl	8000baa <_exit>

0800715e <_raise_r>:
 800715e:	291f      	cmp	r1, #31
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4605      	mov	r5, r0
 8007164:	460c      	mov	r4, r1
 8007166:	d904      	bls.n	8007172 <_raise_r+0x14>
 8007168:	2316      	movs	r3, #22
 800716a:	6003      	str	r3, [r0, #0]
 800716c:	f04f 30ff 	mov.w	r0, #4294967295
 8007170:	bd38      	pop	{r3, r4, r5, pc}
 8007172:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007174:	b112      	cbz	r2, 800717c <_raise_r+0x1e>
 8007176:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800717a:	b94b      	cbnz	r3, 8007190 <_raise_r+0x32>
 800717c:	4628      	mov	r0, r5
 800717e:	f000 f831 	bl	80071e4 <_getpid_r>
 8007182:	4622      	mov	r2, r4
 8007184:	4601      	mov	r1, r0
 8007186:	4628      	mov	r0, r5
 8007188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800718c:	f000 b818 	b.w	80071c0 <_kill_r>
 8007190:	2b01      	cmp	r3, #1
 8007192:	d00a      	beq.n	80071aa <_raise_r+0x4c>
 8007194:	1c59      	adds	r1, r3, #1
 8007196:	d103      	bne.n	80071a0 <_raise_r+0x42>
 8007198:	2316      	movs	r3, #22
 800719a:	6003      	str	r3, [r0, #0]
 800719c:	2001      	movs	r0, #1
 800719e:	e7e7      	b.n	8007170 <_raise_r+0x12>
 80071a0:	2100      	movs	r1, #0
 80071a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80071a6:	4620      	mov	r0, r4
 80071a8:	4798      	blx	r3
 80071aa:	2000      	movs	r0, #0
 80071ac:	e7e0      	b.n	8007170 <_raise_r+0x12>
	...

080071b0 <raise>:
 80071b0:	4b02      	ldr	r3, [pc, #8]	@ (80071bc <raise+0xc>)
 80071b2:	4601      	mov	r1, r0
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	f7ff bfd2 	b.w	800715e <_raise_r>
 80071ba:	bf00      	nop
 80071bc:	2400001c 	.word	0x2400001c

080071c0 <_kill_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4d07      	ldr	r5, [pc, #28]	@ (80071e0 <_kill_r+0x20>)
 80071c4:	2300      	movs	r3, #0
 80071c6:	4604      	mov	r4, r0
 80071c8:	4608      	mov	r0, r1
 80071ca:	4611      	mov	r1, r2
 80071cc:	602b      	str	r3, [r5, #0]
 80071ce:	f7f9 fcdc 	bl	8000b8a <_kill>
 80071d2:	1c43      	adds	r3, r0, #1
 80071d4:	d102      	bne.n	80071dc <_kill_r+0x1c>
 80071d6:	682b      	ldr	r3, [r5, #0]
 80071d8:	b103      	cbz	r3, 80071dc <_kill_r+0x1c>
 80071da:	6023      	str	r3, [r4, #0]
 80071dc:	bd38      	pop	{r3, r4, r5, pc}
 80071de:	bf00      	nop
 80071e0:	2400038c 	.word	0x2400038c

080071e4 <_getpid_r>:
 80071e4:	f7f9 bcc9 	b.w	8000b7a <_getpid>

080071e8 <_init>:
 80071e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ea:	bf00      	nop
 80071ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ee:	bc08      	pop	{r3}
 80071f0:	469e      	mov	lr, r3
 80071f2:	4770      	bx	lr

080071f4 <_fini>:
 80071f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f6:	bf00      	nop
 80071f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fa:	bc08      	pop	{r3}
 80071fc:	469e      	mov	lr, r3
 80071fe:	4770      	bx	lr
