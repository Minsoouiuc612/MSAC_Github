
sin_signals_ABCD_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005690  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005928  08005928  00006928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005940  08005940  000071d0  2**0
                  CONTENTS
  4 .ARM          00000000  08005940  08005940  000071d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005940  08005940  000071d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005940  08005940  00006940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005944  08005944  00006944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  24000000  08005948  00007000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  240001d0  08005b18  000071d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400032c  08005b18  0000732c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000071d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e861  00000000  00000000  000071fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f15  00000000  00000000  00015a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00017978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a34  00000000  00000000  000186b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003947c  00000000  00000000  000190e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d57  00000000  00000000  00052560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017eefe  00000000  00000000  000632b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e21b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003744  00000000  00000000  001e21f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001e593c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001d0 	.word	0x240001d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005910 	.word	0x08005910

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001d4 	.word	0x240001d4
 80002d4:	08005910 	.word	0x08005910

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08e      	sub	sp, #56	@ 0x38
 8000408:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800040a:	4b86      	ldr	r3, [pc, #536]	@ (8000624 <main+0x220>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000412:	2b00      	cmp	r3, #0
 8000414:	d11b      	bne.n	800044e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000416:	f3bf 8f4f 	dsb	sy
}
 800041a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800041c:	f3bf 8f6f 	isb	sy
}
 8000420:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000422:	4b80      	ldr	r3, [pc, #512]	@ (8000624 <main+0x220>)
 8000424:	2200      	movs	r2, #0
 8000426:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800042a:	f3bf 8f4f 	dsb	sy
}
 800042e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000430:	f3bf 8f6f 	isb	sy
}
 8000434:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000436:	4b7b      	ldr	r3, [pc, #492]	@ (8000624 <main+0x220>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a7a      	ldr	r2, [pc, #488]	@ (8000624 <main+0x220>)
 800043c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800044e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000450:	4b74      	ldr	r3, [pc, #464]	@ (8000624 <main+0x220>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000458:	2b00      	cmp	r3, #0
 800045a:	d138      	bne.n	80004ce <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800045c:	4b71      	ldr	r3, [pc, #452]	@ (8000624 <main+0x220>)
 800045e:	2200      	movs	r2, #0
 8000460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000464:	f3bf 8f4f 	dsb	sy
}
 8000468:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800046a:	4b6e      	ldr	r3, [pc, #440]	@ (8000624 <main+0x220>)
 800046c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000470:	633b      	str	r3, [r7, #48]	@ 0x30

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000474:	0b5b      	lsrs	r3, r3, #13
 8000476:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800047a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800047c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800047e:	08db      	lsrs	r3, r3, #3
 8000480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000484:	62bb      	str	r3, [r7, #40]	@ 0x28
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000488:	015a      	lsls	r2, r3, #5
 800048a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800048e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000490:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000492:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000494:	4963      	ldr	r1, [pc, #396]	@ (8000624 <main+0x220>)
 8000496:	4313      	orrs	r3, r2
 8000498:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800049c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800049e:	1e5a      	subs	r2, r3, #1
 80004a0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d1ef      	bne.n	8000486 <main+0x82>
    } while(sets-- != 0U);
 80004a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004a8:	1e5a      	subs	r2, r3, #1
 80004aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d1e5      	bne.n	800047c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80004b0:	f3bf 8f4f 	dsb	sy
}
 80004b4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004b6:	4b5b      	ldr	r3, [pc, #364]	@ (8000624 <main+0x220>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a5a      	ldr	r2, [pc, #360]	@ (8000624 <main+0x220>)
 80004bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004c2:	f3bf 8f4f 	dsb	sy
}
 80004c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004c8:	f3bf 8f6f 	isb	sy
}
 80004cc:	e000      	b.n	80004d0 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004ce:	bf00      	nop
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80004d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004d4:	637b      	str	r3, [r7, #52]	@ 0x34
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80004d6:	bf00      	nop
 80004d8:	4b53      	ldr	r3, [pc, #332]	@ (8000628 <main+0x224>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d004      	beq.n	80004ee <main+0xea>
 80004e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004e6:	1e5a      	subs	r2, r3, #1
 80004e8:	637a      	str	r2, [r7, #52]	@ 0x34
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	dcf4      	bgt.n	80004d8 <main+0xd4>
	if ( timeout < 0 )
 80004ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	da01      	bge.n	80004f8 <main+0xf4>
	{
		Error_Handler();
 80004f4:	f000 f9f8 	bl	80008e8 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004f8:	f000 fb7e 	bl	8000bf8 <HAL_Init>
 80004fc:	4b4b      	ldr	r3, [pc, #300]	@ (800062c <main+0x228>)
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	2332      	movs	r3, #50	@ 0x32
 8000502:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	2b00      	cmp	r3, #0
 8000508:	dd1d      	ble.n	8000546 <main+0x142>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	f003 021f 	and.w	r2, r3, #31
 8000510:	693b      	ldr	r3, [r7, #16]
 8000512:	4413      	add	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800051a:	f3bf 8f4f 	dsb	sy
}
 800051e:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000520:	4a40      	ldr	r2, [pc, #256]	@ (8000624 <main+0x220>)
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	3320      	adds	r3, #32
 800052c:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	3b20      	subs	r3, #32
 8000532:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	2b00      	cmp	r3, #0
 8000538:	dcf2      	bgt.n	8000520 <main+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 800053a:	f3bf 8f4f 	dsb	sy
}
 800053e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000540:	f3bf 8f6f 	isb	sy
}
 8000544:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000546:	bf00      	nop
 8000548:	4b39      	ldr	r3, [pc, #228]	@ (8000630 <main+0x22c>)
 800054a:	627b      	str	r3, [r7, #36]	@ 0x24
 800054c:	2332      	movs	r3, #50	@ 0x32
 800054e:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000550:	6a3b      	ldr	r3, [r7, #32]
 8000552:	2b00      	cmp	r3, #0
 8000554:	dd1d      	ble.n	8000592 <main+0x18e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000558:	f003 021f 	and.w	r2, r3, #31
 800055c:	6a3b      	ldr	r3, [r7, #32]
 800055e:	4413      	add	r3, r2
 8000560:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000564:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000566:	f3bf 8f4f 	dsb	sy
}
 800056a:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800056c:	4a2d      	ldr	r2, [pc, #180]	@ (8000624 <main+0x220>)
 800056e:	69bb      	ldr	r3, [r7, #24]
 8000570:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000574:	69bb      	ldr	r3, [r7, #24]
 8000576:	3320      	adds	r3, #32
 8000578:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	3b20      	subs	r3, #32
 800057e:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000580:	69fb      	ldr	r3, [r7, #28]
 8000582:	2b00      	cmp	r3, #0
 8000584:	dcf2      	bgt.n	800056c <main+0x168>
  __ASM volatile ("dsb 0xF":::"memory");
 8000586:	f3bf 8f4f 	dsb	sy
}
 800058a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800058c:	f3bf 8f6f 	isb	sy
}
 8000590:	bf00      	nop
}
 8000592:	bf00      	nop
	SCB_CleanDCache_by_Addr((uint32_t *) DiscontinuousSineCCRValue_Buffer2, CCRValue_BufferSize );

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000594:	f000 f850 	bl	8000638 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000598:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <main+0x224>)
 800059a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800059e:	4a22      	ldr	r2, [pc, #136]	@ (8000628 <main+0x224>)
 80005a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000628 <main+0x224>)
 80005aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f002 ff54 	bl	8003464 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80005bc:	2100      	movs	r1, #0
 80005be:	2000      	movs	r0, #0
 80005c0:	f002 ff6a 	bl	8003498 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80005c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005c8:	637b      	str	r3, [r7, #52]	@ 0x34
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80005ca:	bf00      	nop
 80005cc:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <main+0x224>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d104      	bne.n	80005e2 <main+0x1de>
 80005d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80005de:	2b00      	cmp	r3, #0
 80005e0:	dcf4      	bgt.n	80005cc <main+0x1c8>
	if ( timeout < 0 )
 80005e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	da01      	bge.n	80005ec <main+0x1e8>
	{
		Error_Handler();
 80005e8:	f000 f97e 	bl	80008e8 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ec:	f000 f952 	bl	8000894 <MX_GPIO_Init>
	MX_DMA_Init();
 80005f0:	f000 f928 	bl	8000844 <MX_DMA_Init>
	MX_TIM1_Init();
 80005f4:	f000 f88a 	bl	800070c <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, DiscontinuousSineCCRValue_Buffer, CCRValue_BufferSize);
 80005f8:	2332      	movs	r3, #50	@ 0x32
 80005fa:	4a0c      	ldr	r2, [pc, #48]	@ (800062c <main+0x228>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	480d      	ldr	r0, [pc, #52]	@ (8000634 <main+0x230>)
 8000600:	f003 ff9a 	bl	8004538 <HAL_TIM_PWM_Start_DMA>
	//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000604:	2100      	movs	r1, #0
 8000606:	480b      	ldr	r0, [pc, #44]	@ (8000634 <main+0x230>)
 8000608:	f004 ff62 	bl	80054d0 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, DiscontinuousSineCCRValue_Buffer2, CCRValue_BufferSize);
 800060c:	2332      	movs	r3, #50	@ 0x32
 800060e:	4a08      	ldr	r2, [pc, #32]	@ (8000630 <main+0x22c>)
 8000610:	2104      	movs	r1, #4
 8000612:	4808      	ldr	r0, [pc, #32]	@ (8000634 <main+0x230>)
 8000614:	f003 ff90 	bl	8004538 <HAL_TIM_PWM_Start_DMA>
	//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000618:	2104      	movs	r1, #4
 800061a:	4806      	ldr	r0, [pc, #24]	@ (8000634 <main+0x230>)
 800061c:	f004 ff58 	bl	80054d0 <HAL_TIMEx_PWMN_Start>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <main+0x21c>
 8000624:	e000ed00 	.word	0xe000ed00
 8000628:	58024400 	.word	0x58024400
 800062c:	24000020 	.word	0x24000020
 8000630:	24000100 	.word	0x24000100
 8000634:	240001ec 	.word	0x240001ec

08000638 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b09c      	sub	sp, #112	@ 0x70
 800063c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000642:	224c      	movs	r2, #76	@ 0x4c
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f005 f935 	bl	80058b6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2220      	movs	r2, #32
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 f92f 	bl	80058b6 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000658:	2004      	movs	r0, #4
 800065a:	f002 ff31 	bl	80034c0 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <SystemClock_Config+0xcc>)
 8000664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000666:	4a27      	ldr	r2, [pc, #156]	@ (8000704 <SystemClock_Config+0xcc>)
 8000668:	f023 0301 	bic.w	r3, r3, #1
 800066c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800066e:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <SystemClock_Config+0xcc>)
 8000670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	4b23      	ldr	r3, [pc, #140]	@ (8000708 <SystemClock_Config+0xd0>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000680:	4a21      	ldr	r2, [pc, #132]	@ (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <SystemClock_Config+0xd0>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000694:	bf00      	nop
 8000696:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <SystemClock_Config+0xd0>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800069e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006a2:	d1f8      	bne.n	8000696 <SystemClock_Config+0x5e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2340      	movs	r3, #64	@ 0x40
 80006ae:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 ff5b 	bl	8003574 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x90>
	{
		Error_Handler();
 80006c4:	f000 f910 	bl	80008e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	233f      	movs	r3, #63	@ 0x3f
 80006ca:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2101      	movs	r1, #1
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fb9b 	bl	8003e28 <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80006f8:	f000 f8f6 	bl	80008e8 <Error_Handler>
	}
}
 80006fc:	bf00      	nop
 80006fe:	3770      	adds	r7, #112	@ 0x70
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	58000400 	.word	0x58000400
 8000708:	58024800 	.word	0x58024800

0800070c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b096      	sub	sp, #88	@ 0x58
 8000710:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000712:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800071e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
 800072e:	615a      	str	r2, [r3, #20]
 8000730:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	222c      	movs	r2, #44	@ 0x2c
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f005 f8bc 	bl	80058b6 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800073e:	4b3f      	ldr	r3, [pc, #252]	@ (800083c <MX_TIM1_Init+0x130>)
 8000740:	4a3f      	ldr	r2, [pc, #252]	@ (8000840 <MX_TIM1_Init+0x134>)
 8000742:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1 - 1;
 8000744:	4b3d      	ldr	r3, [pc, #244]	@ (800083c <MX_TIM1_Init+0x130>)
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800074a:	4b3c      	ldr	r3, [pc, #240]	@ (800083c <MX_TIM1_Init+0x130>)
 800074c:	2220      	movs	r2, #32
 800074e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 3200 - 1;
 8000750:	4b3a      	ldr	r3, [pc, #232]	@ (800083c <MX_TIM1_Init+0x130>)
 8000752:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8000756:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	4b38      	ldr	r3, [pc, #224]	@ (800083c <MX_TIM1_Init+0x130>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800075e:	4b37      	ldr	r3, [pc, #220]	@ (800083c <MX_TIM1_Init+0x130>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000764:	4b35      	ldr	r3, [pc, #212]	@ (800083c <MX_TIM1_Init+0x130>)
 8000766:	2280      	movs	r2, #128	@ 0x80
 8000768:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800076a:	4834      	ldr	r0, [pc, #208]	@ (800083c <MX_TIM1_Init+0x130>)
 800076c:	f003 fe8c 	bl	8004488 <HAL_TIM_PWM_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM1_Init+0x6e>
	{
		Error_Handler();
 8000776:	f000 f8b7 	bl	80008e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800077e:	2300      	movs	r3, #0
 8000780:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000786:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800078a:	4619      	mov	r1, r3
 800078c:	482b      	ldr	r0, [pc, #172]	@ (800083c <MX_TIM1_Init+0x130>)
 800078e:	f004 ff61 	bl	8005654 <HAL_TIMEx_MasterConfigSynchronization>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8000798:	f000 f8a6 	bl	80008e8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800079c:	2360      	movs	r3, #96	@ 0x60
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	481e      	ldr	r0, [pc, #120]	@ (800083c <MX_TIM1_Init+0x130>)
 80007c2:	f004 f8df 	bl	8004984 <HAL_TIM_PWM_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 80007cc:	f000 f88c 	bl	80008e8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007d4:	2204      	movs	r2, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	4818      	ldr	r0, [pc, #96]	@ (800083c <MX_TIM1_Init+0x130>)
 80007da:	f004 f8d3 	bl	8004984 <HAL_TIM_PWM_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0xdc>
	{
		Error_Handler();
 80007e4:	f000 f880 	bl	80008e8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000800:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800080a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	4619      	mov	r1, r3
 800081c:	4807      	ldr	r0, [pc, #28]	@ (800083c <MX_TIM1_Init+0x130>)
 800081e:	f004 ffa7 	bl	8005770 <HAL_TIMEx_ConfigBreakDeadTime>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM1_Init+0x120>
	{
		Error_Handler();
 8000828:	f000 f85e 	bl	80008e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800082c:	4803      	ldr	r0, [pc, #12]	@ (800083c <MX_TIM1_Init+0x130>)
 800082e:	f000 f917 	bl	8000a60 <HAL_TIM_MspPostInit>

}
 8000832:	bf00      	nop
 8000834:	3758      	adds	r7, #88	@ 0x58
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	240001ec 	.word	0x240001ec
 8000840:	40010000 	.word	0x40010000

08000844 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_DMA_Init+0x4c>)
 800084c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000850:	4a0f      	ldr	r2, [pc, #60]	@ (8000890 <MX_DMA_Init+0x4c>)
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800085a:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <MX_DMA_Init+0x4c>)
 800085c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	200b      	movs	r0, #11
 800086e:	f000 fb3c 	bl	8000eea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000872:	200b      	movs	r0, #11
 8000874:	f000 fb53 	bl	8000f1e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	200c      	movs	r0, #12
 800087e:	f000 fb34 	bl	8000eea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000882:	200c      	movs	r0, #12
 8000884:	f000 fb4b 	bl	8000f1e <HAL_NVIC_EnableIRQ>

}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	58024400 	.word	0x58024400

08000894 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800089a:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_GPIO_Init+0x50>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a0:	4a10      	ldr	r2, [pc, #64]	@ (80008e4 <MX_GPIO_Init+0x50>)
 80008a2:	f043 0310 	orr.w	r3, r3, #16
 80008a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_GPIO_Init+0x50>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b0:	f003 0310 	and.w	r3, r3, #16
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <MX_GPIO_Init+0x50>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008be:	4a09      	ldr	r2, [pc, #36]	@ (80008e4 <MX_GPIO_Init+0x50>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_GPIO_Init+0x50>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	58024400 	.word	0x58024400

080008e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <Error_Handler+0x8>

080008f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <HAL_MspInit+0x30>)
 80008fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000900:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_MspInit+0x30>)
 8000902:	f043 0302 	orr.w	r3, r3, #2
 8000906:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_MspInit+0x30>)
 800090c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000910:	f003 0302 	and.w	r3, r3, #2
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	58024400 	.word	0x58024400

08000928 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a44      	ldr	r2, [pc, #272]	@ (8000a48 <HAL_TIM_PWM_MspInit+0x120>)
 8000936:	4293      	cmp	r3, r2
 8000938:	f040 8081 	bne.w	8000a3e <HAL_TIM_PWM_MspInit+0x116>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800093c:	4b43      	ldr	r3, [pc, #268]	@ (8000a4c <HAL_TIM_PWM_MspInit+0x124>)
 800093e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000942:	4a42      	ldr	r2, [pc, #264]	@ (8000a4c <HAL_TIM_PWM_MspInit+0x124>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800094c:	4b3f      	ldr	r3, [pc, #252]	@ (8000a4c <HAL_TIM_PWM_MspInit+0x124>)
 800094e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream0;
 800095a:	4b3d      	ldr	r3, [pc, #244]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x128>)
 800095c:	4a3d      	ldr	r2, [pc, #244]	@ (8000a54 <HAL_TIM_PWM_MspInit+0x12c>)
 800095e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8000960:	4b3b      	ldr	r3, [pc, #236]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x128>)
 8000962:	220b      	movs	r2, #11
 8000964:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000966:	4b3a      	ldr	r3, [pc, #232]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x128>)
 8000968:	2240      	movs	r2, #64	@ 0x40
 800096a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800096c:	4b38      	ldr	r3, [pc, #224]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x128>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000972:	4b37      	ldr	r3, [pc, #220]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x128>)
 8000974:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000978:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800097a:	4b35      	ldr	r3, [pc, #212]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x128>)
 800097c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000980:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000982:	4b33      	ldr	r3, [pc, #204]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x128>)
 8000984:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000988:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800098a:	4b31      	ldr	r3, [pc, #196]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x128>)
 800098c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000990:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000992:	4b2f      	ldr	r3, [pc, #188]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x128>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000998:	4b2d      	ldr	r3, [pc, #180]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x128>)
 800099a:	2204      	movs	r2, #4
 800099c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800099e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x128>)
 80009a0:	2203      	movs	r2, #3
 80009a2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 80009a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x128>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80009aa:	4b29      	ldr	r3, [pc, #164]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x128>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80009b0:	4827      	ldr	r0, [pc, #156]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x128>)
 80009b2:	f000 facf 	bl	8000f54 <HAL_DMA_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 80009bc:	f7ff ff94 	bl	80008e8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a23      	ldr	r2, [pc, #140]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x128>)
 80009c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80009c6:	4a22      	ldr	r2, [pc, #136]	@ (8000a50 <HAL_TIM_PWM_MspInit+0x128>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Stream1;
 80009cc:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <HAL_TIM_PWM_MspInit+0x130>)
 80009ce:	4a23      	ldr	r2, [pc, #140]	@ (8000a5c <HAL_TIM_PWM_MspInit+0x134>)
 80009d0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 80009d2:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <HAL_TIM_PWM_MspInit+0x130>)
 80009d4:	220c      	movs	r2, #12
 80009d6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <HAL_TIM_PWM_MspInit+0x130>)
 80009da:	2240      	movs	r2, #64	@ 0x40
 80009dc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009de:	4b1e      	ldr	r3, [pc, #120]	@ (8000a58 <HAL_TIM_PWM_MspInit+0x130>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80009e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <HAL_TIM_PWM_MspInit+0x130>)
 80009e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009ea:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <HAL_TIM_PWM_MspInit+0x130>)
 80009ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009f2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <HAL_TIM_PWM_MspInit+0x130>)
 80009f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009fa:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 80009fc:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <HAL_TIM_PWM_MspInit+0x130>)
 80009fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a02:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000a04:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <HAL_TIM_PWM_MspInit+0x130>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <HAL_TIM_PWM_MspInit+0x130>)
 8000a0c:	2204      	movs	r2, #4
 8000a0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim1_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a10:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <HAL_TIM_PWM_MspInit+0x130>)
 8000a12:	2203      	movs	r2, #3
 8000a14:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim1_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <HAL_TIM_PWM_MspInit+0x130>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim1_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <HAL_TIM_PWM_MspInit+0x130>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8000a22:	480d      	ldr	r0, [pc, #52]	@ (8000a58 <HAL_TIM_PWM_MspInit+0x130>)
 8000a24:	f000 fa96 	bl	8000f54 <HAL_DMA_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <HAL_TIM_PWM_MspInit+0x10a>
    {
      Error_Handler();
 8000a2e:	f7ff ff5b 	bl	80008e8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <HAL_TIM_PWM_MspInit+0x130>)
 8000a36:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a38:	4a07      	ldr	r2, [pc, #28]	@ (8000a58 <HAL_TIM_PWM_MspInit+0x130>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40010000 	.word	0x40010000
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	24000238 	.word	0x24000238
 8000a54:	40020010 	.word	0x40020010
 8000a58:	240002b0 	.word	0x240002b0
 8000a5c:	40020028 	.word	0x40020028

08000a60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	@ 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a23      	ldr	r2, [pc, #140]	@ (8000b0c <HAL_TIM_MspPostInit+0xac>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d13f      	bne.n	8000b02 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a82:	4b23      	ldr	r3, [pc, #140]	@ (8000b10 <HAL_TIM_MspPostInit+0xb0>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a88:	4a21      	ldr	r2, [pc, #132]	@ (8000b10 <HAL_TIM_MspPostInit+0xb0>)
 8000a8a:	f043 0310 	orr.w	r3, r3, #16
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a92:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <HAL_TIM_MspPostInit+0xb0>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a98:	f003 0310 	and.w	r3, r3, #16
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b10 <HAL_TIM_MspPostInit+0xb0>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8000b10 <HAL_TIM_MspPostInit+0xb0>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab0:	4b17      	ldr	r3, [pc, #92]	@ (8000b10 <HAL_TIM_MspPostInit+0xb0>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 8000abe:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480e      	ldr	r0, [pc, #56]	@ (8000b14 <HAL_TIM_MspPostInit+0xb4>)
 8000adc:	f002 fb12 	bl	8003104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ae0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4806      	ldr	r0, [pc, #24]	@ (8000b18 <HAL_TIM_MspPostInit+0xb8>)
 8000afe:	f002 fb01 	bl	8003104 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	@ 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40010000 	.word	0x40010000
 8000b10:	58024400 	.word	0x58024400
 8000b14:	58021000 	.word	0x58021000
 8000b18:	58020000 	.word	0x58020000

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <NMI_Handler+0x4>

08000b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <MemManage_Handler+0x4>

08000b34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b72:	f000 f8b3 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <DMA1_Stream0_IRQHandler+0x10>)
 8000b82:	f000 ffad 	bl	8001ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	24000238 	.word	0x24000238

08000b90 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8000b94:	4802      	ldr	r0, [pc, #8]	@ (8000ba0 <DMA1_Stream1_IRQHandler+0x10>)
 8000b96:	f000 ffa3 	bl	8001ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	240002b0 	.word	0x240002b0

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bdc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ba8:	f7ff fb96 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bac:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bae:	490d      	ldr	r1, [pc, #52]	@ (8000be4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000be8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f004 fe79 	bl	80058c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd6:	f7ff fc15 	bl	8000404 <main>
  bx  lr
 8000bda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000be0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000be4:	240001d0 	.word	0x240001d0
  ldr r2, =_sidata
 8000be8:	08005948 	.word	0x08005948
  ldr r2, =_sbss
 8000bec:	240001d0 	.word	0x240001d0
  ldr r4, =_ebss
 8000bf0:	2400032c 	.word	0x2400032c

08000bf4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC3_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f000 f968 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c04:	f003 fac6 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <HAL_Init+0x68>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	0a1b      	lsrs	r3, r3, #8
 8000c10:	f003 030f 	and.w	r3, r3, #15
 8000c14:	4913      	ldr	r1, [pc, #76]	@ (8000c64 <HAL_Init+0x6c>)
 8000c16:	5ccb      	ldrb	r3, [r1, r3]
 8000c18:	f003 031f 	and.w	r3, r3, #31
 8000c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c22:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <HAL_Init+0x68>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c64 <HAL_Init+0x6c>)
 8000c2c:	5cd3      	ldrb	r3, [r2, r3]
 8000c2e:	f003 031f 	and.w	r3, r3, #31
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	fa22 f303 	lsr.w	r3, r2, r3
 8000c38:	4a0b      	ldr	r2, [pc, #44]	@ (8000c68 <HAL_Init+0x70>)
 8000c3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c6c <HAL_Init+0x74>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f814 	bl	8000c70 <HAL_InitTick>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e002      	b.n	8000c58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c52:	f7ff fe4f 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	58024400 	.word	0x58024400
 8000c64:	08005928 	.word	0x08005928
 8000c68:	24000004 	.word	0x24000004
 8000c6c:	24000000 	.word	0x24000000

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <HAL_InitTick+0x60>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e021      	b.n	8000cc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c84:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <HAL_InitTick+0x64>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <HAL_InitTick+0x60>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f94d 	bl	8000f3a <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f917 	bl	8000eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	@ (8000cd8 <HAL_InitTick+0x68>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	240001cc 	.word	0x240001cc
 8000cd4:	24000000 	.word	0x24000000
 8000cd8:	240001c8 	.word	0x240001c8

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	240001cc 	.word	0x240001cc
 8000d00:	24000328 	.word	0x24000328

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	24000328 	.word	0x24000328

08000d1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d20:	4b03      	ldr	r3, [pc, #12]	@ (8000d30 <HAL_GetREVID+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	0c1b      	lsrs	r3, r3, #16
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	5c001000 	.word	0x5c001000

08000d34 <__NVIC_SetPriorityGrouping>:
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <__NVIC_SetPriorityGrouping+0x40>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	@ (8000d74 <__NVIC_SetPriorityGrouping+0x40>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00
 8000d78:	05fa0000 	.word	0x05fa0000

08000d7c <__NVIC_GetPriorityGrouping>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_EnableIRQ>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0b      	blt.n	8000dc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	f003 021f 	and.w	r2, r3, #31
 8000db0:	4907      	ldr	r1, [pc, #28]	@ (8000dd0 <__NVIC_EnableIRQ+0x38>)
 8000db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2001      	movs	r0, #1
 8000dba:	fa00 f202 	lsl.w	r2, r0, r2
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	@ (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	@ (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	@ 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	@ 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ea0:	d301      	bcc.n	8000ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00f      	b.n	8000ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <SysTick_Config+0x40>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eae:	210f      	movs	r1, #15
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f7ff ff8e 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <SysTick_Config+0x40>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	4b04      	ldr	r3, [pc, #16]	@ (8000ed0 <SysTick_Config+0x40>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff29 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff40 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff90 	bl	8000e28 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5f 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff33 	bl	8000d98 <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffa4 	bl	8000e90 <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff fed2 	bl	8000d04 <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e316      	b.n	800159a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a66      	ldr	r2, [pc, #408]	@ (800110c <HAL_DMA_Init+0x1b8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d04a      	beq.n	800100c <HAL_DMA_Init+0xb8>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a65      	ldr	r2, [pc, #404]	@ (8001110 <HAL_DMA_Init+0x1bc>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d045      	beq.n	800100c <HAL_DMA_Init+0xb8>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a63      	ldr	r2, [pc, #396]	@ (8001114 <HAL_DMA_Init+0x1c0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d040      	beq.n	800100c <HAL_DMA_Init+0xb8>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a62      	ldr	r2, [pc, #392]	@ (8001118 <HAL_DMA_Init+0x1c4>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d03b      	beq.n	800100c <HAL_DMA_Init+0xb8>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a60      	ldr	r2, [pc, #384]	@ (800111c <HAL_DMA_Init+0x1c8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d036      	beq.n	800100c <HAL_DMA_Init+0xb8>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a5f      	ldr	r2, [pc, #380]	@ (8001120 <HAL_DMA_Init+0x1cc>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d031      	beq.n	800100c <HAL_DMA_Init+0xb8>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a5d      	ldr	r2, [pc, #372]	@ (8001124 <HAL_DMA_Init+0x1d0>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d02c      	beq.n	800100c <HAL_DMA_Init+0xb8>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a5c      	ldr	r2, [pc, #368]	@ (8001128 <HAL_DMA_Init+0x1d4>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d027      	beq.n	800100c <HAL_DMA_Init+0xb8>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a5a      	ldr	r2, [pc, #360]	@ (800112c <HAL_DMA_Init+0x1d8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d022      	beq.n	800100c <HAL_DMA_Init+0xb8>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a59      	ldr	r2, [pc, #356]	@ (8001130 <HAL_DMA_Init+0x1dc>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d01d      	beq.n	800100c <HAL_DMA_Init+0xb8>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a57      	ldr	r2, [pc, #348]	@ (8001134 <HAL_DMA_Init+0x1e0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d018      	beq.n	800100c <HAL_DMA_Init+0xb8>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a56      	ldr	r2, [pc, #344]	@ (8001138 <HAL_DMA_Init+0x1e4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d013      	beq.n	800100c <HAL_DMA_Init+0xb8>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a54      	ldr	r2, [pc, #336]	@ (800113c <HAL_DMA_Init+0x1e8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d00e      	beq.n	800100c <HAL_DMA_Init+0xb8>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a53      	ldr	r2, [pc, #332]	@ (8001140 <HAL_DMA_Init+0x1ec>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d009      	beq.n	800100c <HAL_DMA_Init+0xb8>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a51      	ldr	r2, [pc, #324]	@ (8001144 <HAL_DMA_Init+0x1f0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d004      	beq.n	800100c <HAL_DMA_Init+0xb8>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a50      	ldr	r2, [pc, #320]	@ (8001148 <HAL_DMA_Init+0x1f4>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d101      	bne.n	8001010 <HAL_DMA_Init+0xbc>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <HAL_DMA_Init+0xbe>
 8001010:	2300      	movs	r3, #0
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 813b 	beq.w	800128e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2202      	movs	r2, #2
 800101c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a37      	ldr	r2, [pc, #220]	@ (800110c <HAL_DMA_Init+0x1b8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d04a      	beq.n	80010c8 <HAL_DMA_Init+0x174>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a36      	ldr	r2, [pc, #216]	@ (8001110 <HAL_DMA_Init+0x1bc>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d045      	beq.n	80010c8 <HAL_DMA_Init+0x174>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a34      	ldr	r2, [pc, #208]	@ (8001114 <HAL_DMA_Init+0x1c0>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d040      	beq.n	80010c8 <HAL_DMA_Init+0x174>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a33      	ldr	r2, [pc, #204]	@ (8001118 <HAL_DMA_Init+0x1c4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d03b      	beq.n	80010c8 <HAL_DMA_Init+0x174>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a31      	ldr	r2, [pc, #196]	@ (800111c <HAL_DMA_Init+0x1c8>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d036      	beq.n	80010c8 <HAL_DMA_Init+0x174>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a30      	ldr	r2, [pc, #192]	@ (8001120 <HAL_DMA_Init+0x1cc>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d031      	beq.n	80010c8 <HAL_DMA_Init+0x174>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a2e      	ldr	r2, [pc, #184]	@ (8001124 <HAL_DMA_Init+0x1d0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d02c      	beq.n	80010c8 <HAL_DMA_Init+0x174>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a2d      	ldr	r2, [pc, #180]	@ (8001128 <HAL_DMA_Init+0x1d4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d027      	beq.n	80010c8 <HAL_DMA_Init+0x174>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a2b      	ldr	r2, [pc, #172]	@ (800112c <HAL_DMA_Init+0x1d8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d022      	beq.n	80010c8 <HAL_DMA_Init+0x174>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a2a      	ldr	r2, [pc, #168]	@ (8001130 <HAL_DMA_Init+0x1dc>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d01d      	beq.n	80010c8 <HAL_DMA_Init+0x174>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a28      	ldr	r2, [pc, #160]	@ (8001134 <HAL_DMA_Init+0x1e0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d018      	beq.n	80010c8 <HAL_DMA_Init+0x174>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a27      	ldr	r2, [pc, #156]	@ (8001138 <HAL_DMA_Init+0x1e4>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d013      	beq.n	80010c8 <HAL_DMA_Init+0x174>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a25      	ldr	r2, [pc, #148]	@ (800113c <HAL_DMA_Init+0x1e8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00e      	beq.n	80010c8 <HAL_DMA_Init+0x174>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a24      	ldr	r2, [pc, #144]	@ (8001140 <HAL_DMA_Init+0x1ec>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d009      	beq.n	80010c8 <HAL_DMA_Init+0x174>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a22      	ldr	r2, [pc, #136]	@ (8001144 <HAL_DMA_Init+0x1f0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d004      	beq.n	80010c8 <HAL_DMA_Init+0x174>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a21      	ldr	r2, [pc, #132]	@ (8001148 <HAL_DMA_Init+0x1f4>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d108      	bne.n	80010da <HAL_DMA_Init+0x186>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0201 	bic.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e007      	b.n	80010ea <HAL_DMA_Init+0x196>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80010ea:	e02f      	b.n	800114c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ec:	f7ff fe0a 	bl	8000d04 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b05      	cmp	r3, #5
 80010f8:	d928      	bls.n	800114c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2220      	movs	r2, #32
 80010fe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2203      	movs	r2, #3
 8001104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e246      	b.n	800159a <HAL_DMA_Init+0x646>
 800110c:	40020010 	.word	0x40020010
 8001110:	40020028 	.word	0x40020028
 8001114:	40020040 	.word	0x40020040
 8001118:	40020058 	.word	0x40020058
 800111c:	40020070 	.word	0x40020070
 8001120:	40020088 	.word	0x40020088
 8001124:	400200a0 	.word	0x400200a0
 8001128:	400200b8 	.word	0x400200b8
 800112c:	40020410 	.word	0x40020410
 8001130:	40020428 	.word	0x40020428
 8001134:	40020440 	.word	0x40020440
 8001138:	40020458 	.word	0x40020458
 800113c:	40020470 	.word	0x40020470
 8001140:	40020488 	.word	0x40020488
 8001144:	400204a0 	.word	0x400204a0
 8001148:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1c8      	bne.n	80010ec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4b83      	ldr	r3, [pc, #524]	@ (8001374 <HAL_DMA_Init+0x420>)
 8001166:	4013      	ands	r3, r2
 8001168:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001172:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800117e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800118a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4313      	orrs	r3, r2
 8001196:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119c:	2b04      	cmp	r3, #4
 800119e:	d107      	bne.n	80011b0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a8:	4313      	orrs	r3, r2
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80011b0:	4b71      	ldr	r3, [pc, #452]	@ (8001378 <HAL_DMA_Init+0x424>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b71      	ldr	r3, [pc, #452]	@ (800137c <HAL_DMA_Init+0x428>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011bc:	d328      	bcc.n	8001210 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b28      	cmp	r3, #40	@ 0x28
 80011c4:	d903      	bls.n	80011ce <HAL_DMA_Init+0x27a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80011cc:	d917      	bls.n	80011fe <HAL_DMA_Init+0x2aa>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80011d4:	d903      	bls.n	80011de <HAL_DMA_Init+0x28a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b42      	cmp	r3, #66	@ 0x42
 80011dc:	d90f      	bls.n	80011fe <HAL_DMA_Init+0x2aa>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b46      	cmp	r3, #70	@ 0x46
 80011e4:	d903      	bls.n	80011ee <HAL_DMA_Init+0x29a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b48      	cmp	r3, #72	@ 0x48
 80011ec:	d907      	bls.n	80011fe <HAL_DMA_Init+0x2aa>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b4e      	cmp	r3, #78	@ 0x4e
 80011f4:	d905      	bls.n	8001202 <HAL_DMA_Init+0x2ae>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b52      	cmp	r3, #82	@ 0x52
 80011fc:	d801      	bhi.n	8001202 <HAL_DMA_Init+0x2ae>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <HAL_DMA_Init+0x2b0>
 8001202:	2300      	movs	r3, #0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800120e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f023 0307 	bic.w	r3, r3, #7
 8001226:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	4313      	orrs	r3, r2
 8001230:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001236:	2b04      	cmp	r3, #4
 8001238:	d117      	bne.n	800126a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4313      	orrs	r3, r2
 8001242:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00e      	beq.n	800126a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f001 fdcf 	bl	8002df0 <DMA_CheckFifoParam>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2240      	movs	r2, #64	@ 0x40
 800125c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e197      	b.n	800159a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f001 fd0a 	bl	8002c8c <DMA_CalcBaseAndBitshift>
 8001278:	4603      	mov	r3, r0
 800127a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001280:	f003 031f 	and.w	r3, r3, #31
 8001284:	223f      	movs	r2, #63	@ 0x3f
 8001286:	409a      	lsls	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	e0cd      	b.n	800142a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a3b      	ldr	r2, [pc, #236]	@ (8001380 <HAL_DMA_Init+0x42c>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d022      	beq.n	80012de <HAL_DMA_Init+0x38a>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a39      	ldr	r2, [pc, #228]	@ (8001384 <HAL_DMA_Init+0x430>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d01d      	beq.n	80012de <HAL_DMA_Init+0x38a>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a38      	ldr	r2, [pc, #224]	@ (8001388 <HAL_DMA_Init+0x434>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d018      	beq.n	80012de <HAL_DMA_Init+0x38a>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a36      	ldr	r2, [pc, #216]	@ (800138c <HAL_DMA_Init+0x438>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d013      	beq.n	80012de <HAL_DMA_Init+0x38a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a35      	ldr	r2, [pc, #212]	@ (8001390 <HAL_DMA_Init+0x43c>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d00e      	beq.n	80012de <HAL_DMA_Init+0x38a>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a33      	ldr	r2, [pc, #204]	@ (8001394 <HAL_DMA_Init+0x440>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d009      	beq.n	80012de <HAL_DMA_Init+0x38a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a32      	ldr	r2, [pc, #200]	@ (8001398 <HAL_DMA_Init+0x444>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d004      	beq.n	80012de <HAL_DMA_Init+0x38a>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a30      	ldr	r2, [pc, #192]	@ (800139c <HAL_DMA_Init+0x448>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d101      	bne.n	80012e2 <HAL_DMA_Init+0x38e>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <HAL_DMA_Init+0x390>
 80012e2:	2300      	movs	r3, #0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 8097 	beq.w	8001418 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a24      	ldr	r2, [pc, #144]	@ (8001380 <HAL_DMA_Init+0x42c>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d021      	beq.n	8001338 <HAL_DMA_Init+0x3e4>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a22      	ldr	r2, [pc, #136]	@ (8001384 <HAL_DMA_Init+0x430>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d01c      	beq.n	8001338 <HAL_DMA_Init+0x3e4>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a21      	ldr	r2, [pc, #132]	@ (8001388 <HAL_DMA_Init+0x434>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d017      	beq.n	8001338 <HAL_DMA_Init+0x3e4>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a1f      	ldr	r2, [pc, #124]	@ (800138c <HAL_DMA_Init+0x438>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d012      	beq.n	8001338 <HAL_DMA_Init+0x3e4>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a1e      	ldr	r2, [pc, #120]	@ (8001390 <HAL_DMA_Init+0x43c>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d00d      	beq.n	8001338 <HAL_DMA_Init+0x3e4>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a1c      	ldr	r2, [pc, #112]	@ (8001394 <HAL_DMA_Init+0x440>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d008      	beq.n	8001338 <HAL_DMA_Init+0x3e4>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a1b      	ldr	r2, [pc, #108]	@ (8001398 <HAL_DMA_Init+0x444>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d003      	beq.n	8001338 <HAL_DMA_Init+0x3e4>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a19      	ldr	r2, [pc, #100]	@ (800139c <HAL_DMA_Init+0x448>)
 8001336:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2202      	movs	r2, #2
 800133c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <HAL_DMA_Init+0x44c>)
 8001354:	4013      	ands	r3, r2
 8001356:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b40      	cmp	r3, #64	@ 0x40
 800135e:	d021      	beq.n	80013a4 <HAL_DMA_Init+0x450>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	2b80      	cmp	r3, #128	@ 0x80
 8001366:	d102      	bne.n	800136e <HAL_DMA_Init+0x41a>
 8001368:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800136c:	e01b      	b.n	80013a6 <HAL_DMA_Init+0x452>
 800136e:	2300      	movs	r3, #0
 8001370:	e019      	b.n	80013a6 <HAL_DMA_Init+0x452>
 8001372:	bf00      	nop
 8001374:	fe10803f 	.word	0xfe10803f
 8001378:	5c001000 	.word	0x5c001000
 800137c:	ffff0000 	.word	0xffff0000
 8001380:	58025408 	.word	0x58025408
 8001384:	5802541c 	.word	0x5802541c
 8001388:	58025430 	.word	0x58025430
 800138c:	58025444 	.word	0x58025444
 8001390:	58025458 	.word	0x58025458
 8001394:	5802546c 	.word	0x5802546c
 8001398:	58025480 	.word	0x58025480
 800139c:	58025494 	.word	0x58025494
 80013a0:	fffe000f 	.word	0xfffe000f
 80013a4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68d2      	ldr	r2, [r2, #12]
 80013aa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80013ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80013b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80013bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80013c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80013cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80013d4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4313      	orrs	r3, r2
 80013da:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b6e      	ldr	r3, [pc, #440]	@ (80015a4 <HAL_DMA_Init+0x650>)
 80013ec:	4413      	add	r3, r2
 80013ee:	4a6e      	ldr	r2, [pc, #440]	@ (80015a8 <HAL_DMA_Init+0x654>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	091b      	lsrs	r3, r3, #4
 80013f6:	009a      	lsls	r2, r3, #2
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f001 fc45 	bl	8002c8c <DMA_CalcBaseAndBitshift>
 8001402:	4603      	mov	r3, r0
 8001404:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800140a:	f003 031f 	and.w	r3, r3, #31
 800140e:	2201      	movs	r2, #1
 8001410:	409a      	lsls	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	e008      	b.n	800142a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2240      	movs	r2, #64	@ 0x40
 800141c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2203      	movs	r2, #3
 8001422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e0b7      	b.n	800159a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a5f      	ldr	r2, [pc, #380]	@ (80015ac <HAL_DMA_Init+0x658>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d072      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a5d      	ldr	r2, [pc, #372]	@ (80015b0 <HAL_DMA_Init+0x65c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d06d      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a5c      	ldr	r2, [pc, #368]	@ (80015b4 <HAL_DMA_Init+0x660>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d068      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a5a      	ldr	r2, [pc, #360]	@ (80015b8 <HAL_DMA_Init+0x664>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d063      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a59      	ldr	r2, [pc, #356]	@ (80015bc <HAL_DMA_Init+0x668>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d05e      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a57      	ldr	r2, [pc, #348]	@ (80015c0 <HAL_DMA_Init+0x66c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d059      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a56      	ldr	r2, [pc, #344]	@ (80015c4 <HAL_DMA_Init+0x670>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d054      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a54      	ldr	r2, [pc, #336]	@ (80015c8 <HAL_DMA_Init+0x674>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d04f      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a53      	ldr	r2, [pc, #332]	@ (80015cc <HAL_DMA_Init+0x678>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d04a      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a51      	ldr	r2, [pc, #324]	@ (80015d0 <HAL_DMA_Init+0x67c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d045      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a50      	ldr	r2, [pc, #320]	@ (80015d4 <HAL_DMA_Init+0x680>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d040      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a4e      	ldr	r2, [pc, #312]	@ (80015d8 <HAL_DMA_Init+0x684>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d03b      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a4d      	ldr	r2, [pc, #308]	@ (80015dc <HAL_DMA_Init+0x688>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d036      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a4b      	ldr	r2, [pc, #300]	@ (80015e0 <HAL_DMA_Init+0x68c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d031      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a4a      	ldr	r2, [pc, #296]	@ (80015e4 <HAL_DMA_Init+0x690>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d02c      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a48      	ldr	r2, [pc, #288]	@ (80015e8 <HAL_DMA_Init+0x694>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d027      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a47      	ldr	r2, [pc, #284]	@ (80015ec <HAL_DMA_Init+0x698>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d022      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a45      	ldr	r2, [pc, #276]	@ (80015f0 <HAL_DMA_Init+0x69c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d01d      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a44      	ldr	r2, [pc, #272]	@ (80015f4 <HAL_DMA_Init+0x6a0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d018      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a42      	ldr	r2, [pc, #264]	@ (80015f8 <HAL_DMA_Init+0x6a4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d013      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a41      	ldr	r2, [pc, #260]	@ (80015fc <HAL_DMA_Init+0x6a8>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d00e      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a3f      	ldr	r2, [pc, #252]	@ (8001600 <HAL_DMA_Init+0x6ac>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d009      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a3e      	ldr	r2, [pc, #248]	@ (8001604 <HAL_DMA_Init+0x6b0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d004      	beq.n	800151a <HAL_DMA_Init+0x5c6>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a3c      	ldr	r2, [pc, #240]	@ (8001608 <HAL_DMA_Init+0x6b4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d101      	bne.n	800151e <HAL_DMA_Init+0x5ca>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_DMA_Init+0x5cc>
 800151e:	2300      	movs	r3, #0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d032      	beq.n	800158a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f001 fcdf 	bl	8002ee8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b80      	cmp	r3, #128	@ 0x80
 8001530:	d102      	bne.n	8001538 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800154c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d010      	beq.n	8001578 <HAL_DMA_Init+0x624>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b08      	cmp	r3, #8
 800155c:	d80c      	bhi.n	8001578 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f001 fd5c 	bl	800301c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	e008      	b.n	800158a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	a7fdabf8 	.word	0xa7fdabf8
 80015a8:	cccccccd 	.word	0xcccccccd
 80015ac:	40020010 	.word	0x40020010
 80015b0:	40020028 	.word	0x40020028
 80015b4:	40020040 	.word	0x40020040
 80015b8:	40020058 	.word	0x40020058
 80015bc:	40020070 	.word	0x40020070
 80015c0:	40020088 	.word	0x40020088
 80015c4:	400200a0 	.word	0x400200a0
 80015c8:	400200b8 	.word	0x400200b8
 80015cc:	40020410 	.word	0x40020410
 80015d0:	40020428 	.word	0x40020428
 80015d4:	40020440 	.word	0x40020440
 80015d8:	40020458 	.word	0x40020458
 80015dc:	40020470 	.word	0x40020470
 80015e0:	40020488 	.word	0x40020488
 80015e4:	400204a0 	.word	0x400204a0
 80015e8:	400204b8 	.word	0x400204b8
 80015ec:	58025408 	.word	0x58025408
 80015f0:	5802541c 	.word	0x5802541c
 80015f4:	58025430 	.word	0x58025430
 80015f8:	58025444 	.word	0x58025444
 80015fc:	58025458 	.word	0x58025458
 8001600:	5802546c 	.word	0x5802546c
 8001604:	58025480 	.word	0x58025480
 8001608:	58025494 	.word	0x58025494

0800160c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e226      	b.n	8001a76 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_DMA_Start_IT+0x2a>
 8001632:	2302      	movs	r3, #2
 8001634:	e21f      	b.n	8001a76 <HAL_DMA_Start_IT+0x46a>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b01      	cmp	r3, #1
 8001648:	f040 820a 	bne.w	8001a60 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2202      	movs	r2, #2
 8001650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a68      	ldr	r2, [pc, #416]	@ (8001800 <HAL_DMA_Start_IT+0x1f4>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d04a      	beq.n	80016fa <HAL_DMA_Start_IT+0xee>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a66      	ldr	r2, [pc, #408]	@ (8001804 <HAL_DMA_Start_IT+0x1f8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d045      	beq.n	80016fa <HAL_DMA_Start_IT+0xee>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a65      	ldr	r2, [pc, #404]	@ (8001808 <HAL_DMA_Start_IT+0x1fc>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d040      	beq.n	80016fa <HAL_DMA_Start_IT+0xee>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a63      	ldr	r2, [pc, #396]	@ (800180c <HAL_DMA_Start_IT+0x200>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d03b      	beq.n	80016fa <HAL_DMA_Start_IT+0xee>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a62      	ldr	r2, [pc, #392]	@ (8001810 <HAL_DMA_Start_IT+0x204>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d036      	beq.n	80016fa <HAL_DMA_Start_IT+0xee>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a60      	ldr	r2, [pc, #384]	@ (8001814 <HAL_DMA_Start_IT+0x208>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d031      	beq.n	80016fa <HAL_DMA_Start_IT+0xee>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a5f      	ldr	r2, [pc, #380]	@ (8001818 <HAL_DMA_Start_IT+0x20c>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d02c      	beq.n	80016fa <HAL_DMA_Start_IT+0xee>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a5d      	ldr	r2, [pc, #372]	@ (800181c <HAL_DMA_Start_IT+0x210>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d027      	beq.n	80016fa <HAL_DMA_Start_IT+0xee>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a5c      	ldr	r2, [pc, #368]	@ (8001820 <HAL_DMA_Start_IT+0x214>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d022      	beq.n	80016fa <HAL_DMA_Start_IT+0xee>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a5a      	ldr	r2, [pc, #360]	@ (8001824 <HAL_DMA_Start_IT+0x218>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01d      	beq.n	80016fa <HAL_DMA_Start_IT+0xee>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a59      	ldr	r2, [pc, #356]	@ (8001828 <HAL_DMA_Start_IT+0x21c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d018      	beq.n	80016fa <HAL_DMA_Start_IT+0xee>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a57      	ldr	r2, [pc, #348]	@ (800182c <HAL_DMA_Start_IT+0x220>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d013      	beq.n	80016fa <HAL_DMA_Start_IT+0xee>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a56      	ldr	r2, [pc, #344]	@ (8001830 <HAL_DMA_Start_IT+0x224>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d00e      	beq.n	80016fa <HAL_DMA_Start_IT+0xee>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a54      	ldr	r2, [pc, #336]	@ (8001834 <HAL_DMA_Start_IT+0x228>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d009      	beq.n	80016fa <HAL_DMA_Start_IT+0xee>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a53      	ldr	r2, [pc, #332]	@ (8001838 <HAL_DMA_Start_IT+0x22c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d004      	beq.n	80016fa <HAL_DMA_Start_IT+0xee>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a51      	ldr	r2, [pc, #324]	@ (800183c <HAL_DMA_Start_IT+0x230>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d108      	bne.n	800170c <HAL_DMA_Start_IT+0x100>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0201 	bic.w	r2, r2, #1
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	e007      	b.n	800171c <HAL_DMA_Start_IT+0x110>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f001 f906 	bl	8002934 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a34      	ldr	r2, [pc, #208]	@ (8001800 <HAL_DMA_Start_IT+0x1f4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d04a      	beq.n	80017c8 <HAL_DMA_Start_IT+0x1bc>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a33      	ldr	r2, [pc, #204]	@ (8001804 <HAL_DMA_Start_IT+0x1f8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d045      	beq.n	80017c8 <HAL_DMA_Start_IT+0x1bc>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a31      	ldr	r2, [pc, #196]	@ (8001808 <HAL_DMA_Start_IT+0x1fc>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d040      	beq.n	80017c8 <HAL_DMA_Start_IT+0x1bc>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a30      	ldr	r2, [pc, #192]	@ (800180c <HAL_DMA_Start_IT+0x200>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d03b      	beq.n	80017c8 <HAL_DMA_Start_IT+0x1bc>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a2e      	ldr	r2, [pc, #184]	@ (8001810 <HAL_DMA_Start_IT+0x204>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d036      	beq.n	80017c8 <HAL_DMA_Start_IT+0x1bc>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a2d      	ldr	r2, [pc, #180]	@ (8001814 <HAL_DMA_Start_IT+0x208>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d031      	beq.n	80017c8 <HAL_DMA_Start_IT+0x1bc>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a2b      	ldr	r2, [pc, #172]	@ (8001818 <HAL_DMA_Start_IT+0x20c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d02c      	beq.n	80017c8 <HAL_DMA_Start_IT+0x1bc>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a2a      	ldr	r2, [pc, #168]	@ (800181c <HAL_DMA_Start_IT+0x210>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d027      	beq.n	80017c8 <HAL_DMA_Start_IT+0x1bc>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a28      	ldr	r2, [pc, #160]	@ (8001820 <HAL_DMA_Start_IT+0x214>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d022      	beq.n	80017c8 <HAL_DMA_Start_IT+0x1bc>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a27      	ldr	r2, [pc, #156]	@ (8001824 <HAL_DMA_Start_IT+0x218>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d01d      	beq.n	80017c8 <HAL_DMA_Start_IT+0x1bc>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a25      	ldr	r2, [pc, #148]	@ (8001828 <HAL_DMA_Start_IT+0x21c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d018      	beq.n	80017c8 <HAL_DMA_Start_IT+0x1bc>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a24      	ldr	r2, [pc, #144]	@ (800182c <HAL_DMA_Start_IT+0x220>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d013      	beq.n	80017c8 <HAL_DMA_Start_IT+0x1bc>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a22      	ldr	r2, [pc, #136]	@ (8001830 <HAL_DMA_Start_IT+0x224>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00e      	beq.n	80017c8 <HAL_DMA_Start_IT+0x1bc>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a21      	ldr	r2, [pc, #132]	@ (8001834 <HAL_DMA_Start_IT+0x228>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d009      	beq.n	80017c8 <HAL_DMA_Start_IT+0x1bc>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001838 <HAL_DMA_Start_IT+0x22c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d004      	beq.n	80017c8 <HAL_DMA_Start_IT+0x1bc>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a1e      	ldr	r2, [pc, #120]	@ (800183c <HAL_DMA_Start_IT+0x230>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d101      	bne.n	80017cc <HAL_DMA_Start_IT+0x1c0>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <HAL_DMA_Start_IT+0x1c2>
 80017cc:	2300      	movs	r3, #0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d036      	beq.n	8001840 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 021e 	bic.w	r2, r3, #30
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f042 0216 	orr.w	r2, r2, #22
 80017e4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d03e      	beq.n	800186c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f042 0208 	orr.w	r2, r2, #8
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	e035      	b.n	800186c <HAL_DMA_Start_IT+0x260>
 8001800:	40020010 	.word	0x40020010
 8001804:	40020028 	.word	0x40020028
 8001808:	40020040 	.word	0x40020040
 800180c:	40020058 	.word	0x40020058
 8001810:	40020070 	.word	0x40020070
 8001814:	40020088 	.word	0x40020088
 8001818:	400200a0 	.word	0x400200a0
 800181c:	400200b8 	.word	0x400200b8
 8001820:	40020410 	.word	0x40020410
 8001824:	40020428 	.word	0x40020428
 8001828:	40020440 	.word	0x40020440
 800182c:	40020458 	.word	0x40020458
 8001830:	40020470 	.word	0x40020470
 8001834:	40020488 	.word	0x40020488
 8001838:	400204a0 	.word	0x400204a0
 800183c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 020e 	bic.w	r2, r3, #14
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 020a 	orr.w	r2, r2, #10
 8001852:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	2b00      	cmp	r3, #0
 800185a:	d007      	beq.n	800186c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0204 	orr.w	r2, r2, #4
 800186a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a83      	ldr	r2, [pc, #524]	@ (8001a80 <HAL_DMA_Start_IT+0x474>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d072      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a82      	ldr	r2, [pc, #520]	@ (8001a84 <HAL_DMA_Start_IT+0x478>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d06d      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a80      	ldr	r2, [pc, #512]	@ (8001a88 <HAL_DMA_Start_IT+0x47c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d068      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a7f      	ldr	r2, [pc, #508]	@ (8001a8c <HAL_DMA_Start_IT+0x480>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d063      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a7d      	ldr	r2, [pc, #500]	@ (8001a90 <HAL_DMA_Start_IT+0x484>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d05e      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a7c      	ldr	r2, [pc, #496]	@ (8001a94 <HAL_DMA_Start_IT+0x488>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d059      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a7a      	ldr	r2, [pc, #488]	@ (8001a98 <HAL_DMA_Start_IT+0x48c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d054      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a79      	ldr	r2, [pc, #484]	@ (8001a9c <HAL_DMA_Start_IT+0x490>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d04f      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a77      	ldr	r2, [pc, #476]	@ (8001aa0 <HAL_DMA_Start_IT+0x494>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d04a      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a76      	ldr	r2, [pc, #472]	@ (8001aa4 <HAL_DMA_Start_IT+0x498>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d045      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a74      	ldr	r2, [pc, #464]	@ (8001aa8 <HAL_DMA_Start_IT+0x49c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d040      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a73      	ldr	r2, [pc, #460]	@ (8001aac <HAL_DMA_Start_IT+0x4a0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d03b      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a71      	ldr	r2, [pc, #452]	@ (8001ab0 <HAL_DMA_Start_IT+0x4a4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d036      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a70      	ldr	r2, [pc, #448]	@ (8001ab4 <HAL_DMA_Start_IT+0x4a8>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d031      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a6e      	ldr	r2, [pc, #440]	@ (8001ab8 <HAL_DMA_Start_IT+0x4ac>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d02c      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a6d      	ldr	r2, [pc, #436]	@ (8001abc <HAL_DMA_Start_IT+0x4b0>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d027      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a6b      	ldr	r2, [pc, #428]	@ (8001ac0 <HAL_DMA_Start_IT+0x4b4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d022      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a6a      	ldr	r2, [pc, #424]	@ (8001ac4 <HAL_DMA_Start_IT+0x4b8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d01d      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a68      	ldr	r2, [pc, #416]	@ (8001ac8 <HAL_DMA_Start_IT+0x4bc>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d018      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a67      	ldr	r2, [pc, #412]	@ (8001acc <HAL_DMA_Start_IT+0x4c0>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d013      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a65      	ldr	r2, [pc, #404]	@ (8001ad0 <HAL_DMA_Start_IT+0x4c4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00e      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a64      	ldr	r2, [pc, #400]	@ (8001ad4 <HAL_DMA_Start_IT+0x4c8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d009      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a62      	ldr	r2, [pc, #392]	@ (8001ad8 <HAL_DMA_Start_IT+0x4cc>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d004      	beq.n	800195c <HAL_DMA_Start_IT+0x350>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a61      	ldr	r2, [pc, #388]	@ (8001adc <HAL_DMA_Start_IT+0x4d0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d101      	bne.n	8001960 <HAL_DMA_Start_IT+0x354>
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_DMA_Start_IT+0x356>
 8001960:	2300      	movs	r3, #0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d01a      	beq.n	800199c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d007      	beq.n	8001984 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001982:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001988:	2b00      	cmp	r3, #0
 800198a:	d007      	beq.n	800199c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001996:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800199a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a37      	ldr	r2, [pc, #220]	@ (8001a80 <HAL_DMA_Start_IT+0x474>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d04a      	beq.n	8001a3c <HAL_DMA_Start_IT+0x430>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a36      	ldr	r2, [pc, #216]	@ (8001a84 <HAL_DMA_Start_IT+0x478>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d045      	beq.n	8001a3c <HAL_DMA_Start_IT+0x430>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a34      	ldr	r2, [pc, #208]	@ (8001a88 <HAL_DMA_Start_IT+0x47c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d040      	beq.n	8001a3c <HAL_DMA_Start_IT+0x430>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a33      	ldr	r2, [pc, #204]	@ (8001a8c <HAL_DMA_Start_IT+0x480>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d03b      	beq.n	8001a3c <HAL_DMA_Start_IT+0x430>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a31      	ldr	r2, [pc, #196]	@ (8001a90 <HAL_DMA_Start_IT+0x484>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d036      	beq.n	8001a3c <HAL_DMA_Start_IT+0x430>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a30      	ldr	r2, [pc, #192]	@ (8001a94 <HAL_DMA_Start_IT+0x488>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d031      	beq.n	8001a3c <HAL_DMA_Start_IT+0x430>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001a98 <HAL_DMA_Start_IT+0x48c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d02c      	beq.n	8001a3c <HAL_DMA_Start_IT+0x430>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a2d      	ldr	r2, [pc, #180]	@ (8001a9c <HAL_DMA_Start_IT+0x490>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d027      	beq.n	8001a3c <HAL_DMA_Start_IT+0x430>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a2b      	ldr	r2, [pc, #172]	@ (8001aa0 <HAL_DMA_Start_IT+0x494>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d022      	beq.n	8001a3c <HAL_DMA_Start_IT+0x430>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a2a      	ldr	r2, [pc, #168]	@ (8001aa4 <HAL_DMA_Start_IT+0x498>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d01d      	beq.n	8001a3c <HAL_DMA_Start_IT+0x430>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a28      	ldr	r2, [pc, #160]	@ (8001aa8 <HAL_DMA_Start_IT+0x49c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d018      	beq.n	8001a3c <HAL_DMA_Start_IT+0x430>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a27      	ldr	r2, [pc, #156]	@ (8001aac <HAL_DMA_Start_IT+0x4a0>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d013      	beq.n	8001a3c <HAL_DMA_Start_IT+0x430>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a25      	ldr	r2, [pc, #148]	@ (8001ab0 <HAL_DMA_Start_IT+0x4a4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00e      	beq.n	8001a3c <HAL_DMA_Start_IT+0x430>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a24      	ldr	r2, [pc, #144]	@ (8001ab4 <HAL_DMA_Start_IT+0x4a8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d009      	beq.n	8001a3c <HAL_DMA_Start_IT+0x430>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a22      	ldr	r2, [pc, #136]	@ (8001ab8 <HAL_DMA_Start_IT+0x4ac>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d004      	beq.n	8001a3c <HAL_DMA_Start_IT+0x430>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a21      	ldr	r2, [pc, #132]	@ (8001abc <HAL_DMA_Start_IT+0x4b0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d108      	bne.n	8001a4e <HAL_DMA_Start_IT+0x442>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	e012      	b.n	8001a74 <HAL_DMA_Start_IT+0x468>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0201 	orr.w	r2, r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e009      	b.n	8001a74 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a66:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40020010 	.word	0x40020010
 8001a84:	40020028 	.word	0x40020028
 8001a88:	40020040 	.word	0x40020040
 8001a8c:	40020058 	.word	0x40020058
 8001a90:	40020070 	.word	0x40020070
 8001a94:	40020088 	.word	0x40020088
 8001a98:	400200a0 	.word	0x400200a0
 8001a9c:	400200b8 	.word	0x400200b8
 8001aa0:	40020410 	.word	0x40020410
 8001aa4:	40020428 	.word	0x40020428
 8001aa8:	40020440 	.word	0x40020440
 8001aac:	40020458 	.word	0x40020458
 8001ab0:	40020470 	.word	0x40020470
 8001ab4:	40020488 	.word	0x40020488
 8001ab8:	400204a0 	.word	0x400204a0
 8001abc:	400204b8 	.word	0x400204b8
 8001ac0:	58025408 	.word	0x58025408
 8001ac4:	5802541c 	.word	0x5802541c
 8001ac8:	58025430 	.word	0x58025430
 8001acc:	58025444 	.word	0x58025444
 8001ad0:	58025458 	.word	0x58025458
 8001ad4:	5802546c 	.word	0x5802546c
 8001ad8:	58025480 	.word	0x58025480
 8001adc:	58025494 	.word	0x58025494

08001ae0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	@ 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001aec:	4b67      	ldr	r3, [pc, #412]	@ (8001c8c <HAL_DMA_IRQHandler+0x1ac>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a67      	ldr	r2, [pc, #412]	@ (8001c90 <HAL_DMA_IRQHandler+0x1b0>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0a9b      	lsrs	r3, r3, #10
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b04:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a5f      	ldr	r2, [pc, #380]	@ (8001c94 <HAL_DMA_IRQHandler+0x1b4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d04a      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xd2>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a5d      	ldr	r2, [pc, #372]	@ (8001c98 <HAL_DMA_IRQHandler+0x1b8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d045      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xd2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a5c      	ldr	r2, [pc, #368]	@ (8001c9c <HAL_DMA_IRQHandler+0x1bc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d040      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xd2>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a5a      	ldr	r2, [pc, #360]	@ (8001ca0 <HAL_DMA_IRQHandler+0x1c0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d03b      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xd2>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a59      	ldr	r2, [pc, #356]	@ (8001ca4 <HAL_DMA_IRQHandler+0x1c4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d036      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xd2>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a57      	ldr	r2, [pc, #348]	@ (8001ca8 <HAL_DMA_IRQHandler+0x1c8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d031      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xd2>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a56      	ldr	r2, [pc, #344]	@ (8001cac <HAL_DMA_IRQHandler+0x1cc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d02c      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xd2>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a54      	ldr	r2, [pc, #336]	@ (8001cb0 <HAL_DMA_IRQHandler+0x1d0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d027      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xd2>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a53      	ldr	r2, [pc, #332]	@ (8001cb4 <HAL_DMA_IRQHandler+0x1d4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d022      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xd2>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a51      	ldr	r2, [pc, #324]	@ (8001cb8 <HAL_DMA_IRQHandler+0x1d8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d01d      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xd2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a50      	ldr	r2, [pc, #320]	@ (8001cbc <HAL_DMA_IRQHandler+0x1dc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d018      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xd2>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a4e      	ldr	r2, [pc, #312]	@ (8001cc0 <HAL_DMA_IRQHandler+0x1e0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xd2>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a4d      	ldr	r2, [pc, #308]	@ (8001cc4 <HAL_DMA_IRQHandler+0x1e4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00e      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xd2>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a4b      	ldr	r2, [pc, #300]	@ (8001cc8 <HAL_DMA_IRQHandler+0x1e8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d009      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xd2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a4a      	ldr	r2, [pc, #296]	@ (8001ccc <HAL_DMA_IRQHandler+0x1ec>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d004      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xd2>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a48      	ldr	r2, [pc, #288]	@ (8001cd0 <HAL_DMA_IRQHandler+0x1f0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d101      	bne.n	8001bb6 <HAL_DMA_IRQHandler+0xd6>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_DMA_IRQHandler+0xd8>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 842b 	beq.w	8002414 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 80a2 	beq.w	8001d18 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a2e      	ldr	r2, [pc, #184]	@ (8001c94 <HAL_DMA_IRQHandler+0x1b4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d04a      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x194>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a2d      	ldr	r2, [pc, #180]	@ (8001c98 <HAL_DMA_IRQHandler+0x1b8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d045      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x194>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a2b      	ldr	r2, [pc, #172]	@ (8001c9c <HAL_DMA_IRQHandler+0x1bc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d040      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x194>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca0 <HAL_DMA_IRQHandler+0x1c0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d03b      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x194>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a28      	ldr	r2, [pc, #160]	@ (8001ca4 <HAL_DMA_IRQHandler+0x1c4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d036      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x194>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a27      	ldr	r2, [pc, #156]	@ (8001ca8 <HAL_DMA_IRQHandler+0x1c8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d031      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x194>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a25      	ldr	r2, [pc, #148]	@ (8001cac <HAL_DMA_IRQHandler+0x1cc>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d02c      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x194>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a24      	ldr	r2, [pc, #144]	@ (8001cb0 <HAL_DMA_IRQHandler+0x1d0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d027      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x194>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a22      	ldr	r2, [pc, #136]	@ (8001cb4 <HAL_DMA_IRQHandler+0x1d4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d022      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x194>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a21      	ldr	r2, [pc, #132]	@ (8001cb8 <HAL_DMA_IRQHandler+0x1d8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d01d      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x194>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cbc <HAL_DMA_IRQHandler+0x1dc>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d018      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x194>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc0 <HAL_DMA_IRQHandler+0x1e0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d013      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x194>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc4 <HAL_DMA_IRQHandler+0x1e4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00e      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x194>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc8 <HAL_DMA_IRQHandler+0x1e8>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d009      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x194>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a19      	ldr	r2, [pc, #100]	@ (8001ccc <HAL_DMA_IRQHandler+0x1ec>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d004      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x194>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a18      	ldr	r2, [pc, #96]	@ (8001cd0 <HAL_DMA_IRQHandler+0x1f0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d12f      	bne.n	8001cd4 <HAL_DMA_IRQHandler+0x1f4>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bf14      	ite	ne
 8001c82:	2301      	movne	r3, #1
 8001c84:	2300      	moveq	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	e02e      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x208>
 8001c8a:	bf00      	nop
 8001c8c:	24000000 	.word	0x24000000
 8001c90:	1b4e81b5 	.word	0x1b4e81b5
 8001c94:	40020010 	.word	0x40020010
 8001c98:	40020028 	.word	0x40020028
 8001c9c:	40020040 	.word	0x40020040
 8001ca0:	40020058 	.word	0x40020058
 8001ca4:	40020070 	.word	0x40020070
 8001ca8:	40020088 	.word	0x40020088
 8001cac:	400200a0 	.word	0x400200a0
 8001cb0:	400200b8 	.word	0x400200b8
 8001cb4:	40020410 	.word	0x40020410
 8001cb8:	40020428 	.word	0x40020428
 8001cbc:	40020440 	.word	0x40020440
 8001cc0:	40020458 	.word	0x40020458
 8001cc4:	40020470 	.word	0x40020470
 8001cc8:	40020488 	.word	0x40020488
 8001ccc:	400204a0 	.word	0x400204a0
 8001cd0:	400204b8 	.word	0x400204b8
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	bf14      	ite	ne
 8001ce2:	2301      	movne	r3, #1
 8001ce4:	2300      	moveq	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d015      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0204 	bic.w	r2, r2, #4
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	2208      	movs	r2, #8
 8001d06:	409a      	lsls	r2, r3
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d10:	f043 0201 	orr.w	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	fa22 f303 	lsr.w	r3, r2, r3
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d06e      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a69      	ldr	r2, [pc, #420]	@ (8001ed8 <HAL_DMA_IRQHandler+0x3f8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d04a      	beq.n	8001dce <HAL_DMA_IRQHandler+0x2ee>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a67      	ldr	r2, [pc, #412]	@ (8001edc <HAL_DMA_IRQHandler+0x3fc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d045      	beq.n	8001dce <HAL_DMA_IRQHandler+0x2ee>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a66      	ldr	r2, [pc, #408]	@ (8001ee0 <HAL_DMA_IRQHandler+0x400>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d040      	beq.n	8001dce <HAL_DMA_IRQHandler+0x2ee>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a64      	ldr	r2, [pc, #400]	@ (8001ee4 <HAL_DMA_IRQHandler+0x404>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d03b      	beq.n	8001dce <HAL_DMA_IRQHandler+0x2ee>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a63      	ldr	r2, [pc, #396]	@ (8001ee8 <HAL_DMA_IRQHandler+0x408>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d036      	beq.n	8001dce <HAL_DMA_IRQHandler+0x2ee>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a61      	ldr	r2, [pc, #388]	@ (8001eec <HAL_DMA_IRQHandler+0x40c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d031      	beq.n	8001dce <HAL_DMA_IRQHandler+0x2ee>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a60      	ldr	r2, [pc, #384]	@ (8001ef0 <HAL_DMA_IRQHandler+0x410>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d02c      	beq.n	8001dce <HAL_DMA_IRQHandler+0x2ee>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a5e      	ldr	r2, [pc, #376]	@ (8001ef4 <HAL_DMA_IRQHandler+0x414>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d027      	beq.n	8001dce <HAL_DMA_IRQHandler+0x2ee>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a5d      	ldr	r2, [pc, #372]	@ (8001ef8 <HAL_DMA_IRQHandler+0x418>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d022      	beq.n	8001dce <HAL_DMA_IRQHandler+0x2ee>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a5b      	ldr	r2, [pc, #364]	@ (8001efc <HAL_DMA_IRQHandler+0x41c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01d      	beq.n	8001dce <HAL_DMA_IRQHandler+0x2ee>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a5a      	ldr	r2, [pc, #360]	@ (8001f00 <HAL_DMA_IRQHandler+0x420>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d018      	beq.n	8001dce <HAL_DMA_IRQHandler+0x2ee>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a58      	ldr	r2, [pc, #352]	@ (8001f04 <HAL_DMA_IRQHandler+0x424>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <HAL_DMA_IRQHandler+0x2ee>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a57      	ldr	r2, [pc, #348]	@ (8001f08 <HAL_DMA_IRQHandler+0x428>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d00e      	beq.n	8001dce <HAL_DMA_IRQHandler+0x2ee>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a55      	ldr	r2, [pc, #340]	@ (8001f0c <HAL_DMA_IRQHandler+0x42c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d009      	beq.n	8001dce <HAL_DMA_IRQHandler+0x2ee>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a54      	ldr	r2, [pc, #336]	@ (8001f10 <HAL_DMA_IRQHandler+0x430>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d004      	beq.n	8001dce <HAL_DMA_IRQHandler+0x2ee>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	@ (8001f14 <HAL_DMA_IRQHandler+0x434>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10a      	bne.n	8001de4 <HAL_DMA_IRQHandler+0x304>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf14      	ite	ne
 8001ddc:	2301      	movne	r3, #1
 8001dde:	2300      	moveq	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e003      	b.n	8001dec <HAL_DMA_IRQHandler+0x30c>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2300      	movs	r3, #0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00d      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	2201      	movs	r2, #1
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e04:	f043 0202 	orr.w	r2, r3, #2
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e10:	f003 031f 	and.w	r3, r3, #31
 8001e14:	2204      	movs	r2, #4
 8001e16:	409a      	lsls	r2, r3
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 808f 	beq.w	8001f40 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a2c      	ldr	r2, [pc, #176]	@ (8001ed8 <HAL_DMA_IRQHandler+0x3f8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d04a      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x3e2>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a2a      	ldr	r2, [pc, #168]	@ (8001edc <HAL_DMA_IRQHandler+0x3fc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d045      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x3e2>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a29      	ldr	r2, [pc, #164]	@ (8001ee0 <HAL_DMA_IRQHandler+0x400>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d040      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x3e2>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a27      	ldr	r2, [pc, #156]	@ (8001ee4 <HAL_DMA_IRQHandler+0x404>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d03b      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x3e2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a26      	ldr	r2, [pc, #152]	@ (8001ee8 <HAL_DMA_IRQHandler+0x408>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d036      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x3e2>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a24      	ldr	r2, [pc, #144]	@ (8001eec <HAL_DMA_IRQHandler+0x40c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d031      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x3e2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a23      	ldr	r2, [pc, #140]	@ (8001ef0 <HAL_DMA_IRQHandler+0x410>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d02c      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x3e2>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a21      	ldr	r2, [pc, #132]	@ (8001ef4 <HAL_DMA_IRQHandler+0x414>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d027      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x3e2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a20      	ldr	r2, [pc, #128]	@ (8001ef8 <HAL_DMA_IRQHandler+0x418>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d022      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x3e2>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1e      	ldr	r2, [pc, #120]	@ (8001efc <HAL_DMA_IRQHandler+0x41c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d01d      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x3e2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001f00 <HAL_DMA_IRQHandler+0x420>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d018      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x3e2>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1b      	ldr	r2, [pc, #108]	@ (8001f04 <HAL_DMA_IRQHandler+0x424>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x3e2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8001f08 <HAL_DMA_IRQHandler+0x428>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00e      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x3e2>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a18      	ldr	r2, [pc, #96]	@ (8001f0c <HAL_DMA_IRQHandler+0x42c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d009      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x3e2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a17      	ldr	r2, [pc, #92]	@ (8001f10 <HAL_DMA_IRQHandler+0x430>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d004      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x3e2>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a15      	ldr	r2, [pc, #84]	@ (8001f14 <HAL_DMA_IRQHandler+0x434>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d12a      	bne.n	8001f18 <HAL_DMA_IRQHandler+0x438>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bf14      	ite	ne
 8001ed0:	2301      	movne	r3, #1
 8001ed2:	2300      	moveq	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	e023      	b.n	8001f20 <HAL_DMA_IRQHandler+0x440>
 8001ed8:	40020010 	.word	0x40020010
 8001edc:	40020028 	.word	0x40020028
 8001ee0:	40020040 	.word	0x40020040
 8001ee4:	40020058 	.word	0x40020058
 8001ee8:	40020070 	.word	0x40020070
 8001eec:	40020088 	.word	0x40020088
 8001ef0:	400200a0 	.word	0x400200a0
 8001ef4:	400200b8 	.word	0x400200b8
 8001ef8:	40020410 	.word	0x40020410
 8001efc:	40020428 	.word	0x40020428
 8001f00:	40020440 	.word	0x40020440
 8001f04:	40020458 	.word	0x40020458
 8001f08:	40020470 	.word	0x40020470
 8001f0c:	40020488 	.word	0x40020488
 8001f10:	400204a0 	.word	0x400204a0
 8001f14:	400204b8 	.word	0x400204b8
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00d      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f38:	f043 0204 	orr.w	r2, r3, #4
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	2210      	movs	r2, #16
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80a6 	beq.w	80020a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a85      	ldr	r2, [pc, #532]	@ (8002170 <HAL_DMA_IRQHandler+0x690>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d04a      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x516>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a83      	ldr	r2, [pc, #524]	@ (8002174 <HAL_DMA_IRQHandler+0x694>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d045      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x516>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a82      	ldr	r2, [pc, #520]	@ (8002178 <HAL_DMA_IRQHandler+0x698>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d040      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x516>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a80      	ldr	r2, [pc, #512]	@ (800217c <HAL_DMA_IRQHandler+0x69c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d03b      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x516>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a7f      	ldr	r2, [pc, #508]	@ (8002180 <HAL_DMA_IRQHandler+0x6a0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d036      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x516>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a7d      	ldr	r2, [pc, #500]	@ (8002184 <HAL_DMA_IRQHandler+0x6a4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d031      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x516>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a7c      	ldr	r2, [pc, #496]	@ (8002188 <HAL_DMA_IRQHandler+0x6a8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d02c      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x516>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a7a      	ldr	r2, [pc, #488]	@ (800218c <HAL_DMA_IRQHandler+0x6ac>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d027      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x516>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a79      	ldr	r2, [pc, #484]	@ (8002190 <HAL_DMA_IRQHandler+0x6b0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d022      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x516>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a77      	ldr	r2, [pc, #476]	@ (8002194 <HAL_DMA_IRQHandler+0x6b4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01d      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x516>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a76      	ldr	r2, [pc, #472]	@ (8002198 <HAL_DMA_IRQHandler+0x6b8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d018      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x516>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a74      	ldr	r2, [pc, #464]	@ (800219c <HAL_DMA_IRQHandler+0x6bc>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x516>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a73      	ldr	r2, [pc, #460]	@ (80021a0 <HAL_DMA_IRQHandler+0x6c0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00e      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x516>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a71      	ldr	r2, [pc, #452]	@ (80021a4 <HAL_DMA_IRQHandler+0x6c4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d009      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x516>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a70      	ldr	r2, [pc, #448]	@ (80021a8 <HAL_DMA_IRQHandler+0x6c8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d004      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x516>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a6e      	ldr	r2, [pc, #440]	@ (80021ac <HAL_DMA_IRQHandler+0x6cc>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d10a      	bne.n	800200c <HAL_DMA_IRQHandler+0x52c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf14      	ite	ne
 8002004:	2301      	movne	r3, #1
 8002006:	2300      	moveq	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	e009      	b.n	8002020 <HAL_DMA_IRQHandler+0x540>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b00      	cmp	r3, #0
 8002018:	bf14      	ite	ne
 800201a:	2301      	movne	r3, #1
 800201c:	2300      	moveq	r3, #0
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d03e      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	2210      	movs	r2, #16
 800202e:	409a      	lsls	r2, r3
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d018      	beq.n	8002074 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d108      	bne.n	8002062 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	2b00      	cmp	r3, #0
 8002056:	d024      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
 8002060:	e01f      	b.n	80020a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002066:	2b00      	cmp	r3, #0
 8002068:	d01b      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
 8002072:	e016      	b.n	80020a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d107      	bne.n	8002092 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0208 	bic.w	r2, r2, #8
 8002090:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	2220      	movs	r2, #32
 80020ac:	409a      	lsls	r2, r3
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8110 	beq.w	80022d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002170 <HAL_DMA_IRQHandler+0x690>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d04a      	beq.n	8002158 <HAL_DMA_IRQHandler+0x678>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a2b      	ldr	r2, [pc, #172]	@ (8002174 <HAL_DMA_IRQHandler+0x694>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d045      	beq.n	8002158 <HAL_DMA_IRQHandler+0x678>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a29      	ldr	r2, [pc, #164]	@ (8002178 <HAL_DMA_IRQHandler+0x698>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d040      	beq.n	8002158 <HAL_DMA_IRQHandler+0x678>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a28      	ldr	r2, [pc, #160]	@ (800217c <HAL_DMA_IRQHandler+0x69c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d03b      	beq.n	8002158 <HAL_DMA_IRQHandler+0x678>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a26      	ldr	r2, [pc, #152]	@ (8002180 <HAL_DMA_IRQHandler+0x6a0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d036      	beq.n	8002158 <HAL_DMA_IRQHandler+0x678>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a25      	ldr	r2, [pc, #148]	@ (8002184 <HAL_DMA_IRQHandler+0x6a4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d031      	beq.n	8002158 <HAL_DMA_IRQHandler+0x678>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a23      	ldr	r2, [pc, #140]	@ (8002188 <HAL_DMA_IRQHandler+0x6a8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d02c      	beq.n	8002158 <HAL_DMA_IRQHandler+0x678>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a22      	ldr	r2, [pc, #136]	@ (800218c <HAL_DMA_IRQHandler+0x6ac>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d027      	beq.n	8002158 <HAL_DMA_IRQHandler+0x678>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a20      	ldr	r2, [pc, #128]	@ (8002190 <HAL_DMA_IRQHandler+0x6b0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d022      	beq.n	8002158 <HAL_DMA_IRQHandler+0x678>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1f      	ldr	r2, [pc, #124]	@ (8002194 <HAL_DMA_IRQHandler+0x6b4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d01d      	beq.n	8002158 <HAL_DMA_IRQHandler+0x678>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1d      	ldr	r2, [pc, #116]	@ (8002198 <HAL_DMA_IRQHandler+0x6b8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d018      	beq.n	8002158 <HAL_DMA_IRQHandler+0x678>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a1c      	ldr	r2, [pc, #112]	@ (800219c <HAL_DMA_IRQHandler+0x6bc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d013      	beq.n	8002158 <HAL_DMA_IRQHandler+0x678>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a1a      	ldr	r2, [pc, #104]	@ (80021a0 <HAL_DMA_IRQHandler+0x6c0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00e      	beq.n	8002158 <HAL_DMA_IRQHandler+0x678>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a19      	ldr	r2, [pc, #100]	@ (80021a4 <HAL_DMA_IRQHandler+0x6c4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d009      	beq.n	8002158 <HAL_DMA_IRQHandler+0x678>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a17      	ldr	r2, [pc, #92]	@ (80021a8 <HAL_DMA_IRQHandler+0x6c8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d004      	beq.n	8002158 <HAL_DMA_IRQHandler+0x678>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a16      	ldr	r2, [pc, #88]	@ (80021ac <HAL_DMA_IRQHandler+0x6cc>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d12b      	bne.n	80021b0 <HAL_DMA_IRQHandler+0x6d0>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b00      	cmp	r3, #0
 8002164:	bf14      	ite	ne
 8002166:	2301      	movne	r3, #1
 8002168:	2300      	moveq	r3, #0
 800216a:	b2db      	uxtb	r3, r3
 800216c:	e02a      	b.n	80021c4 <HAL_DMA_IRQHandler+0x6e4>
 800216e:	bf00      	nop
 8002170:	40020010 	.word	0x40020010
 8002174:	40020028 	.word	0x40020028
 8002178:	40020040 	.word	0x40020040
 800217c:	40020058 	.word	0x40020058
 8002180:	40020070 	.word	0x40020070
 8002184:	40020088 	.word	0x40020088
 8002188:	400200a0 	.word	0x400200a0
 800218c:	400200b8 	.word	0x400200b8
 8002190:	40020410 	.word	0x40020410
 8002194:	40020428 	.word	0x40020428
 8002198:	40020440 	.word	0x40020440
 800219c:	40020458 	.word	0x40020458
 80021a0:	40020470 	.word	0x40020470
 80021a4:	40020488 	.word	0x40020488
 80021a8:	400204a0 	.word	0x400204a0
 80021ac:	400204b8 	.word	0x400204b8
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	bf14      	ite	ne
 80021be:	2301      	movne	r3, #1
 80021c0:	2300      	moveq	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8087 	beq.w	80022d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ce:	f003 031f 	and.w	r3, r3, #31
 80021d2:	2220      	movs	r2, #32
 80021d4:	409a      	lsls	r2, r3
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d139      	bne.n	800225a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0216 	bic.w	r2, r2, #22
 80021f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002204:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	2b00      	cmp	r3, #0
 800220c:	d103      	bne.n	8002216 <HAL_DMA_IRQHandler+0x736>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0208 	bic.w	r2, r2, #8
 8002224:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	223f      	movs	r2, #63	@ 0x3f
 8002230:	409a      	lsls	r2, r3
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 834a 	beq.w	80028e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	4798      	blx	r3
          }
          return;
 8002258:	e344      	b.n	80028e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d018      	beq.n	800229a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d108      	bne.n	8002288 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	2b00      	cmp	r3, #0
 800227c:	d02c      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
 8002286:	e027      	b.n	80022d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800228c:	2b00      	cmp	r3, #0
 800228e:	d023      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	4798      	blx	r3
 8002298:	e01e      	b.n	80022d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10f      	bne.n	80022c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0210 	bic.w	r2, r2, #16
 80022b6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 8306 	beq.w	80028ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 8088 	beq.w	8002400 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2204      	movs	r2, #4
 80022f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a7a      	ldr	r2, [pc, #488]	@ (80024e8 <HAL_DMA_IRQHandler+0xa08>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d04a      	beq.n	8002398 <HAL_DMA_IRQHandler+0x8b8>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a79      	ldr	r2, [pc, #484]	@ (80024ec <HAL_DMA_IRQHandler+0xa0c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d045      	beq.n	8002398 <HAL_DMA_IRQHandler+0x8b8>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a77      	ldr	r2, [pc, #476]	@ (80024f0 <HAL_DMA_IRQHandler+0xa10>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d040      	beq.n	8002398 <HAL_DMA_IRQHandler+0x8b8>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a76      	ldr	r2, [pc, #472]	@ (80024f4 <HAL_DMA_IRQHandler+0xa14>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d03b      	beq.n	8002398 <HAL_DMA_IRQHandler+0x8b8>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a74      	ldr	r2, [pc, #464]	@ (80024f8 <HAL_DMA_IRQHandler+0xa18>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d036      	beq.n	8002398 <HAL_DMA_IRQHandler+0x8b8>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a73      	ldr	r2, [pc, #460]	@ (80024fc <HAL_DMA_IRQHandler+0xa1c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d031      	beq.n	8002398 <HAL_DMA_IRQHandler+0x8b8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a71      	ldr	r2, [pc, #452]	@ (8002500 <HAL_DMA_IRQHandler+0xa20>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d02c      	beq.n	8002398 <HAL_DMA_IRQHandler+0x8b8>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a70      	ldr	r2, [pc, #448]	@ (8002504 <HAL_DMA_IRQHandler+0xa24>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d027      	beq.n	8002398 <HAL_DMA_IRQHandler+0x8b8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a6e      	ldr	r2, [pc, #440]	@ (8002508 <HAL_DMA_IRQHandler+0xa28>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d022      	beq.n	8002398 <HAL_DMA_IRQHandler+0x8b8>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a6d      	ldr	r2, [pc, #436]	@ (800250c <HAL_DMA_IRQHandler+0xa2c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d01d      	beq.n	8002398 <HAL_DMA_IRQHandler+0x8b8>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a6b      	ldr	r2, [pc, #428]	@ (8002510 <HAL_DMA_IRQHandler+0xa30>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d018      	beq.n	8002398 <HAL_DMA_IRQHandler+0x8b8>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a6a      	ldr	r2, [pc, #424]	@ (8002514 <HAL_DMA_IRQHandler+0xa34>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d013      	beq.n	8002398 <HAL_DMA_IRQHandler+0x8b8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a68      	ldr	r2, [pc, #416]	@ (8002518 <HAL_DMA_IRQHandler+0xa38>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00e      	beq.n	8002398 <HAL_DMA_IRQHandler+0x8b8>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a67      	ldr	r2, [pc, #412]	@ (800251c <HAL_DMA_IRQHandler+0xa3c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d009      	beq.n	8002398 <HAL_DMA_IRQHandler+0x8b8>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a65      	ldr	r2, [pc, #404]	@ (8002520 <HAL_DMA_IRQHandler+0xa40>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d004      	beq.n	8002398 <HAL_DMA_IRQHandler+0x8b8>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a64      	ldr	r2, [pc, #400]	@ (8002524 <HAL_DMA_IRQHandler+0xa44>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d108      	bne.n	80023aa <HAL_DMA_IRQHandler+0x8ca>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	e007      	b.n	80023ba <HAL_DMA_IRQHandler+0x8da>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0201 	bic.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	3301      	adds	r3, #1
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d307      	bcc.n	80023d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f2      	bne.n	80023ba <HAL_DMA_IRQHandler+0x8da>
 80023d4:	e000      	b.n	80023d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80023d6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d004      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2203      	movs	r2, #3
 80023ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80023ee:	e003      	b.n	80023f8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 8272 	beq.w	80028ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	4798      	blx	r3
 8002412:	e26c      	b.n	80028ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a43      	ldr	r2, [pc, #268]	@ (8002528 <HAL_DMA_IRQHandler+0xa48>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d022      	beq.n	8002464 <HAL_DMA_IRQHandler+0x984>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a42      	ldr	r2, [pc, #264]	@ (800252c <HAL_DMA_IRQHandler+0xa4c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d01d      	beq.n	8002464 <HAL_DMA_IRQHandler+0x984>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a40      	ldr	r2, [pc, #256]	@ (8002530 <HAL_DMA_IRQHandler+0xa50>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d018      	beq.n	8002464 <HAL_DMA_IRQHandler+0x984>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a3f      	ldr	r2, [pc, #252]	@ (8002534 <HAL_DMA_IRQHandler+0xa54>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d013      	beq.n	8002464 <HAL_DMA_IRQHandler+0x984>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a3d      	ldr	r2, [pc, #244]	@ (8002538 <HAL_DMA_IRQHandler+0xa58>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00e      	beq.n	8002464 <HAL_DMA_IRQHandler+0x984>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a3c      	ldr	r2, [pc, #240]	@ (800253c <HAL_DMA_IRQHandler+0xa5c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d009      	beq.n	8002464 <HAL_DMA_IRQHandler+0x984>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a3a      	ldr	r2, [pc, #232]	@ (8002540 <HAL_DMA_IRQHandler+0xa60>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d004      	beq.n	8002464 <HAL_DMA_IRQHandler+0x984>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a39      	ldr	r2, [pc, #228]	@ (8002544 <HAL_DMA_IRQHandler+0xa64>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d101      	bne.n	8002468 <HAL_DMA_IRQHandler+0x988>
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <HAL_DMA_IRQHandler+0x98a>
 8002468:	2300      	movs	r3, #0
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 823f 	beq.w	80028ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	2204      	movs	r2, #4
 8002482:	409a      	lsls	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80cd 	beq.w	8002628 <HAL_DMA_IRQHandler+0xb48>
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80c7 	beq.w	8002628 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249e:	f003 031f 	and.w	r3, r3, #31
 80024a2:	2204      	movs	r2, #4
 80024a4:	409a      	lsls	r2, r3
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d049      	beq.n	8002548 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 8210 	beq.w	80028e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024d0:	e20a      	b.n	80028e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8206 	beq.w	80028e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024e4:	e200      	b.n	80028e8 <HAL_DMA_IRQHandler+0xe08>
 80024e6:	bf00      	nop
 80024e8:	40020010 	.word	0x40020010
 80024ec:	40020028 	.word	0x40020028
 80024f0:	40020040 	.word	0x40020040
 80024f4:	40020058 	.word	0x40020058
 80024f8:	40020070 	.word	0x40020070
 80024fc:	40020088 	.word	0x40020088
 8002500:	400200a0 	.word	0x400200a0
 8002504:	400200b8 	.word	0x400200b8
 8002508:	40020410 	.word	0x40020410
 800250c:	40020428 	.word	0x40020428
 8002510:	40020440 	.word	0x40020440
 8002514:	40020458 	.word	0x40020458
 8002518:	40020470 	.word	0x40020470
 800251c:	40020488 	.word	0x40020488
 8002520:	400204a0 	.word	0x400204a0
 8002524:	400204b8 	.word	0x400204b8
 8002528:	58025408 	.word	0x58025408
 800252c:	5802541c 	.word	0x5802541c
 8002530:	58025430 	.word	0x58025430
 8002534:	58025444 	.word	0x58025444
 8002538:	58025458 	.word	0x58025458
 800253c:	5802546c 	.word	0x5802546c
 8002540:	58025480 	.word	0x58025480
 8002544:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	d160      	bne.n	8002614 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a7f      	ldr	r2, [pc, #508]	@ (8002754 <HAL_DMA_IRQHandler+0xc74>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d04a      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xb12>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a7d      	ldr	r2, [pc, #500]	@ (8002758 <HAL_DMA_IRQHandler+0xc78>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d045      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xb12>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a7c      	ldr	r2, [pc, #496]	@ (800275c <HAL_DMA_IRQHandler+0xc7c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d040      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xb12>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a7a      	ldr	r2, [pc, #488]	@ (8002760 <HAL_DMA_IRQHandler+0xc80>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d03b      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xb12>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a79      	ldr	r2, [pc, #484]	@ (8002764 <HAL_DMA_IRQHandler+0xc84>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d036      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xb12>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a77      	ldr	r2, [pc, #476]	@ (8002768 <HAL_DMA_IRQHandler+0xc88>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d031      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xb12>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a76      	ldr	r2, [pc, #472]	@ (800276c <HAL_DMA_IRQHandler+0xc8c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d02c      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xb12>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a74      	ldr	r2, [pc, #464]	@ (8002770 <HAL_DMA_IRQHandler+0xc90>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d027      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xb12>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a73      	ldr	r2, [pc, #460]	@ (8002774 <HAL_DMA_IRQHandler+0xc94>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d022      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xb12>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a71      	ldr	r2, [pc, #452]	@ (8002778 <HAL_DMA_IRQHandler+0xc98>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d01d      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xb12>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a70      	ldr	r2, [pc, #448]	@ (800277c <HAL_DMA_IRQHandler+0xc9c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d018      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xb12>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a6e      	ldr	r2, [pc, #440]	@ (8002780 <HAL_DMA_IRQHandler+0xca0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xb12>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a6d      	ldr	r2, [pc, #436]	@ (8002784 <HAL_DMA_IRQHandler+0xca4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00e      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xb12>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002788 <HAL_DMA_IRQHandler+0xca8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d009      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xb12>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a6a      	ldr	r2, [pc, #424]	@ (800278c <HAL_DMA_IRQHandler+0xcac>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d004      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xb12>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a68      	ldr	r2, [pc, #416]	@ (8002790 <HAL_DMA_IRQHandler+0xcb0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d108      	bne.n	8002604 <HAL_DMA_IRQHandler+0xb24>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0208 	bic.w	r2, r2, #8
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e007      	b.n	8002614 <HAL_DMA_IRQHandler+0xb34>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0204 	bic.w	r2, r2, #4
 8002612:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 8165 	beq.w	80028e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002626:	e15f      	b.n	80028e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	2202      	movs	r2, #2
 8002632:	409a      	lsls	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80c5 	beq.w	80027c8 <HAL_DMA_IRQHandler+0xce8>
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80bf 	beq.w	80027c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	2202      	movs	r2, #2
 8002654:	409a      	lsls	r2, r3
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d018      	beq.n	8002696 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 813a 	beq.w	80028ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002680:	e134      	b.n	80028ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 8130 	beq.w	80028ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002694:	e12a      	b.n	80028ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	f040 8089 	bne.w	80027b4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002754 <HAL_DMA_IRQHandler+0xc74>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d04a      	beq.n	8002742 <HAL_DMA_IRQHandler+0xc62>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a29      	ldr	r2, [pc, #164]	@ (8002758 <HAL_DMA_IRQHandler+0xc78>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d045      	beq.n	8002742 <HAL_DMA_IRQHandler+0xc62>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a28      	ldr	r2, [pc, #160]	@ (800275c <HAL_DMA_IRQHandler+0xc7c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d040      	beq.n	8002742 <HAL_DMA_IRQHandler+0xc62>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a26      	ldr	r2, [pc, #152]	@ (8002760 <HAL_DMA_IRQHandler+0xc80>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d03b      	beq.n	8002742 <HAL_DMA_IRQHandler+0xc62>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a25      	ldr	r2, [pc, #148]	@ (8002764 <HAL_DMA_IRQHandler+0xc84>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d036      	beq.n	8002742 <HAL_DMA_IRQHandler+0xc62>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a23      	ldr	r2, [pc, #140]	@ (8002768 <HAL_DMA_IRQHandler+0xc88>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d031      	beq.n	8002742 <HAL_DMA_IRQHandler+0xc62>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a22      	ldr	r2, [pc, #136]	@ (800276c <HAL_DMA_IRQHandler+0xc8c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d02c      	beq.n	8002742 <HAL_DMA_IRQHandler+0xc62>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a20      	ldr	r2, [pc, #128]	@ (8002770 <HAL_DMA_IRQHandler+0xc90>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d027      	beq.n	8002742 <HAL_DMA_IRQHandler+0xc62>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002774 <HAL_DMA_IRQHandler+0xc94>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d022      	beq.n	8002742 <HAL_DMA_IRQHandler+0xc62>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a1d      	ldr	r2, [pc, #116]	@ (8002778 <HAL_DMA_IRQHandler+0xc98>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d01d      	beq.n	8002742 <HAL_DMA_IRQHandler+0xc62>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1c      	ldr	r2, [pc, #112]	@ (800277c <HAL_DMA_IRQHandler+0xc9c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d018      	beq.n	8002742 <HAL_DMA_IRQHandler+0xc62>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a1a      	ldr	r2, [pc, #104]	@ (8002780 <HAL_DMA_IRQHandler+0xca0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <HAL_DMA_IRQHandler+0xc62>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a19      	ldr	r2, [pc, #100]	@ (8002784 <HAL_DMA_IRQHandler+0xca4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d00e      	beq.n	8002742 <HAL_DMA_IRQHandler+0xc62>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a17      	ldr	r2, [pc, #92]	@ (8002788 <HAL_DMA_IRQHandler+0xca8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d009      	beq.n	8002742 <HAL_DMA_IRQHandler+0xc62>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a16      	ldr	r2, [pc, #88]	@ (800278c <HAL_DMA_IRQHandler+0xcac>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d004      	beq.n	8002742 <HAL_DMA_IRQHandler+0xc62>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a14      	ldr	r2, [pc, #80]	@ (8002790 <HAL_DMA_IRQHandler+0xcb0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d128      	bne.n	8002794 <HAL_DMA_IRQHandler+0xcb4>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0214 	bic.w	r2, r2, #20
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	e027      	b.n	80027a4 <HAL_DMA_IRQHandler+0xcc4>
 8002754:	40020010 	.word	0x40020010
 8002758:	40020028 	.word	0x40020028
 800275c:	40020040 	.word	0x40020040
 8002760:	40020058 	.word	0x40020058
 8002764:	40020070 	.word	0x40020070
 8002768:	40020088 	.word	0x40020088
 800276c:	400200a0 	.word	0x400200a0
 8002770:	400200b8 	.word	0x400200b8
 8002774:	40020410 	.word	0x40020410
 8002778:	40020428 	.word	0x40020428
 800277c:	40020440 	.word	0x40020440
 8002780:	40020458 	.word	0x40020458
 8002784:	40020470 	.word	0x40020470
 8002788:	40020488 	.word	0x40020488
 800278c:	400204a0 	.word	0x400204a0
 8002790:	400204b8 	.word	0x400204b8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 020a 	bic.w	r2, r2, #10
 80027a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8097 	beq.w	80028ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027c6:	e091      	b.n	80028ec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	2208      	movs	r2, #8
 80027d2:	409a      	lsls	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8088 	beq.w	80028ee <HAL_DMA_IRQHandler+0xe0e>
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8082 	beq.w	80028ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a41      	ldr	r2, [pc, #260]	@ (80028f4 <HAL_DMA_IRQHandler+0xe14>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d04a      	beq.n	800288a <HAL_DMA_IRQHandler+0xdaa>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a3f      	ldr	r2, [pc, #252]	@ (80028f8 <HAL_DMA_IRQHandler+0xe18>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d045      	beq.n	800288a <HAL_DMA_IRQHandler+0xdaa>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a3e      	ldr	r2, [pc, #248]	@ (80028fc <HAL_DMA_IRQHandler+0xe1c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d040      	beq.n	800288a <HAL_DMA_IRQHandler+0xdaa>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a3c      	ldr	r2, [pc, #240]	@ (8002900 <HAL_DMA_IRQHandler+0xe20>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d03b      	beq.n	800288a <HAL_DMA_IRQHandler+0xdaa>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a3b      	ldr	r2, [pc, #236]	@ (8002904 <HAL_DMA_IRQHandler+0xe24>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d036      	beq.n	800288a <HAL_DMA_IRQHandler+0xdaa>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a39      	ldr	r2, [pc, #228]	@ (8002908 <HAL_DMA_IRQHandler+0xe28>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d031      	beq.n	800288a <HAL_DMA_IRQHandler+0xdaa>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a38      	ldr	r2, [pc, #224]	@ (800290c <HAL_DMA_IRQHandler+0xe2c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d02c      	beq.n	800288a <HAL_DMA_IRQHandler+0xdaa>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a36      	ldr	r2, [pc, #216]	@ (8002910 <HAL_DMA_IRQHandler+0xe30>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d027      	beq.n	800288a <HAL_DMA_IRQHandler+0xdaa>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a35      	ldr	r2, [pc, #212]	@ (8002914 <HAL_DMA_IRQHandler+0xe34>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d022      	beq.n	800288a <HAL_DMA_IRQHandler+0xdaa>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a33      	ldr	r2, [pc, #204]	@ (8002918 <HAL_DMA_IRQHandler+0xe38>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d01d      	beq.n	800288a <HAL_DMA_IRQHandler+0xdaa>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a32      	ldr	r2, [pc, #200]	@ (800291c <HAL_DMA_IRQHandler+0xe3c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d018      	beq.n	800288a <HAL_DMA_IRQHandler+0xdaa>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a30      	ldr	r2, [pc, #192]	@ (8002920 <HAL_DMA_IRQHandler+0xe40>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_DMA_IRQHandler+0xdaa>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a2f      	ldr	r2, [pc, #188]	@ (8002924 <HAL_DMA_IRQHandler+0xe44>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00e      	beq.n	800288a <HAL_DMA_IRQHandler+0xdaa>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a2d      	ldr	r2, [pc, #180]	@ (8002928 <HAL_DMA_IRQHandler+0xe48>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d009      	beq.n	800288a <HAL_DMA_IRQHandler+0xdaa>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a2c      	ldr	r2, [pc, #176]	@ (800292c <HAL_DMA_IRQHandler+0xe4c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d004      	beq.n	800288a <HAL_DMA_IRQHandler+0xdaa>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a2a      	ldr	r2, [pc, #168]	@ (8002930 <HAL_DMA_IRQHandler+0xe50>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d108      	bne.n	800289c <HAL_DMA_IRQHandler+0xdbc>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 021c 	bic.w	r2, r2, #28
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	e007      	b.n	80028ac <HAL_DMA_IRQHandler+0xdcc>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 020e 	bic.w	r2, r2, #14
 80028aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	2201      	movs	r2, #1
 80028b6:	409a      	lsls	r2, r3
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	4798      	blx	r3
 80028e2:	e004      	b.n	80028ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80028e4:	bf00      	nop
 80028e6:	e002      	b.n	80028ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028e8:	bf00      	nop
 80028ea:	e000      	b.n	80028ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80028ee:	3728      	adds	r7, #40	@ 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40020010 	.word	0x40020010
 80028f8:	40020028 	.word	0x40020028
 80028fc:	40020040 	.word	0x40020040
 8002900:	40020058 	.word	0x40020058
 8002904:	40020070 	.word	0x40020070
 8002908:	40020088 	.word	0x40020088
 800290c:	400200a0 	.word	0x400200a0
 8002910:	400200b8 	.word	0x400200b8
 8002914:	40020410 	.word	0x40020410
 8002918:	40020428 	.word	0x40020428
 800291c:	40020440 	.word	0x40020440
 8002920:	40020458 	.word	0x40020458
 8002924:	40020470 	.word	0x40020470
 8002928:	40020488 	.word	0x40020488
 800292c:	400204a0 	.word	0x400204a0
 8002930:	400204b8 	.word	0x400204b8

08002934 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002946:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a7f      	ldr	r2, [pc, #508]	@ (8002b50 <DMA_SetConfig+0x21c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d072      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a7d      	ldr	r2, [pc, #500]	@ (8002b54 <DMA_SetConfig+0x220>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d06d      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a7c      	ldr	r2, [pc, #496]	@ (8002b58 <DMA_SetConfig+0x224>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d068      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a7a      	ldr	r2, [pc, #488]	@ (8002b5c <DMA_SetConfig+0x228>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d063      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a79      	ldr	r2, [pc, #484]	@ (8002b60 <DMA_SetConfig+0x22c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d05e      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a77      	ldr	r2, [pc, #476]	@ (8002b64 <DMA_SetConfig+0x230>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d059      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a76      	ldr	r2, [pc, #472]	@ (8002b68 <DMA_SetConfig+0x234>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d054      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a74      	ldr	r2, [pc, #464]	@ (8002b6c <DMA_SetConfig+0x238>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d04f      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a73      	ldr	r2, [pc, #460]	@ (8002b70 <DMA_SetConfig+0x23c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d04a      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a71      	ldr	r2, [pc, #452]	@ (8002b74 <DMA_SetConfig+0x240>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d045      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a70      	ldr	r2, [pc, #448]	@ (8002b78 <DMA_SetConfig+0x244>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d040      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a6e      	ldr	r2, [pc, #440]	@ (8002b7c <DMA_SetConfig+0x248>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d03b      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a6d      	ldr	r2, [pc, #436]	@ (8002b80 <DMA_SetConfig+0x24c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d036      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a6b      	ldr	r2, [pc, #428]	@ (8002b84 <DMA_SetConfig+0x250>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d031      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a6a      	ldr	r2, [pc, #424]	@ (8002b88 <DMA_SetConfig+0x254>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d02c      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a68      	ldr	r2, [pc, #416]	@ (8002b8c <DMA_SetConfig+0x258>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d027      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a67      	ldr	r2, [pc, #412]	@ (8002b90 <DMA_SetConfig+0x25c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d022      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a65      	ldr	r2, [pc, #404]	@ (8002b94 <DMA_SetConfig+0x260>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d01d      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a64      	ldr	r2, [pc, #400]	@ (8002b98 <DMA_SetConfig+0x264>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d018      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a62      	ldr	r2, [pc, #392]	@ (8002b9c <DMA_SetConfig+0x268>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a61      	ldr	r2, [pc, #388]	@ (8002ba0 <DMA_SetConfig+0x26c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00e      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a5f      	ldr	r2, [pc, #380]	@ (8002ba4 <DMA_SetConfig+0x270>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d009      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba8 <DMA_SetConfig+0x274>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d004      	beq.n	8002a3e <DMA_SetConfig+0x10a>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a5c      	ldr	r2, [pc, #368]	@ (8002bac <DMA_SetConfig+0x278>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <DMA_SetConfig+0x10e>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <DMA_SetConfig+0x110>
 8002a42:	2300      	movs	r3, #0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00d      	beq.n	8002a64 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a50:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d004      	beq.n	8002a64 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a62:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a39      	ldr	r2, [pc, #228]	@ (8002b50 <DMA_SetConfig+0x21c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d04a      	beq.n	8002b04 <DMA_SetConfig+0x1d0>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a38      	ldr	r2, [pc, #224]	@ (8002b54 <DMA_SetConfig+0x220>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d045      	beq.n	8002b04 <DMA_SetConfig+0x1d0>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a36      	ldr	r2, [pc, #216]	@ (8002b58 <DMA_SetConfig+0x224>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d040      	beq.n	8002b04 <DMA_SetConfig+0x1d0>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a35      	ldr	r2, [pc, #212]	@ (8002b5c <DMA_SetConfig+0x228>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d03b      	beq.n	8002b04 <DMA_SetConfig+0x1d0>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a33      	ldr	r2, [pc, #204]	@ (8002b60 <DMA_SetConfig+0x22c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d036      	beq.n	8002b04 <DMA_SetConfig+0x1d0>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a32      	ldr	r2, [pc, #200]	@ (8002b64 <DMA_SetConfig+0x230>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d031      	beq.n	8002b04 <DMA_SetConfig+0x1d0>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a30      	ldr	r2, [pc, #192]	@ (8002b68 <DMA_SetConfig+0x234>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d02c      	beq.n	8002b04 <DMA_SetConfig+0x1d0>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a2f      	ldr	r2, [pc, #188]	@ (8002b6c <DMA_SetConfig+0x238>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d027      	beq.n	8002b04 <DMA_SetConfig+0x1d0>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2d      	ldr	r2, [pc, #180]	@ (8002b70 <DMA_SetConfig+0x23c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d022      	beq.n	8002b04 <DMA_SetConfig+0x1d0>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b74 <DMA_SetConfig+0x240>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d01d      	beq.n	8002b04 <DMA_SetConfig+0x1d0>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2a      	ldr	r2, [pc, #168]	@ (8002b78 <DMA_SetConfig+0x244>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d018      	beq.n	8002b04 <DMA_SetConfig+0x1d0>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a29      	ldr	r2, [pc, #164]	@ (8002b7c <DMA_SetConfig+0x248>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d013      	beq.n	8002b04 <DMA_SetConfig+0x1d0>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a27      	ldr	r2, [pc, #156]	@ (8002b80 <DMA_SetConfig+0x24c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00e      	beq.n	8002b04 <DMA_SetConfig+0x1d0>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a26      	ldr	r2, [pc, #152]	@ (8002b84 <DMA_SetConfig+0x250>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d009      	beq.n	8002b04 <DMA_SetConfig+0x1d0>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a24      	ldr	r2, [pc, #144]	@ (8002b88 <DMA_SetConfig+0x254>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d004      	beq.n	8002b04 <DMA_SetConfig+0x1d0>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a23      	ldr	r2, [pc, #140]	@ (8002b8c <DMA_SetConfig+0x258>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d101      	bne.n	8002b08 <DMA_SetConfig+0x1d4>
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <DMA_SetConfig+0x1d6>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d059      	beq.n	8002bc2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	223f      	movs	r2, #63	@ 0x3f
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b2c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b40      	cmp	r3, #64	@ 0x40
 8002b3c:	d138      	bne.n	8002bb0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002b4e:	e086      	b.n	8002c5e <DMA_SetConfig+0x32a>
 8002b50:	40020010 	.word	0x40020010
 8002b54:	40020028 	.word	0x40020028
 8002b58:	40020040 	.word	0x40020040
 8002b5c:	40020058 	.word	0x40020058
 8002b60:	40020070 	.word	0x40020070
 8002b64:	40020088 	.word	0x40020088
 8002b68:	400200a0 	.word	0x400200a0
 8002b6c:	400200b8 	.word	0x400200b8
 8002b70:	40020410 	.word	0x40020410
 8002b74:	40020428 	.word	0x40020428
 8002b78:	40020440 	.word	0x40020440
 8002b7c:	40020458 	.word	0x40020458
 8002b80:	40020470 	.word	0x40020470
 8002b84:	40020488 	.word	0x40020488
 8002b88:	400204a0 	.word	0x400204a0
 8002b8c:	400204b8 	.word	0x400204b8
 8002b90:	58025408 	.word	0x58025408
 8002b94:	5802541c 	.word	0x5802541c
 8002b98:	58025430 	.word	0x58025430
 8002b9c:	58025444 	.word	0x58025444
 8002ba0:	58025458 	.word	0x58025458
 8002ba4:	5802546c 	.word	0x5802546c
 8002ba8:	58025480 	.word	0x58025480
 8002bac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	60da      	str	r2, [r3, #12]
}
 8002bc0:	e04d      	b.n	8002c5e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a29      	ldr	r2, [pc, #164]	@ (8002c6c <DMA_SetConfig+0x338>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d022      	beq.n	8002c12 <DMA_SetConfig+0x2de>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a27      	ldr	r2, [pc, #156]	@ (8002c70 <DMA_SetConfig+0x33c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d01d      	beq.n	8002c12 <DMA_SetConfig+0x2de>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a26      	ldr	r2, [pc, #152]	@ (8002c74 <DMA_SetConfig+0x340>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d018      	beq.n	8002c12 <DMA_SetConfig+0x2de>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a24      	ldr	r2, [pc, #144]	@ (8002c78 <DMA_SetConfig+0x344>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d013      	beq.n	8002c12 <DMA_SetConfig+0x2de>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a23      	ldr	r2, [pc, #140]	@ (8002c7c <DMA_SetConfig+0x348>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00e      	beq.n	8002c12 <DMA_SetConfig+0x2de>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a21      	ldr	r2, [pc, #132]	@ (8002c80 <DMA_SetConfig+0x34c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d009      	beq.n	8002c12 <DMA_SetConfig+0x2de>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a20      	ldr	r2, [pc, #128]	@ (8002c84 <DMA_SetConfig+0x350>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d004      	beq.n	8002c12 <DMA_SetConfig+0x2de>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002c88 <DMA_SetConfig+0x354>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d101      	bne.n	8002c16 <DMA_SetConfig+0x2e2>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <DMA_SetConfig+0x2e4>
 8002c16:	2300      	movs	r3, #0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	2201      	movs	r2, #1
 8002c26:	409a      	lsls	r2, r3
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b40      	cmp	r3, #64	@ 0x40
 8002c3a:	d108      	bne.n	8002c4e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	60da      	str	r2, [r3, #12]
}
 8002c4c:	e007      	b.n	8002c5e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	60da      	str	r2, [r3, #12]
}
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	58025408 	.word	0x58025408
 8002c70:	5802541c 	.word	0x5802541c
 8002c74:	58025430 	.word	0x58025430
 8002c78:	58025444 	.word	0x58025444
 8002c7c:	58025458 	.word	0x58025458
 8002c80:	5802546c 	.word	0x5802546c
 8002c84:	58025480 	.word	0x58025480
 8002c88:	58025494 	.word	0x58025494

08002c8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a42      	ldr	r2, [pc, #264]	@ (8002da4 <DMA_CalcBaseAndBitshift+0x118>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d04a      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a41      	ldr	r2, [pc, #260]	@ (8002da8 <DMA_CalcBaseAndBitshift+0x11c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d045      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a3f      	ldr	r2, [pc, #252]	@ (8002dac <DMA_CalcBaseAndBitshift+0x120>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d040      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a3e      	ldr	r2, [pc, #248]	@ (8002db0 <DMA_CalcBaseAndBitshift+0x124>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d03b      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a3c      	ldr	r2, [pc, #240]	@ (8002db4 <DMA_CalcBaseAndBitshift+0x128>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d036      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a3b      	ldr	r2, [pc, #236]	@ (8002db8 <DMA_CalcBaseAndBitshift+0x12c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d031      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a39      	ldr	r2, [pc, #228]	@ (8002dbc <DMA_CalcBaseAndBitshift+0x130>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d02c      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a38      	ldr	r2, [pc, #224]	@ (8002dc0 <DMA_CalcBaseAndBitshift+0x134>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d027      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a36      	ldr	r2, [pc, #216]	@ (8002dc4 <DMA_CalcBaseAndBitshift+0x138>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d022      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a35      	ldr	r2, [pc, #212]	@ (8002dc8 <DMA_CalcBaseAndBitshift+0x13c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d01d      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a33      	ldr	r2, [pc, #204]	@ (8002dcc <DMA_CalcBaseAndBitshift+0x140>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d018      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a32      	ldr	r2, [pc, #200]	@ (8002dd0 <DMA_CalcBaseAndBitshift+0x144>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d013      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a30      	ldr	r2, [pc, #192]	@ (8002dd4 <DMA_CalcBaseAndBitshift+0x148>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00e      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd8 <DMA_CalcBaseAndBitshift+0x14c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d009      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2d      	ldr	r2, [pc, #180]	@ (8002ddc <DMA_CalcBaseAndBitshift+0x150>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d004      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2c      	ldr	r2, [pc, #176]	@ (8002de0 <DMA_CalcBaseAndBitshift+0x154>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d101      	bne.n	8002d38 <DMA_CalcBaseAndBitshift+0xac>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <DMA_CalcBaseAndBitshift+0xae>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d024      	beq.n	8002d88 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	3b10      	subs	r3, #16
 8002d46:	4a27      	ldr	r2, [pc, #156]	@ (8002de4 <DMA_CalcBaseAndBitshift+0x158>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	4a24      	ldr	r2, [pc, #144]	@ (8002de8 <DMA_CalcBaseAndBitshift+0x15c>)
 8002d58:	5cd3      	ldrb	r3, [r2, r3]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d908      	bls.n	8002d78 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002dec <DMA_CalcBaseAndBitshift+0x160>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	1d1a      	adds	r2, r3, #4
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d76:	e00d      	b.n	8002d94 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <DMA_CalcBaseAndBitshift+0x160>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d86:	e005      	b.n	8002d94 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	40020010 	.word	0x40020010
 8002da8:	40020028 	.word	0x40020028
 8002dac:	40020040 	.word	0x40020040
 8002db0:	40020058 	.word	0x40020058
 8002db4:	40020070 	.word	0x40020070
 8002db8:	40020088 	.word	0x40020088
 8002dbc:	400200a0 	.word	0x400200a0
 8002dc0:	400200b8 	.word	0x400200b8
 8002dc4:	40020410 	.word	0x40020410
 8002dc8:	40020428 	.word	0x40020428
 8002dcc:	40020440 	.word	0x40020440
 8002dd0:	40020458 	.word	0x40020458
 8002dd4:	40020470 	.word	0x40020470
 8002dd8:	40020488 	.word	0x40020488
 8002ddc:	400204a0 	.word	0x400204a0
 8002de0:	400204b8 	.word	0x400204b8
 8002de4:	aaaaaaab 	.word	0xaaaaaaab
 8002de8:	08005938 	.word	0x08005938
 8002dec:	fffffc00 	.word	0xfffffc00

08002df0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d120      	bne.n	8002e46 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d858      	bhi.n	8002ebe <DMA_CheckFifoParam+0xce>
 8002e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e14 <DMA_CheckFifoParam+0x24>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e25 	.word	0x08002e25
 8002e18:	08002e37 	.word	0x08002e37
 8002e1c:	08002e25 	.word	0x08002e25
 8002e20:	08002ebf 	.word	0x08002ebf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d048      	beq.n	8002ec2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e34:	e045      	b.n	8002ec2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e3e:	d142      	bne.n	8002ec6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e44:	e03f      	b.n	8002ec6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e4e:	d123      	bne.n	8002e98 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d838      	bhi.n	8002eca <DMA_CheckFifoParam+0xda>
 8002e58:	a201      	add	r2, pc, #4	@ (adr r2, 8002e60 <DMA_CheckFifoParam+0x70>)
 8002e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5e:	bf00      	nop
 8002e60:	08002e71 	.word	0x08002e71
 8002e64:	08002e77 	.word	0x08002e77
 8002e68:	08002e71 	.word	0x08002e71
 8002e6c:	08002e89 	.word	0x08002e89
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
        break;
 8002e74:	e030      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d025      	beq.n	8002ece <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e86:	e022      	b.n	8002ece <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e90:	d11f      	bne.n	8002ed2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e96:	e01c      	b.n	8002ed2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d902      	bls.n	8002ea6 <DMA_CheckFifoParam+0xb6>
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d003      	beq.n	8002eac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002ea4:	e018      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
        break;
 8002eaa:	e015      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00e      	beq.n	8002ed6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
    break;
 8002ebc:	e00b      	b.n	8002ed6 <DMA_CheckFifoParam+0xe6>
        break;
 8002ebe:	bf00      	nop
 8002ec0:	e00a      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
        break;
 8002ec2:	bf00      	nop
 8002ec4:	e008      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
        break;
 8002ec6:	bf00      	nop
 8002ec8:	e006      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
        break;
 8002eca:	bf00      	nop
 8002ecc:	e004      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
        break;
 8002ece:	bf00      	nop
 8002ed0:	e002      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
        break;
 8002ed2:	bf00      	nop
 8002ed4:	e000      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
    break;
 8002ed6:	bf00      	nop
    }
  }

  return status;
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop

08002ee8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a38      	ldr	r2, [pc, #224]	@ (8002fdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d022      	beq.n	8002f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a36      	ldr	r2, [pc, #216]	@ (8002fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d01d      	beq.n	8002f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a35      	ldr	r2, [pc, #212]	@ (8002fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d018      	beq.n	8002f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a33      	ldr	r2, [pc, #204]	@ (8002fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a32      	ldr	r2, [pc, #200]	@ (8002fec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00e      	beq.n	8002f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a30      	ldr	r2, [pc, #192]	@ (8002ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d009      	beq.n	8002f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a2f      	ldr	r2, [pc, #188]	@ (8002ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d004      	beq.n	8002f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2d      	ldr	r2, [pc, #180]	@ (8002ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d101      	bne.n	8002f4a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01a      	beq.n	8002f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	3b08      	subs	r3, #8
 8002f58:	4a28      	ldr	r2, [pc, #160]	@ (8002ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	091b      	lsrs	r3, r3, #4
 8002f60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4b26      	ldr	r3, [pc, #152]	@ (8003000 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a24      	ldr	r2, [pc, #144]	@ (8003004 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002f74:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002f84:	e024      	b.n	8002fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	3b10      	subs	r3, #16
 8002f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003008 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800300c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d806      	bhi.n	8002fae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8003010 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d902      	bls.n	8002fae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3308      	adds	r3, #8
 8002fac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	4b18      	ldr	r3, [pc, #96]	@ (8003014 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a16      	ldr	r2, [pc, #88]	@ (8003018 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002fc0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	2201      	movs	r2, #1
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	58025408 	.word	0x58025408
 8002fe0:	5802541c 	.word	0x5802541c
 8002fe4:	58025430 	.word	0x58025430
 8002fe8:	58025444 	.word	0x58025444
 8002fec:	58025458 	.word	0x58025458
 8002ff0:	5802546c 	.word	0x5802546c
 8002ff4:	58025480 	.word	0x58025480
 8002ff8:	58025494 	.word	0x58025494
 8002ffc:	cccccccd 	.word	0xcccccccd
 8003000:	16009600 	.word	0x16009600
 8003004:	58025880 	.word	0x58025880
 8003008:	aaaaaaab 	.word	0xaaaaaaab
 800300c:	400204b8 	.word	0x400204b8
 8003010:	4002040f 	.word	0x4002040f
 8003014:	10008200 	.word	0x10008200
 8003018:	40020880 	.word	0x40020880

0800301c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d04a      	beq.n	80030c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d847      	bhi.n	80030c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a25      	ldr	r2, [pc, #148]	@ (80030d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d022      	beq.n	8003088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a24      	ldr	r2, [pc, #144]	@ (80030d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d01d      	beq.n	8003088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a22      	ldr	r2, [pc, #136]	@ (80030dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d018      	beq.n	8003088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a21      	ldr	r2, [pc, #132]	@ (80030e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d013      	beq.n	8003088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1f      	ldr	r2, [pc, #124]	@ (80030e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00e      	beq.n	8003088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1e      	ldr	r2, [pc, #120]	@ (80030e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d009      	beq.n	8003088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1c      	ldr	r2, [pc, #112]	@ (80030ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d004      	beq.n	8003088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1b      	ldr	r2, [pc, #108]	@ (80030f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d101      	bne.n	800308c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800308c:	2300      	movs	r3, #0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4b17      	ldr	r3, [pc, #92]	@ (80030f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	461a      	mov	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a15      	ldr	r2, [pc, #84]	@ (80030f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80030a4:	671a      	str	r2, [r3, #112]	@ 0x70
 80030a6:	e009      	b.n	80030bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4b14      	ldr	r3, [pc, #80]	@ (80030fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	461a      	mov	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a11      	ldr	r2, [pc, #68]	@ (8003100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80030ba:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	3b01      	subs	r3, #1
 80030c0:	2201      	movs	r2, #1
 80030c2:	409a      	lsls	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	58025408 	.word	0x58025408
 80030d8:	5802541c 	.word	0x5802541c
 80030dc:	58025430 	.word	0x58025430
 80030e0:	58025444 	.word	0x58025444
 80030e4:	58025458 	.word	0x58025458
 80030e8:	5802546c 	.word	0x5802546c
 80030ec:	58025480 	.word	0x58025480
 80030f0:	58025494 	.word	0x58025494
 80030f4:	1600963f 	.word	0x1600963f
 80030f8:	58025940 	.word	0x58025940
 80030fc:	1000823f 	.word	0x1000823f
 8003100:	40020940 	.word	0x40020940

08003104 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003104:	b480      	push	{r7}
 8003106:	b089      	sub	sp, #36	@ 0x24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003112:	4b89      	ldr	r3, [pc, #548]	@ (8003338 <HAL_GPIO_Init+0x234>)
 8003114:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003116:	e194      	b.n	8003442 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	2101      	movs	r1, #1
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	fa01 f303 	lsl.w	r3, r1, r3
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8186 	beq.w	800343c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d005      	beq.n	8003148 <HAL_GPIO_Init+0x44>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d130      	bne.n	80031aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	2203      	movs	r2, #3
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4013      	ands	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800317e:	2201      	movs	r2, #1
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	f003 0201 	and.w	r2, r3, #1
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d017      	beq.n	80031e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	2203      	movs	r2, #3
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d123      	bne.n	800323a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	08da      	lsrs	r2, r3, #3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3208      	adds	r2, #8
 80031fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	220f      	movs	r2, #15
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4013      	ands	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	08da      	lsrs	r2, r3, #3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3208      	adds	r2, #8
 8003234:	69b9      	ldr	r1, [r7, #24]
 8003236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	2203      	movs	r2, #3
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 0203 	and.w	r2, r3, #3
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80e0 	beq.w	800343c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327c:	4b2f      	ldr	r3, [pc, #188]	@ (800333c <HAL_GPIO_Init+0x238>)
 800327e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003282:	4a2e      	ldr	r2, [pc, #184]	@ (800333c <HAL_GPIO_Init+0x238>)
 8003284:	f043 0302 	orr.w	r3, r3, #2
 8003288:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800328c:	4b2b      	ldr	r3, [pc, #172]	@ (800333c <HAL_GPIO_Init+0x238>)
 800328e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800329a:	4a29      	ldr	r2, [pc, #164]	@ (8003340 <HAL_GPIO_Init+0x23c>)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	3302      	adds	r3, #2
 80032a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	220f      	movs	r2, #15
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a20      	ldr	r2, [pc, #128]	@ (8003344 <HAL_GPIO_Init+0x240>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d052      	beq.n	800336c <HAL_GPIO_Init+0x268>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003348 <HAL_GPIO_Init+0x244>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d031      	beq.n	8003332 <HAL_GPIO_Init+0x22e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1e      	ldr	r2, [pc, #120]	@ (800334c <HAL_GPIO_Init+0x248>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d02b      	beq.n	800332e <HAL_GPIO_Init+0x22a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003350 <HAL_GPIO_Init+0x24c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d025      	beq.n	800332a <HAL_GPIO_Init+0x226>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003354 <HAL_GPIO_Init+0x250>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01f      	beq.n	8003326 <HAL_GPIO_Init+0x222>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003358 <HAL_GPIO_Init+0x254>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d019      	beq.n	8003322 <HAL_GPIO_Init+0x21e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a1a      	ldr	r2, [pc, #104]	@ (800335c <HAL_GPIO_Init+0x258>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_GPIO_Init+0x21a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a19      	ldr	r2, [pc, #100]	@ (8003360 <HAL_GPIO_Init+0x25c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00d      	beq.n	800331a <HAL_GPIO_Init+0x216>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a18      	ldr	r2, [pc, #96]	@ (8003364 <HAL_GPIO_Init+0x260>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d007      	beq.n	8003316 <HAL_GPIO_Init+0x212>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a17      	ldr	r2, [pc, #92]	@ (8003368 <HAL_GPIO_Init+0x264>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <HAL_GPIO_Init+0x20e>
 800330e:	2309      	movs	r3, #9
 8003310:	e02d      	b.n	800336e <HAL_GPIO_Init+0x26a>
 8003312:	230a      	movs	r3, #10
 8003314:	e02b      	b.n	800336e <HAL_GPIO_Init+0x26a>
 8003316:	2308      	movs	r3, #8
 8003318:	e029      	b.n	800336e <HAL_GPIO_Init+0x26a>
 800331a:	2307      	movs	r3, #7
 800331c:	e027      	b.n	800336e <HAL_GPIO_Init+0x26a>
 800331e:	2306      	movs	r3, #6
 8003320:	e025      	b.n	800336e <HAL_GPIO_Init+0x26a>
 8003322:	2305      	movs	r3, #5
 8003324:	e023      	b.n	800336e <HAL_GPIO_Init+0x26a>
 8003326:	2304      	movs	r3, #4
 8003328:	e021      	b.n	800336e <HAL_GPIO_Init+0x26a>
 800332a:	2303      	movs	r3, #3
 800332c:	e01f      	b.n	800336e <HAL_GPIO_Init+0x26a>
 800332e:	2302      	movs	r3, #2
 8003330:	e01d      	b.n	800336e <HAL_GPIO_Init+0x26a>
 8003332:	2301      	movs	r3, #1
 8003334:	e01b      	b.n	800336e <HAL_GPIO_Init+0x26a>
 8003336:	bf00      	nop
 8003338:	58000080 	.word	0x58000080
 800333c:	58024400 	.word	0x58024400
 8003340:	58000400 	.word	0x58000400
 8003344:	58020000 	.word	0x58020000
 8003348:	58020400 	.word	0x58020400
 800334c:	58020800 	.word	0x58020800
 8003350:	58020c00 	.word	0x58020c00
 8003354:	58021000 	.word	0x58021000
 8003358:	58021400 	.word	0x58021400
 800335c:	58021800 	.word	0x58021800
 8003360:	58021c00 	.word	0x58021c00
 8003364:	58022000 	.word	0x58022000
 8003368:	58022400 	.word	0x58022400
 800336c:	2300      	movs	r3, #0
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	f002 0203 	and.w	r2, r2, #3
 8003374:	0092      	lsls	r2, r2, #2
 8003376:	4093      	lsls	r3, r2
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800337e:	4938      	ldr	r1, [pc, #224]	@ (8003460 <HAL_GPIO_Init+0x35c>)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	3302      	adds	r3, #2
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800338c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80033b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80033ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80033e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	3301      	adds	r3, #1
 8003440:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	f47f ae63 	bne.w	8003118 <HAL_GPIO_Init+0x14>
  }
}
 8003452:	bf00      	nop
 8003454:	bf00      	nop
 8003456:	3724      	adds	r7, #36	@ 0x24
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	58000400 	.word	0x58000400

08003464 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800346c:	4a08      	ldr	r2, [pc, #32]	@ (8003490 <HAL_HSEM_FastTake+0x2c>)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3320      	adds	r3, #32
 8003472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003476:	4a07      	ldr	r2, [pc, #28]	@ (8003494 <HAL_HSEM_FastTake+0x30>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d101      	bne.n	8003480 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	e000      	b.n	8003482 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	58026400 	.word	0x58026400
 8003494:	80000300 	.word	0x80000300

08003498 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80034a2:	4906      	ldr	r1, [pc, #24]	@ (80034bc <HAL_HSEM_Release+0x24>)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	58026400 	.word	0x58026400

080034c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80034c8:	4b29      	ldr	r3, [pc, #164]	@ (8003570 <HAL_PWREx_ConfigSupply+0xb0>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	2b06      	cmp	r3, #6
 80034d2:	d00a      	beq.n	80034ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80034d4:	4b26      	ldr	r3, [pc, #152]	@ (8003570 <HAL_PWREx_ConfigSupply+0xb0>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d001      	beq.n	80034e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e040      	b.n	8003568 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	e03e      	b.n	8003568 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80034ea:	4b21      	ldr	r3, [pc, #132]	@ (8003570 <HAL_PWREx_ConfigSupply+0xb0>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80034f2:	491f      	ldr	r1, [pc, #124]	@ (8003570 <HAL_PWREx_ConfigSupply+0xb0>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80034fa:	f7fd fc03 	bl	8000d04 <HAL_GetTick>
 80034fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003500:	e009      	b.n	8003516 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003502:	f7fd fbff 	bl	8000d04 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003510:	d901      	bls.n	8003516 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e028      	b.n	8003568 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003516:	4b16      	ldr	r3, [pc, #88]	@ (8003570 <HAL_PWREx_ConfigSupply+0xb0>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800351e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003522:	d1ee      	bne.n	8003502 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b1e      	cmp	r3, #30
 8003528:	d008      	beq.n	800353c <HAL_PWREx_ConfigSupply+0x7c>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b2e      	cmp	r3, #46	@ 0x2e
 800352e:	d005      	beq.n	800353c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b1d      	cmp	r3, #29
 8003534:	d002      	beq.n	800353c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b2d      	cmp	r3, #45	@ 0x2d
 800353a:	d114      	bne.n	8003566 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800353c:	f7fd fbe2 	bl	8000d04 <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003542:	e009      	b.n	8003558 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003544:	f7fd fbde 	bl	8000d04 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003552:	d901      	bls.n	8003558 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e007      	b.n	8003568 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003558:	4b05      	ldr	r3, [pc, #20]	@ (8003570 <HAL_PWREx_ConfigSupply+0xb0>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003564:	d1ee      	bne.n	8003544 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	58024800 	.word	0x58024800

08003574 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08c      	sub	sp, #48	@ 0x30
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d102      	bne.n	8003588 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f000 bc48 	b.w	8003e18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 8088 	beq.w	80036a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003596:	4b99      	ldr	r3, [pc, #612]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800359e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035a0:	4b96      	ldr	r3, [pc, #600]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 80035a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80035a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	d007      	beq.n	80035bc <HAL_RCC_OscConfig+0x48>
 80035ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ae:	2b18      	cmp	r3, #24
 80035b0:	d111      	bne.n	80035d6 <HAL_RCC_OscConfig+0x62>
 80035b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d10c      	bne.n	80035d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035bc:	4b8f      	ldr	r3, [pc, #572]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d06d      	beq.n	80036a4 <HAL_RCC_OscConfig+0x130>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d169      	bne.n	80036a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f000 bc21 	b.w	8003e18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035de:	d106      	bne.n	80035ee <HAL_RCC_OscConfig+0x7a>
 80035e0:	4b86      	ldr	r3, [pc, #536]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a85      	ldr	r2, [pc, #532]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 80035e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	e02e      	b.n	800364c <HAL_RCC_OscConfig+0xd8>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0x9c>
 80035f6:	4b81      	ldr	r3, [pc, #516]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a80      	ldr	r2, [pc, #512]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 80035fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	4b7e      	ldr	r3, [pc, #504]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a7d      	ldr	r2, [pc, #500]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003608:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e01d      	b.n	800364c <HAL_RCC_OscConfig+0xd8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003618:	d10c      	bne.n	8003634 <HAL_RCC_OscConfig+0xc0>
 800361a:	4b78      	ldr	r3, [pc, #480]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a77      	ldr	r2, [pc, #476]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003620:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	4b75      	ldr	r3, [pc, #468]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a74      	ldr	r2, [pc, #464]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 800362c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	e00b      	b.n	800364c <HAL_RCC_OscConfig+0xd8>
 8003634:	4b71      	ldr	r3, [pc, #452]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a70      	ldr	r2, [pc, #448]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 800363a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	4b6e      	ldr	r3, [pc, #440]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a6d      	ldr	r2, [pc, #436]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003646:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800364a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d013      	beq.n	800367c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fd fb56 	bl	8000d04 <HAL_GetTick>
 8003658:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800365c:	f7fd fb52 	bl	8000d04 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b64      	cmp	r3, #100	@ 0x64
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e3d4      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800366e:	4b63      	ldr	r3, [pc, #396]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0xe8>
 800367a:	e014      	b.n	80036a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fd fb42 	bl	8000d04 <HAL_GetTick>
 8003680:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003684:	f7fd fb3e 	bl	8000d04 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b64      	cmp	r3, #100	@ 0x64
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e3c0      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003696:	4b59      	ldr	r3, [pc, #356]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x110>
 80036a2:	e000      	b.n	80036a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 80ca 	beq.w	8003848 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036b4:	4b51      	ldr	r3, [pc, #324]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036be:	4b4f      	ldr	r3, [pc, #316]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 80036c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d007      	beq.n	80036da <HAL_RCC_OscConfig+0x166>
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	2b18      	cmp	r3, #24
 80036ce:	d156      	bne.n	800377e <HAL_RCC_OscConfig+0x20a>
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d151      	bne.n	800377e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036da:	4b48      	ldr	r3, [pc, #288]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_RCC_OscConfig+0x17e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e392      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036f2:	4b42      	ldr	r3, [pc, #264]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 0219 	bic.w	r2, r3, #25
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	493f      	ldr	r1, [pc, #252]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fd fafe 	bl	8000d04 <HAL_GetTick>
 8003708:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800370c:	f7fd fafa 	bl	8000d04 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e37c      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800371e:	4b37      	ldr	r3, [pc, #220]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372a:	f7fd faf7 	bl	8000d1c <HAL_GetREVID>
 800372e:	4603      	mov	r3, r0
 8003730:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003734:	4293      	cmp	r3, r2
 8003736:	d817      	bhi.n	8003768 <HAL_RCC_OscConfig+0x1f4>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	2b40      	cmp	r3, #64	@ 0x40
 800373e:	d108      	bne.n	8003752 <HAL_RCC_OscConfig+0x1de>
 8003740:	4b2e      	ldr	r3, [pc, #184]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003748:	4a2c      	ldr	r2, [pc, #176]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 800374a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800374e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003750:	e07a      	b.n	8003848 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003752:	4b2a      	ldr	r3, [pc, #168]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	031b      	lsls	r3, r3, #12
 8003760:	4926      	ldr	r1, [pc, #152]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003762:	4313      	orrs	r3, r2
 8003764:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003766:	e06f      	b.n	8003848 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003768:	4b24      	ldr	r3, [pc, #144]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	061b      	lsls	r3, r3, #24
 8003776:	4921      	ldr	r1, [pc, #132]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800377c:	e064      	b.n	8003848 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d047      	beq.n	8003816 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003786:	4b1d      	ldr	r3, [pc, #116]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 0219 	bic.w	r2, r3, #25
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	491a      	ldr	r1, [pc, #104]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fd fab4 	bl	8000d04 <HAL_GetTick>
 800379c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a0:	f7fd fab0 	bl	8000d04 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e332      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037b2:	4b12      	ldr	r3, [pc, #72]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037be:	f7fd faad 	bl	8000d1c <HAL_GetREVID>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d819      	bhi.n	8003800 <HAL_RCC_OscConfig+0x28c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	2b40      	cmp	r3, #64	@ 0x40
 80037d2:	d108      	bne.n	80037e6 <HAL_RCC_OscConfig+0x272>
 80037d4:	4b09      	ldr	r3, [pc, #36]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80037dc:	4a07      	ldr	r2, [pc, #28]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 80037de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037e2:	6053      	str	r3, [r2, #4]
 80037e4:	e030      	b.n	8003848 <HAL_RCC_OscConfig+0x2d4>
 80037e6:	4b05      	ldr	r3, [pc, #20]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	031b      	lsls	r3, r3, #12
 80037f4:	4901      	ldr	r1, [pc, #4]	@ (80037fc <HAL_RCC_OscConfig+0x288>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	604b      	str	r3, [r1, #4]
 80037fa:	e025      	b.n	8003848 <HAL_RCC_OscConfig+0x2d4>
 80037fc:	58024400 	.word	0x58024400
 8003800:	4b9a      	ldr	r3, [pc, #616]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	061b      	lsls	r3, r3, #24
 800380e:	4997      	ldr	r1, [pc, #604]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
 8003814:	e018      	b.n	8003848 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003816:	4b95      	ldr	r3, [pc, #596]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a94      	ldr	r2, [pc, #592]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 800381c:	f023 0301 	bic.w	r3, r3, #1
 8003820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003822:	f7fd fa6f 	bl	8000d04 <HAL_GetTick>
 8003826:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800382a:	f7fd fa6b 	bl	8000d04 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e2ed      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800383c:	4b8b      	ldr	r3, [pc, #556]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1f0      	bne.n	800382a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80a9 	beq.w	80039a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003856:	4b85      	ldr	r3, [pc, #532]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800385e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003860:	4b82      	ldr	r3, [pc, #520]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 8003862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003864:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d007      	beq.n	800387c <HAL_RCC_OscConfig+0x308>
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2b18      	cmp	r3, #24
 8003870:	d13a      	bne.n	80038e8 <HAL_RCC_OscConfig+0x374>
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	2b01      	cmp	r3, #1
 800387a:	d135      	bne.n	80038e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800387c:	4b7b      	ldr	r3, [pc, #492]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_RCC_OscConfig+0x320>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	2b80      	cmp	r3, #128	@ 0x80
 800388e:	d001      	beq.n	8003894 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e2c1      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003894:	f7fd fa42 	bl	8000d1c <HAL_GetREVID>
 8003898:	4603      	mov	r3, r0
 800389a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800389e:	4293      	cmp	r3, r2
 80038a0:	d817      	bhi.n	80038d2 <HAL_RCC_OscConfig+0x35e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	d108      	bne.n	80038bc <HAL_RCC_OscConfig+0x348>
 80038aa:	4b70      	ldr	r3, [pc, #448]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80038b2:	4a6e      	ldr	r2, [pc, #440]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 80038b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80038b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038ba:	e075      	b.n	80039a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038bc:	4b6b      	ldr	r3, [pc, #428]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	069b      	lsls	r3, r3, #26
 80038ca:	4968      	ldr	r1, [pc, #416]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038d0:	e06a      	b.n	80039a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038d2:	4b66      	ldr	r3, [pc, #408]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	061b      	lsls	r3, r3, #24
 80038e0:	4962      	ldr	r1, [pc, #392]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038e6:	e05f      	b.n	80039a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d042      	beq.n	8003976 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80038f0:	4b5e      	ldr	r3, [pc, #376]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a5d      	ldr	r2, [pc, #372]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 80038f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fd fa02 	bl	8000d04 <HAL_GetTick>
 8003900:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003904:	f7fd f9fe 	bl	8000d04 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e280      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003916:	4b55      	ldr	r3, [pc, #340]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003922:	f7fd f9fb 	bl	8000d1c <HAL_GetREVID>
 8003926:	4603      	mov	r3, r0
 8003928:	f241 0203 	movw	r2, #4099	@ 0x1003
 800392c:	4293      	cmp	r3, r2
 800392e:	d817      	bhi.n	8003960 <HAL_RCC_OscConfig+0x3ec>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	2b20      	cmp	r3, #32
 8003936:	d108      	bne.n	800394a <HAL_RCC_OscConfig+0x3d6>
 8003938:	4b4c      	ldr	r3, [pc, #304]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003940:	4a4a      	ldr	r2, [pc, #296]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 8003942:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003946:	6053      	str	r3, [r2, #4]
 8003948:	e02e      	b.n	80039a8 <HAL_RCC_OscConfig+0x434>
 800394a:	4b48      	ldr	r3, [pc, #288]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	069b      	lsls	r3, r3, #26
 8003958:	4944      	ldr	r1, [pc, #272]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 800395a:	4313      	orrs	r3, r2
 800395c:	604b      	str	r3, [r1, #4]
 800395e:	e023      	b.n	80039a8 <HAL_RCC_OscConfig+0x434>
 8003960:	4b42      	ldr	r3, [pc, #264]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	061b      	lsls	r3, r3, #24
 800396e:	493f      	ldr	r1, [pc, #252]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 8003970:	4313      	orrs	r3, r2
 8003972:	60cb      	str	r3, [r1, #12]
 8003974:	e018      	b.n	80039a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003976:	4b3d      	ldr	r3, [pc, #244]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a3c      	ldr	r2, [pc, #240]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 800397c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003982:	f7fd f9bf 	bl	8000d04 <HAL_GetTick>
 8003986:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800398a:	f7fd f9bb 	bl	8000d04 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e23d      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800399c:	4b33      	ldr	r3, [pc, #204]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f0      	bne.n	800398a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d036      	beq.n	8003a22 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d019      	beq.n	80039f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039bc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 80039be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c8:	f7fd f99c 	bl	8000d04 <HAL_GetTick>
 80039cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d0:	f7fd f998 	bl	8000d04 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e21a      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039e2:	4b22      	ldr	r3, [pc, #136]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 80039e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0x45c>
 80039ee:	e018      	b.n	8003a22 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 80039f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 80039f6:	f023 0301 	bic.w	r3, r3, #1
 80039fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fc:	f7fd f982 	bl	8000d04 <HAL_GetTick>
 8003a00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a04:	f7fd f97e 	bl	8000d04 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e200      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a16:	4b15      	ldr	r3, [pc, #84]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 8003a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d039      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01c      	beq.n	8003a70 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a36:	4b0d      	ldr	r3, [pc, #52]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 8003a3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a42:	f7fd f95f 	bl	8000d04 <HAL_GetTick>
 8003a46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a4a:	f7fd f95b 	bl	8000d04 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e1dd      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a5c:	4b03      	ldr	r3, [pc, #12]	@ (8003a6c <HAL_RCC_OscConfig+0x4f8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x4d6>
 8003a68:	e01b      	b.n	8003aa2 <HAL_RCC_OscConfig+0x52e>
 8003a6a:	bf00      	nop
 8003a6c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a70:	4b9b      	ldr	r3, [pc, #620]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a9a      	ldr	r2, [pc, #616]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003a76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a7c:	f7fd f942 	bl	8000d04 <HAL_GetTick>
 8003a80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a84:	f7fd f93e 	bl	8000d04 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e1c0      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a96:	4b92      	ldr	r3, [pc, #584]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 8081 	beq.w	8003bb2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ab0:	4b8c      	ldr	r3, [pc, #560]	@ (8003ce4 <HAL_RCC_OscConfig+0x770>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a8b      	ldr	r2, [pc, #556]	@ (8003ce4 <HAL_RCC_OscConfig+0x770>)
 8003ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003abc:	f7fd f922 	bl	8000d04 <HAL_GetTick>
 8003ac0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac4:	f7fd f91e 	bl	8000d04 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	@ 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e1a0      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ad6:	4b83      	ldr	r3, [pc, #524]	@ (8003ce4 <HAL_RCC_OscConfig+0x770>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d106      	bne.n	8003af8 <HAL_RCC_OscConfig+0x584>
 8003aea:	4b7d      	ldr	r3, [pc, #500]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aee:	4a7c      	ldr	r2, [pc, #496]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af6:	e02d      	b.n	8003b54 <HAL_RCC_OscConfig+0x5e0>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10c      	bne.n	8003b1a <HAL_RCC_OscConfig+0x5a6>
 8003b00:	4b77      	ldr	r3, [pc, #476]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b04:	4a76      	ldr	r2, [pc, #472]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003b06:	f023 0301 	bic.w	r3, r3, #1
 8003b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b0c:	4b74      	ldr	r3, [pc, #464]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b10:	4a73      	ldr	r2, [pc, #460]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003b12:	f023 0304 	bic.w	r3, r3, #4
 8003b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b18:	e01c      	b.n	8003b54 <HAL_RCC_OscConfig+0x5e0>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b05      	cmp	r3, #5
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x5c8>
 8003b22:	4b6f      	ldr	r3, [pc, #444]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b26:	4a6e      	ldr	r2, [pc, #440]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003b28:	f043 0304 	orr.w	r3, r3, #4
 8003b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b2e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b32:	4a6b      	ldr	r2, [pc, #428]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0x5e0>
 8003b3c:	4b68      	ldr	r3, [pc, #416]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b40:	4a67      	ldr	r2, [pc, #412]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b48:	4b65      	ldr	r3, [pc, #404]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4c:	4a64      	ldr	r2, [pc, #400]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003b4e:	f023 0304 	bic.w	r3, r3, #4
 8003b52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d015      	beq.n	8003b88 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fd f8d2 	bl	8000d04 <HAL_GetTick>
 8003b60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b64:	f7fd f8ce 	bl	8000d04 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e14e      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b7a:	4b59      	ldr	r3, [pc, #356]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0ee      	beq.n	8003b64 <HAL_RCC_OscConfig+0x5f0>
 8003b86:	e014      	b.n	8003bb2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b88:	f7fd f8bc 	bl	8000d04 <HAL_GetTick>
 8003b8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b90:	f7fd f8b8 	bl	8000d04 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e138      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ba6:	4b4e      	ldr	r3, [pc, #312]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1ee      	bne.n	8003b90 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 812d 	beq.w	8003e16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003bbc:	4b48      	ldr	r3, [pc, #288]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bc4:	2b18      	cmp	r3, #24
 8003bc6:	f000 80bd 	beq.w	8003d44 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	f040 809e 	bne.w	8003d10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd4:	4b42      	ldr	r3, [pc, #264]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a41      	ldr	r2, [pc, #260]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003bda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fd f890 	bl	8000d04 <HAL_GetTick>
 8003be4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be8:	f7fd f88c 	bl	8000d04 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e10e      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bfa:	4b39      	ldr	r3, [pc, #228]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c06:	4b36      	ldr	r3, [pc, #216]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003c08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c0a:	4b37      	ldr	r3, [pc, #220]	@ (8003ce8 <HAL_RCC_OscConfig+0x774>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c16:	0112      	lsls	r2, r2, #4
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	4931      	ldr	r1, [pc, #196]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c24:	3b01      	subs	r3, #1
 8003c26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	025b      	lsls	r3, r3, #9
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	041b      	lsls	r3, r3, #16
 8003c3e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	061b      	lsls	r3, r3, #24
 8003c4c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003c50:	4923      	ldr	r1, [pc, #140]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003c56:	4b22      	ldr	r3, [pc, #136]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5a:	4a21      	ldr	r2, [pc, #132]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c62:	4b1f      	ldr	r3, [pc, #124]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003c64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c66:	4b21      	ldr	r3, [pc, #132]	@ (8003cec <HAL_RCC_OscConfig+0x778>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c6e:	00d2      	lsls	r2, r2, #3
 8003c70:	491b      	ldr	r1, [pc, #108]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c76:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	f023 020c 	bic.w	r2, r3, #12
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c82:	4917      	ldr	r1, [pc, #92]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c88:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8c:	f023 0202 	bic.w	r2, r3, #2
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c94:	4912      	ldr	r1, [pc, #72]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c9a:	4b11      	ldr	r3, [pc, #68]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	4a10      	ldr	r2, [pc, #64]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003caa:	4a0d      	ldr	r2, [pc, #52]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003cbe:	4b08      	ldr	r3, [pc, #32]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc2:	4a07      	ldr	r2, [pc, #28]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cca:	4b05      	ldr	r3, [pc, #20]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a04      	ldr	r2, [pc, #16]	@ (8003ce0 <HAL_RCC_OscConfig+0x76c>)
 8003cd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fd f815 	bl	8000d04 <HAL_GetTick>
 8003cda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cdc:	e011      	b.n	8003d02 <HAL_RCC_OscConfig+0x78e>
 8003cde:	bf00      	nop
 8003ce0:	58024400 	.word	0x58024400
 8003ce4:	58024800 	.word	0x58024800
 8003ce8:	fffffc0c 	.word	0xfffffc0c
 8003cec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf0:	f7fd f808 	bl	8000d04 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e08a      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d02:	4b47      	ldr	r3, [pc, #284]	@ (8003e20 <HAL_RCC_OscConfig+0x8ac>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x77c>
 8003d0e:	e082      	b.n	8003e16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d10:	4b43      	ldr	r3, [pc, #268]	@ (8003e20 <HAL_RCC_OscConfig+0x8ac>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a42      	ldr	r2, [pc, #264]	@ (8003e20 <HAL_RCC_OscConfig+0x8ac>)
 8003d16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fc fff2 	bl	8000d04 <HAL_GetTick>
 8003d20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d24:	f7fc ffee 	bl	8000d04 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e070      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d36:	4b3a      	ldr	r3, [pc, #232]	@ (8003e20 <HAL_RCC_OscConfig+0x8ac>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x7b0>
 8003d42:	e068      	b.n	8003e16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d44:	4b36      	ldr	r3, [pc, #216]	@ (8003e20 <HAL_RCC_OscConfig+0x8ac>)
 8003d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d4a:	4b35      	ldr	r3, [pc, #212]	@ (8003e20 <HAL_RCC_OscConfig+0x8ac>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d031      	beq.n	8003dbc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f003 0203 	and.w	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d12a      	bne.n	8003dbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d122      	bne.n	8003dbc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d11a      	bne.n	8003dbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	0a5b      	lsrs	r3, r3, #9
 8003d8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d111      	bne.n	8003dbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	0c1b      	lsrs	r3, r3, #16
 8003d9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d108      	bne.n	8003dbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	0e1b      	lsrs	r3, r3, #24
 8003dae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e02b      	b.n	8003e18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003dc0:	4b17      	ldr	r3, [pc, #92]	@ (8003e20 <HAL_RCC_OscConfig+0x8ac>)
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc4:	08db      	lsrs	r3, r3, #3
 8003dc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d01f      	beq.n	8003e16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003dd6:	4b12      	ldr	r3, [pc, #72]	@ (8003e20 <HAL_RCC_OscConfig+0x8ac>)
 8003dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dda:	4a11      	ldr	r2, [pc, #68]	@ (8003e20 <HAL_RCC_OscConfig+0x8ac>)
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003de2:	f7fc ff8f 	bl	8000d04 <HAL_GetTick>
 8003de6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003de8:	bf00      	nop
 8003dea:	f7fc ff8b 	bl	8000d04 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d0f9      	beq.n	8003dea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003df6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e20 <HAL_RCC_OscConfig+0x8ac>)
 8003df8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003e24 <HAL_RCC_OscConfig+0x8b0>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e02:	00d2      	lsls	r2, r2, #3
 8003e04:	4906      	ldr	r1, [pc, #24]	@ (8003e20 <HAL_RCC_OscConfig+0x8ac>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003e0a:	4b05      	ldr	r3, [pc, #20]	@ (8003e20 <HAL_RCC_OscConfig+0x8ac>)
 8003e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0e:	4a04      	ldr	r2, [pc, #16]	@ (8003e20 <HAL_RCC_OscConfig+0x8ac>)
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3730      	adds	r7, #48	@ 0x30
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	58024400 	.word	0x58024400
 8003e24:	ffff0007 	.word	0xffff0007

08003e28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e19c      	b.n	8004176 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e3c:	4b8a      	ldr	r3, [pc, #552]	@ (8004068 <HAL_RCC_ClockConfig+0x240>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d910      	bls.n	8003e6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4a:	4b87      	ldr	r3, [pc, #540]	@ (8004068 <HAL_RCC_ClockConfig+0x240>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 020f 	bic.w	r2, r3, #15
 8003e52:	4985      	ldr	r1, [pc, #532]	@ (8004068 <HAL_RCC_ClockConfig+0x240>)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5a:	4b83      	ldr	r3, [pc, #524]	@ (8004068 <HAL_RCC_ClockConfig+0x240>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e184      	b.n	8004176 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d010      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	4b7b      	ldr	r3, [pc, #492]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d908      	bls.n	8003e9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e88:	4b78      	ldr	r3, [pc, #480]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	4975      	ldr	r1, [pc, #468]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d010      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	4b70      	ldr	r3, [pc, #448]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d908      	bls.n	8003ec8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	496a      	ldr	r1, [pc, #424]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d010      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699a      	ldr	r2, [r3, #24]
 8003ed8:	4b64      	ldr	r3, [pc, #400]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d908      	bls.n	8003ef6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ee4:	4b61      	ldr	r3, [pc, #388]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	495e      	ldr	r1, [pc, #376]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d010      	beq.n	8003f24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	4b59      	ldr	r3, [pc, #356]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d908      	bls.n	8003f24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f12:	4b56      	ldr	r3, [pc, #344]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	4953      	ldr	r1, [pc, #332]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d010      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	4b4d      	ldr	r3, [pc, #308]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d908      	bls.n	8003f52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f40:	4b4a      	ldr	r3, [pc, #296]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f023 020f 	bic.w	r2, r3, #15
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	4947      	ldr	r1, [pc, #284]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d055      	beq.n	800400a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f5e:	4b43      	ldr	r3, [pc, #268]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4940      	ldr	r1, [pc, #256]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d107      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f78:	4b3c      	ldr	r3, [pc, #240]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d121      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0f6      	b.n	8004176 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f90:	4b36      	ldr	r3, [pc, #216]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d115      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e0ea      	b.n	8004176 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d107      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fa8:	4b30      	ldr	r3, [pc, #192]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d109      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0de      	b.n	8004176 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fb8:	4b2c      	ldr	r3, [pc, #176]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0d6      	b.n	8004176 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fc8:	4b28      	ldr	r3, [pc, #160]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	f023 0207 	bic.w	r2, r3, #7
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	4925      	ldr	r1, [pc, #148]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fda:	f7fc fe93 	bl	8000d04 <HAL_GetTick>
 8003fde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe0:	e00a      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe2:	f7fc fe8f 	bl	8000d04 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e0be      	b.n	8004176 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	429a      	cmp	r2, r3
 8004008:	d1eb      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d010      	beq.n	8004038 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	4b14      	ldr	r3, [pc, #80]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	429a      	cmp	r2, r3
 8004024:	d208      	bcs.n	8004038 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004026:	4b11      	ldr	r3, [pc, #68]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f023 020f 	bic.w	r2, r3, #15
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	490e      	ldr	r1, [pc, #56]	@ (800406c <HAL_RCC_ClockConfig+0x244>)
 8004034:	4313      	orrs	r3, r2
 8004036:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004038:	4b0b      	ldr	r3, [pc, #44]	@ (8004068 <HAL_RCC_ClockConfig+0x240>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d214      	bcs.n	8004070 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004046:	4b08      	ldr	r3, [pc, #32]	@ (8004068 <HAL_RCC_ClockConfig+0x240>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f023 020f 	bic.w	r2, r3, #15
 800404e:	4906      	ldr	r1, [pc, #24]	@ (8004068 <HAL_RCC_ClockConfig+0x240>)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	4313      	orrs	r3, r2
 8004054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004056:	4b04      	ldr	r3, [pc, #16]	@ (8004068 <HAL_RCC_ClockConfig+0x240>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d005      	beq.n	8004070 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e086      	b.n	8004176 <HAL_RCC_ClockConfig+0x34e>
 8004068:	52002000 	.word	0x52002000
 800406c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d010      	beq.n	800409e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	4b3f      	ldr	r3, [pc, #252]	@ (8004180 <HAL_RCC_ClockConfig+0x358>)
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004088:	429a      	cmp	r2, r3
 800408a:	d208      	bcs.n	800409e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800408c:	4b3c      	ldr	r3, [pc, #240]	@ (8004180 <HAL_RCC_ClockConfig+0x358>)
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	4939      	ldr	r1, [pc, #228]	@ (8004180 <HAL_RCC_ClockConfig+0x358>)
 800409a:	4313      	orrs	r3, r2
 800409c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d010      	beq.n	80040cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695a      	ldr	r2, [r3, #20]
 80040ae:	4b34      	ldr	r3, [pc, #208]	@ (8004180 <HAL_RCC_ClockConfig+0x358>)
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d208      	bcs.n	80040cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040ba:	4b31      	ldr	r3, [pc, #196]	@ (8004180 <HAL_RCC_ClockConfig+0x358>)
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	492e      	ldr	r1, [pc, #184]	@ (8004180 <HAL_RCC_ClockConfig+0x358>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d010      	beq.n	80040fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699a      	ldr	r2, [r3, #24]
 80040dc:	4b28      	ldr	r3, [pc, #160]	@ (8004180 <HAL_RCC_ClockConfig+0x358>)
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d208      	bcs.n	80040fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040e8:	4b25      	ldr	r3, [pc, #148]	@ (8004180 <HAL_RCC_ClockConfig+0x358>)
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	4922      	ldr	r1, [pc, #136]	@ (8004180 <HAL_RCC_ClockConfig+0x358>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d010      	beq.n	8004128 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69da      	ldr	r2, [r3, #28]
 800410a:	4b1d      	ldr	r3, [pc, #116]	@ (8004180 <HAL_RCC_ClockConfig+0x358>)
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004112:	429a      	cmp	r2, r3
 8004114:	d208      	bcs.n	8004128 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004116:	4b1a      	ldr	r3, [pc, #104]	@ (8004180 <HAL_RCC_ClockConfig+0x358>)
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	4917      	ldr	r1, [pc, #92]	@ (8004180 <HAL_RCC_ClockConfig+0x358>)
 8004124:	4313      	orrs	r3, r2
 8004126:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004128:	f000 f834 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b14      	ldr	r3, [pc, #80]	@ (8004180 <HAL_RCC_ClockConfig+0x358>)
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	0a1b      	lsrs	r3, r3, #8
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	4912      	ldr	r1, [pc, #72]	@ (8004184 <HAL_RCC_ClockConfig+0x35c>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
 8004144:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004146:	4b0e      	ldr	r3, [pc, #56]	@ (8004180 <HAL_RCC_ClockConfig+0x358>)
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	4a0d      	ldr	r2, [pc, #52]	@ (8004184 <HAL_RCC_ClockConfig+0x35c>)
 8004150:	5cd3      	ldrb	r3, [r2, r3]
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
 800415c:	4a0a      	ldr	r2, [pc, #40]	@ (8004188 <HAL_RCC_ClockConfig+0x360>)
 800415e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004160:	4a0a      	ldr	r2, [pc, #40]	@ (800418c <HAL_RCC_ClockConfig+0x364>)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004166:	4b0a      	ldr	r3, [pc, #40]	@ (8004190 <HAL_RCC_ClockConfig+0x368>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7fc fd80 	bl	8000c70 <HAL_InitTick>
 8004170:	4603      	mov	r3, r0
 8004172:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004174:	7bfb      	ldrb	r3, [r7, #15]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	58024400 	.word	0x58024400
 8004184:	08005928 	.word	0x08005928
 8004188:	24000004 	.word	0x24000004
 800418c:	24000000 	.word	0x24000000
 8004190:	240001c8 	.word	0x240001c8

08004194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004194:	b480      	push	{r7}
 8004196:	b089      	sub	sp, #36	@ 0x24
 8004198:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800419a:	4bb3      	ldr	r3, [pc, #716]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041a2:	2b18      	cmp	r3, #24
 80041a4:	f200 8155 	bhi.w	8004452 <HAL_RCC_GetSysClockFreq+0x2be>
 80041a8:	a201      	add	r2, pc, #4	@ (adr r2, 80041b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	08004215 	.word	0x08004215
 80041b4:	08004453 	.word	0x08004453
 80041b8:	08004453 	.word	0x08004453
 80041bc:	08004453 	.word	0x08004453
 80041c0:	08004453 	.word	0x08004453
 80041c4:	08004453 	.word	0x08004453
 80041c8:	08004453 	.word	0x08004453
 80041cc:	08004453 	.word	0x08004453
 80041d0:	0800423b 	.word	0x0800423b
 80041d4:	08004453 	.word	0x08004453
 80041d8:	08004453 	.word	0x08004453
 80041dc:	08004453 	.word	0x08004453
 80041e0:	08004453 	.word	0x08004453
 80041e4:	08004453 	.word	0x08004453
 80041e8:	08004453 	.word	0x08004453
 80041ec:	08004453 	.word	0x08004453
 80041f0:	08004241 	.word	0x08004241
 80041f4:	08004453 	.word	0x08004453
 80041f8:	08004453 	.word	0x08004453
 80041fc:	08004453 	.word	0x08004453
 8004200:	08004453 	.word	0x08004453
 8004204:	08004453 	.word	0x08004453
 8004208:	08004453 	.word	0x08004453
 800420c:	08004453 	.word	0x08004453
 8004210:	08004247 	.word	0x08004247
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004214:	4b94      	ldr	r3, [pc, #592]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	2b00      	cmp	r3, #0
 800421e:	d009      	beq.n	8004234 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004220:	4b91      	ldr	r3, [pc, #580]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	08db      	lsrs	r3, r3, #3
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	4a90      	ldr	r2, [pc, #576]	@ (800446c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800422c:	fa22 f303 	lsr.w	r3, r2, r3
 8004230:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004232:	e111      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004234:	4b8d      	ldr	r3, [pc, #564]	@ (800446c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004236:	61bb      	str	r3, [r7, #24]
      break;
 8004238:	e10e      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800423a:	4b8d      	ldr	r3, [pc, #564]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800423c:	61bb      	str	r3, [r7, #24]
      break;
 800423e:	e10b      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004240:	4b8c      	ldr	r3, [pc, #560]	@ (8004474 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004242:	61bb      	str	r3, [r7, #24]
      break;
 8004244:	e108      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004246:	4b88      	ldr	r3, [pc, #544]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004250:	4b85      	ldr	r3, [pc, #532]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800425a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800425c:	4b82      	ldr	r3, [pc, #520]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800425e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004266:	4b80      	ldr	r3, [pc, #512]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426a:	08db      	lsrs	r3, r3, #3
 800426c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	ee07 3a90 	vmov	s15, r3
 800427a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800427e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80e1 	beq.w	800444c <HAL_RCC_GetSysClockFreq+0x2b8>
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b02      	cmp	r3, #2
 800428e:	f000 8083 	beq.w	8004398 <HAL_RCC_GetSysClockFreq+0x204>
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2b02      	cmp	r3, #2
 8004296:	f200 80a1 	bhi.w	80043dc <HAL_RCC_GetSysClockFreq+0x248>
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0x114>
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d056      	beq.n	8004354 <HAL_RCC_GetSysClockFreq+0x1c0>
 80042a6:	e099      	b.n	80043dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d02d      	beq.n	8004310 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042b4:	4b6c      	ldr	r3, [pc, #432]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	08db      	lsrs	r3, r3, #3
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	4a6b      	ldr	r2, [pc, #428]	@ (800446c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
 80042c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	ee07 3a90 	vmov	s15, r3
 80042cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042de:	4b62      	ldr	r3, [pc, #392]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80042f2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004478 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800430a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800430e:	e087      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800447c <HAL_RCC_GetSysClockFreq+0x2e8>
 800431e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004322:	4b51      	ldr	r3, [pc, #324]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004332:	ed97 6a02 	vldr	s12, [r7, #8]
 8004336:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004478 <HAL_RCC_GetSysClockFreq+0x2e4>
 800433a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800433e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800434a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800434e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004352:	e065      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	ee07 3a90 	vmov	s15, r3
 800435a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004480 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004366:	4b40      	ldr	r3, [pc, #256]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004376:	ed97 6a02 	vldr	s12, [r7, #8]
 800437a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004478 <HAL_RCC_GetSysClockFreq+0x2e4>
 800437e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800438a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800438e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004392:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004396:	e043      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004484 <HAL_RCC_GetSysClockFreq+0x2f0>
 80043a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b2:	ee07 3a90 	vmov	s15, r3
 80043b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80043be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004478 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043da:	e021      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004480 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004402:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004478 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800440a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800441e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004420:	4b11      	ldr	r3, [pc, #68]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004424:	0a5b      	lsrs	r3, r3, #9
 8004426:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800442a:	3301      	adds	r3, #1
 800442c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	ee07 3a90 	vmov	s15, r3
 8004434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004438:	edd7 6a07 	vldr	s13, [r7, #28]
 800443c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004444:	ee17 3a90 	vmov	r3, s15
 8004448:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800444a:	e005      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	61bb      	str	r3, [r7, #24]
      break;
 8004450:	e002      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004452:	4b07      	ldr	r3, [pc, #28]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004454:	61bb      	str	r3, [r7, #24]
      break;
 8004456:	bf00      	nop
  }

  return sysclockfreq;
 8004458:	69bb      	ldr	r3, [r7, #24]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3724      	adds	r7, #36	@ 0x24
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	58024400 	.word	0x58024400
 800446c:	03d09000 	.word	0x03d09000
 8004470:	003d0900 	.word	0x003d0900
 8004474:	017d7840 	.word	0x017d7840
 8004478:	46000000 	.word	0x46000000
 800447c:	4c742400 	.word	0x4c742400
 8004480:	4a742400 	.word	0x4a742400
 8004484:	4bbebc20 	.word	0x4bbebc20

08004488 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e049      	b.n	800452e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fc fa3a 	bl	8000928 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3304      	adds	r3, #4
 80044c4:	4619      	mov	r1, r3
 80044c6:	4610      	mov	r0, r2
 80044c8:	f000 fc60 	bl	8004d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d109      	bne.n	8004564 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	bf0c      	ite	eq
 800455c:	2301      	moveq	r3, #1
 800455e:	2300      	movne	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	e03c      	b.n	80045de <HAL_TIM_PWM_Start_DMA+0xa6>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b04      	cmp	r3, #4
 8004568:	d109      	bne.n	800457e <HAL_TIM_PWM_Start_DMA+0x46>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	bf0c      	ite	eq
 8004576:	2301      	moveq	r3, #1
 8004578:	2300      	movne	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	e02f      	b.n	80045de <HAL_TIM_PWM_Start_DMA+0xa6>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b08      	cmp	r3, #8
 8004582:	d109      	bne.n	8004598 <HAL_TIM_PWM_Start_DMA+0x60>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	bf0c      	ite	eq
 8004590:	2301      	moveq	r3, #1
 8004592:	2300      	movne	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	e022      	b.n	80045de <HAL_TIM_PWM_Start_DMA+0xa6>
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b0c      	cmp	r3, #12
 800459c:	d109      	bne.n	80045b2 <HAL_TIM_PWM_Start_DMA+0x7a>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	bf0c      	ite	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	2300      	movne	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	e015      	b.n	80045de <HAL_TIM_PWM_Start_DMA+0xa6>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b10      	cmp	r3, #16
 80045b6:	d109      	bne.n	80045cc <HAL_TIM_PWM_Start_DMA+0x94>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	bf0c      	ite	eq
 80045c4:	2301      	moveq	r3, #1
 80045c6:	2300      	movne	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	e008      	b.n	80045de <HAL_TIM_PWM_Start_DMA+0xa6>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	bf0c      	ite	eq
 80045d8:	2301      	moveq	r3, #1
 80045da:	2300      	movne	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
 80045e4:	e1b0      	b.n	8004948 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <HAL_TIM_PWM_Start_DMA+0xc8>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	bf0c      	ite	eq
 80045f8:	2301      	moveq	r3, #1
 80045fa:	2300      	movne	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	e03c      	b.n	800467a <HAL_TIM_PWM_Start_DMA+0x142>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b04      	cmp	r3, #4
 8004604:	d109      	bne.n	800461a <HAL_TIM_PWM_Start_DMA+0xe2>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b01      	cmp	r3, #1
 8004610:	bf0c      	ite	eq
 8004612:	2301      	moveq	r3, #1
 8004614:	2300      	movne	r3, #0
 8004616:	b2db      	uxtb	r3, r3
 8004618:	e02f      	b.n	800467a <HAL_TIM_PWM_Start_DMA+0x142>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b08      	cmp	r3, #8
 800461e:	d109      	bne.n	8004634 <HAL_TIM_PWM_Start_DMA+0xfc>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b01      	cmp	r3, #1
 800462a:	bf0c      	ite	eq
 800462c:	2301      	moveq	r3, #1
 800462e:	2300      	movne	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	e022      	b.n	800467a <HAL_TIM_PWM_Start_DMA+0x142>
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b0c      	cmp	r3, #12
 8004638:	d109      	bne.n	800464e <HAL_TIM_PWM_Start_DMA+0x116>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b01      	cmp	r3, #1
 8004644:	bf0c      	ite	eq
 8004646:	2301      	moveq	r3, #1
 8004648:	2300      	movne	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	e015      	b.n	800467a <HAL_TIM_PWM_Start_DMA+0x142>
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b10      	cmp	r3, #16
 8004652:	d109      	bne.n	8004668 <HAL_TIM_PWM_Start_DMA+0x130>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e008      	b.n	800467a <HAL_TIM_PWM_Start_DMA+0x142>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d034      	beq.n	80046e8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <HAL_TIM_PWM_Start_DMA+0x152>
 8004684:	887b      	ldrh	r3, [r7, #2]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e15c      	b.n	8004948 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d104      	bne.n	800469e <HAL_TIM_PWM_Start_DMA+0x166>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800469c:	e026      	b.n	80046ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_PWM_Start_DMA+0x176>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046ac:	e01e      	b.n	80046ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d104      	bne.n	80046be <HAL_TIM_PWM_Start_DMA+0x186>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046bc:	e016      	b.n	80046ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b0c      	cmp	r3, #12
 80046c2:	d104      	bne.n	80046ce <HAL_TIM_PWM_Start_DMA+0x196>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046cc:	e00e      	b.n	80046ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b10      	cmp	r3, #16
 80046d2:	d104      	bne.n	80046de <HAL_TIM_PWM_Start_DMA+0x1a6>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046dc:	e006      	b.n	80046ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046e6:	e001      	b.n	80046ec <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e12d      	b.n	8004948 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b0c      	cmp	r3, #12
 80046f0:	f200 80ae 	bhi.w	8004850 <HAL_TIM_PWM_Start_DMA+0x318>
 80046f4:	a201      	add	r2, pc, #4	@ (adr r2, 80046fc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	08004731 	.word	0x08004731
 8004700:	08004851 	.word	0x08004851
 8004704:	08004851 	.word	0x08004851
 8004708:	08004851 	.word	0x08004851
 800470c:	08004779 	.word	0x08004779
 8004710:	08004851 	.word	0x08004851
 8004714:	08004851 	.word	0x08004851
 8004718:	08004851 	.word	0x08004851
 800471c:	080047c1 	.word	0x080047c1
 8004720:	08004851 	.word	0x08004851
 8004724:	08004851 	.word	0x08004851
 8004728:	08004851 	.word	0x08004851
 800472c:	08004809 	.word	0x08004809
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	4a86      	ldr	r2, [pc, #536]	@ (8004950 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004736:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	4a85      	ldr	r2, [pc, #532]	@ (8004954 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800473e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	4a84      	ldr	r2, [pc, #528]	@ (8004958 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004746:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3334      	adds	r3, #52	@ 0x34
 8004754:	461a      	mov	r2, r3
 8004756:	887b      	ldrh	r3, [r7, #2]
 8004758:	f7fc ff58 	bl	800160c <HAL_DMA_Start_IT>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e0f0      	b.n	8004948 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004774:	60da      	str	r2, [r3, #12]
      break;
 8004776:	e06e      	b.n	8004856 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477c:	4a74      	ldr	r2, [pc, #464]	@ (8004950 <HAL_TIM_PWM_Start_DMA+0x418>)
 800477e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004784:	4a73      	ldr	r2, [pc, #460]	@ (8004954 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004786:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478c:	4a72      	ldr	r2, [pc, #456]	@ (8004958 <HAL_TIM_PWM_Start_DMA+0x420>)
 800478e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3338      	adds	r3, #56	@ 0x38
 800479c:	461a      	mov	r2, r3
 800479e:	887b      	ldrh	r3, [r7, #2]
 80047a0:	f7fc ff34 	bl	800160c <HAL_DMA_Start_IT>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e0cc      	b.n	8004948 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047bc:	60da      	str	r2, [r3, #12]
      break;
 80047be:	e04a      	b.n	8004856 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c4:	4a62      	ldr	r2, [pc, #392]	@ (8004950 <HAL_TIM_PWM_Start_DMA+0x418>)
 80047c6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047cc:	4a61      	ldr	r2, [pc, #388]	@ (8004954 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80047ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d4:	4a60      	ldr	r2, [pc, #384]	@ (8004958 <HAL_TIM_PWM_Start_DMA+0x420>)
 80047d6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	333c      	adds	r3, #60	@ 0x3c
 80047e4:	461a      	mov	r2, r3
 80047e6:	887b      	ldrh	r3, [r7, #2]
 80047e8:	f7fc ff10 	bl	800160c <HAL_DMA_Start_IT>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e0a8      	b.n	8004948 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004804:	60da      	str	r2, [r3, #12]
      break;
 8004806:	e026      	b.n	8004856 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480c:	4a50      	ldr	r2, [pc, #320]	@ (8004950 <HAL_TIM_PWM_Start_DMA+0x418>)
 800480e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004814:	4a4f      	ldr	r2, [pc, #316]	@ (8004954 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004816:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481c:	4a4e      	ldr	r2, [pc, #312]	@ (8004958 <HAL_TIM_PWM_Start_DMA+0x420>)
 800481e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3340      	adds	r3, #64	@ 0x40
 800482c:	461a      	mov	r2, r3
 800482e:	887b      	ldrh	r3, [r7, #2]
 8004830:	f7fc feec 	bl	800160c <HAL_DMA_Start_IT>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e084      	b.n	8004948 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800484c:	60da      	str	r2, [r3, #12]
      break;
 800484e:	e002      	b.n	8004856 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	75fb      	strb	r3, [r7, #23]
      break;
 8004854:	bf00      	nop
  }

  if (status == HAL_OK)
 8004856:	7dfb      	ldrb	r3, [r7, #23]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d174      	bne.n	8004946 <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2201      	movs	r2, #1
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fe0d 	bl	8005484 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a3b      	ldr	r2, [pc, #236]	@ (800495c <HAL_TIM_PWM_Start_DMA+0x424>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <HAL_TIM_PWM_Start_DMA+0x364>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a39      	ldr	r2, [pc, #228]	@ (8004960 <HAL_TIM_PWM_Start_DMA+0x428>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00e      	beq.n	800489c <HAL_TIM_PWM_Start_DMA+0x364>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a38      	ldr	r2, [pc, #224]	@ (8004964 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d009      	beq.n	800489c <HAL_TIM_PWM_Start_DMA+0x364>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a36      	ldr	r2, [pc, #216]	@ (8004968 <HAL_TIM_PWM_Start_DMA+0x430>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d004      	beq.n	800489c <HAL_TIM_PWM_Start_DMA+0x364>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a35      	ldr	r2, [pc, #212]	@ (800496c <HAL_TIM_PWM_Start_DMA+0x434>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d101      	bne.n	80048a0 <HAL_TIM_PWM_Start_DMA+0x368>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <HAL_TIM_PWM_Start_DMA+0x36a>
 80048a0:	2300      	movs	r3, #0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d007      	beq.n	80048b6 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a28      	ldr	r2, [pc, #160]	@ (800495c <HAL_TIM_PWM_Start_DMA+0x424>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d022      	beq.n	8004906 <HAL_TIM_PWM_Start_DMA+0x3ce>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048c8:	d01d      	beq.n	8004906 <HAL_TIM_PWM_Start_DMA+0x3ce>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a28      	ldr	r2, [pc, #160]	@ (8004970 <HAL_TIM_PWM_Start_DMA+0x438>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d018      	beq.n	8004906 <HAL_TIM_PWM_Start_DMA+0x3ce>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a26      	ldr	r2, [pc, #152]	@ (8004974 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d013      	beq.n	8004906 <HAL_TIM_PWM_Start_DMA+0x3ce>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a25      	ldr	r2, [pc, #148]	@ (8004978 <HAL_TIM_PWM_Start_DMA+0x440>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00e      	beq.n	8004906 <HAL_TIM_PWM_Start_DMA+0x3ce>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004960 <HAL_TIM_PWM_Start_DMA+0x428>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d009      	beq.n	8004906 <HAL_TIM_PWM_Start_DMA+0x3ce>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a21      	ldr	r2, [pc, #132]	@ (800497c <HAL_TIM_PWM_Start_DMA+0x444>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d004      	beq.n	8004906 <HAL_TIM_PWM_Start_DMA+0x3ce>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a18      	ldr	r2, [pc, #96]	@ (8004964 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d115      	bne.n	8004932 <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	4b1c      	ldr	r3, [pc, #112]	@ (8004980 <HAL_TIM_PWM_Start_DMA+0x448>)
 800490e:	4013      	ands	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b06      	cmp	r3, #6
 8004916:	d015      	beq.n	8004944 <HAL_TIM_PWM_Start_DMA+0x40c>
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800491e:	d011      	beq.n	8004944 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004930:	e008      	b.n	8004944 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0201 	orr.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	e000      	b.n	8004946 <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004944:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004946:	7dfb      	ldrb	r3, [r7, #23]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	08004c7b 	.word	0x08004c7b
 8004954:	08004d23 	.word	0x08004d23
 8004958:	08004be9 	.word	0x08004be9
 800495c:	40010000 	.word	0x40010000
 8004960:	40010400 	.word	0x40010400
 8004964:	40014000 	.word	0x40014000
 8004968:	40014400 	.word	0x40014400
 800496c:	40014800 	.word	0x40014800
 8004970:	40000400 	.word	0x40000400
 8004974:	40000800 	.word	0x40000800
 8004978:	40000c00 	.word	0x40000c00
 800497c:	40001800 	.word	0x40001800
 8004980:	00010007 	.word	0x00010007

08004984 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800499e:	2302      	movs	r3, #2
 80049a0:	e0ff      	b.n	8004ba2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b14      	cmp	r3, #20
 80049ae:	f200 80f0 	bhi.w	8004b92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049b2:	a201      	add	r2, pc, #4	@ (adr r2, 80049b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	08004a0d 	.word	0x08004a0d
 80049bc:	08004b93 	.word	0x08004b93
 80049c0:	08004b93 	.word	0x08004b93
 80049c4:	08004b93 	.word	0x08004b93
 80049c8:	08004a4d 	.word	0x08004a4d
 80049cc:	08004b93 	.word	0x08004b93
 80049d0:	08004b93 	.word	0x08004b93
 80049d4:	08004b93 	.word	0x08004b93
 80049d8:	08004a8f 	.word	0x08004a8f
 80049dc:	08004b93 	.word	0x08004b93
 80049e0:	08004b93 	.word	0x08004b93
 80049e4:	08004b93 	.word	0x08004b93
 80049e8:	08004acf 	.word	0x08004acf
 80049ec:	08004b93 	.word	0x08004b93
 80049f0:	08004b93 	.word	0x08004b93
 80049f4:	08004b93 	.word	0x08004b93
 80049f8:	08004b11 	.word	0x08004b11
 80049fc:	08004b93 	.word	0x08004b93
 8004a00:	08004b93 	.word	0x08004b93
 8004a04:	08004b93 	.word	0x08004b93
 8004a08:	08004b51 	.word	0x08004b51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fa60 	bl	8004ed8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0208 	orr.w	r2, r2, #8
 8004a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699a      	ldr	r2, [r3, #24]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0204 	bic.w	r2, r2, #4
 8004a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6999      	ldr	r1, [r3, #24]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	619a      	str	r2, [r3, #24]
      break;
 8004a4a:	e0a5      	b.n	8004b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fad0 	bl	8004ff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6999      	ldr	r1, [r3, #24]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	021a      	lsls	r2, r3, #8
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	619a      	str	r2, [r3, #24]
      break;
 8004a8c:	e084      	b.n	8004b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fb39 	bl	800510c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0208 	orr.w	r2, r2, #8
 8004aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69da      	ldr	r2, [r3, #28]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0204 	bic.w	r2, r2, #4
 8004ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69d9      	ldr	r1, [r3, #28]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	61da      	str	r2, [r3, #28]
      break;
 8004acc:	e064      	b.n	8004b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fba1 	bl	800521c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69d9      	ldr	r1, [r3, #28]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	021a      	lsls	r2, r3, #8
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	61da      	str	r2, [r3, #28]
      break;
 8004b0e:	e043      	b.n	8004b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68b9      	ldr	r1, [r7, #8]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fbea 	bl	80052f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0208 	orr.w	r2, r2, #8
 8004b2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0204 	bic.w	r2, r2, #4
 8004b3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	691a      	ldr	r2, [r3, #16]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b4e:	e023      	b.n	8004b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fc2e 	bl	80053b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b7a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	021a      	lsls	r2, r3, #8
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b90:	e002      	b.n	8004b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	75fb      	strb	r3, [r7, #23]
      break;
 8004b96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop

08004bac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d107      	bne.n	8004c10 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2201      	movs	r2, #1
 8004c04:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c0e:	e02a      	b.n	8004c66 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d107      	bne.n	8004c2a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c28:	e01d      	b.n	8004c66 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d107      	bne.n	8004c44 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2204      	movs	r2, #4
 8004c38:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c42:	e010      	b.n	8004c66 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d107      	bne.n	8004c5e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2208      	movs	r2, #8
 8004c52:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c5c:	e003      	b.n	8004c66 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f7ff ffb4 	bl	8004bd4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	771a      	strb	r2, [r3, #28]
}
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c86:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d10b      	bne.n	8004caa <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2201      	movs	r2, #1
 8004c96:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d136      	bne.n	8004d0e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ca8:	e031      	b.n	8004d0e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d10b      	bne.n	8004ccc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d125      	bne.n	8004d0e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cca:	e020      	b.n	8004d0e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d10b      	bne.n	8004cee <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2204      	movs	r2, #4
 8004cda:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d114      	bne.n	8004d0e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cec:	e00f      	b.n	8004d0e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d10a      	bne.n	8004d0e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2208      	movs	r2, #8
 8004cfc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff ff4c 	bl	8004bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	771a      	strb	r2, [r3, #28]
}
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d103      	bne.n	8004d42 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	771a      	strb	r2, [r3, #28]
 8004d40:	e019      	b.n	8004d76 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d103      	bne.n	8004d54 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	771a      	strb	r2, [r3, #28]
 8004d52:	e010      	b.n	8004d76 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d103      	bne.n	8004d66 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2204      	movs	r2, #4
 8004d62:	771a      	strb	r2, [r3, #28]
 8004d64:	e007      	b.n	8004d76 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d102      	bne.n	8004d76 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2208      	movs	r2, #8
 8004d74:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f7ff ff22 	bl	8004bc0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	771a      	strb	r2, [r3, #28]
}
 8004d82:	bf00      	nop
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a46      	ldr	r2, [pc, #280]	@ (8004eb8 <TIM_Base_SetConfig+0x12c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d013      	beq.n	8004dcc <TIM_Base_SetConfig+0x40>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004daa:	d00f      	beq.n	8004dcc <TIM_Base_SetConfig+0x40>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a43      	ldr	r2, [pc, #268]	@ (8004ebc <TIM_Base_SetConfig+0x130>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <TIM_Base_SetConfig+0x40>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a42      	ldr	r2, [pc, #264]	@ (8004ec0 <TIM_Base_SetConfig+0x134>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <TIM_Base_SetConfig+0x40>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a41      	ldr	r2, [pc, #260]	@ (8004ec4 <TIM_Base_SetConfig+0x138>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_Base_SetConfig+0x40>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a40      	ldr	r2, [pc, #256]	@ (8004ec8 <TIM_Base_SetConfig+0x13c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d108      	bne.n	8004dde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a35      	ldr	r2, [pc, #212]	@ (8004eb8 <TIM_Base_SetConfig+0x12c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d01f      	beq.n	8004e26 <TIM_Base_SetConfig+0x9a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dec:	d01b      	beq.n	8004e26 <TIM_Base_SetConfig+0x9a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a32      	ldr	r2, [pc, #200]	@ (8004ebc <TIM_Base_SetConfig+0x130>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d017      	beq.n	8004e26 <TIM_Base_SetConfig+0x9a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a31      	ldr	r2, [pc, #196]	@ (8004ec0 <TIM_Base_SetConfig+0x134>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <TIM_Base_SetConfig+0x9a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a30      	ldr	r2, [pc, #192]	@ (8004ec4 <TIM_Base_SetConfig+0x138>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00f      	beq.n	8004e26 <TIM_Base_SetConfig+0x9a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a2f      	ldr	r2, [pc, #188]	@ (8004ec8 <TIM_Base_SetConfig+0x13c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00b      	beq.n	8004e26 <TIM_Base_SetConfig+0x9a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a2e      	ldr	r2, [pc, #184]	@ (8004ecc <TIM_Base_SetConfig+0x140>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d007      	beq.n	8004e26 <TIM_Base_SetConfig+0x9a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2d      	ldr	r2, [pc, #180]	@ (8004ed0 <TIM_Base_SetConfig+0x144>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d003      	beq.n	8004e26 <TIM_Base_SetConfig+0x9a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2c      	ldr	r2, [pc, #176]	@ (8004ed4 <TIM_Base_SetConfig+0x148>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d108      	bne.n	8004e38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a16      	ldr	r2, [pc, #88]	@ (8004eb8 <TIM_Base_SetConfig+0x12c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00f      	beq.n	8004e84 <TIM_Base_SetConfig+0xf8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a18      	ldr	r2, [pc, #96]	@ (8004ec8 <TIM_Base_SetConfig+0x13c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00b      	beq.n	8004e84 <TIM_Base_SetConfig+0xf8>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a17      	ldr	r2, [pc, #92]	@ (8004ecc <TIM_Base_SetConfig+0x140>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d007      	beq.n	8004e84 <TIM_Base_SetConfig+0xf8>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a16      	ldr	r2, [pc, #88]	@ (8004ed0 <TIM_Base_SetConfig+0x144>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d003      	beq.n	8004e84 <TIM_Base_SetConfig+0xf8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a15      	ldr	r2, [pc, #84]	@ (8004ed4 <TIM_Base_SetConfig+0x148>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d103      	bne.n	8004e8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d105      	bne.n	8004eaa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f023 0201 	bic.w	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	611a      	str	r2, [r3, #16]
  }
}
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40000400 	.word	0x40000400
 8004ec0:	40000800 	.word	0x40000800
 8004ec4:	40000c00 	.word	0x40000c00
 8004ec8:	40010400 	.word	0x40010400
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800

08004ed8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	f023 0201 	bic.w	r2, r3, #1
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4b37      	ldr	r3, [pc, #220]	@ (8004fe0 <TIM_OC1_SetConfig+0x108>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0303 	bic.w	r3, r3, #3
 8004f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f023 0302 	bic.w	r3, r3, #2
 8004f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a2d      	ldr	r2, [pc, #180]	@ (8004fe4 <TIM_OC1_SetConfig+0x10c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00f      	beq.n	8004f54 <TIM_OC1_SetConfig+0x7c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a2c      	ldr	r2, [pc, #176]	@ (8004fe8 <TIM_OC1_SetConfig+0x110>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00b      	beq.n	8004f54 <TIM_OC1_SetConfig+0x7c>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a2b      	ldr	r2, [pc, #172]	@ (8004fec <TIM_OC1_SetConfig+0x114>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d007      	beq.n	8004f54 <TIM_OC1_SetConfig+0x7c>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a2a      	ldr	r2, [pc, #168]	@ (8004ff0 <TIM_OC1_SetConfig+0x118>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_OC1_SetConfig+0x7c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a29      	ldr	r2, [pc, #164]	@ (8004ff4 <TIM_OC1_SetConfig+0x11c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d10c      	bne.n	8004f6e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f023 0308 	bic.w	r3, r3, #8
 8004f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f023 0304 	bic.w	r3, r3, #4
 8004f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe4 <TIM_OC1_SetConfig+0x10c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00f      	beq.n	8004f96 <TIM_OC1_SetConfig+0xbe>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe8 <TIM_OC1_SetConfig+0x110>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00b      	beq.n	8004f96 <TIM_OC1_SetConfig+0xbe>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a1a      	ldr	r2, [pc, #104]	@ (8004fec <TIM_OC1_SetConfig+0x114>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d007      	beq.n	8004f96 <TIM_OC1_SetConfig+0xbe>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a19      	ldr	r2, [pc, #100]	@ (8004ff0 <TIM_OC1_SetConfig+0x118>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d003      	beq.n	8004f96 <TIM_OC1_SetConfig+0xbe>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a18      	ldr	r2, [pc, #96]	@ (8004ff4 <TIM_OC1_SetConfig+0x11c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d111      	bne.n	8004fba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	621a      	str	r2, [r3, #32]
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	fffeff8f 	.word	0xfffeff8f
 8004fe4:	40010000 	.word	0x40010000
 8004fe8:	40010400 	.word	0x40010400
 8004fec:	40014000 	.word	0x40014000
 8004ff0:	40014400 	.word	0x40014400
 8004ff4:	40014800 	.word	0x40014800

08004ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f023 0210 	bic.w	r2, r3, #16
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4b34      	ldr	r3, [pc, #208]	@ (80050f4 <TIM_OC2_SetConfig+0xfc>)
 8005024:	4013      	ands	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800502e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	021b      	lsls	r3, r3, #8
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f023 0320 	bic.w	r3, r3, #32
 8005042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a29      	ldr	r2, [pc, #164]	@ (80050f8 <TIM_OC2_SetConfig+0x100>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_OC2_SetConfig+0x68>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a28      	ldr	r2, [pc, #160]	@ (80050fc <TIM_OC2_SetConfig+0x104>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10d      	bne.n	800507c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800507a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a1e      	ldr	r2, [pc, #120]	@ (80050f8 <TIM_OC2_SetConfig+0x100>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00f      	beq.n	80050a4 <TIM_OC2_SetConfig+0xac>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a1d      	ldr	r2, [pc, #116]	@ (80050fc <TIM_OC2_SetConfig+0x104>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00b      	beq.n	80050a4 <TIM_OC2_SetConfig+0xac>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a1c      	ldr	r2, [pc, #112]	@ (8005100 <TIM_OC2_SetConfig+0x108>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d007      	beq.n	80050a4 <TIM_OC2_SetConfig+0xac>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a1b      	ldr	r2, [pc, #108]	@ (8005104 <TIM_OC2_SetConfig+0x10c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d003      	beq.n	80050a4 <TIM_OC2_SetConfig+0xac>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a1a      	ldr	r2, [pc, #104]	@ (8005108 <TIM_OC2_SetConfig+0x110>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d113      	bne.n	80050cc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	feff8fff 	.word	0xfeff8fff
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40010400 	.word	0x40010400
 8005100:	40014000 	.word	0x40014000
 8005104:	40014400 	.word	0x40014400
 8005108:	40014800 	.word	0x40014800

0800510c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4b33      	ldr	r3, [pc, #204]	@ (8005204 <TIM_OC3_SetConfig+0xf8>)
 8005138:	4013      	ands	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0303 	bic.w	r3, r3, #3
 8005142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	4313      	orrs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a28      	ldr	r2, [pc, #160]	@ (8005208 <TIM_OC3_SetConfig+0xfc>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d003      	beq.n	8005172 <TIM_OC3_SetConfig+0x66>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a27      	ldr	r2, [pc, #156]	@ (800520c <TIM_OC3_SetConfig+0x100>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d10d      	bne.n	800518e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	021b      	lsls	r3, r3, #8
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800518c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1d      	ldr	r2, [pc, #116]	@ (8005208 <TIM_OC3_SetConfig+0xfc>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00f      	beq.n	80051b6 <TIM_OC3_SetConfig+0xaa>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1c      	ldr	r2, [pc, #112]	@ (800520c <TIM_OC3_SetConfig+0x100>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00b      	beq.n	80051b6 <TIM_OC3_SetConfig+0xaa>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005210 <TIM_OC3_SetConfig+0x104>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d007      	beq.n	80051b6 <TIM_OC3_SetConfig+0xaa>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005214 <TIM_OC3_SetConfig+0x108>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_OC3_SetConfig+0xaa>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a19      	ldr	r2, [pc, #100]	@ (8005218 <TIM_OC3_SetConfig+0x10c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d113      	bne.n	80051de <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	621a      	str	r2, [r3, #32]
}
 80051f8:	bf00      	nop
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	fffeff8f 	.word	0xfffeff8f
 8005208:	40010000 	.word	0x40010000
 800520c:	40010400 	.word	0x40010400
 8005210:	40014000 	.word	0x40014000
 8005214:	40014400 	.word	0x40014400
 8005218:	40014800 	.word	0x40014800

0800521c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4b24      	ldr	r3, [pc, #144]	@ (80052d8 <TIM_OC4_SetConfig+0xbc>)
 8005248:	4013      	ands	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	031b      	lsls	r3, r3, #12
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a19      	ldr	r2, [pc, #100]	@ (80052dc <TIM_OC4_SetConfig+0xc0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00f      	beq.n	800529c <TIM_OC4_SetConfig+0x80>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a18      	ldr	r2, [pc, #96]	@ (80052e0 <TIM_OC4_SetConfig+0xc4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00b      	beq.n	800529c <TIM_OC4_SetConfig+0x80>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a17      	ldr	r2, [pc, #92]	@ (80052e4 <TIM_OC4_SetConfig+0xc8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d007      	beq.n	800529c <TIM_OC4_SetConfig+0x80>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a16      	ldr	r2, [pc, #88]	@ (80052e8 <TIM_OC4_SetConfig+0xcc>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_OC4_SetConfig+0x80>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a15      	ldr	r2, [pc, #84]	@ (80052ec <TIM_OC4_SetConfig+0xd0>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d109      	bne.n	80052b0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	019b      	lsls	r3, r3, #6
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	621a      	str	r2, [r3, #32]
}
 80052ca:	bf00      	nop
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	feff8fff 	.word	0xfeff8fff
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40010400 	.word	0x40010400
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40014400 	.word	0x40014400
 80052ec:	40014800 	.word	0x40014800

080052f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4b21      	ldr	r3, [pc, #132]	@ (80053a0 <TIM_OC5_SetConfig+0xb0>)
 800531c:	4013      	ands	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005330:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	041b      	lsls	r3, r3, #16
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a18      	ldr	r2, [pc, #96]	@ (80053a4 <TIM_OC5_SetConfig+0xb4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00f      	beq.n	8005366 <TIM_OC5_SetConfig+0x76>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a17      	ldr	r2, [pc, #92]	@ (80053a8 <TIM_OC5_SetConfig+0xb8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00b      	beq.n	8005366 <TIM_OC5_SetConfig+0x76>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a16      	ldr	r2, [pc, #88]	@ (80053ac <TIM_OC5_SetConfig+0xbc>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d007      	beq.n	8005366 <TIM_OC5_SetConfig+0x76>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a15      	ldr	r2, [pc, #84]	@ (80053b0 <TIM_OC5_SetConfig+0xc0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d003      	beq.n	8005366 <TIM_OC5_SetConfig+0x76>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a14      	ldr	r2, [pc, #80]	@ (80053b4 <TIM_OC5_SetConfig+0xc4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d109      	bne.n	800537a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800536c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	621a      	str	r2, [r3, #32]
}
 8005394:	bf00      	nop
 8005396:	371c      	adds	r7, #28
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	fffeff8f 	.word	0xfffeff8f
 80053a4:	40010000 	.word	0x40010000
 80053a8:	40010400 	.word	0x40010400
 80053ac:	40014000 	.word	0x40014000
 80053b0:	40014400 	.word	0x40014400
 80053b4:	40014800 	.word	0x40014800

080053b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4b22      	ldr	r3, [pc, #136]	@ (800546c <TIM_OC6_SetConfig+0xb4>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	051b      	lsls	r3, r3, #20
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a19      	ldr	r2, [pc, #100]	@ (8005470 <TIM_OC6_SetConfig+0xb8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d00f      	beq.n	8005430 <TIM_OC6_SetConfig+0x78>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a18      	ldr	r2, [pc, #96]	@ (8005474 <TIM_OC6_SetConfig+0xbc>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00b      	beq.n	8005430 <TIM_OC6_SetConfig+0x78>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a17      	ldr	r2, [pc, #92]	@ (8005478 <TIM_OC6_SetConfig+0xc0>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d007      	beq.n	8005430 <TIM_OC6_SetConfig+0x78>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a16      	ldr	r2, [pc, #88]	@ (800547c <TIM_OC6_SetConfig+0xc4>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d003      	beq.n	8005430 <TIM_OC6_SetConfig+0x78>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a15      	ldr	r2, [pc, #84]	@ (8005480 <TIM_OC6_SetConfig+0xc8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d109      	bne.n	8005444 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005436:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	029b      	lsls	r3, r3, #10
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	4313      	orrs	r3, r2
 8005442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	621a      	str	r2, [r3, #32]
}
 800545e:	bf00      	nop
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	feff8fff 	.word	0xfeff8fff
 8005470:	40010000 	.word	0x40010000
 8005474:	40010400 	.word	0x40010400
 8005478:	40014000 	.word	0x40014000
 800547c:	40014400 	.word	0x40014400
 8005480:	40014800 	.word	0x40014800

08005484 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f003 031f 	and.w	r3, r3, #31
 8005496:	2201      	movs	r2, #1
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a1a      	ldr	r2, [r3, #32]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	43db      	mvns	r3, r3
 80054a6:	401a      	ands	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a1a      	ldr	r2, [r3, #32]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f003 031f 	and.w	r3, r3, #31
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	fa01 f303 	lsl.w	r3, r1, r3
 80054bc:	431a      	orrs	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	621a      	str	r2, [r3, #32]
}
 80054c2:	bf00      	nop
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
	...

080054d0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d109      	bne.n	80054f4 <HAL_TIMEx_PWMN_Start+0x24>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	bf14      	ite	ne
 80054ec:	2301      	movne	r3, #1
 80054ee:	2300      	moveq	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	e022      	b.n	800553a <HAL_TIMEx_PWMN_Start+0x6a>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d109      	bne.n	800550e <HAL_TIMEx_PWMN_Start+0x3e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b01      	cmp	r3, #1
 8005504:	bf14      	ite	ne
 8005506:	2301      	movne	r3, #1
 8005508:	2300      	moveq	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	e015      	b.n	800553a <HAL_TIMEx_PWMN_Start+0x6a>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b08      	cmp	r3, #8
 8005512:	d109      	bne.n	8005528 <HAL_TIMEx_PWMN_Start+0x58>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	bf14      	ite	ne
 8005520:	2301      	movne	r3, #1
 8005522:	2300      	moveq	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	e008      	b.n	800553a <HAL_TIMEx_PWMN_Start+0x6a>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	bf14      	ite	ne
 8005534:	2301      	movne	r3, #1
 8005536:	2300      	moveq	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e073      	b.n	800562a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d104      	bne.n	8005552 <HAL_TIMEx_PWMN_Start+0x82>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005550:	e013      	b.n	800557a <HAL_TIMEx_PWMN_Start+0xaa>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b04      	cmp	r3, #4
 8005556:	d104      	bne.n	8005562 <HAL_TIMEx_PWMN_Start+0x92>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005560:	e00b      	b.n	800557a <HAL_TIMEx_PWMN_Start+0xaa>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b08      	cmp	r3, #8
 8005566:	d104      	bne.n	8005572 <HAL_TIMEx_PWMN_Start+0xa2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005570:	e003      	b.n	800557a <HAL_TIMEx_PWMN_Start+0xaa>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2202      	movs	r2, #2
 8005576:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2204      	movs	r2, #4
 8005580:	6839      	ldr	r1, [r7, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 f972 	bl	800586c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005596:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a25      	ldr	r2, [pc, #148]	@ (8005634 <HAL_TIMEx_PWMN_Start+0x164>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d022      	beq.n	80055e8 <HAL_TIMEx_PWMN_Start+0x118>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055aa:	d01d      	beq.n	80055e8 <HAL_TIMEx_PWMN_Start+0x118>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a21      	ldr	r2, [pc, #132]	@ (8005638 <HAL_TIMEx_PWMN_Start+0x168>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d018      	beq.n	80055e8 <HAL_TIMEx_PWMN_Start+0x118>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a20      	ldr	r2, [pc, #128]	@ (800563c <HAL_TIMEx_PWMN_Start+0x16c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d013      	beq.n	80055e8 <HAL_TIMEx_PWMN_Start+0x118>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005640 <HAL_TIMEx_PWMN_Start+0x170>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00e      	beq.n	80055e8 <HAL_TIMEx_PWMN_Start+0x118>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005644 <HAL_TIMEx_PWMN_Start+0x174>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d009      	beq.n	80055e8 <HAL_TIMEx_PWMN_Start+0x118>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005648 <HAL_TIMEx_PWMN_Start+0x178>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_TIMEx_PWMN_Start+0x118>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1a      	ldr	r2, [pc, #104]	@ (800564c <HAL_TIMEx_PWMN_Start+0x17c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d115      	bne.n	8005614 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689a      	ldr	r2, [r3, #8]
 80055ee:	4b18      	ldr	r3, [pc, #96]	@ (8005650 <HAL_TIMEx_PWMN_Start+0x180>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b06      	cmp	r3, #6
 80055f8:	d015      	beq.n	8005626 <HAL_TIMEx_PWMN_Start+0x156>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005600:	d011      	beq.n	8005626 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f042 0201 	orr.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005612:	e008      	b.n	8005626 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	e000      	b.n	8005628 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005626:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	40010000 	.word	0x40010000
 8005638:	40000400 	.word	0x40000400
 800563c:	40000800 	.word	0x40000800
 8005640:	40000c00 	.word	0x40000c00
 8005644:	40010400 	.word	0x40010400
 8005648:	40001800 	.word	0x40001800
 800564c:	40014000 	.word	0x40014000
 8005650:	00010007 	.word	0x00010007

08005654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005668:	2302      	movs	r3, #2
 800566a:	e06d      	b.n	8005748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a30      	ldr	r2, [pc, #192]	@ (8005754 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a2f      	ldr	r2, [pc, #188]	@ (8005758 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d108      	bne.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80056a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a20      	ldr	r2, [pc, #128]	@ (8005754 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d022      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056de:	d01d      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1d      	ldr	r2, [pc, #116]	@ (800575c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d018      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005760 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d013      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005764 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00e      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a15      	ldr	r2, [pc, #84]	@ (8005758 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d009      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a16      	ldr	r2, [pc, #88]	@ (8005768 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d004      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a15      	ldr	r2, [pc, #84]	@ (800576c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d10c      	bne.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005722:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	4313      	orrs	r3, r2
 800572c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	40010000 	.word	0x40010000
 8005758:	40010400 	.word	0x40010400
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40001800 	.word	0x40001800
 800576c:	40014000 	.word	0x40014000

08005770 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005784:	2b01      	cmp	r3, #1
 8005786:	d101      	bne.n	800578c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005788:	2302      	movs	r3, #2
 800578a:	e065      	b.n	8005858 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	041b      	lsls	r3, r3, #16
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a16      	ldr	r2, [pc, #88]	@ (8005864 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d004      	beq.n	800581a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a14      	ldr	r2, [pc, #80]	@ (8005868 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d115      	bne.n	8005846 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005824:	051b      	lsls	r3, r3, #20
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	4313      	orrs	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	40010000 	.word	0x40010000
 8005868:	40010400 	.word	0x40010400

0800586c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	2204      	movs	r2, #4
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a1a      	ldr	r2, [r3, #32]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	43db      	mvns	r3, r3
 800588e:	401a      	ands	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a1a      	ldr	r2, [r3, #32]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	fa01 f303 	lsl.w	r3, r1, r3
 80058a4:	431a      	orrs	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	621a      	str	r2, [r3, #32]
}
 80058aa:	bf00      	nop
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <memset>:
 80058b6:	4402      	add	r2, r0
 80058b8:	4603      	mov	r3, r0
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d100      	bne.n	80058c0 <memset+0xa>
 80058be:	4770      	bx	lr
 80058c0:	f803 1b01 	strb.w	r1, [r3], #1
 80058c4:	e7f9      	b.n	80058ba <memset+0x4>
	...

080058c8 <__libc_init_array>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005900 <__libc_init_array+0x38>)
 80058cc:	4c0d      	ldr	r4, [pc, #52]	@ (8005904 <__libc_init_array+0x3c>)
 80058ce:	1b64      	subs	r4, r4, r5
 80058d0:	10a4      	asrs	r4, r4, #2
 80058d2:	2600      	movs	r6, #0
 80058d4:	42a6      	cmp	r6, r4
 80058d6:	d109      	bne.n	80058ec <__libc_init_array+0x24>
 80058d8:	4d0b      	ldr	r5, [pc, #44]	@ (8005908 <__libc_init_array+0x40>)
 80058da:	4c0c      	ldr	r4, [pc, #48]	@ (800590c <__libc_init_array+0x44>)
 80058dc:	f000 f818 	bl	8005910 <_init>
 80058e0:	1b64      	subs	r4, r4, r5
 80058e2:	10a4      	asrs	r4, r4, #2
 80058e4:	2600      	movs	r6, #0
 80058e6:	42a6      	cmp	r6, r4
 80058e8:	d105      	bne.n	80058f6 <__libc_init_array+0x2e>
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
 80058ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f0:	4798      	blx	r3
 80058f2:	3601      	adds	r6, #1
 80058f4:	e7ee      	b.n	80058d4 <__libc_init_array+0xc>
 80058f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058fa:	4798      	blx	r3
 80058fc:	3601      	adds	r6, #1
 80058fe:	e7f2      	b.n	80058e6 <__libc_init_array+0x1e>
 8005900:	08005940 	.word	0x08005940
 8005904:	08005940 	.word	0x08005940
 8005908:	08005940 	.word	0x08005940
 800590c:	08005944 	.word	0x08005944

08005910 <_init>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	bf00      	nop
 8005914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005916:	bc08      	pop	{r3}
 8005918:	469e      	mov	lr, r3
 800591a:	4770      	bx	lr

0800591c <_fini>:
 800591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591e:	bf00      	nop
 8005920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005922:	bc08      	pop	{r3}
 8005924:	469e      	mov	lr, r3
 8005926:	4770      	bx	lr
